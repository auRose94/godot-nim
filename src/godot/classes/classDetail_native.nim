# ======================================== #
# This module was generated automatically. #
# Edits will be lost.                      #
# ======================================== #
import ./../gdrefs
import ./../godotInterface
import ./../helper/engineClassDefiner
import ./../helper/typedArray
import ./../nativeStructs
import ./../variants
import beyond/oop

# Object
define_godot_engine_class_essencials(Object, ObjectBase)
Object.memberProcs:
  proc getClass*(self: Object): String {.loadfrom("get_class", 201670096).}
  proc isClass*(self: Object; class: String): Bool {.loadfrom("is_class", 3927539163).}
  proc set*(self: Object; property: StringName; value: ptr Variant) {.loadfrom("set", 3776071444).}
  proc get*(self: Object; property: StringName): Variant {.loadfrom("get", 2760726917).}
  proc setIndexed*(self: Object; propertyPath: NodePath; value: ptr Variant) {.loadfrom("set_indexed", 3500910842).}
  proc getIndexed*(self: Object; propertyPath: NodePath): Variant {.loadfrom("get_indexed", 4006125091).}
  proc getPropertyList*(self: Object): TypedArray[Dictionary] {.loadfrom("get_property_list", 3995934104).}
  proc getMethodList*(self: Object): TypedArray[Dictionary] {.loadfrom("get_method_list", 3995934104).}
  proc propertyCanRevert*(self: Object; property: StringName): Bool {.loadfrom("property_can_revert", 2619796661).}
  proc propertyGetRevert*(self: Object; property: StringName): Variant {.loadfrom("property_get_revert", 2760726917).}
  proc notification*(self: Object; what: int32; reversed: Bool = false) {.loadfrom("notification", 4023243586).}
  proc toString*(self: Object): String {.loadfrom("to_string", 2841200299).}
  proc getInstanceId*(self: Object): uint64 {.loadfrom("get_instance_id", 3905245786).}
  proc setScript*(self: Object; script: ptr Variant) {.loadfrom("set_script", 1114965689).}
  proc getScript*(self: Object): Variant {.loadfrom("get_script", 1214101251).}
  proc setMeta*(self: Object; name: StringName; value: ptr Variant) {.loadfrom("set_meta", 3776071444).}
  proc removeMeta*(self: Object; name: StringName) {.loadfrom("remove_meta", 3304788590).}
  proc getMeta*(self: Object; name: StringName; default: ptr Variant = nil): Variant {.loadfrom("get_meta", 3990617847).}
  proc hasMeta*(self: Object; name: StringName): Bool {.loadfrom("has_meta", 2619796661).}
  proc getMetaList*(self: Object): TypedArray[StringName] {.loadfrom("get_meta_list", 3995934104).}
  proc addUserSignal*(self: Object; signal: String; arguments: Array = Array|>init()) {.loadfrom("add_user_signal", 3780025912).}
  proc hasUserSignal*(self: Object; signal: StringName): Bool {.loadfrom("has_user_signal", 2619796661).}
  proc emitSignal*(self: Object; signal: StringName): Error {.loadfrom("emit_signal", 4047867050).}
  proc call*(self: Object; `method`: StringName): Variant {.loadfrom("call", 3400424181).}
  proc callDeferred*(self: Object; `method`: StringName): Variant {.loadfrom("call_deferred", 3400424181).}
  proc setDeferred*(self: Object; property: StringName; value: ptr Variant) {.loadfrom("set_deferred", 3776071444).}
  proc callv*(self: Object; `method`: StringName; argArray: Array): Variant {.loadfrom("callv", 1260104456).}
  proc hasMethod*(self: Object; `method`: StringName): Bool {.loadfrom("has_method", 2619796661).}
  proc hasSignal*(self: Object; signal: StringName): Bool {.loadfrom("has_signal", 2619796661).}
  proc getSignalList*(self: Object): TypedArray[Dictionary] {.loadfrom("get_signal_list", 3995934104).}
  proc getSignalConnectionList*(self: Object; signal: StringName): TypedArray[Dictionary] {.loadfrom("get_signal_connection_list", 3147814860).}
  proc getIncomingConnections*(self: Object): TypedArray[Dictionary] {.loadfrom("get_incoming_connections", 3995934104).}
  proc connect*(self: Object; signal: StringName; callable: Callable; flags: uint32 = 0'u32): Error {.loadfrom("connect", 1469446357).}
  proc disconnect*(self: Object; signal: StringName; callable: Callable) {.loadfrom("disconnect", 1874754934).}
  proc isConnected*(self: Object; signal: StringName; callable: Callable): Bool {.loadfrom("is_connected", 768136979).}
  proc setBlockSignals*(self: Object; enable: Bool) {.loadfrom("set_block_signals", 2586408642).}
  proc isBlockingSignals*(self: Object): Bool {.loadfrom("is_blocking_signals", 36873697).}
  proc notifyPropertyListChanged*(self: Object) {.loadfrom("notify_property_list_changed", 3218959716).}
  proc setMessageTranslation*(self: Object; enable: Bool) {.loadfrom("set_message_translation", 2586408642).}
  proc canTranslateMessages*(self: Object): Bool {.loadfrom("can_translate_messages", 36873697).}
  proc tr*(self: Object; message: StringName; context: StringName = ""): String {.loadfrom("tr", 2475554935).}
  proc trN*(self: Object; message: StringName; pluralMessage: StringName; n: int32; context: StringName = ""): String {.loadfrom("tr_n", 4021311862).}
  proc isQueuedForDeletion*(self: Object): Bool {.loadfrom("is_queued_for_deletion", 36873697).}
  proc cancelFree*(self: Object) {.loadfrom("cancel_free", 3218959716).}

# AudioServer
define_godot_engine_class_essencials(AudioServer, Object)
AudioServer.memberProcs:
  proc `busCount=`*(self: AudioServer; amount: int32) {.loadfrom("set_bus_count", 1286410249).}
  proc busCount*(self: AudioServer): int32 {.loadfrom("get_bus_count", 3905245786).}
  proc removeBus*(self: AudioServer; index: int32) {.loadfrom("remove_bus", 1286410249).}
  proc addBus*(self: AudioServer; atPosition: int32 = -1) {.loadfrom("add_bus", 1025054187).}
  proc moveBus*(self: AudioServer; index: int32; toIndex: int32) {.loadfrom("move_bus", 3937882851).}
  proc setBusName*(self: AudioServer; busIdx: int32; name: String) {.loadfrom("set_bus_name", 501894301).}
  proc getBusName*(self: AudioServer; busIdx: int32): String {.loadfrom("get_bus_name", 844755477).}
  proc getBusIndex*(self: AudioServer; busName: StringName): int32 {.loadfrom("get_bus_index", 2458036349).}
  proc getBusChannels*(self: AudioServer; busIdx: int32): int32 {.loadfrom("get_bus_channels", 923996154).}
  proc setBusVolumeDb*(self: AudioServer; busIdx: int32; volumeDb: Float) {.loadfrom("set_bus_volume_db", 1602489585).}
  proc getBusVolumeDb*(self: AudioServer; busIdx: int32): Float {.loadfrom("get_bus_volume_db", 2339986948).}
  proc setBusSend*(self: AudioServer; busIdx: int32; send: StringName) {.loadfrom("set_bus_send", 3780747571).}
  proc getBusSend*(self: AudioServer; busIdx: int32): StringName {.loadfrom("get_bus_send", 659327637).}
  proc setBusSolo*(self: AudioServer; busIdx: int32; enable: Bool) {.loadfrom("set_bus_solo", 300928843).}
  proc isBusSolo*(self: AudioServer; busIdx: int32): Bool {.loadfrom("is_bus_solo", 1116898809).}
  proc setBusMute*(self: AudioServer; busIdx: int32; enable: Bool) {.loadfrom("set_bus_mute", 300928843).}
  proc isBusMute*(self: AudioServer; busIdx: int32): Bool {.loadfrom("is_bus_mute", 1116898809).}
  proc setBusBypassEffects*(self: AudioServer; busIdx: int32; enable: Bool) {.loadfrom("set_bus_bypass_effects", 300928843).}
  proc isBusBypassingEffects*(self: AudioServer; busIdx: int32): Bool {.loadfrom("is_bus_bypassing_effects", 1116898809).}
  proc addBusEffect*(self: AudioServer; busIdx: int32; effect: Ref[AudioEffect]; atPosition: int32 = -1) {.loadfrom("add_bus_effect", 4147765248).}
  proc removeBusEffect*(self: AudioServer; busIdx: int32; effectIdx: int32) {.loadfrom("remove_bus_effect", 3937882851).}
  proc getBusEffectCount*(self: AudioServer; busIdx: int32): int32 {.loadfrom("get_bus_effect_count", 3744713108).}
  proc getBusEffect*(self: AudioServer; busIdx: int32; effectIdx: int32): Ref[AudioEffect] {.loadfrom("get_bus_effect", 726064442).}
  proc getBusEffectInstance*(self: AudioServer; busIdx: int32; effectIdx: int32; channel: int32 = 0): Ref[AudioEffectInstance] {.loadfrom("get_bus_effect_instance", 2887144608).}
  proc swapBusEffects*(self: AudioServer; busIdx: int32; effectIdx: int32; byEffectIdx: int32) {.loadfrom("swap_bus_effects", 1649997291).}
  proc setBusEffectEnabled*(self: AudioServer; busIdx: int32; effectIdx: int32; enabled: Bool) {.loadfrom("set_bus_effect_enabled", 1383440665).}
  proc isBusEffectEnabled*(self: AudioServer; busIdx: int32; effectIdx: int32): Bool {.loadfrom("is_bus_effect_enabled", 2522259332).}
  proc getBusPeakVolumeLeftDb*(self: AudioServer; busIdx: int32; channel: int32): Float {.loadfrom("get_bus_peak_volume_left_db", 3085491603).}
  proc getBusPeakVolumeRightDb*(self: AudioServer; busIdx: int32; channel: int32): Float {.loadfrom("get_bus_peak_volume_right_db", 3085491603).}
  proc `playbackSpeedScale=`*(self: AudioServer; scale: Float) {.loadfrom("set_playback_speed_scale", 373806689).}
  proc playbackSpeedScale*(self: AudioServer): Float {.loadfrom("get_playback_speed_scale", 1740695150).}
  proc lock*(self: AudioServer) {.loadfrom("lock", 3218959716).}
  proc unlock*(self: AudioServer) {.loadfrom("unlock", 3218959716).}
  proc getSpeakerMode*(self: AudioServer): AudioServer|>SpeakerMode {.loadfrom("get_speaker_mode", 2549190337).}
  proc getMixRate*(self: AudioServer): Float {.loadfrom("get_mix_rate", 1740695150).}
  proc getOutputDeviceList*(self: AudioServer): PackedStringArray {.loadfrom("get_output_device_list", 2981934095).}
  proc outputDevice*(self: AudioServer): String {.loadfrom("get_output_device", 2841200299).}
  proc `outputDevice=`*(self: AudioServer; name: String) {.loadfrom("set_output_device", 83702148).}
  proc getTimeToNextMix*(self: AudioServer): float64 {.loadfrom("get_time_to_next_mix", 1740695150).}
  proc getTimeSinceLastMix*(self: AudioServer): float64 {.loadfrom("get_time_since_last_mix", 1740695150).}
  proc getOutputLatency*(self: AudioServer): float64 {.loadfrom("get_output_latency", 1740695150).}
  proc getInputDeviceList*(self: AudioServer): PackedStringArray {.loadfrom("get_input_device_list", 2981934095).}
  proc inputDevice*(self: AudioServer): String {.loadfrom("get_input_device", 2841200299).}
  proc `inputDevice=`*(self: AudioServer; name: String) {.loadfrom("set_input_device", 83702148).}
  proc setBusLayout*(self: AudioServer; busLayout: Ref[AudioBusLayout]) {.loadfrom("set_bus_layout", 3319058824).}
  proc generateBusLayout*(self: AudioServer): Ref[AudioBusLayout] {.loadfrom("generate_bus_layout", 3769973890).}
  proc setEnableTaggingUsedAudioStreams*(self: AudioServer; enable: Bool) {.loadfrom("set_enable_tagging_used_audio_streams", 2586408642).}

# CameraServer
define_godot_engine_class_essencials(CameraServer, Object)
CameraServer.memberProcs:
  proc getFeed*(self: CameraServer; index: int32): Ref[CameraFeed] {.loadfrom("get_feed", 361927068).}
  proc getFeedCount*(self: CameraServer): int32 {.loadfrom("get_feed_count", 2455072627).}
  proc feeds*(self: CameraServer): TypedArray[CameraFeed] {.loadfrom("feeds", 2915620761).}
  proc addFeed*(self: CameraServer; feed: Ref[CameraFeed]) {.loadfrom("add_feed", 3204782488).}
  proc removeFeed*(self: CameraServer; feed: Ref[CameraFeed]) {.loadfrom("remove_feed", 3204782488).}

# ClassDB
define_godot_engine_class_essencials(ClassDB, Object)
ClassDB.memberProcs:
  proc getClassList*(self: ClassDB): PackedStringArray {.loadfrom("get_class_list", 1139954409).}
  proc getInheritersFromClass*(self: ClassDB; class: StringName): PackedStringArray {.loadfrom("get_inheriters_from_class", 1761182771).}
  proc getParentClass*(self: ClassDB; class: StringName): StringName {.loadfrom("get_parent_class", 1965194235).}
  proc classExists*(self: ClassDB; class: StringName): Bool {.loadfrom("class_exists", 2619796661).}
  proc isParentClass*(self: ClassDB; class: StringName; inherits: StringName): Bool {.loadfrom("is_parent_class", 471820014).}
  proc canInstantiate*(self: ClassDB; class: StringName): Bool {.loadfrom("can_instantiate", 2619796661).}
  proc instantiate*(self: ClassDB; class: StringName): Variant {.loadfrom("instantiate", 2760726917).}
  proc classHasSignal*(self: ClassDB; class: StringName; signal: StringName): Bool {.loadfrom("class_has_signal", 471820014).}
  proc classGetSignal*(self: ClassDB; class: StringName; signal: StringName): Dictionary {.loadfrom("class_get_signal", 3061114238).}
  proc classGetSignalList*(self: ClassDB; class: StringName; noInheritance: Bool = false): TypedArray[Dictionary] {.loadfrom("class_get_signal_list", 3504980660).}
  proc classGetPropertyList*(self: ClassDB; class: StringName; noInheritance: Bool = false): TypedArray[Dictionary] {.loadfrom("class_get_property_list", 3504980660).}
  proc classGetProperty*(self: ClassDB; `object`: ptr Object; property: StringName): Variant {.loadfrom("class_get_property", 2498641674).}
  proc classSetProperty*(self: ClassDB; `object`: ptr Object; property: StringName; value: ptr Variant): Error {.loadfrom("class_set_property", 1690314931).}
  proc classHasMethod*(self: ClassDB; class: StringName; `method`: StringName; noInheritance: Bool = false): Bool {.loadfrom("class_has_method", 3860701026).}
  proc classGetMethodList*(self: ClassDB; class: StringName; noInheritance: Bool = false): TypedArray[Dictionary] {.loadfrom("class_get_method_list", 3504980660).}
  proc classGetIntegerConstantList*(self: ClassDB; class: StringName; noInheritance: Bool = false): PackedStringArray {.loadfrom("class_get_integer_constant_list", 3031669221).}
  proc classHasIntegerConstant*(self: ClassDB; class: StringName; name: StringName): Bool {.loadfrom("class_has_integer_constant", 471820014).}
  proc classGetIntegerConstant*(self: ClassDB; class: StringName; name: StringName): int64 {.loadfrom("class_get_integer_constant", 2419549490).}
  proc classHasEnum*(self: ClassDB; class: StringName; name: StringName; noInheritance: Bool = false): Bool {.loadfrom("class_has_enum", 3860701026).}
  proc classGetEnumList*(self: ClassDB; class: StringName; noInheritance: Bool = false): PackedStringArray {.loadfrom("class_get_enum_list", 3031669221).}
  proc classGetEnumConstants*(self: ClassDB; class: StringName; `enum`: StringName; noInheritance: Bool = false): PackedStringArray {.loadfrom("class_get_enum_constants", 661528303).}
  proc classGetIntegerConstantEnum*(self: ClassDB; class: StringName; name: StringName; noInheritance: Bool = false): StringName {.loadfrom("class_get_integer_constant_enum", 2457504236).}
  proc isClassEnabled*(self: ClassDB; class: StringName): Bool {.loadfrom("is_class_enabled", 2619796661).}

# DisplayServer
define_godot_engine_class_essencials(DisplayServer, Object)
DisplayServer.memberProcs:
  proc hasFeature*(self: DisplayServer; feature: DisplayServer|>Feature): Bool {.loadfrom("has_feature", 334065950).}
  proc getName*(self: DisplayServer): String {.loadfrom("get_name", 201670096).}
  proc globalMenuAddSubmenuItem*(self: DisplayServer; menuRoot: String; label: String; submenu: String; index: int32 = -1): int32 {.loadfrom("global_menu_add_submenu_item", 3806306913).}
  proc globalMenuAddItem*(self: DisplayServer; menuRoot: String; label: String; callback: Callable = Callable|>init(); keyCallback: Callable = Callable|>init(); tag: ptr Variant = nil; accelerator: Key = keyNone; index: int32 = -1): int32 {.loadfrom("global_menu_add_item", 3415468211).}
  proc globalMenuAddCheckItem*(self: DisplayServer; menuRoot: String; label: String; callback: Callable = Callable|>init(); keyCallback: Callable = Callable|>init(); tag: ptr Variant = nil; accelerator: Key = keyNone; index: int32 = -1): int32 {.loadfrom("global_menu_add_check_item", 3415468211).}
  proc globalMenuAddIconItem*(self: DisplayServer; menuRoot: String; icon: Ref[Texture2D]; label: String; callback: Callable = Callable|>init(); keyCallback: Callable = Callable|>init(); tag: ptr Variant = nil; accelerator: Key = keyNone; index: int32 = -1): int32 {.loadfrom("global_menu_add_icon_item", 1700867534).}
  proc globalMenuAddIconCheckItem*(self: DisplayServer; menuRoot: String; icon: Ref[Texture2D]; label: String; callback: Callable = Callable|>init(); keyCallback: Callable = Callable|>init(); tag: ptr Variant = nil; accelerator: Key = keyNone; index: int32 = -1): int32 {.loadfrom("global_menu_add_icon_check_item", 1700867534).}
  proc globalMenuAddRadioCheckItem*(self: DisplayServer; menuRoot: String; label: String; callback: Callable = Callable|>init(); keyCallback: Callable = Callable|>init(); tag: ptr Variant = nil; accelerator: Key = keyNone; index: int32 = -1): int32 {.loadfrom("global_menu_add_radio_check_item", 3415468211).}
  proc globalMenuAddIconRadioCheckItem*(self: DisplayServer; menuRoot: String; icon: Ref[Texture2D]; label: String; callback: Callable = Callable|>init(); keyCallback: Callable = Callable|>init(); tag: ptr Variant = nil; accelerator: Key = keyNone; index: int32 = -1): int32 {.loadfrom("global_menu_add_icon_radio_check_item", 1700867534).}
  proc globalMenuAddMultistateItem*(self: DisplayServer; menuRoot: String; label: String; maxStates: int32; defaultState: int32; callback: Callable = Callable|>init(); keyCallback: Callable = Callable|>init(); tag: ptr Variant = nil; accelerator: Key = keyNone; index: int32 = -1): int32 {.loadfrom("global_menu_add_multistate_item", 635750054).}
  proc globalMenuAddSeparator*(self: DisplayServer; menuRoot: String; index: int32 = -1): int32 {.loadfrom("global_menu_add_separator", 1041533178).}
  proc globalMenuGetItemIndexFromText*(self: DisplayServer; menuRoot: String; text: String): int32 {.loadfrom("global_menu_get_item_index_from_text", 2878152881).}
  proc globalMenuGetItemIndexFromTag*(self: DisplayServer; menuRoot: String; tag: ptr Variant): int32 {.loadfrom("global_menu_get_item_index_from_tag", 2941063483).}
  proc globalMenuIsItemChecked*(self: DisplayServer; menuRoot: String; idx: int32): Bool {.loadfrom("global_menu_is_item_checked", 3511468594).}
  proc globalMenuIsItemCheckable*(self: DisplayServer; menuRoot: String; idx: int32): Bool {.loadfrom("global_menu_is_item_checkable", 3511468594).}
  proc globalMenuIsItemRadioCheckable*(self: DisplayServer; menuRoot: String; idx: int32): Bool {.loadfrom("global_menu_is_item_radio_checkable", 3511468594).}
  proc globalMenuGetItemCallback*(self: DisplayServer; menuRoot: String; idx: int32): Callable {.loadfrom("global_menu_get_item_callback", 748666903).}
  proc globalMenuGetItemKeyCallback*(self: DisplayServer; menuRoot: String; idx: int32): Callable {.loadfrom("global_menu_get_item_key_callback", 748666903).}
  proc globalMenuGetItemTag*(self: DisplayServer; menuRoot: String; idx: int32): Variant {.loadfrom("global_menu_get_item_tag", 330672633).}
  proc globalMenuGetItemText*(self: DisplayServer; menuRoot: String; idx: int32): String {.loadfrom("global_menu_get_item_text", 591067909).}
  proc globalMenuGetItemSubmenu*(self: DisplayServer; menuRoot: String; idx: int32): String {.loadfrom("global_menu_get_item_submenu", 591067909).}
  proc globalMenuGetItemAccelerator*(self: DisplayServer; menuRoot: String; idx: int32): Key {.loadfrom("global_menu_get_item_accelerator", 936065394).}
  proc globalMenuIsItemDisabled*(self: DisplayServer; menuRoot: String; idx: int32): Bool {.loadfrom("global_menu_is_item_disabled", 3511468594).}
  proc globalMenuGetItemTooltip*(self: DisplayServer; menuRoot: String; idx: int32): String {.loadfrom("global_menu_get_item_tooltip", 591067909).}
  proc globalMenuGetItemState*(self: DisplayServer; menuRoot: String; idx: int32): int32 {.loadfrom("global_menu_get_item_state", 3422818498).}
  proc globalMenuGetItemMaxStates*(self: DisplayServer; menuRoot: String; idx: int32): int32 {.loadfrom("global_menu_get_item_max_states", 3422818498).}
  proc globalMenuGetItemIcon*(self: DisplayServer; menuRoot: String; idx: int32): Ref[Texture2D] {.loadfrom("global_menu_get_item_icon", 3591713183).}
  proc globalMenuGetItemIndentationLevel*(self: DisplayServer; menuRoot: String; idx: int32): int32 {.loadfrom("global_menu_get_item_indentation_level", 3422818498).}
  proc globalMenuSetItemChecked*(self: DisplayServer; menuRoot: String; idx: int32; checked: Bool) {.loadfrom("global_menu_set_item_checked", 4108344793).}
  proc globalMenuSetItemCheckable*(self: DisplayServer; menuRoot: String; idx: int32; checkable: Bool) {.loadfrom("global_menu_set_item_checkable", 4108344793).}
  proc globalMenuSetItemRadioCheckable*(self: DisplayServer; menuRoot: String; idx: int32; checkable: Bool) {.loadfrom("global_menu_set_item_radio_checkable", 4108344793).}
  proc globalMenuSetItemCallback*(self: DisplayServer; menuRoot: String; idx: int32; callback: Callable) {.loadfrom("global_menu_set_item_callback", 3809915389).}
  proc globalMenuSetItemKeyCallback*(self: DisplayServer; menuRoot: String; idx: int32; keyCallback: Callable) {.loadfrom("global_menu_set_item_key_callback", 3809915389).}
  proc globalMenuSetItemTag*(self: DisplayServer; menuRoot: String; idx: int32; tag: ptr Variant) {.loadfrom("global_menu_set_item_tag", 453659863).}
  proc globalMenuSetItemText*(self: DisplayServer; menuRoot: String; idx: int32; text: String) {.loadfrom("global_menu_set_item_text", 965966136).}
  proc globalMenuSetItemSubmenu*(self: DisplayServer; menuRoot: String; idx: int32; submenu: String) {.loadfrom("global_menu_set_item_submenu", 965966136).}
  proc globalMenuSetItemAccelerator*(self: DisplayServer; menuRoot: String; idx: int32; keycode: Key) {.loadfrom("global_menu_set_item_accelerator", 566943293).}
  proc globalMenuSetItemDisabled*(self: DisplayServer; menuRoot: String; idx: int32; disabled: Bool) {.loadfrom("global_menu_set_item_disabled", 4108344793).}
  proc globalMenuSetItemTooltip*(self: DisplayServer; menuRoot: String; idx: int32; tooltip: String) {.loadfrom("global_menu_set_item_tooltip", 965966136).}
  proc globalMenuSetItemState*(self: DisplayServer; menuRoot: String; idx: int32; state: int32) {.loadfrom("global_menu_set_item_state", 3474840532).}
  proc globalMenuSetItemMaxStates*(self: DisplayServer; menuRoot: String; idx: int32; maxStates: int32) {.loadfrom("global_menu_set_item_max_states", 3474840532).}
  proc globalMenuSetItemIcon*(self: DisplayServer; menuRoot: String; idx: int32; icon: Ref[Texture2D]) {.loadfrom("global_menu_set_item_icon", 3201338066).}
  proc globalMenuSetItemIndentationLevel*(self: DisplayServer; menuRoot: String; idx: int32; level: int32) {.loadfrom("global_menu_set_item_indentation_level", 3474840532).}
  proc globalMenuGetItemCount*(self: DisplayServer; menuRoot: String): int32 {.loadfrom("global_menu_get_item_count", 1321353865).}
  proc globalMenuRemoveItem*(self: DisplayServer; menuRoot: String; idx: int32) {.loadfrom("global_menu_remove_item", 2956805083).}
  proc globalMenuClear*(self: DisplayServer; menuRoot: String) {.loadfrom("global_menu_clear", 83702148).}
  proc ttsIsSpeaking*(self: DisplayServer): Bool {.loadfrom("tts_is_speaking", 36873697).}
  proc ttsIsPaused*(self: DisplayServer): Bool {.loadfrom("tts_is_paused", 36873697).}
  proc ttsGetVoices*(self: DisplayServer): TypedArray[Dictionary] {.loadfrom("tts_get_voices", 3995934104).}
  proc ttsGetVoicesForLanguage*(self: DisplayServer; language: String): PackedStringArray {.loadfrom("tts_get_voices_for_language", 4291131558).}
  proc ttsSpeak*(self: DisplayServer; text: String; voice: String; volume: int32 = 50; pitch: Float = 1.0; rate: Float = 1.0; utteranceId: int32 = 0; interrupt: Bool = false) {.loadfrom("tts_speak", 3741216677).}
  proc ttsPause*(self: DisplayServer) {.loadfrom("tts_pause", 3218959716).}
  proc ttsResume*(self: DisplayServer) {.loadfrom("tts_resume", 3218959716).}
  proc ttsStop*(self: DisplayServer) {.loadfrom("tts_stop", 3218959716).}
  proc ttsSetUtteranceCallback*(self: DisplayServer; event: DisplayServer|>TTSUtteranceEvent; callable: Callable) {.loadfrom("tts_set_utterance_callback", 109679083).}
  proc isDarkModeSupported*(self: DisplayServer): Bool {.loadfrom("is_dark_mode_supported", 36873697).}
  proc isDarkMode*(self: DisplayServer): Bool {.loadfrom("is_dark_mode", 36873697).}
  proc getAccentColor*(self: DisplayServer): Color {.loadfrom("get_accent_color", 3444240500).}
  proc mouseSetMode*(self: DisplayServer; mouseMode: DisplayServer|>MouseMode) {.loadfrom("mouse_set_mode", 348288463).}
  proc mouseGetMode*(self: DisplayServer): DisplayServer|>MouseMode {.loadfrom("mouse_get_mode", 1353961651).}
  proc warpMouse*(self: DisplayServer; position: Vector2i) {.loadfrom("warp_mouse", 1130785943).}
  proc mouseGetPosition*(self: DisplayServer): Vector2i {.loadfrom("mouse_get_position", 3690982128).}
  proc mouseGetButtonState*(self: DisplayServer): set[MouseButtonMask] {.loadfrom("mouse_get_button_state", 2512161324).}
  proc clipboardSet*(self: DisplayServer; clipboard: String) {.loadfrom("clipboard_set", 83702148).}
  proc clipboardGet*(self: DisplayServer): String {.loadfrom("clipboard_get", 201670096).}
  proc clipboardHas*(self: DisplayServer): Bool {.loadfrom("clipboard_has", 36873697).}
  proc clipboardSetPrimary*(self: DisplayServer; clipboardPrimary: String) {.loadfrom("clipboard_set_primary", 83702148).}
  proc clipboardGetPrimary*(self: DisplayServer): String {.loadfrom("clipboard_get_primary", 201670096).}
  proc getDisplayCutouts*(self: DisplayServer): TypedArray[Rect2] {.loadfrom("get_display_cutouts", 3995934104).}
  proc getDisplaySafeArea*(self: DisplayServer): Rect2i {.loadfrom("get_display_safe_area", 410525958).}
  proc getScreenCount*(self: DisplayServer): int32 {.loadfrom("get_screen_count", 3905245786).}
  proc getPrimaryScreen*(self: DisplayServer): int32 {.loadfrom("get_primary_screen", 3905245786).}
  proc getKeyboardFocusScreen*(self: DisplayServer): int32 {.loadfrom("get_keyboard_focus_screen", 3905245786).}
  proc getScreenFromRect*(self: DisplayServer; rect: Rect2): int32 {.loadfrom("get_screen_from_rect", 741354659).}
  proc screenGetPosition*(self: DisplayServer; screen: int32 = -1): Vector2i {.loadfrom("screen_get_position", 1725937825).}
  proc screenGetSize*(self: DisplayServer; screen: int32 = -1): Vector2i {.loadfrom("screen_get_size", 1725937825).}
  proc screenGetUsableRect*(self: DisplayServer; screen: int32 = -1): Rect2i {.loadfrom("screen_get_usable_rect", 2439012528).}
  proc screenGetDpi*(self: DisplayServer; screen: int32 = -1): int32 {.loadfrom("screen_get_dpi", 181039630).}
  proc screenGetScale*(self: DisplayServer; screen: int32 = -1): Float {.loadfrom("screen_get_scale", 909105437).}
  proc isTouchscreenAvailable*(self: DisplayServer): Bool {.loadfrom("is_touchscreen_available", 4162880507).}
  proc screenGetMaxScale*(self: DisplayServer): Float {.loadfrom("screen_get_max_scale", 1740695150).}
  proc screenGetRefreshRate*(self: DisplayServer; screen: int32 = -1): Float {.loadfrom("screen_get_refresh_rate", 909105437).}
  proc screenGetPixel*(self: DisplayServer; position: Vector2i): Color {.loadfrom("screen_get_pixel", 1532707496).}
  proc screenGetImage*(self: DisplayServer; screen: int32 = -1): Ref[Image] {.loadfrom("screen_get_image", 3813388802).}
  proc screenSetOrientation*(self: DisplayServer; orientation: DisplayServer|>ScreenOrientation; screen: int32 = -1) {.loadfrom("screen_set_orientation", 2629526904).}
  proc screenGetOrientation*(self: DisplayServer; screen: int32 = -1): DisplayServer|>ScreenOrientation {.loadfrom("screen_get_orientation", 133818562).}
  proc screenSetKeepOn*(self: DisplayServer; enable: Bool) {.loadfrom("screen_set_keep_on", 2586408642).}
  proc screenIsKeptOn*(self: DisplayServer): Bool {.loadfrom("screen_is_kept_on", 36873697).}
  proc getWindowList*(self: DisplayServer): PackedInt32Array {.loadfrom("get_window_list", 1930428628).}
  proc getWindowAtScreenPosition*(self: DisplayServer; position: Vector2i): int32 {.loadfrom("get_window_at_screen_position", 2485466453).}
  proc windowGetNativeHandle*(self: DisplayServer; handleType: DisplayServer|>HandleType; windowId: int32 = 0): int64 {.loadfrom("window_get_native_handle", 2709193271).}
  proc windowGetActivePopup*(self: DisplayServer): int32 {.loadfrom("window_get_active_popup", 3905245786).}
  proc windowSetPopupSafeRect*(self: DisplayServer; window: int32; rect: Rect2i) {.loadfrom("window_set_popup_safe_rect", 3317281434).}
  proc windowGetPopupSafeRect*(self: DisplayServer; window: int32): Rect2i {.loadfrom("window_get_popup_safe_rect", 2161169500).}
  proc windowSetTitle*(self: DisplayServer; title: String; windowId: int32 = 0) {.loadfrom("window_set_title", 3043792800).}
  proc windowSetMousePassthrough*(self: DisplayServer; region: PackedVector2Array; windowId: int32 = 0) {.loadfrom("window_set_mouse_passthrough", 3958815166).}
  proc windowGetCurrentScreen*(self: DisplayServer; windowId: int32 = 0): int32 {.loadfrom("window_get_current_screen", 1591665591).}
  proc windowSetCurrentScreen*(self: DisplayServer; screen: int32; windowId: int32 = 0) {.loadfrom("window_set_current_screen", 3023605688).}
  proc windowGetPosition*(self: DisplayServer; windowId: int32 = 0): Vector2i {.loadfrom("window_get_position", 763922886).}
  proc windowGetPositionWithDecorations*(self: DisplayServer; windowId: int32 = 0): Vector2i {.loadfrom("window_get_position_with_decorations", 763922886).}
  proc windowSetPosition*(self: DisplayServer; position: Vector2i; windowId: int32 = 0) {.loadfrom("window_set_position", 3614040015).}
  proc windowGetSize*(self: DisplayServer; windowId: int32 = 0): Vector2i {.loadfrom("window_get_size", 763922886).}
  proc windowSetSize*(self: DisplayServer; size: Vector2i; windowId: int32 = 0) {.loadfrom("window_set_size", 3614040015).}
  proc windowSetRectChangedCallback*(self: DisplayServer; callback: Callable; windowId: int32 = 0) {.loadfrom("window_set_rect_changed_callback", 3653650673).}
  proc windowSetWindowEventCallback*(self: DisplayServer; callback: Callable; windowId: int32 = 0) {.loadfrom("window_set_window_event_callback", 3653650673).}
  proc windowSetInputEventCallback*(self: DisplayServer; callback: Callable; windowId: int32 = 0) {.loadfrom("window_set_input_event_callback", 3653650673).}
  proc windowSetInputTextCallback*(self: DisplayServer; callback: Callable; windowId: int32 = 0) {.loadfrom("window_set_input_text_callback", 3653650673).}
  proc windowSetDropFilesCallback*(self: DisplayServer; callback: Callable; windowId: int32 = 0) {.loadfrom("window_set_drop_files_callback", 3653650673).}
  proc windowGetAttachedInstanceId*(self: DisplayServer; windowId: int32 = 0): uint64 {.loadfrom("window_get_attached_instance_id", 1591665591).}
  proc windowGetMaxSize*(self: DisplayServer; windowId: int32 = 0): Vector2i {.loadfrom("window_get_max_size", 763922886).}
  proc windowSetMaxSize*(self: DisplayServer; maxSize: Vector2i; windowId: int32 = 0) {.loadfrom("window_set_max_size", 3614040015).}
  proc windowGetMinSize*(self: DisplayServer; windowId: int32 = 0): Vector2i {.loadfrom("window_get_min_size", 763922886).}
  proc windowSetMinSize*(self: DisplayServer; minSize: Vector2i; windowId: int32 = 0) {.loadfrom("window_set_min_size", 3614040015).}
  proc windowGetSizeWithDecorations*(self: DisplayServer; windowId: int32 = 0): Vector2i {.loadfrom("window_get_size_with_decorations", 763922886).}
  proc windowGetMode*(self: DisplayServer; windowId: int32 = 0): DisplayServer|>WindowMode {.loadfrom("window_get_mode", 2185728461).}
  proc windowSetMode*(self: DisplayServer; mode: DisplayServer|>WindowMode; windowId: int32 = 0) {.loadfrom("window_set_mode", 2942569511).}
  proc windowSetFlag*(self: DisplayServer; flag: DisplayServer|>WindowFlags; enabled: Bool; windowId: int32 = 0) {.loadfrom("window_set_flag", 3971592565).}
  proc windowGetFlag*(self: DisplayServer; flag: DisplayServer|>WindowFlags; windowId: int32 = 0): Bool {.loadfrom("window_get_flag", 2662949986).}
  proc windowSetWindowButtonsOffset*(self: DisplayServer; offset: Vector2i; windowId: int32 = 0) {.loadfrom("window_set_window_buttons_offset", 3614040015).}
  proc windowGetSafeTitleMargins*(self: DisplayServer; windowId: int32 = 0): Vector3i {.loadfrom("window_get_safe_title_margins", 2295066620).}
  proc windowRequestAttention*(self: DisplayServer; windowId: int32 = 0) {.loadfrom("window_request_attention", 1995695955).}
  proc windowMoveToForeground*(self: DisplayServer; windowId: int32 = 0) {.loadfrom("window_move_to_foreground", 1995695955).}
  proc windowIsFocused*(self: DisplayServer; windowId: int32 = 0): Bool {.loadfrom("window_is_focused", 1051549951).}
  proc windowCanDraw*(self: DisplayServer; windowId: int32 = 0): Bool {.loadfrom("window_can_draw", 1051549951).}
  proc windowSetTransient*(self: DisplayServer; windowId: int32; parentWindowId: int32) {.loadfrom("window_set_transient", 3937882851).}
  proc windowSetExclusive*(self: DisplayServer; windowId: int32; exclusive: Bool) {.loadfrom("window_set_exclusive", 300928843).}
  proc windowSetImeActive*(self: DisplayServer; active: Bool; windowId: int32 = 0) {.loadfrom("window_set_ime_active", 450484987).}
  proc windowSetImePosition*(self: DisplayServer; position: Vector2i; windowId: int32 = 0) {.loadfrom("window_set_ime_position", 3614040015).}
  proc windowSetVsyncMode*(self: DisplayServer; vsyncMode: DisplayServer|>VSyncMode; windowId: int32 = 0) {.loadfrom("window_set_vsync_mode", 1708924624).}
  proc windowGetVsyncMode*(self: DisplayServer; windowId: int32 = 0): DisplayServer|>VSyncMode {.loadfrom("window_get_vsync_mode", 578873795).}
  proc windowIsMaximizeAllowed*(self: DisplayServer; windowId: int32 = 0): Bool {.loadfrom("window_is_maximize_allowed", 1051549951).}
  proc windowMaximizeOnTitleDblClick*(self: DisplayServer): Bool {.loadfrom("window_maximize_on_title_dbl_click", 36873697).}
  proc windowMinimizeOnTitleDblClick*(self: DisplayServer): Bool {.loadfrom("window_minimize_on_title_dbl_click", 36873697).}
  proc imeGetSelection*(self: DisplayServer): Vector2i {.loadfrom("ime_get_selection", 3690982128).}
  proc imeGetText*(self: DisplayServer): String {.loadfrom("ime_get_text", 201670096).}
  proc virtualKeyboardShow*(self: DisplayServer; existingText: String; position: Rect2 = Rect2|>init(0, 0, 0, 0); `type`: DisplayServer|>VirtualKeyboardType = keyboardTypeDefault; maxLength: int32 = -1; cursorStart: int32 = -1; cursorEnd: int32 = -1) {.loadfrom("virtual_keyboard_show", 860410478).}
  proc virtualKeyboardHide*(self: DisplayServer) {.loadfrom("virtual_keyboard_hide", 3218959716).}
  proc virtualKeyboardGetHeight*(self: DisplayServer): int32 {.loadfrom("virtual_keyboard_get_height", 3905245786).}
  proc cursorSetShape*(self: DisplayServer; shape: DisplayServer|>CursorShape) {.loadfrom("cursor_set_shape", 2026291549).}
  proc cursorGetShape*(self: DisplayServer): DisplayServer|>CursorShape {.loadfrom("cursor_get_shape", 1087724927).}
  proc cursorSetCustomImage*(self: DisplayServer; cursor: Ref[Resource]; shape: DisplayServer|>CursorShape = cursorArrow; hotspot: Vector2 = gdvec(0, 0)) {.loadfrom("cursor_set_custom_image", 1358907026).}
  proc getSwapCancelOk*(self: DisplayServer): Bool {.loadfrom("get_swap_cancel_ok", 2240911060).}
  proc enableForStealingFocus*(self: DisplayServer; processId: int64) {.loadfrom("enable_for_stealing_focus", 1286410249).}
  proc dialogShow*(self: DisplayServer; title: String; description: String; buttons: PackedStringArray; callback: Callable): Error {.loadfrom("dialog_show", 4115553226).}
  proc dialogInputText*(self: DisplayServer; title: String; description: String; existingText: String; callback: Callable): Error {.loadfrom("dialog_input_text", 3088703427).}
  proc keyboardGetLayoutCount*(self: DisplayServer): int32 {.loadfrom("keyboard_get_layout_count", 3905245786).}
  proc keyboardGetCurrentLayout*(self: DisplayServer): int32 {.loadfrom("keyboard_get_current_layout", 3905245786).}
  proc keyboardSetCurrentLayout*(self: DisplayServer; index: int32) {.loadfrom("keyboard_set_current_layout", 1286410249).}
  proc keyboardGetLayoutLanguage*(self: DisplayServer; index: int32): String {.loadfrom("keyboard_get_layout_language", 844755477).}
  proc keyboardGetLayoutName*(self: DisplayServer; index: int32): String {.loadfrom("keyboard_get_layout_name", 844755477).}
  proc keyboardGetKeycodeFromPhysical*(self: DisplayServer; keycode: Key): Key {.loadfrom("keyboard_get_keycode_from_physical", 3447613187).}
  proc processEvents*(self: DisplayServer) {.loadfrom("process_events", 3218959716).}
  proc forceProcessAndDropEvents*(self: DisplayServer) {.loadfrom("force_process_and_drop_events", 3218959716).}
  proc setNativeIcon*(self: DisplayServer; filename: String) {.loadfrom("set_native_icon", 83702148).}
  proc setIcon*(self: DisplayServer; image: Ref[Image]) {.loadfrom("set_icon", 532598488).}
  proc tabletGetDriverCount*(self: DisplayServer): int32 {.loadfrom("tablet_get_driver_count", 3905245786).}
  proc tabletGetDriverName*(self: DisplayServer; idx: int32): String {.loadfrom("tablet_get_driver_name", 844755477).}
  proc tabletGetCurrentDriver*(self: DisplayServer): String {.loadfrom("tablet_get_current_driver", 201670096).}
  proc tabletSetCurrentDriver*(self: DisplayServer; name: String) {.loadfrom("tablet_set_current_driver", 83702148).}

# EditorFileSystemDirectory
define_godot_engine_class_essencials(EditorFileSystemDirectory, Object)
EditorFileSystemDirectory.memberProcs:
  proc getSubdirCount*(self: EditorFileSystemDirectory): int32 {.loadfrom("get_subdir_count", 3905245786).}
  proc getSubdir*(self: EditorFileSystemDirectory; idx: int32): EditorFileSystemDirectory {.loadfrom("get_subdir", 2330964164).}
  proc getFileCount*(self: EditorFileSystemDirectory): int32 {.loadfrom("get_file_count", 3905245786).}
  proc getFile*(self: EditorFileSystemDirectory; idx: int32): String {.loadfrom("get_file", 844755477).}
  proc getFilePath*(self: EditorFileSystemDirectory; idx: int32): String {.loadfrom("get_file_path", 844755477).}
  proc getFileType*(self: EditorFileSystemDirectory; idx: int32): StringName {.loadfrom("get_file_type", 659327637).}
  proc getFileScriptClassName*(self: EditorFileSystemDirectory; idx: int32): String {.loadfrom("get_file_script_class_name", 844755477).}
  proc getFileScriptClassExtends*(self: EditorFileSystemDirectory; idx: int32): String {.loadfrom("get_file_script_class_extends", 844755477).}
  proc getFileImportIsValid*(self: EditorFileSystemDirectory; idx: int32): Bool {.loadfrom("get_file_import_is_valid", 1116898809).}
  proc getName*(self: EditorFileSystemDirectory): String {.loadfrom("get_name", 2841200299).}
  proc getPath*(self: EditorFileSystemDirectory): String {.loadfrom("get_path", 201670096).}
  proc getParent*(self: EditorFileSystemDirectory): EditorFileSystemDirectory {.loadfrom("get_parent", 842323275).}
  proc findFileIndex*(self: EditorFileSystemDirectory; name: String): int32 {.loadfrom("find_file_index", 1321353865).}
  proc findDirIndex*(self: EditorFileSystemDirectory; name: String): int32 {.loadfrom("find_dir_index", 1321353865).}

# EditorInterface
define_godot_engine_class_essencials(EditorInterface, Object)
EditorInterface.memberProcs:
  proc restartEditor*(self: EditorInterface; save: Bool = true) {.loadfrom("restart_editor", 3216645846).}
  proc getCommandPalette*(self: EditorInterface): EditorCommandPalette {.loadfrom("get_command_palette", 2471163807).}
  proc getResourceFilesystem*(self: EditorInterface): EditorFileSystem {.loadfrom("get_resource_filesystem", 780151678).}
  proc getEditorPaths*(self: EditorInterface): EditorPaths {.loadfrom("get_editor_paths", 1595760068).}
  proc getResourcePreviewer*(self: EditorInterface): EditorResourcePreview {.loadfrom("get_resource_previewer", 943486957).}
  proc getSelection*(self: EditorInterface): EditorSelection {.loadfrom("get_selection", 2690272531).}
  proc getEditorSettings*(self: EditorInterface): Ref[EditorSettings] {.loadfrom("get_editor_settings", 4086932459).}
  proc makeMeshPreviews*(self: EditorInterface; meshes: TypedArray[Mesh]; previewSize: int32): TypedArray[Texture2D] {.loadfrom("make_mesh_previews", 878078554).}
  proc setPluginEnabled*(self: EditorInterface; plugin: String; enabled: Bool) {.loadfrom("set_plugin_enabled", 2678287736).}
  proc isPluginEnabled*(self: EditorInterface; plugin: String): Bool {.loadfrom("is_plugin_enabled", 3927539163).}
  proc getBaseControl*(self: EditorInterface): Control {.loadfrom("get_base_control", 2783021301).}
  proc getEditorMainScreen*(self: EditorInterface): VBoxContainer {.loadfrom("get_editor_main_screen", 1706218421).}
  proc getScriptEditor*(self: EditorInterface): ScriptEditor {.loadfrom("get_script_editor", 90868003).}
  proc setMainScreenEditor*(self: EditorInterface; name: String) {.loadfrom("set_main_screen_editor", 83702148).}
  proc `distractionFreeMode=`*(self: EditorInterface; enter: Bool) {.loadfrom("set_distraction_free_mode", 2586408642).}
  proc isDistractionFreeModeEnabled*(self: EditorInterface): Bool {.loadfrom("is_distraction_free_mode_enabled", 36873697).}
  proc getEditorScale*(self: EditorInterface): Float {.loadfrom("get_editor_scale", 1740695150).}
  proc popupDialog*(self: EditorInterface; dialog: Window; rect: Rect2i = Rect2i|>init(0, 0, 0, 0)) {.loadfrom("popup_dialog", 2478844058).}
  proc popupDialogCentered*(self: EditorInterface; dialog: Window; minsize: Vector2i = gdveci(0, 0)) {.loadfrom("popup_dialog_centered", 1723337679).}
  proc popupDialogCenteredRatio*(self: EditorInterface; dialog: Window; ratio: Float = 0.8) {.loadfrom("popup_dialog_centered_ratio", 1310934579).}
  proc popupDialogCenteredClamped*(self: EditorInterface; dialog: Window; minsize: Vector2i = gdveci(0, 0); fallbackRatio: Float = 0.75) {.loadfrom("popup_dialog_centered_clamped", 3433759678).}
  proc getFileSystemDock*(self: EditorInterface): FileSystemDock {.loadfrom("get_file_system_dock", 3751012327).}
  proc selectFile*(self: EditorInterface; file: String) {.loadfrom("select_file", 83702148).}
  proc getSelectedPaths*(self: EditorInterface): PackedStringArray {.loadfrom("get_selected_paths", 1139954409).}
  proc getCurrentPath*(self: EditorInterface): String {.loadfrom("get_current_path", 201670096).}
  proc getCurrentDirectory*(self: EditorInterface): String {.loadfrom("get_current_directory", 201670096).}
  proc getInspector*(self: EditorInterface): EditorInspector {.loadfrom("get_inspector", 3517113938).}
  proc inspectObject*(self: EditorInterface; `object`: ptr Object; forProperty: String = ""; inspectorOnly: Bool = false) {.loadfrom("inspect_object", 2564140749).}
  proc editResource*(self: EditorInterface; resource: Ref[Resource]) {.loadfrom("edit_resource", 968641751).}
  proc editNode*(self: EditorInterface; node: ptr Node) {.loadfrom("edit_node", 1078189570).}
  proc editScript*(self: EditorInterface; script: Ref[Script]; line: int32 = -1; column: int32 = 0; grabFocus: Bool = true) {.loadfrom("edit_script", 3664508569).}
  proc openSceneFromPath*(self: EditorInterface; sceneFilepath: String) {.loadfrom("open_scene_from_path", 83702148).}
  proc reloadSceneFromPath*(self: EditorInterface; sceneFilepath: String) {.loadfrom("reload_scene_from_path", 83702148).}
  proc getOpenScenes*(self: EditorInterface): PackedStringArray {.loadfrom("get_open_scenes", 1139954409).}
  proc getEditedSceneRoot*(self: EditorInterface): Node {.loadfrom("get_edited_scene_root", 3160264692).}
  proc saveScene*(self: EditorInterface): Error {.loadfrom("save_scene", 166280745).}
  proc saveSceneAs*(self: EditorInterface; path: String; withPreview: Bool = true) {.loadfrom("save_scene_as", 1168363258).}
  proc markSceneAsUnsaved*(self: EditorInterface) {.loadfrom("mark_scene_as_unsaved", 3218959716).}
  proc playMainScene*(self: EditorInterface) {.loadfrom("play_main_scene", 3218959716).}
  proc playCurrentScene*(self: EditorInterface) {.loadfrom("play_current_scene", 3218959716).}
  proc playCustomScene*(self: EditorInterface; sceneFilepath: String) {.loadfrom("play_custom_scene", 83702148).}
  proc stopPlayingScene*(self: EditorInterface) {.loadfrom("stop_playing_scene", 3218959716).}
  proc isPlayingScene*(self: EditorInterface): Bool {.loadfrom("is_playing_scene", 36873697).}
  proc getPlayingScene*(self: EditorInterface): String {.loadfrom("get_playing_scene", 201670096).}
  proc `movieMakerEnabled=`*(self: EditorInterface; enabled: Bool) {.loadfrom("set_movie_maker_enabled", 2586408642).}
  proc isMovieMakerEnabled*(self: EditorInterface): Bool {.loadfrom("is_movie_maker_enabled", 36873697).}

# EditorPaths
define_godot_engine_class_essencials(EditorPaths, Object)
EditorPaths.memberProcs:
  proc getDataDir*(self: EditorPaths): String {.loadfrom("get_data_dir", 201670096).}
  proc getConfigDir*(self: EditorPaths): String {.loadfrom("get_config_dir", 201670096).}
  proc getCacheDir*(self: EditorPaths): String {.loadfrom("get_cache_dir", 201670096).}
  proc isSelfContained*(self: EditorPaths): Bool {.loadfrom("is_self_contained", 36873697).}
  proc getSelfContainedFile*(self: EditorPaths): String {.loadfrom("get_self_contained_file", 201670096).}
  proc getProjectSettingsDir*(self: EditorPaths): String {.loadfrom("get_project_settings_dir", 201670096).}

# EditorSelection
define_godot_engine_class_essencials(EditorSelection, Object)
EditorSelection.memberProcs:
  proc clear*(self: EditorSelection) {.loadfrom("clear", 3218959716).}
  proc addNode*(self: EditorSelection; node: ptr Node) {.loadfrom("add_node", 1078189570).}
  proc removeNode*(self: EditorSelection; node: ptr Node) {.loadfrom("remove_node", 1078189570).}
  proc getSelectedNodes*(self: EditorSelection): TypedArray[Node] {.loadfrom("get_selected_nodes", 2915620761).}
  proc getTransformableSelectedNodes*(self: EditorSelection): TypedArray[Node] {.loadfrom("get_transformable_selected_nodes", 2915620761).}

# EditorUndoRedoManager
define_godot_engine_class_essencials(EditorUndoRedoManager, Object)
EditorUndoRedoManager.memberProcs:
  proc createAction*(self: EditorUndoRedoManager; name: String; mergeMode: UndoRedo|>MergeMode = mergeDisable; customContext: ptr Object = nil; backwardUndoOps: Bool = false) {.loadfrom("create_action", 3577985681).}
  proc commitAction*(self: EditorUndoRedoManager; execute: Bool = true) {.loadfrom("commit_action", 3216645846).}
  proc isCommittingAction*(self: EditorUndoRedoManager): Bool {.loadfrom("is_committing_action", 36873697).}
  proc addDoMethod*(self: EditorUndoRedoManager; `object`: ptr Object; `method`: StringName) {.loadfrom("add_do_method", 1517810467).}
  proc addUndoMethod*(self: EditorUndoRedoManager; `object`: ptr Object; `method`: StringName) {.loadfrom("add_undo_method", 1517810467).}
  proc addDoProperty*(self: EditorUndoRedoManager; `object`: ptr Object; property: StringName; value: ptr Variant) {.loadfrom("add_do_property", 1017172818).}
  proc addUndoProperty*(self: EditorUndoRedoManager; `object`: ptr Object; property: StringName; value: ptr Variant) {.loadfrom("add_undo_property", 1017172818).}
  proc addDoReference*(self: EditorUndoRedoManager; `object`: ptr Object) {.loadfrom("add_do_reference", 3975164845).}
  proc addUndoReference*(self: EditorUndoRedoManager; `object`: ptr Object) {.loadfrom("add_undo_reference", 3975164845).}
  proc getObjectHistoryId*(self: EditorUndoRedoManager; `object`: ptr Object): int32 {.loadfrom("get_object_history_id", 1107568780).}
  proc getHistoryUndoRedo*(self: EditorUndoRedoManager; id: int32): UndoRedo {.loadfrom("get_history_undo_redo", 2417974513).}

# EditorVCSInterface
define_godot_engine_class_essencials(EditorVCSInterface, Object)
method initialize*(self: EditorVCSInterface; projectPath: String): Bool {.base.} = (discard)
method setCredentials*(self: EditorVCSInterface; username: String; password: String; sshPublicKeyPath: String; sshPrivateKeyPath: String; sshPassphrase: String) {.base.} = (discard)
method getModifiedFilesData*(self: EditorVCSInterface): TypedArray[Dictionary] {.base.} = (discard)
method stageFile*(self: EditorVCSInterface; filePath: String) {.base.} = (discard)
method unstageFile*(self: EditorVCSInterface; filePath: String) {.base.} = (discard)
method discardFile*(self: EditorVCSInterface; filePath: String) {.base.} = (discard)
method commit*(self: EditorVCSInterface; msg: String) {.base.} = (discard)
method getDiff*(self: EditorVCSInterface; identifier: String; area: int32): TypedArray[Dictionary] {.base.} = (discard)
method shutDown*(self: EditorVCSInterface): Bool {.base.} = (discard)
method getVcsName*(self: EditorVCSInterface): String {.base.} = (discard)
method getPreviousCommits*(self: EditorVCSInterface; maxCommits: int32): TypedArray[Dictionary] {.base.} = (discard)
method getBranchList*(self: EditorVCSInterface): TypedArray[String] {.base.} = (discard)
method getRemotes*(self: EditorVCSInterface): TypedArray[String] {.base.} = (discard)
method createBranch*(self: EditorVCSInterface; branchName: String) {.base.} = (discard)
method removeBranch*(self: EditorVCSInterface; branchName: String) {.base.} = (discard)
method createRemote*(self: EditorVCSInterface; remoteName: String; remoteUrl: String) {.base.} = (discard)
method removeRemote*(self: EditorVCSInterface; remoteName: String) {.base.} = (discard)
method getCurrentBranchName*(self: EditorVCSInterface): String {.base.} = (discard)
method checkoutBranch*(self: EditorVCSInterface; branchName: String): Bool {.base.} = (discard)
method pull*(self: EditorVCSInterface; remote: String) {.base.} = (discard)
method push*(self: EditorVCSInterface; remote: String; force: Bool) {.base.} = (discard)
method fetch*(self: EditorVCSInterface; remote: String) {.base.} = (discard)
method getLineDiff*(self: EditorVCSInterface; filePath: String; text: String): TypedArray[Dictionary] {.base.} = (discard)
EditorVCSInterface.memberProcs:
  proc createDiffLine*(self: EditorVCSInterface; newLineNo: int32; oldLineNo: int32; content: String; status: String): Dictionary {.loadfrom("create_diff_line", 2901184053).}
  proc createDiffHunk*(self: EditorVCSInterface; oldStart: int32; newStart: int32; oldLines: int32; newLines: int32): Dictionary {.loadfrom("create_diff_hunk", 3784842090).}
  proc createDiffFile*(self: EditorVCSInterface; newFile: String; oldFile: String): Dictionary {.loadfrom("create_diff_file", 2723227684).}
  proc createCommit*(self: EditorVCSInterface; msg: String; author: String; id: String; unixTimestamp: int64; offsetMinutes: int64): Dictionary {.loadfrom("create_commit", 1075983584).}
  proc createStatusFile*(self: EditorVCSInterface; filePath: String; changeType: EditorVCSInterface|>ChangeType; area: EditorVCSInterface|>TreeArea): Dictionary {.loadfrom("create_status_file", 1083471673).}
  proc addDiffHunksIntoDiffFile*(self: EditorVCSInterface; diffFile: Dictionary; diffHunks: TypedArray[Dictionary]): Dictionary {.loadfrom("add_diff_hunks_into_diff_file", 4015243225).}
  proc addLineDiffsIntoDiffHunk*(self: EditorVCSInterface; diffHunk: Dictionary; lineDiffs: TypedArray[Dictionary]): Dictionary {.loadfrom("add_line_diffs_into_diff_hunk", 4015243225).}
  proc popupError*(self: EditorVCSInterface; msg: String) {.loadfrom("popup_error", 83702148).}

# Engine
define_godot_engine_class_essencials(Engine, Object)
Engine.memberProcs:
  proc `physicsTicksPerSecond=`*(self: Engine; physicsTicksPerSecond: int32) {.loadfrom("set_physics_ticks_per_second", 1286410249).}
  proc physicsTicksPerSecond*(self: Engine): int32 {.loadfrom("get_physics_ticks_per_second", 3905245786).}
  proc `maxPhysicsStepsPerFrame=`*(self: Engine; maxPhysicsSteps: int32) {.loadfrom("set_max_physics_steps_per_frame", 1286410249).}
  proc maxPhysicsStepsPerFrame*(self: Engine): int32 {.loadfrom("get_max_physics_steps_per_frame", 3905245786).}
  proc `physicsJitterFix=`*(self: Engine; physicsJitterFix: float64) {.loadfrom("set_physics_jitter_fix", 373806689).}
  proc physicsJitterFix*(self: Engine): float64 {.loadfrom("get_physics_jitter_fix", 1740695150).}
  proc getPhysicsInterpolationFraction*(self: Engine): float64 {.loadfrom("get_physics_interpolation_fraction", 1740695150).}
  proc `maxFps=`*(self: Engine; maxFps: int32) {.loadfrom("set_max_fps", 1286410249).}
  proc maxFps*(self: Engine): int32 {.loadfrom("get_max_fps", 3905245786).}
  proc `timeScale=`*(self: Engine; timeScale: float64) {.loadfrom("set_time_scale", 373806689).}
  proc timeScale*(self: Engine): float64 {.loadfrom("get_time_scale", 191475506).}
  proc getFramesDrawn*(self: Engine): int32 {.loadfrom("get_frames_drawn", 2455072627).}
  proc getFramesPerSecond*(self: Engine): float64 {.loadfrom("get_frames_per_second", 1740695150).}
  proc getPhysicsFrames*(self: Engine): uint64 {.loadfrom("get_physics_frames", 3905245786).}
  proc getProcessFrames*(self: Engine): uint64 {.loadfrom("get_process_frames", 3905245786).}
  proc getMainLoop*(self: Engine): MainLoop {.loadfrom("get_main_loop", 1016888095).}
  proc getVersionInfo*(self: Engine): Dictionary {.loadfrom("get_version_info", 3102165223).}
  proc getAuthorInfo*(self: Engine): Dictionary {.loadfrom("get_author_info", 3102165223).}
  proc getCopyrightInfo*(self: Engine): TypedArray[Dictionary] {.loadfrom("get_copyright_info", 3995934104).}
  proc getDonorInfo*(self: Engine): Dictionary {.loadfrom("get_donor_info", 3102165223).}
  proc getLicenseInfo*(self: Engine): Dictionary {.loadfrom("get_license_info", 3102165223).}
  proc getLicenseText*(self: Engine): String {.loadfrom("get_license_text", 201670096).}
  proc getArchitectureName*(self: Engine): String {.loadfrom("get_architecture_name", 201670096).}
  proc isInPhysicsFrame*(self: Engine): Bool {.loadfrom("is_in_physics_frame", 36873697).}
  proc hasSingleton*(self: Engine; name: StringName): Bool {.loadfrom("has_singleton", 2619796661).}
  proc getSingleton*(self: Engine; name: StringName): Object {.loadfrom("get_singleton", 1371597918).}
  proc registerSingleton*(self: Engine; name: StringName; instance: ptr Object) {.loadfrom("register_singleton", 965313290).}
  proc unregisterSingleton*(self: Engine; name: StringName) {.loadfrom("unregister_singleton", 3304788590).}
  proc getSingletonList*(self: Engine): PackedStringArray {.loadfrom("get_singleton_list", 1139954409).}
  proc registerScriptLanguage*(self: Engine; language: ScriptLanguage): Error {.loadfrom("register_script_language", 1850254898).}
  proc unregisterScriptLanguage*(self: Engine; language: ScriptLanguage): Error {.loadfrom("unregister_script_language", 1850254898).}
  proc getScriptLanguageCount*(self: Engine): int32 {.loadfrom("get_script_language_count", 2455072627).}
  proc getScriptLanguage*(self: Engine; index: int32): ScriptLanguage {.loadfrom("get_script_language", 2151255799).}
  proc isEditorHint*(self: Engine): Bool {.loadfrom("is_editor_hint", 36873697).}
  proc getWriteMoviePath*(self: Engine): String {.loadfrom("get_write_movie_path", 201670096).}
  proc `printErrorMessages=`*(self: Engine; enabled: Bool) {.loadfrom("set_print_error_messages", 2586408642).}
  proc isPrintingErrorMessages*(self: Engine): Bool {.loadfrom("is_printing_error_messages", 36873697).}

# EngineDebugger
define_godot_engine_class_essencials(EngineDebugger, Object)
EngineDebugger.memberProcs:
  proc isActive*(self: EngineDebugger): Bool {.loadfrom("is_active", 2240911060).}
  proc registerProfiler*(self: EngineDebugger; name: StringName; profiler: Ref[EngineProfiler]) {.loadfrom("register_profiler", 3651669560).}
  proc unregisterProfiler*(self: EngineDebugger; name: StringName) {.loadfrom("unregister_profiler", 3304788590).}
  proc isProfiling*(self: EngineDebugger; name: StringName): Bool {.loadfrom("is_profiling", 2041966384).}
  proc hasProfiler*(self: EngineDebugger; name: StringName): Bool {.loadfrom("has_profiler", 2041966384).}
  proc profilerAddFrameData*(self: EngineDebugger; name: StringName; data: Array) {.loadfrom("profiler_add_frame_data", 1895267858).}
  proc profilerEnable*(self: EngineDebugger; name: StringName; enable: Bool; arguments: Array = Array|>init()) {.loadfrom("profiler_enable", 438160728).}
  proc registerMessageCapture*(self: EngineDebugger; name: StringName; callable: Callable) {.loadfrom("register_message_capture", 1874754934).}
  proc unregisterMessageCapture*(self: EngineDebugger; name: StringName) {.loadfrom("unregister_message_capture", 3304788590).}
  proc hasCapture*(self: EngineDebugger; name: StringName): Bool {.loadfrom("has_capture", 2041966384).}
  proc sendMessage*(self: EngineDebugger; message: String; data: Array) {.loadfrom("send_message", 1209351045).}

# FramebufferCacheRD
define_godot_engine_class_essencials(FramebufferCacheRD, Object)

# GDExtensionManager
define_godot_engine_class_essencials(GDExtensionManager, Object)
GDExtensionManager.memberProcs:
  proc loadExtension*(self: GDExtensionManager; path: String): GDExtensionManager|>LoadStatus {.loadfrom("load_extension", 4024158731).}
  proc reloadExtension*(self: GDExtensionManager; path: String): GDExtensionManager|>LoadStatus {.loadfrom("reload_extension", 4024158731).}
  proc unloadExtension*(self: GDExtensionManager; path: String): GDExtensionManager|>LoadStatus {.loadfrom("unload_extension", 4024158731).}
  proc isExtensionLoaded*(self: GDExtensionManager; path: String): Bool {.loadfrom("is_extension_loaded", 3927539163).}
  proc getLoadedExtensions*(self: GDExtensionManager): PackedStringArray {.loadfrom("get_loaded_extensions", 1139954409).}
  proc getExtension*(self: GDExtensionManager; path: String): Ref[GDExtension] {.loadfrom("get_extension", 49743343).}

# Geometry2D
define_godot_engine_class_essencials(Geometry2D, Object)
Geometry2D.memberProcs:
  proc isPointInCircle*(self: Geometry2D; point: Vector2; circlePosition: Vector2; circleRadius: Float): Bool {.loadfrom("is_point_in_circle", 2929491703).}
  proc segmentIntersectsCircle*(self: Geometry2D; segmentFrom: Vector2; segmentTo: Vector2; circlePosition: Vector2; circleRadius: Float): Float {.loadfrom("segment_intersects_circle", 1356928167).}
  proc segmentIntersectsSegment*(self: Geometry2D; fromA: Vector2; toA: Vector2; fromB: Vector2; toB: Vector2): Variant {.loadfrom("segment_intersects_segment", 2058025344).}
  proc lineIntersectsLine*(self: Geometry2D; fromA: Vector2; dirA: Vector2; fromB: Vector2; dirB: Vector2): Variant {.loadfrom("line_intersects_line", 2058025344).}
  proc getClosestPointsBetweenSegments*(self: Geometry2D; p1: Vector2; q1: Vector2; p2: Vector2; q2: Vector2): PackedVector2Array {.loadfrom("get_closest_points_between_segments", 3344690961).}
  proc getClosestPointToSegment*(self: Geometry2D; point: Vector2; s1: Vector2; s2: Vector2): Vector2 {.loadfrom("get_closest_point_to_segment", 4172901909).}
  proc getClosestPointToSegmentUncapped*(self: Geometry2D; point: Vector2; s1: Vector2; s2: Vector2): Vector2 {.loadfrom("get_closest_point_to_segment_uncapped", 4172901909).}
  proc pointIsInsideTriangle*(self: Geometry2D; point: Vector2; a: Vector2; b: Vector2; c: Vector2): Bool {.loadfrom("point_is_inside_triangle", 1025948137).}
  proc isPolygonClockwise*(self: Geometry2D; polygon: PackedVector2Array): Bool {.loadfrom("is_polygon_clockwise", 1361156557).}
  proc isPointInPolygon*(self: Geometry2D; point: Vector2; polygon: PackedVector2Array): Bool {.loadfrom("is_point_in_polygon", 738277916).}
  proc triangulatePolygon*(self: Geometry2D; polygon: PackedVector2Array): PackedInt32Array {.loadfrom("triangulate_polygon", 1389921771).}
  proc triangulateDelaunay*(self: Geometry2D; points: PackedVector2Array): PackedInt32Array {.loadfrom("triangulate_delaunay", 1389921771).}
  proc convexHull*(self: Geometry2D; points: PackedVector2Array): PackedVector2Array {.loadfrom("convex_hull", 2004331998).}
  proc decomposePolygonInConvex*(self: Geometry2D; polygon: PackedVector2Array): TypedArray[PackedVector2Array] {.loadfrom("decompose_polygon_in_convex", 3982393695).}
  proc mergePolygons*(self: Geometry2D; polygonA: PackedVector2Array; polygonB: PackedVector2Array): TypedArray[PackedVector2Array] {.loadfrom("merge_polygons", 3637387053).}
  proc clipPolygons*(self: Geometry2D; polygonA: PackedVector2Array; polygonB: PackedVector2Array): TypedArray[PackedVector2Array] {.loadfrom("clip_polygons", 3637387053).}
  proc intersectPolygons*(self: Geometry2D; polygonA: PackedVector2Array; polygonB: PackedVector2Array): TypedArray[PackedVector2Array] {.loadfrom("intersect_polygons", 3637387053).}
  proc excludePolygons*(self: Geometry2D; polygonA: PackedVector2Array; polygonB: PackedVector2Array): TypedArray[PackedVector2Array] {.loadfrom("exclude_polygons", 3637387053).}
  proc clipPolylineWithPolygon*(self: Geometry2D; polyline: PackedVector2Array; polygon: PackedVector2Array): TypedArray[PackedVector2Array] {.loadfrom("clip_polyline_with_polygon", 3637387053).}
  proc intersectPolylineWithPolygon*(self: Geometry2D; polyline: PackedVector2Array; polygon: PackedVector2Array): TypedArray[PackedVector2Array] {.loadfrom("intersect_polyline_with_polygon", 3637387053).}
  proc offsetPolygon*(self: Geometry2D; polygon: PackedVector2Array; delta: Float; joinType: Geometry2D|>PolyJoinType = joinSquare): TypedArray[PackedVector2Array] {.loadfrom("offset_polygon", 3837618924).}
  proc offsetPolyline*(self: Geometry2D; polyline: PackedVector2Array; delta: Float; joinType: Geometry2D|>PolyJoinType = joinSquare; endType: Geometry2D|>PolyEndType = endSquare): TypedArray[PackedVector2Array] {.loadfrom("offset_polyline", 328033063).}
  proc makeAtlas*(self: Geometry2D; sizes: PackedVector2Array): Dictionary {.loadfrom("make_atlas", 1337682371).}

# Geometry3D
define_godot_engine_class_essencials(Geometry3D, Object)
Geometry3D.memberProcs:
  proc buildBoxPlanes*(self: Geometry3D; extents: Vector3): TypedArray[Plane] {.loadfrom("build_box_planes", 3622277145).}
  proc buildCylinderPlanes*(self: Geometry3D; radius: Float; height: Float; sides: int32; axis: Vector3|>Axis = axisZ): TypedArray[Plane] {.loadfrom("build_cylinder_planes", 3142160516).}
  proc buildCapsulePlanes*(self: Geometry3D; radius: Float; height: Float; sides: int32; lats: int32; axis: Vector3|>Axis = axisZ): TypedArray[Plane] {.loadfrom("build_capsule_planes", 410870045).}
  proc getClosestPointsBetweenSegments*(self: Geometry3D; p1: Vector3; p2: Vector3; q1: Vector3; q2: Vector3): PackedVector3Array {.loadfrom("get_closest_points_between_segments", 1056373962).}
  proc getClosestPointToSegment*(self: Geometry3D; point: Vector3; s1: Vector3; s2: Vector3): Vector3 {.loadfrom("get_closest_point_to_segment", 2168193209).}
  proc getClosestPointToSegmentUncapped*(self: Geometry3D; point: Vector3; s1: Vector3; s2: Vector3): Vector3 {.loadfrom("get_closest_point_to_segment_uncapped", 2168193209).}
  proc rayIntersectsTriangle*(self: Geometry3D; `from`: Vector3; dir: Vector3; a: Vector3; b: Vector3; c: Vector3): Variant {.loadfrom("ray_intersects_triangle", 1718655448).}
  proc segmentIntersectsTriangle*(self: Geometry3D; `from`: Vector3; to: Vector3; a: Vector3; b: Vector3; c: Vector3): Variant {.loadfrom("segment_intersects_triangle", 1718655448).}
  proc segmentIntersectsSphere*(self: Geometry3D; `from`: Vector3; to: Vector3; spherePosition: Vector3; sphereRadius: Float): PackedVector3Array {.loadfrom("segment_intersects_sphere", 4080141172).}
  proc segmentIntersectsCylinder*(self: Geometry3D; `from`: Vector3; to: Vector3; height: Float; radius: Float): PackedVector3Array {.loadfrom("segment_intersects_cylinder", 2361316491).}
  proc segmentIntersectsConvex*(self: Geometry3D; `from`: Vector3; to: Vector3; planes: TypedArray[Plane]): PackedVector3Array {.loadfrom("segment_intersects_convex", 537425332).}
  proc clipPolygon*(self: Geometry3D; points: PackedVector3Array; plane: Plane): PackedVector3Array {.loadfrom("clip_polygon", 2603188319).}

# IP
define_godot_engine_class_essencials(IP, Object)
IP.memberProcs:
  proc resolveHostname*(self: IP; host: String; ipType: IP|>Type = typeAny): String {.loadfrom("resolve_hostname", 396864159).}
  proc resolveHostnameAddresses*(self: IP; host: String; ipType: IP|>Type = typeAny): PackedStringArray {.loadfrom("resolve_hostname_addresses", 3462780090).}
  proc resolveHostnameQueueItem*(self: IP; host: String; ipType: IP|>Type = typeAny): int32 {.loadfrom("resolve_hostname_queue_item", 3936392508).}
  proc getResolveItemStatus*(self: IP; id: int32): IP|>ResolverStatus {.loadfrom("get_resolve_item_status", 3812250196).}
  proc getResolveItemAddress*(self: IP; id: int32): String {.loadfrom("get_resolve_item_address", 844755477).}
  proc getResolveItemAddresses*(self: IP; id: int32): Array {.loadfrom("get_resolve_item_addresses", 663333327).}
  proc eraseResolveItem*(self: IP; id: int32) {.loadfrom("erase_resolve_item", 1286410249).}
  proc getLocalAddresses*(self: IP): PackedStringArray {.loadfrom("get_local_addresses", 1139954409).}
  proc getLocalInterfaces*(self: IP): TypedArray[Dictionary] {.loadfrom("get_local_interfaces", 3995934104).}
  proc clearCache*(self: IP; hostname: String = "") {.loadfrom("clear_cache", 3005725572).}

# Input
define_godot_engine_class_essencials(Input, Object)
Input.memberProcs:
  proc isAnythingPressed*(self: Input): Bool {.loadfrom("is_anything_pressed", 36873697).}
  proc isKeyPressed*(self: Input; keycode: Key): Bool {.loadfrom("is_key_pressed", 1938909964).}
  proc isPhysicalKeyPressed*(self: Input; keycode: Key): Bool {.loadfrom("is_physical_key_pressed", 1938909964).}
  proc isKeyLabelPressed*(self: Input; keycode: Key): Bool {.loadfrom("is_key_label_pressed", 1938909964).}
  proc isMouseButtonPressed*(self: Input; button: MouseButton): Bool {.loadfrom("is_mouse_button_pressed", 1821097125).}
  proc isJoyButtonPressed*(self: Input; device: int32; button: JoyButton): Bool {.loadfrom("is_joy_button_pressed", 787208542).}
  proc isActionPressed*(self: Input; action: StringName; exactMatch: Bool = false): Bool {.loadfrom("is_action_pressed", 1558498928).}
  proc isActionJustPressed*(self: Input; action: StringName; exactMatch: Bool = false): Bool {.loadfrom("is_action_just_pressed", 1558498928).}
  proc isActionJustReleased*(self: Input; action: StringName; exactMatch: Bool = false): Bool {.loadfrom("is_action_just_released", 1558498928).}
  proc getActionStrength*(self: Input; action: StringName; exactMatch: Bool = false): Float {.loadfrom("get_action_strength", 801543509).}
  proc getActionRawStrength*(self: Input; action: StringName; exactMatch: Bool = false): Float {.loadfrom("get_action_raw_strength", 801543509).}
  proc getAxis*(self: Input; negativeAction: StringName; positiveAction: StringName): Float {.loadfrom("get_axis", 1958752504).}
  proc getVector*(self: Input; negativeX: StringName; positiveX: StringName; negativeY: StringName; positiveY: StringName; deadzone: Float = -1.0): Vector2 {.loadfrom("get_vector", 1517139831).}
  proc addJoyMapping*(self: Input; mapping: String; updateExisting: Bool = false) {.loadfrom("add_joy_mapping", 1168363258).}
  proc removeJoyMapping*(self: Input; guid: String) {.loadfrom("remove_joy_mapping", 83702148).}
  proc isJoyKnown*(self: Input; device: int32): Bool {.loadfrom("is_joy_known", 3067735520).}
  proc getJoyAxis*(self: Input; device: int32; axis: JoyAxis): Float {.loadfrom("get_joy_axis", 4063175957).}
  proc getJoyName*(self: Input; device: int32): String {.loadfrom("get_joy_name", 990163283).}
  proc getJoyGuid*(self: Input; device: int32): String {.loadfrom("get_joy_guid", 844755477).}
  proc getConnectedJoypads*(self: Input): TypedArray[Int] {.loadfrom("get_connected_joypads", 2915620761).}
  proc getJoyVibrationStrength*(self: Input; device: int32): Vector2 {.loadfrom("get_joy_vibration_strength", 3114997196).}
  proc getJoyVibrationDuration*(self: Input; device: int32): Float {.loadfrom("get_joy_vibration_duration", 4025615559).}
  proc startJoyVibration*(self: Input; device: int32; weakMagnitude: Float; strongMagnitude: Float; duration: Float = 0) {.loadfrom("start_joy_vibration", 1890603622).}
  proc stopJoyVibration*(self: Input; device: int32) {.loadfrom("stop_joy_vibration", 1286410249).}
  proc vibrateHandheld*(self: Input; durationMs: int32 = 500) {.loadfrom("vibrate_handheld", 955504365).}
  proc getGravity*(self: Input): Vector3 {.loadfrom("get_gravity", 3360562783).}
  proc getAccelerometer*(self: Input): Vector3 {.loadfrom("get_accelerometer", 3360562783).}
  proc getMagnetometer*(self: Input): Vector3 {.loadfrom("get_magnetometer", 3360562783).}
  proc getGyroscope*(self: Input): Vector3 {.loadfrom("get_gyroscope", 3360562783).}
  proc setGravity*(self: Input; value: Vector3) {.loadfrom("set_gravity", 3460891852).}
  proc setAccelerometer*(self: Input; value: Vector3) {.loadfrom("set_accelerometer", 3460891852).}
  proc setMagnetometer*(self: Input; value: Vector3) {.loadfrom("set_magnetometer", 3460891852).}
  proc setGyroscope*(self: Input; value: Vector3) {.loadfrom("set_gyroscope", 3460891852).}
  proc getLastMouseVelocity*(self: Input): Vector2 {.loadfrom("get_last_mouse_velocity", 1497962370).}
  proc getMouseButtonMask*(self: Input): set[MouseButtonMask] {.loadfrom("get_mouse_button_mask", 2512161324).}
  proc `mouseMode=`*(self: Input; mode: Input|>MouseMode) {.loadfrom("set_mouse_mode", 2228490894).}
  proc mouseMode*(self: Input): Input|>MouseMode {.loadfrom("get_mouse_mode", 965286182).}
  proc warpMouse*(self: Input; position: Vector2) {.loadfrom("warp_mouse", 743155724).}
  proc actionPress*(self: Input; action: StringName; strength: Float = 1.0) {.loadfrom("action_press", 573731101).}
  proc actionRelease*(self: Input; action: StringName) {.loadfrom("action_release", 3304788590).}
  proc setDefaultCursorShape*(self: Input; shape: Input|>CursorShape = cursorArrow) {.loadfrom("set_default_cursor_shape", 2124816902).}
  proc getCurrentCursorShape*(self: Input): Input|>CursorShape {.loadfrom("get_current_cursor_shape", 3455658929).}
  proc setCustomMouseCursor*(self: Input; image: Ref[Resource]; shape: Input|>CursorShape = cursorArrow; hotspot: Vector2 = gdvec(0, 0)) {.loadfrom("set_custom_mouse_cursor", 3489634142).}
  proc parseInputEvent*(self: Input; event: Ref[InputEvent]) {.loadfrom("parse_input_event", 3754044979).}
  proc `useAccumulatedInput=`*(self: Input; enable: Bool) {.loadfrom("set_use_accumulated_input", 2586408642).}
  proc isUsingAccumulatedInput*(self: Input): Bool {.loadfrom("is_using_accumulated_input", 2240911060).}
  proc flushBufferedEvents*(self: Input) {.loadfrom("flush_buffered_events", 3218959716).}

# InputMap
define_godot_engine_class_essencials(InputMap, Object)
InputMap.memberProcs:
  proc hasAction*(self: InputMap; action: StringName): Bool {.loadfrom("has_action", 2619796661).}
  proc getActions*(self: InputMap): TypedArray[StringName] {.loadfrom("get_actions", 2915620761).}
  proc addAction*(self: InputMap; action: StringName; deadzone: Float = 0.5) {.loadfrom("add_action", 573731101).}
  proc eraseAction*(self: InputMap; action: StringName) {.loadfrom("erase_action", 3304788590).}
  proc actionSetDeadzone*(self: InputMap; action: StringName; deadzone: Float) {.loadfrom("action_set_deadzone", 4135858297).}
  proc actionGetDeadzone*(self: InputMap; action: StringName): Float {.loadfrom("action_get_deadzone", 1391627649).}
  proc actionAddEvent*(self: InputMap; action: StringName; event: Ref[InputEvent]) {.loadfrom("action_add_event", 518302593).}
  proc actionHasEvent*(self: InputMap; action: StringName; event: Ref[InputEvent]): Bool {.loadfrom("action_has_event", 1185871985).}
  proc actionEraseEvent*(self: InputMap; action: StringName; event: Ref[InputEvent]) {.loadfrom("action_erase_event", 518302593).}
  proc actionEraseEvents*(self: InputMap; action: StringName) {.loadfrom("action_erase_events", 3304788590).}
  proc actionGetEvents*(self: InputMap; action: StringName): TypedArray[InputEvent] {.loadfrom("action_get_events", 689397652).}
  proc eventIsAction*(self: InputMap; event: Ref[InputEvent]; action: StringName; exactMatch: Bool = false): Bool {.loadfrom("event_is_action", 3193353650).}
  proc loadFromProjectSettings*(self: InputMap) {.loadfrom("load_from_project_settings", 3218959716).}

# JNISingleton
define_godot_engine_class_essencials(JNISingleton, Object)

# JSONRPC
define_godot_engine_class_essencials(JSONRPC, Object)
JSONRPC.memberProcs:
  proc setScope*(self: JSONRPC; scope: String; target: ptr Object) {.loadfrom("set_scope", 2572618360).}
  proc processAction*(self: JSONRPC; action: ptr Variant; recurse: Bool = false): Variant {.loadfrom("process_action", 2963479484).}
  proc processString*(self: JSONRPC; action: String): String {.loadfrom("process_string", 1703090593).}
  proc makeRequest*(self: JSONRPC; `method`: String; params: ptr Variant; id: ptr Variant): Dictionary {.loadfrom("make_request", 3423508980).}
  proc makeResponse*(self: JSONRPC; retval: ptr Variant; id: ptr Variant): Dictionary {.loadfrom("make_response", 5053918).}
  proc makeNotification*(self: JSONRPC; `method`: String; params: ptr Variant): Dictionary {.loadfrom("make_notification", 2949127017).}
  proc makeResponseError*(self: JSONRPC; code: int32; message: String; id: ptr Variant = nil): Dictionary {.loadfrom("make_response_error", 928596297).}

# JavaClassWrapper
define_godot_engine_class_essencials(JavaClassWrapper, Object)
JavaClassWrapper.memberProcs:
  proc wrap*(self: JavaClassWrapper; name: String): Ref[JavaClass] {.loadfrom("wrap", 1124367868).}

# JavaScriptBridge
define_godot_engine_class_essencials(JavaScriptBridge, Object)
JavaScriptBridge.memberProcs:
  proc eval*(self: JavaScriptBridge; code: String; useGlobalExecutionContext: Bool = false): Variant {.loadfrom("eval", 218087648).}
  proc getInterface*(self: JavaScriptBridge; `interface`: String): Ref[JavaScriptObject] {.loadfrom("get_interface", 1355533281).}
  proc createCallback*(self: JavaScriptBridge; callable: Callable): Ref[JavaScriptObject] {.loadfrom("create_callback", 422818440).}
  proc createObject*(self: JavaScriptBridge; `object`: String): Variant {.loadfrom("create_object", 3093893586).}
  proc downloadBuffer*(self: JavaScriptBridge; buffer: PackedByteArray; name: String; mime: String = "application/octet-stream") {.loadfrom("download_buffer", 4123979296).}
  proc pwaNeedsUpdate*(self: JavaScriptBridge): Bool {.loadfrom("pwa_needs_update", 36873697).}
  proc pwaUpdate*(self: JavaScriptBridge): Error {.loadfrom("pwa_update", 166280745).}
  proc forceFsSync*(self: JavaScriptBridge) {.loadfrom("force_fs_sync", 3218959716).}

# MainLoop
define_godot_engine_class_essencials(MainLoop, Object)
method initialize*(self: MainLoop) {.base.} = (discard)
method physicsProcess*(self: MainLoop; delta: float64): Bool {.base.} = (discard)
method process*(self: MainLoop; delta: float64): Bool {.base.} = (discard)
method finalize*(self: MainLoop) {.base.} = (discard)

# Marshalls
define_godot_engine_class_essencials(Marshalls, Object)
Marshalls.memberProcs:
  proc variantToBase64*(self: Marshalls; variant: ptr Variant; fullObjects: Bool = false): String {.loadfrom("variant_to_base64", 3876248563).}
  proc base64ToVariant*(self: Marshalls; base64Str: String; allowObjects: Bool = false): Variant {.loadfrom("base64_to_variant", 218087648).}
  proc rawToBase64*(self: Marshalls; array: PackedByteArray): String {.loadfrom("raw_to_base64", 3999417757).}
  proc base64ToRaw*(self: Marshalls; base64Str: String): PackedByteArray {.loadfrom("base64_to_raw", 659035735).}
  proc utf8ToBase64*(self: Marshalls; utf8Str: String): String {.loadfrom("utf8_to_base64", 1703090593).}
  proc base64ToUtf8*(self: Marshalls; base64Str: String): String {.loadfrom("base64_to_utf8", 1703090593).}

# MovieWriter
define_godot_engine_class_essencials(MovieWriter, Object)
method getAudioMixRate*(self: MovieWriter): uint32 {.base.} = (discard)
method getAudioSpeakerMode*(self: MovieWriter): AudioServer|>SpeakerMode {.base.} = (discard)
method handlesFile*(self: MovieWriter; path: String): Bool {.base.} = (discard)
method writeBegin*(self: MovieWriter; movieSize: Vector2i; fps: uint32; basePath: String): Error {.base.} = (discard)
method writeFrame*(self: MovieWriter; frameImage: Ref[Image]; audioFrameBlock: pointer): Error {.base.} = (discard)
method writeEnd*(self: MovieWriter) {.base.} = (discard)
MovieWriter.memberProcs:
  proc addWriter*(writer: MovieWriter) {.staticOf: MovieWriter, loadfrom("add_writer", 4023702871).}

# NavigationMeshGenerator
define_godot_engine_class_essencials(NavigationMeshGenerator, Object)
NavigationMeshGenerator.memberProcs:
  proc bake*(self: NavigationMeshGenerator; navigationMesh: Ref[NavigationMesh]; rootNode: ptr Node) {.loadfrom("bake", 1401173477).}
  proc clear*(self: NavigationMeshGenerator; navigationMesh: Ref[NavigationMesh]) {.loadfrom("clear", 2923361153).}
  proc parseSourceGeometryData*(self: NavigationMeshGenerator; navigationMesh: Ref[NavigationMesh]; sourceGeometryData: Ref[NavigationMeshSourceGeometryData3D]; rootNode: ptr Node; callback: Callable = Callable|>init()) {.loadfrom("parse_source_geometry_data", 3703028813).}
  proc bakeFromSourceGeometryData*(self: NavigationMeshGenerator; navigationMesh: Ref[NavigationMesh]; sourceGeometryData: Ref[NavigationMeshSourceGeometryData3D]; callback: Callable = Callable|>init()) {.loadfrom("bake_from_source_geometry_data", 3669016597).}

# NavigationServer2D
define_godot_engine_class_essencials(NavigationServer2D, Object)
NavigationServer2D.memberProcs:
  proc getMaps*(self: NavigationServer2D): TypedArray[RID] {.loadfrom("get_maps", 3995934104).}
  proc mapCreate*(self: NavigationServer2D): RID {.loadfrom("map_create", 529393457).}
  proc mapSetActive*(self: NavigationServer2D; map: RID; active: Bool) {.loadfrom("map_set_active", 1265174801).}
  proc mapIsActive*(self: NavigationServer2D; map: RID): Bool {.loadfrom("map_is_active", 4155700596).}
  proc mapSetCellSize*(self: NavigationServer2D; map: RID; cellSize: Float) {.loadfrom("map_set_cell_size", 1794382983).}
  proc mapGetCellSize*(self: NavigationServer2D; map: RID): Float {.loadfrom("map_get_cell_size", 866169185).}
  proc mapSetUseEdgeConnections*(self: NavigationServer2D; map: RID; enabled: Bool) {.loadfrom("map_set_use_edge_connections", 1265174801).}
  proc mapGetUseEdgeConnections*(self: NavigationServer2D; map: RID): Bool {.loadfrom("map_get_use_edge_connections", 4155700596).}
  proc mapSetEdgeConnectionMargin*(self: NavigationServer2D; map: RID; margin: Float) {.loadfrom("map_set_edge_connection_margin", 1794382983).}
  proc mapGetEdgeConnectionMargin*(self: NavigationServer2D; map: RID): Float {.loadfrom("map_get_edge_connection_margin", 866169185).}
  proc mapSetLinkConnectionRadius*(self: NavigationServer2D; map: RID; radius: Float) {.loadfrom("map_set_link_connection_radius", 1794382983).}
  proc mapGetLinkConnectionRadius*(self: NavigationServer2D; map: RID): Float {.loadfrom("map_get_link_connection_radius", 866169185).}
  proc mapGetPath*(self: NavigationServer2D; map: RID; origin: Vector2; destination: Vector2; optimize: Bool; navigationLayers: uint32 = 1'u32): PackedVector2Array {.loadfrom("map_get_path", 56240621).}
  proc mapGetClosestPoint*(self: NavigationServer2D; map: RID; toPoint: Vector2): Vector2 {.loadfrom("map_get_closest_point", 1358334418).}
  proc mapGetClosestPointOwner*(self: NavigationServer2D; map: RID; toPoint: Vector2): RID {.loadfrom("map_get_closest_point_owner", 1353467510).}
  proc mapGetLinks*(self: NavigationServer2D; map: RID): TypedArray[RID] {.loadfrom("map_get_links", 2684255073).}
  proc mapGetRegions*(self: NavigationServer2D; map: RID): TypedArray[RID] {.loadfrom("map_get_regions", 2684255073).}
  proc mapGetAgents*(self: NavigationServer2D; map: RID): TypedArray[RID] {.loadfrom("map_get_agents", 2684255073).}
  proc mapGetObstacles*(self: NavigationServer2D; map: RID): TypedArray[RID] {.loadfrom("map_get_obstacles", 2684255073).}
  proc mapForceUpdate*(self: NavigationServer2D; map: RID) {.loadfrom("map_force_update", 2722037293).}
  proc queryPath*(self: NavigationServer2D; parameters: Ref[NavigationPathQueryParameters2D]; retval: Ref[NavigationPathQueryResult2D]) {.loadfrom("query_path", 3394638789).}
  proc regionCreate*(self: NavigationServer2D): RID {.loadfrom("region_create", 529393457).}
  proc regionSetUseEdgeConnections*(self: NavigationServer2D; region: RID; enabled: Bool) {.loadfrom("region_set_use_edge_connections", 1265174801).}
  proc regionGetUseEdgeConnections*(self: NavigationServer2D; region: RID): Bool {.loadfrom("region_get_use_edge_connections", 4155700596).}
  proc regionSetEnterCost*(self: NavigationServer2D; region: RID; enterCost: Float) {.loadfrom("region_set_enter_cost", 1794382983).}
  proc regionGetEnterCost*(self: NavigationServer2D; region: RID): Float {.loadfrom("region_get_enter_cost", 866169185).}
  proc regionSetTravelCost*(self: NavigationServer2D; region: RID; travelCost: Float) {.loadfrom("region_set_travel_cost", 1794382983).}
  proc regionGetTravelCost*(self: NavigationServer2D; region: RID): Float {.loadfrom("region_get_travel_cost", 866169185).}
  proc regionSetOwnerId*(self: NavigationServer2D; region: RID; ownerId: uint64) {.loadfrom("region_set_owner_id", 3411492887).}
  proc regionGetOwnerId*(self: NavigationServer2D; region: RID): uint64 {.loadfrom("region_get_owner_id", 2198884583).}
  proc regionOwnsPoint*(self: NavigationServer2D; region: RID; point: Vector2): Bool {.loadfrom("region_owns_point", 219849798).}
  proc regionSetMap*(self: NavigationServer2D; region: RID; map: RID) {.loadfrom("region_set_map", 395945892).}
  proc regionGetMap*(self: NavigationServer2D; region: RID): RID {.loadfrom("region_get_map", 3814569979).}
  proc regionSetNavigationLayers*(self: NavigationServer2D; region: RID; navigationLayers: uint32) {.loadfrom("region_set_navigation_layers", 3411492887).}
  proc regionGetNavigationLayers*(self: NavigationServer2D; region: RID): uint32 {.loadfrom("region_get_navigation_layers", 2198884583).}
  proc regionSetTransform*(self: NavigationServer2D; region: RID; transform: Transform2D) {.loadfrom("region_set_transform", 1246044741).}
  proc regionSetNavigationPolygon*(self: NavigationServer2D; region: RID; navigationPolygon: Ref[NavigationPolygon]) {.loadfrom("region_set_navigation_polygon", 3633623451).}
  proc regionGetConnectionsCount*(self: NavigationServer2D; region: RID): int32 {.loadfrom("region_get_connections_count", 2198884583).}
  proc regionGetConnectionPathwayStart*(self: NavigationServer2D; region: RID; connection: int32): Vector2 {.loadfrom("region_get_connection_pathway_start", 2546185844).}
  proc regionGetConnectionPathwayEnd*(self: NavigationServer2D; region: RID; connection: int32): Vector2 {.loadfrom("region_get_connection_pathway_end", 2546185844).}
  proc linkCreate*(self: NavigationServer2D): RID {.loadfrom("link_create", 529393457).}
  proc linkSetMap*(self: NavigationServer2D; link: RID; map: RID) {.loadfrom("link_set_map", 395945892).}
  proc linkGetMap*(self: NavigationServer2D; link: RID): RID {.loadfrom("link_get_map", 3814569979).}
  proc linkSetBidirectional*(self: NavigationServer2D; link: RID; bidirectional: Bool) {.loadfrom("link_set_bidirectional", 1265174801).}
  proc linkIsBidirectional*(self: NavigationServer2D; link: RID): Bool {.loadfrom("link_is_bidirectional", 4155700596).}
  proc linkSetNavigationLayers*(self: NavigationServer2D; link: RID; navigationLayers: uint32) {.loadfrom("link_set_navigation_layers", 3411492887).}
  proc linkGetNavigationLayers*(self: NavigationServer2D; link: RID): uint32 {.loadfrom("link_get_navigation_layers", 2198884583).}
  proc linkSetStartPosition*(self: NavigationServer2D; link: RID; position: Vector2) {.loadfrom("link_set_start_position", 3201125042).}
  proc linkGetStartPosition*(self: NavigationServer2D; link: RID): Vector2 {.loadfrom("link_get_start_position", 2440833711).}
  proc linkSetEndPosition*(self: NavigationServer2D; link: RID; position: Vector2) {.loadfrom("link_set_end_position", 3201125042).}
  proc linkGetEndPosition*(self: NavigationServer2D; link: RID): Vector2 {.loadfrom("link_get_end_position", 2440833711).}
  proc linkSetEnterCost*(self: NavigationServer2D; link: RID; enterCost: Float) {.loadfrom("link_set_enter_cost", 1794382983).}
  proc linkGetEnterCost*(self: NavigationServer2D; link: RID): Float {.loadfrom("link_get_enter_cost", 866169185).}
  proc linkSetTravelCost*(self: NavigationServer2D; link: RID; travelCost: Float) {.loadfrom("link_set_travel_cost", 1794382983).}
  proc linkGetTravelCost*(self: NavigationServer2D; link: RID): Float {.loadfrom("link_get_travel_cost", 866169185).}
  proc linkSetOwnerId*(self: NavigationServer2D; link: RID; ownerId: uint64) {.loadfrom("link_set_owner_id", 3411492887).}
  proc linkGetOwnerId*(self: NavigationServer2D; link: RID): uint64 {.loadfrom("link_get_owner_id", 2198884583).}
  proc agentCreate*(self: NavigationServer2D): RID {.loadfrom("agent_create", 529393457).}
  proc agentSetAvoidanceEnabled*(self: NavigationServer2D; agent: RID; enabled: Bool) {.loadfrom("agent_set_avoidance_enabled", 1265174801).}
  proc agentGetAvoidanceEnabled*(self: NavigationServer2D; agent: RID): Bool {.loadfrom("agent_get_avoidance_enabled", 4155700596).}
  proc agentSetMap*(self: NavigationServer2D; agent: RID; map: RID) {.loadfrom("agent_set_map", 395945892).}
  proc agentGetMap*(self: NavigationServer2D; agent: RID): RID {.loadfrom("agent_get_map", 3814569979).}
  proc agentSetPaused*(self: NavigationServer2D; agent: RID; paused: Bool) {.loadfrom("agent_set_paused", 1265174801).}
  proc agentGetPaused*(self: NavigationServer2D; agent: RID): Bool {.loadfrom("agent_get_paused", 4155700596).}
  proc agentSetNeighborDistance*(self: NavigationServer2D; agent: RID; distance: Float) {.loadfrom("agent_set_neighbor_distance", 1794382983).}
  proc agentSetMaxNeighbors*(self: NavigationServer2D; agent: RID; count: int32) {.loadfrom("agent_set_max_neighbors", 3411492887).}
  proc agentSetTimeHorizonAgents*(self: NavigationServer2D; agent: RID; timeHorizon: Float) {.loadfrom("agent_set_time_horizon_agents", 1794382983).}
  proc agentSetTimeHorizonObstacles*(self: NavigationServer2D; agent: RID; timeHorizon: Float) {.loadfrom("agent_set_time_horizon_obstacles", 1794382983).}
  proc agentSetRadius*(self: NavigationServer2D; agent: RID; radius: Float) {.loadfrom("agent_set_radius", 1794382983).}
  proc agentSetMaxSpeed*(self: NavigationServer2D; agent: RID; maxSpeed: Float) {.loadfrom("agent_set_max_speed", 1794382983).}
  proc agentSetVelocityForced*(self: NavigationServer2D; agent: RID; velocity: Vector2) {.loadfrom("agent_set_velocity_forced", 3201125042).}
  proc agentSetVelocity*(self: NavigationServer2D; agent: RID; velocity: Vector2) {.loadfrom("agent_set_velocity", 3201125042).}
  proc agentSetPosition*(self: NavigationServer2D; agent: RID; position: Vector2) {.loadfrom("agent_set_position", 3201125042).}
  proc agentIsMapChanged*(self: NavigationServer2D; agent: RID): Bool {.loadfrom("agent_is_map_changed", 4155700596).}
  proc agentSetAvoidanceCallback*(self: NavigationServer2D; agent: RID; callback: Callable) {.loadfrom("agent_set_avoidance_callback", 3379118538).}
  proc agentSetAvoidanceLayers*(self: NavigationServer2D; agent: RID; layers: uint32) {.loadfrom("agent_set_avoidance_layers", 3411492887).}
  proc agentSetAvoidanceMask*(self: NavigationServer2D; agent: RID; mask: uint32) {.loadfrom("agent_set_avoidance_mask", 3411492887).}
  proc agentSetAvoidancePriority*(self: NavigationServer2D; agent: RID; priority: Float) {.loadfrom("agent_set_avoidance_priority", 1794382983).}
  proc obstacleCreate*(self: NavigationServer2D): RID {.loadfrom("obstacle_create", 529393457).}
  proc obstacleSetAvoidanceEnabled*(self: NavigationServer2D; obstacle: RID; enabled: Bool) {.loadfrom("obstacle_set_avoidance_enabled", 1265174801).}
  proc obstacleGetAvoidanceEnabled*(self: NavigationServer2D; obstacle: RID): Bool {.loadfrom("obstacle_get_avoidance_enabled", 4155700596).}
  proc obstacleSetMap*(self: NavigationServer2D; obstacle: RID; map: RID) {.loadfrom("obstacle_set_map", 395945892).}
  proc obstacleGetMap*(self: NavigationServer2D; obstacle: RID): RID {.loadfrom("obstacle_get_map", 3814569979).}
  proc obstacleSetPaused*(self: NavigationServer2D; obstacle: RID; paused: Bool) {.loadfrom("obstacle_set_paused", 1265174801).}
  proc obstacleGetPaused*(self: NavigationServer2D; obstacle: RID): Bool {.loadfrom("obstacle_get_paused", 4155700596).}
  proc obstacleSetRadius*(self: NavigationServer2D; obstacle: RID; radius: Float) {.loadfrom("obstacle_set_radius", 1794382983).}
  proc obstacleSetVelocity*(self: NavigationServer2D; obstacle: RID; velocity: Vector2) {.loadfrom("obstacle_set_velocity", 3201125042).}
  proc obstacleSetPosition*(self: NavigationServer2D; obstacle: RID; position: Vector2) {.loadfrom("obstacle_set_position", 3201125042).}
  proc obstacleSetVertices*(self: NavigationServer2D; obstacle: RID; vertices: PackedVector2Array) {.loadfrom("obstacle_set_vertices", 29476483).}
  proc obstacleSetAvoidanceLayers*(self: NavigationServer2D; obstacle: RID; layers: uint32) {.loadfrom("obstacle_set_avoidance_layers", 3411492887).}
  proc freeRid*(self: NavigationServer2D; rid: RID) {.loadfrom("free_rid", 2722037293).}
  proc setDebugEnabled*(self: NavigationServer2D; enabled: Bool) {.loadfrom("set_debug_enabled", 2586408642).}
  proc getDebugEnabled*(self: NavigationServer2D): Bool {.loadfrom("get_debug_enabled", 36873697).}

# NavigationServer3D
define_godot_engine_class_essencials(NavigationServer3D, Object)
NavigationServer3D.memberProcs:
  proc getMaps*(self: NavigationServer3D): TypedArray[RID] {.loadfrom("get_maps", 3995934104).}
  proc mapCreate*(self: NavigationServer3D): RID {.loadfrom("map_create", 529393457).}
  proc mapSetActive*(self: NavigationServer3D; map: RID; active: Bool) {.loadfrom("map_set_active", 1265174801).}
  proc mapIsActive*(self: NavigationServer3D; map: RID): Bool {.loadfrom("map_is_active", 4155700596).}
  proc mapSetUp*(self: NavigationServer3D; map: RID; up: Vector3) {.loadfrom("map_set_up", 3227306858).}
  proc mapGetUp*(self: NavigationServer3D; map: RID): Vector3 {.loadfrom("map_get_up", 531438156).}
  proc mapSetCellSize*(self: NavigationServer3D; map: RID; cellSize: Float) {.loadfrom("map_set_cell_size", 1794382983).}
  proc mapGetCellSize*(self: NavigationServer3D; map: RID): Float {.loadfrom("map_get_cell_size", 866169185).}
  proc mapSetCellHeight*(self: NavigationServer3D; map: RID; cellHeight: Float) {.loadfrom("map_set_cell_height", 1794382983).}
  proc mapGetCellHeight*(self: NavigationServer3D; map: RID): Float {.loadfrom("map_get_cell_height", 866169185).}
  proc mapSetUseEdgeConnections*(self: NavigationServer3D; map: RID; enabled: Bool) {.loadfrom("map_set_use_edge_connections", 1265174801).}
  proc mapGetUseEdgeConnections*(self: NavigationServer3D; map: RID): Bool {.loadfrom("map_get_use_edge_connections", 4155700596).}
  proc mapSetEdgeConnectionMargin*(self: NavigationServer3D; map: RID; margin: Float) {.loadfrom("map_set_edge_connection_margin", 1794382983).}
  proc mapGetEdgeConnectionMargin*(self: NavigationServer3D; map: RID): Float {.loadfrom("map_get_edge_connection_margin", 866169185).}
  proc mapSetLinkConnectionRadius*(self: NavigationServer3D; map: RID; radius: Float) {.loadfrom("map_set_link_connection_radius", 1794382983).}
  proc mapGetLinkConnectionRadius*(self: NavigationServer3D; map: RID): Float {.loadfrom("map_get_link_connection_radius", 866169185).}
  proc mapGetPath*(self: NavigationServer3D; map: RID; origin: Vector3; destination: Vector3; optimize: Bool; navigationLayers: uint32 = 1'u32): PackedVector3Array {.loadfrom("map_get_path", 2121045993).}
  proc mapGetClosestPointToSegment*(self: NavigationServer3D; map: RID; start: Vector3; `end`: Vector3; useCollision: Bool = false): Vector3 {.loadfrom("map_get_closest_point_to_segment", 3830095642).}
  proc mapGetClosestPoint*(self: NavigationServer3D; map: RID; toPoint: Vector3): Vector3 {.loadfrom("map_get_closest_point", 2056183332).}
  proc mapGetClosestPointNormal*(self: NavigationServer3D; map: RID; toPoint: Vector3): Vector3 {.loadfrom("map_get_closest_point_normal", 2056183332).}
  proc mapGetClosestPointOwner*(self: NavigationServer3D; map: RID; toPoint: Vector3): RID {.loadfrom("map_get_closest_point_owner", 553364610).}
  proc mapGetLinks*(self: NavigationServer3D; map: RID): TypedArray[RID] {.loadfrom("map_get_links", 2684255073).}
  proc mapGetRegions*(self: NavigationServer3D; map: RID): TypedArray[RID] {.loadfrom("map_get_regions", 2684255073).}
  proc mapGetAgents*(self: NavigationServer3D; map: RID): TypedArray[RID] {.loadfrom("map_get_agents", 2684255073).}
  proc mapGetObstacles*(self: NavigationServer3D; map: RID): TypedArray[RID] {.loadfrom("map_get_obstacles", 2684255073).}
  proc mapForceUpdate*(self: NavigationServer3D; map: RID) {.loadfrom("map_force_update", 2722037293).}
  proc queryPath*(self: NavigationServer3D; parameters: Ref[NavigationPathQueryParameters3D]; retval: Ref[NavigationPathQueryResult3D]) {.loadfrom("query_path", 3415008901).}
  proc regionCreate*(self: NavigationServer3D): RID {.loadfrom("region_create", 529393457).}
  proc regionSetUseEdgeConnections*(self: NavigationServer3D; region: RID; enabled: Bool) {.loadfrom("region_set_use_edge_connections", 1265174801).}
  proc regionGetUseEdgeConnections*(self: NavigationServer3D; region: RID): Bool {.loadfrom("region_get_use_edge_connections", 4155700596).}
  proc regionSetEnterCost*(self: NavigationServer3D; region: RID; enterCost: Float) {.loadfrom("region_set_enter_cost", 1794382983).}
  proc regionGetEnterCost*(self: NavigationServer3D; region: RID): Float {.loadfrom("region_get_enter_cost", 866169185).}
  proc regionSetTravelCost*(self: NavigationServer3D; region: RID; travelCost: Float) {.loadfrom("region_set_travel_cost", 1794382983).}
  proc regionGetTravelCost*(self: NavigationServer3D; region: RID): Float {.loadfrom("region_get_travel_cost", 866169185).}
  proc regionSetOwnerId*(self: NavigationServer3D; region: RID; ownerId: uint64) {.loadfrom("region_set_owner_id", 3411492887).}
  proc regionGetOwnerId*(self: NavigationServer3D; region: RID): uint64 {.loadfrom("region_get_owner_id", 2198884583).}
  proc regionOwnsPoint*(self: NavigationServer3D; region: RID; point: Vector3): Bool {.loadfrom("region_owns_point", 2360011153).}
  proc regionSetMap*(self: NavigationServer3D; region: RID; map: RID) {.loadfrom("region_set_map", 395945892).}
  proc regionGetMap*(self: NavigationServer3D; region: RID): RID {.loadfrom("region_get_map", 3814569979).}
  proc regionSetNavigationLayers*(self: NavigationServer3D; region: RID; navigationLayers: uint32) {.loadfrom("region_set_navigation_layers", 3411492887).}
  proc regionGetNavigationLayers*(self: NavigationServer3D; region: RID): uint32 {.loadfrom("region_get_navigation_layers", 2198884583).}
  proc regionSetTransform*(self: NavigationServer3D; region: RID; transform: Transform3D) {.loadfrom("region_set_transform", 3935195649).}
  proc regionSetNavigationMesh*(self: NavigationServer3D; region: RID; navigationMesh: Ref[NavigationMesh]) {.loadfrom("region_set_navigation_mesh", 2764952978).}
  proc regionBakeNavigationMesh*(self: NavigationServer3D; navigationMesh: Ref[NavigationMesh]; rootNode: ptr Node) {.loadfrom("region_bake_navigation_mesh", 1401173477).}
  proc regionGetConnectionsCount*(self: NavigationServer3D; region: RID): int32 {.loadfrom("region_get_connections_count", 2198884583).}
  proc regionGetConnectionPathwayStart*(self: NavigationServer3D; region: RID; connection: int32): Vector3 {.loadfrom("region_get_connection_pathway_start", 3440143363).}
  proc regionGetConnectionPathwayEnd*(self: NavigationServer3D; region: RID; connection: int32): Vector3 {.loadfrom("region_get_connection_pathway_end", 3440143363).}
  proc linkCreate*(self: NavigationServer3D): RID {.loadfrom("link_create", 529393457).}
  proc linkSetMap*(self: NavigationServer3D; link: RID; map: RID) {.loadfrom("link_set_map", 395945892).}
  proc linkGetMap*(self: NavigationServer3D; link: RID): RID {.loadfrom("link_get_map", 3814569979).}
  proc linkSetBidirectional*(self: NavigationServer3D; link: RID; bidirectional: Bool) {.loadfrom("link_set_bidirectional", 1265174801).}
  proc linkIsBidirectional*(self: NavigationServer3D; link: RID): Bool {.loadfrom("link_is_bidirectional", 4155700596).}
  proc linkSetNavigationLayers*(self: NavigationServer3D; link: RID; navigationLayers: uint32) {.loadfrom("link_set_navigation_layers", 3411492887).}
  proc linkGetNavigationLayers*(self: NavigationServer3D; link: RID): uint32 {.loadfrom("link_get_navigation_layers", 2198884583).}
  proc linkSetStartPosition*(self: NavigationServer3D; link: RID; position: Vector3) {.loadfrom("link_set_start_position", 3227306858).}
  proc linkGetStartPosition*(self: NavigationServer3D; link: RID): Vector3 {.loadfrom("link_get_start_position", 531438156).}
  proc linkSetEndPosition*(self: NavigationServer3D; link: RID; position: Vector3) {.loadfrom("link_set_end_position", 3227306858).}
  proc linkGetEndPosition*(self: NavigationServer3D; link: RID): Vector3 {.loadfrom("link_get_end_position", 531438156).}
  proc linkSetEnterCost*(self: NavigationServer3D; link: RID; enterCost: Float) {.loadfrom("link_set_enter_cost", 1794382983).}
  proc linkGetEnterCost*(self: NavigationServer3D; link: RID): Float {.loadfrom("link_get_enter_cost", 866169185).}
  proc linkSetTravelCost*(self: NavigationServer3D; link: RID; travelCost: Float) {.loadfrom("link_set_travel_cost", 1794382983).}
  proc linkGetTravelCost*(self: NavigationServer3D; link: RID): Float {.loadfrom("link_get_travel_cost", 866169185).}
  proc linkSetOwnerId*(self: NavigationServer3D; link: RID; ownerId: uint64) {.loadfrom("link_set_owner_id", 3411492887).}
  proc linkGetOwnerId*(self: NavigationServer3D; link: RID): uint64 {.loadfrom("link_get_owner_id", 2198884583).}
  proc agentCreate*(self: NavigationServer3D): RID {.loadfrom("agent_create", 529393457).}
  proc agentSetAvoidanceEnabled*(self: NavigationServer3D; agent: RID; enabled: Bool) {.loadfrom("agent_set_avoidance_enabled", 1265174801).}
  proc agentGetAvoidanceEnabled*(self: NavigationServer3D; agent: RID): Bool {.loadfrom("agent_get_avoidance_enabled", 4155700596).}
  proc agentSetUse3dAvoidance*(self: NavigationServer3D; agent: RID; enabled: Bool) {.loadfrom("agent_set_use_3d_avoidance", 1265174801).}
  proc agentGetUse3dAvoidance*(self: NavigationServer3D; agent: RID): Bool {.loadfrom("agent_get_use_3d_avoidance", 4155700596).}
  proc agentSetMap*(self: NavigationServer3D; agent: RID; map: RID) {.loadfrom("agent_set_map", 395945892).}
  proc agentGetMap*(self: NavigationServer3D; agent: RID): RID {.loadfrom("agent_get_map", 3814569979).}
  proc agentSetPaused*(self: NavigationServer3D; agent: RID; paused: Bool) {.loadfrom("agent_set_paused", 1265174801).}
  proc agentGetPaused*(self: NavigationServer3D; agent: RID): Bool {.loadfrom("agent_get_paused", 4155700596).}
  proc agentSetNeighborDistance*(self: NavigationServer3D; agent: RID; distance: Float) {.loadfrom("agent_set_neighbor_distance", 1794382983).}
  proc agentSetMaxNeighbors*(self: NavigationServer3D; agent: RID; count: int32) {.loadfrom("agent_set_max_neighbors", 3411492887).}
  proc agentSetTimeHorizonAgents*(self: NavigationServer3D; agent: RID; timeHorizon: Float) {.loadfrom("agent_set_time_horizon_agents", 1794382983).}
  proc agentSetTimeHorizonObstacles*(self: NavigationServer3D; agent: RID; timeHorizon: Float) {.loadfrom("agent_set_time_horizon_obstacles", 1794382983).}
  proc agentSetRadius*(self: NavigationServer3D; agent: RID; radius: Float) {.loadfrom("agent_set_radius", 1794382983).}
  proc agentSetHeight*(self: NavigationServer3D; agent: RID; height: Float) {.loadfrom("agent_set_height", 1794382983).}
  proc agentSetMaxSpeed*(self: NavigationServer3D; agent: RID; maxSpeed: Float) {.loadfrom("agent_set_max_speed", 1794382983).}
  proc agentSetVelocityForced*(self: NavigationServer3D; agent: RID; velocity: Vector3) {.loadfrom("agent_set_velocity_forced", 3227306858).}
  proc agentSetVelocity*(self: NavigationServer3D; agent: RID; velocity: Vector3) {.loadfrom("agent_set_velocity", 3227306858).}
  proc agentSetPosition*(self: NavigationServer3D; agent: RID; position: Vector3) {.loadfrom("agent_set_position", 3227306858).}
  proc agentIsMapChanged*(self: NavigationServer3D; agent: RID): Bool {.loadfrom("agent_is_map_changed", 4155700596).}
  proc agentSetAvoidanceCallback*(self: NavigationServer3D; agent: RID; callback: Callable) {.loadfrom("agent_set_avoidance_callback", 3379118538).}
  proc agentSetAvoidanceLayers*(self: NavigationServer3D; agent: RID; layers: uint32) {.loadfrom("agent_set_avoidance_layers", 3411492887).}
  proc agentSetAvoidanceMask*(self: NavigationServer3D; agent: RID; mask: uint32) {.loadfrom("agent_set_avoidance_mask", 3411492887).}
  proc agentSetAvoidancePriority*(self: NavigationServer3D; agent: RID; priority: Float) {.loadfrom("agent_set_avoidance_priority", 1794382983).}
  proc obstacleCreate*(self: NavigationServer3D): RID {.loadfrom("obstacle_create", 529393457).}
  proc obstacleSetAvoidanceEnabled*(self: NavigationServer3D; obstacle: RID; enabled: Bool) {.loadfrom("obstacle_set_avoidance_enabled", 1265174801).}
  proc obstacleGetAvoidanceEnabled*(self: NavigationServer3D; obstacle: RID): Bool {.loadfrom("obstacle_get_avoidance_enabled", 4155700596).}
  proc obstacleSetUse3dAvoidance*(self: NavigationServer3D; obstacle: RID; enabled: Bool) {.loadfrom("obstacle_set_use_3d_avoidance", 1265174801).}
  proc obstacleGetUse3dAvoidance*(self: NavigationServer3D; obstacle: RID): Bool {.loadfrom("obstacle_get_use_3d_avoidance", 4155700596).}
  proc obstacleSetMap*(self: NavigationServer3D; obstacle: RID; map: RID) {.loadfrom("obstacle_set_map", 395945892).}
  proc obstacleGetMap*(self: NavigationServer3D; obstacle: RID): RID {.loadfrom("obstacle_get_map", 3814569979).}
  proc obstacleSetPaused*(self: NavigationServer3D; obstacle: RID; paused: Bool) {.loadfrom("obstacle_set_paused", 1265174801).}
  proc obstacleGetPaused*(self: NavigationServer3D; obstacle: RID): Bool {.loadfrom("obstacle_get_paused", 4155700596).}
  proc obstacleSetRadius*(self: NavigationServer3D; obstacle: RID; radius: Float) {.loadfrom("obstacle_set_radius", 1794382983).}
  proc obstacleSetHeight*(self: NavigationServer3D; obstacle: RID; height: Float) {.loadfrom("obstacle_set_height", 1794382983).}
  proc obstacleSetVelocity*(self: NavigationServer3D; obstacle: RID; velocity: Vector3) {.loadfrom("obstacle_set_velocity", 3227306858).}
  proc obstacleSetPosition*(self: NavigationServer3D; obstacle: RID; position: Vector3) {.loadfrom("obstacle_set_position", 3227306858).}
  proc obstacleSetVertices*(self: NavigationServer3D; obstacle: RID; vertices: PackedVector3Array) {.loadfrom("obstacle_set_vertices", 4030257846).}
  proc obstacleSetAvoidanceLayers*(self: NavigationServer3D; obstacle: RID; layers: uint32) {.loadfrom("obstacle_set_avoidance_layers", 3411492887).}
  proc parseSourceGeometryData*(self: NavigationServer3D; navigationMesh: Ref[NavigationMesh]; sourceGeometryData: Ref[NavigationMeshSourceGeometryData3D]; rootNode: ptr Node; callback: Callable = Callable|>init()) {.loadfrom("parse_source_geometry_data", 3703028813).}
  proc bakeFromSourceGeometryData*(self: NavigationServer3D; navigationMesh: Ref[NavigationMesh]; sourceGeometryData: Ref[NavigationMeshSourceGeometryData3D]; callback: Callable = Callable|>init()) {.loadfrom("bake_from_source_geometry_data", 3669016597).}
  proc freeRid*(self: NavigationServer3D; rid: RID) {.loadfrom("free_rid", 2722037293).}
  proc setActive*(self: NavigationServer3D; active: Bool) {.loadfrom("set_active", 2586408642).}
  proc setDebugEnabled*(self: NavigationServer3D; enabled: Bool) {.loadfrom("set_debug_enabled", 2586408642).}
  proc getDebugEnabled*(self: NavigationServer3D): Bool {.loadfrom("get_debug_enabled", 36873697).}
  proc getProcessInfo*(self: NavigationServer3D; processInfo: NavigationServer3D|>ProcessInfo): int32 {.loadfrom("get_process_info", 1938440894).}

# Node
define_godot_engine_class_essencials(Node, Object)
method process*(self: Node; delta: float64) {.base.} = (discard)
method physicsProcess*(self: Node; delta: float64) {.base.} = (discard)
method enterTree*(self: Node) {.base.} = (discard)
method exitTree*(self: Node) {.base.} = (discard)
method ready*(self: Node) {.base.} = (discard)
method getConfigurationWarnings*(self: Node): PackedStringArray {.base.} = (discard)
method input*(self: Node; event: Ref[InputEvent]) {.base.} = (discard)
method shortcutInput*(self: Node; event: Ref[InputEvent]) {.base.} = (discard)
method unhandledInput*(self: Node; event: Ref[InputEvent]) {.base.} = (discard)
method unhandledKeyInput*(self: Node; event: Ref[InputEvent]) {.base.} = (discard)
Node.memberProcs:
  proc printOrphanNodes* {.staticOf: Node, loadfrom("print_orphan_nodes", 3218959716).}
  proc addSibling*(self: Node; sibling: ptr Node; forceReadableName: Bool = false) {.loadfrom("add_sibling", 2570952461).}
  proc `name=`*(self: Node; name: String) {.loadfrom("set_name", 83702148).}
  proc name*(self: Node): StringName {.loadfrom("get_name", 2002593661).}
  proc addChild*(self: Node; node: ptr Node; forceReadableName: Bool = false; internal: Node|>InternalMode = internalModeDisabled) {.loadfrom("add_child", 3070154285).}
  proc removeChild*(self: Node; node: ptr Node) {.loadfrom("remove_child", 1078189570).}
  proc reparent*(self: Node; newParent: ptr Node; keepGlobalTransform: Bool = true) {.loadfrom("reparent", 2570952461).}
  proc getChildCount*(self: Node; includeInternal: Bool = false): int32 {.loadfrom("get_child_count", 894402480).}
  proc getChildren*(self: Node; includeInternal: Bool = false): TypedArray[Node] {.loadfrom("get_children", 873284517).}
  proc getChild*(self: Node; idx: int32; includeInternal: Bool = false): Node {.loadfrom("get_child", 541253412).}
  proc hasNode*(self: Node; path: NodePath): Bool {.loadfrom("has_node", 861721659).}
  proc getNode*(self: Node; path: NodePath): Node {.loadfrom("get_node", 2734337346).}
  proc getNodeOrNull*(self: Node; path: NodePath): Node {.loadfrom("get_node_or_null", 2734337346).}
  proc getParent*(self: Node): Node {.loadfrom("get_parent", 3160264692).}
  proc findChild*(self: Node; pattern: String; recursive: Bool = true; owned: Bool = true): Node {.loadfrom("find_child", 4253159453).}
  proc findChildren*(self: Node; pattern: String; `type`: String = ""; recursive: Bool = true; owned: Bool = true): TypedArray[Node] {.loadfrom("find_children", 1585018254).}
  proc findParent*(self: Node; pattern: String): Node {.loadfrom("find_parent", 1140089439).}
  proc hasNodeAndResource*(self: Node; path: NodePath): Bool {.loadfrom("has_node_and_resource", 861721659).}
  proc getNodeAndResource*(self: Node; path: NodePath): Array {.loadfrom("get_node_and_resource", 502563882).}
  proc isInsideTree*(self: Node): Bool {.loadfrom("is_inside_tree", 36873697).}
  proc isAncestorOf*(self: Node; node: ptr Node): Bool {.loadfrom("is_ancestor_of", 3093956946).}
  proc isGreaterThan*(self: Node; node: ptr Node): Bool {.loadfrom("is_greater_than", 3093956946).}
  proc getPath*(self: Node): NodePath {.loadfrom("get_path", 4075236667).}
  proc getPathTo*(self: Node; node: ptr Node; useUniquePath: Bool = false): NodePath {.loadfrom("get_path_to", 498846349).}
  proc addToGroup*(self: Node; group: StringName; persistent: Bool = false) {.loadfrom("add_to_group", 3683006648).}
  proc removeFromGroup*(self: Node; group: StringName) {.loadfrom("remove_from_group", 3304788590).}
  proc isInGroup*(self: Node; group: StringName): Bool {.loadfrom("is_in_group", 2619796661).}
  proc moveChild*(self: Node; childNode: ptr Node; toIndex: int32) {.loadfrom("move_child", 3315886247).}
  proc getGroups*(self: Node): TypedArray[StringName] {.loadfrom("get_groups", 3995934104).}
  proc `owner=`*(self: Node; owner: ptr Node) {.loadfrom("set_owner", 1078189570).}
  proc owner*(self: Node): Node {.loadfrom("get_owner", 3160264692).}
  proc getIndex*(self: Node; includeInternal: Bool = false): int32 {.loadfrom("get_index", 894402480).}
  proc printTree*(self: Node) {.loadfrom("print_tree", 3218959716).}
  proc printTreePretty*(self: Node) {.loadfrom("print_tree_pretty", 3218959716).}
  proc `sceneFilePath=`*(self: Node; sceneFilePath: String) {.loadfrom("set_scene_file_path", 83702148).}
  proc sceneFilePath*(self: Node): String {.loadfrom("get_scene_file_path", 201670096).}
  proc propagateNotification*(self: Node; what: int32) {.loadfrom("propagate_notification", 1286410249).}
  proc propagateCall*(self: Node; `method`: StringName; args: Array = Array|>init(); parentFirst: Bool = false) {.loadfrom("propagate_call", 1667910434).}
  proc setPhysicsProcess*(self: Node; enable: Bool) {.loadfrom("set_physics_process", 2586408642).}
  proc getPhysicsProcessDeltaTime*(self: Node): float64 {.loadfrom("get_physics_process_delta_time", 1740695150).}
  proc isPhysicsProcessing*(self: Node): Bool {.loadfrom("is_physics_processing", 36873697).}
  proc getProcessDeltaTime*(self: Node): float64 {.loadfrom("get_process_delta_time", 1740695150).}
  proc setProcess*(self: Node; enable: Bool) {.loadfrom("set_process", 2586408642).}
  proc `processPriority=`*(self: Node; priority: int32) {.loadfrom("set_process_priority", 1286410249).}
  proc processPriority*(self: Node): int32 {.loadfrom("get_process_priority", 3905245786).}
  proc `physicsProcessPriority=`*(self: Node; priority: int32) {.loadfrom("set_physics_process_priority", 1286410249).}
  proc physicsProcessPriority*(self: Node): int32 {.loadfrom("get_physics_process_priority", 3905245786).}
  proc isProcessing*(self: Node): Bool {.loadfrom("is_processing", 36873697).}
  proc setProcessInput*(self: Node; enable: Bool) {.loadfrom("set_process_input", 2586408642).}
  proc isProcessingInput*(self: Node): Bool {.loadfrom("is_processing_input", 36873697).}
  proc setProcessShortcutInput*(self: Node; enable: Bool) {.loadfrom("set_process_shortcut_input", 2586408642).}
  proc isProcessingShortcutInput*(self: Node): Bool {.loadfrom("is_processing_shortcut_input", 36873697).}
  proc setProcessUnhandledInput*(self: Node; enable: Bool) {.loadfrom("set_process_unhandled_input", 2586408642).}
  proc isProcessingUnhandledInput*(self: Node): Bool {.loadfrom("is_processing_unhandled_input", 36873697).}
  proc setProcessUnhandledKeyInput*(self: Node; enable: Bool) {.loadfrom("set_process_unhandled_key_input", 2586408642).}
  proc isProcessingUnhandledKeyInput*(self: Node): Bool {.loadfrom("is_processing_unhandled_key_input", 36873697).}
  proc `processMode=`*(self: Node; mode: Node|>ProcessMode) {.loadfrom("set_process_mode", 1841290486).}
  proc processMode*(self: Node): Node|>ProcessMode {.loadfrom("get_process_mode", 739966102).}
  proc canProcess*(self: Node): Bool {.loadfrom("can_process", 36873697).}
  proc `processThreadGroup=`*(self: Node; mode: Node|>ProcessThreadGroup) {.loadfrom("set_process_thread_group", 2275442745).}
  proc processThreadGroup*(self: Node): Node|>ProcessThreadGroup {.loadfrom("get_process_thread_group", 1866404740).}
  proc `processThreadMessages=`*(self: Node; flags: set[Node|>ProcessThreadMessages]) {.loadfrom("set_process_thread_messages", 1357280998).}
  proc processThreadMessages*(self: Node): set[Node|>ProcessThreadMessages] {.loadfrom("get_process_thread_messages", 4228993612).}
  proc `processThreadGroupOrder=`*(self: Node; order: int32) {.loadfrom("set_process_thread_group_order", 1286410249).}
  proc processThreadGroupOrder*(self: Node): int32 {.loadfrom("get_process_thread_group_order", 3905245786).}
  proc setDisplayFolded*(self: Node; fold: Bool) {.loadfrom("set_display_folded", 2586408642).}
  proc isDisplayedFolded*(self: Node): Bool {.loadfrom("is_displayed_folded", 36873697).}
  proc setProcessInternal*(self: Node; enable: Bool) {.loadfrom("set_process_internal", 2586408642).}
  proc isProcessingInternal*(self: Node): Bool {.loadfrom("is_processing_internal", 36873697).}
  proc setPhysicsProcessInternal*(self: Node; enable: Bool) {.loadfrom("set_physics_process_internal", 2586408642).}
  proc isPhysicsProcessingInternal*(self: Node): Bool {.loadfrom("is_physics_processing_internal", 36873697).}
  proc getWindow*(self: Node): Window {.loadfrom("get_window", 1757182445).}
  proc getLastExclusiveWindow*(self: Node): Window {.loadfrom("get_last_exclusive_window", 1757182445).}
  proc getTree*(self: Node): SceneTree {.loadfrom("get_tree", 2958820483).}
  proc createTween*(self: Node): Ref[Tween] {.loadfrom("create_tween", 3426978995).}
  proc duplicate*(self: Node; flags: int32 = 15): Node {.loadfrom("duplicate", 3511555459).}
  proc replaceBy*(self: Node; node: ptr Node; keepGroups: Bool = false) {.loadfrom("replace_by", 2570952461).}
  proc setSceneInstanceLoadPlaceholder*(self: Node; loadPlaceholder: Bool) {.loadfrom("set_scene_instance_load_placeholder", 2586408642).}
  proc getSceneInstanceLoadPlaceholder*(self: Node): Bool {.loadfrom("get_scene_instance_load_placeholder", 36873697).}
  proc setEditableInstance*(self: Node; node: ptr Node; isEditable: Bool) {.loadfrom("set_editable_instance", 2731852923).}
  proc isEditableInstance*(self: Node; node: ptr Node): Bool {.loadfrom("is_editable_instance", 3093956946).}
  proc getViewport*(self: Node): Viewport {.loadfrom("get_viewport", 3596683776).}
  proc queueFree*(self: Node) {.loadfrom("queue_free", 3218959716).}
  proc requestReady*(self: Node) {.loadfrom("request_ready", 3218959716).}
  proc isNodeReady*(self: Node): Bool {.loadfrom("is_node_ready", 36873697).}
  proc setMultiplayerAuthority*(self: Node; id: int32; recursive: Bool = true) {.loadfrom("set_multiplayer_authority", 4023243586).}
  proc getMultiplayerAuthority*(self: Node): int32 {.loadfrom("get_multiplayer_authority", 3905245786).}
  proc isMultiplayerAuthority*(self: Node): Bool {.loadfrom("is_multiplayer_authority", 36873697).}
  proc multiplayer*(self: Node): Ref[MultiplayerAPI] {.loadfrom("get_multiplayer", 406750475).}
  proc rpcConfig*(self: Node; `method`: StringName; config: ptr Variant) {.loadfrom("rpc_config", 3776071444).}
  proc `editorDescription=`*(self: Node; editorDescription: String) {.loadfrom("set_editor_description", 83702148).}
  proc editorDescription*(self: Node): String {.loadfrom("get_editor_description", 201670096).}
  proc `uniqueNameInOwner=`*(self: Node; enable: Bool) {.loadfrom("set_unique_name_in_owner", 2586408642).}
  proc isUniqueNameInOwner*(self: Node): Bool {.loadfrom("is_unique_name_in_owner", 36873697).}
  proc rpc*(self: Node; `method`: StringName): Error {.loadfrom("rpc", 4047867050).}
  proc rpcId*(self: Node; peerId: Int; `method`: StringName): Error {.loadfrom("rpc_id", 361499283).}
  proc updateConfigurationWarnings*(self: Node) {.loadfrom("update_configuration_warnings", 3218959716).}
  proc callDeferredThreadGroup*(self: Node; `method`: StringName): Variant {.loadfrom("call_deferred_thread_group", 3400424181).}
  proc setDeferredThreadGroup*(self: Node; property: StringName; value: ptr Variant) {.loadfrom("set_deferred_thread_group", 3776071444).}
  proc notifyDeferredThreadGroup*(self: Node; what: int32) {.loadfrom("notify_deferred_thread_group", 1286410249).}
  proc callThreadSafe*(self: Node; `method`: StringName): Variant {.loadfrom("call_thread_safe", 3400424181).}
  proc setThreadSafe*(self: Node; property: StringName; value: ptr Variant) {.loadfrom("set_thread_safe", 3776071444).}
  proc notifyThreadSafe*(self: Node; what: int32) {.loadfrom("notify_thread_safe", 1286410249).}

# OS
define_godot_engine_class_essencials(OS, Object)
OS.memberProcs:
  proc getConnectedMidiInputs*(self: OS): PackedStringArray {.loadfrom("get_connected_midi_inputs", 2981934095).}
  proc openMidiInputs*(self: OS) {.loadfrom("open_midi_inputs", 3218959716).}
  proc closeMidiInputs*(self: OS) {.loadfrom("close_midi_inputs", 3218959716).}
  proc alert*(self: OS; text: String; title: String = "Alert!") {.loadfrom("alert", 233059325).}
  proc crash*(self: OS; message: String) {.loadfrom("crash", 83702148).}
  proc `lowProcessorUsageMode=`*(self: OS; enable: Bool) {.loadfrom("set_low_processor_usage_mode", 2586408642).}
  proc isInLowProcessorUsageMode*(self: OS): Bool {.loadfrom("is_in_low_processor_usage_mode", 36873697).}
  proc `lowProcessorUsageModeSleepUsec=`*(self: OS; usec: int32) {.loadfrom("set_low_processor_usage_mode_sleep_usec", 1286410249).}
  proc lowProcessorUsageModeSleepUsec*(self: OS): int32 {.loadfrom("get_low_processor_usage_mode_sleep_usec", 3905245786).}
  proc `deltaSmoothing=`*(self: OS; deltaSmoothingEnabled: Bool) {.loadfrom("set_delta_smoothing", 2586408642).}
  proc isDeltaSmoothingEnabled*(self: OS): Bool {.loadfrom("is_delta_smoothing_enabled", 36873697).}
  proc getProcessorCount*(self: OS): int32 {.loadfrom("get_processor_count", 3905245786).}
  proc getProcessorName*(self: OS): String {.loadfrom("get_processor_name", 201670096).}
  proc getSystemFonts*(self: OS): PackedStringArray {.loadfrom("get_system_fonts", 1139954409).}
  proc getSystemFontPath*(self: OS; fontName: String; weight: int32 = 400; stretch: int32 = 100; italic: Bool = false): String {.loadfrom("get_system_font_path", 2262142305).}
  proc getSystemFontPathForText*(self: OS; fontName: String; text: String; locale: String = ""; script: String = ""; weight: int32 = 400; stretch: int32 = 100; italic: Bool = false): PackedStringArray {.loadfrom("get_system_font_path_for_text", 3824042574).}
  proc getExecutablePath*(self: OS): String {.loadfrom("get_executable_path", 201670096).}
  proc readStringFromStdin*(self: OS): String {.loadfrom("read_string_from_stdin", 2841200299).}
  proc execute*(self: OS; path: String; arguments: PackedStringArray; output: Array = Array|>init(); readStderr: Bool = false; openConsole: Bool = false): int32 {.loadfrom("execute", 2881709059).}
  proc createProcess*(self: OS; path: String; arguments: PackedStringArray; openConsole: Bool = false): int32 {.loadfrom("create_process", 2903767230).}
  proc createInstance*(self: OS; arguments: PackedStringArray): int32 {.loadfrom("create_instance", 1080601263).}
  proc kill*(self: OS; pid: int32): Error {.loadfrom("kill", 844576869).}
  proc shellOpen*(self: OS; uri: String): Error {.loadfrom("shell_open", 166001499).}
  proc shellShowInFileManager*(self: OS; fileOrDirPath: String; openFolder: Bool = true): Error {.loadfrom("shell_show_in_file_manager", 885841341).}
  proc isProcessRunning*(self: OS; pid: int32): Bool {.loadfrom("is_process_running", 1116898809).}
  proc getProcessId*(self: OS): int32 {.loadfrom("get_process_id", 3905245786).}
  proc hasEnvironment*(self: OS; variable: String): Bool {.loadfrom("has_environment", 3927539163).}
  proc getEnvironment*(self: OS; variable: String): String {.loadfrom("get_environment", 3135753539).}
  proc setEnvironment*(self: OS; variable: String; value: String) {.loadfrom("set_environment", 3605043004).}
  proc unsetEnvironment*(self: OS; variable: String) {.loadfrom("unset_environment", 3089850668).}
  proc getName*(self: OS): String {.loadfrom("get_name", 201670096).}
  proc getDistributionName*(self: OS): String {.loadfrom("get_distribution_name", 201670096).}
  proc getVersion*(self: OS): String {.loadfrom("get_version", 201670096).}
  proc getCmdlineArgs*(self: OS): PackedStringArray {.loadfrom("get_cmdline_args", 2981934095).}
  proc getCmdlineUserArgs*(self: OS): PackedStringArray {.loadfrom("get_cmdline_user_args", 2981934095).}
  proc getVideoAdapterDriverInfo*(self: OS): PackedStringArray {.loadfrom("get_video_adapter_driver_info", 1139954409).}
  proc setRestartOnExit*(self: OS; restart: Bool; arguments: PackedStringArray = PackedStringArray()) {.loadfrom("set_restart_on_exit", 611198603).}
  proc isRestartOnExitSet*(self: OS): Bool {.loadfrom("is_restart_on_exit_set", 36873697).}
  proc getRestartOnExitArguments*(self: OS): PackedStringArray {.loadfrom("get_restart_on_exit_arguments", 1139954409).}
  proc delayUsec*(self: OS; usec: int32) {.loadfrom("delay_usec", 998575451).}
  proc delayMsec*(self: OS; msec: int32) {.loadfrom("delay_msec", 998575451).}
  proc getLocale*(self: OS): String {.loadfrom("get_locale", 201670096).}
  proc getLocaleLanguage*(self: OS): String {.loadfrom("get_locale_language", 201670096).}
  proc getModelName*(self: OS): String {.loadfrom("get_model_name", 201670096).}
  proc isUserfsPersistent*(self: OS): Bool {.loadfrom("is_userfs_persistent", 36873697).}
  proc isStdoutVerbose*(self: OS): Bool {.loadfrom("is_stdout_verbose", 36873697).}
  proc isDebugBuild*(self: OS): Bool {.loadfrom("is_debug_build", 36873697).}
  proc getStaticMemoryUsage*(self: OS): uint64 {.loadfrom("get_static_memory_usage", 3905245786).}
  proc getStaticMemoryPeakUsage*(self: OS): uint64 {.loadfrom("get_static_memory_peak_usage", 3905245786).}
  proc getMemoryInfo*(self: OS): Dictionary {.loadfrom("get_memory_info", 3102165223).}
  proc moveToTrash*(self: OS; path: String): Error {.loadfrom("move_to_trash", 2113323047).}
  proc getUserDataDir*(self: OS): String {.loadfrom("get_user_data_dir", 201670096).}
  proc getSystemDir*(self: OS; dir: OS|>SystemDir; sharedStorage: Bool = true): String {.loadfrom("get_system_dir", 1965199849).}
  proc getConfigDir*(self: OS): String {.loadfrom("get_config_dir", 201670096).}
  proc getDataDir*(self: OS): String {.loadfrom("get_data_dir", 201670096).}
  proc getCacheDir*(self: OS): String {.loadfrom("get_cache_dir", 201670096).}
  proc getUniqueId*(self: OS): String {.loadfrom("get_unique_id", 201670096).}
  proc getKeycodeString*(self: OS; code: Key): String {.loadfrom("get_keycode_string", 2261993717).}
  proc isKeycodeUnicode*(self: OS; code: Int): Bool {.loadfrom("is_keycode_unicode", 1116898809).}
  proc findKeycodeFromString*(self: OS; string: String): Key {.loadfrom("find_keycode_from_string", 1084858572).}
  proc setUseFileAccessSaveAndSwap*(self: OS; enabled: Bool) {.loadfrom("set_use_file_access_save_and_swap", 2586408642).}
  proc setThreadName*(self: OS; name: String): Error {.loadfrom("set_thread_name", 166001499).}
  proc getThreadCallerId*(self: OS): uint64 {.loadfrom("get_thread_caller_id", 3905245786).}
  proc getMainThreadId*(self: OS): uint64 {.loadfrom("get_main_thread_id", 3905245786).}
  proc hasFeature*(self: OS; tagName: String): Bool {.loadfrom("has_feature", 3927539163).}
  proc requestPermission*(self: OS; name: String): Bool {.loadfrom("request_permission", 2323990056).}
  proc requestPermissions*(self: OS): Bool {.loadfrom("request_permissions", 2240911060).}
  proc getGrantedPermissions*(self: OS): PackedStringArray {.loadfrom("get_granted_permissions", 1139954409).}

# Performance
define_godot_engine_class_essencials(Performance, Object)
Performance.memberProcs:
  proc getMonitor*(self: Performance; monitor: Performance|>Monitor): float64 {.loadfrom("get_monitor", 1943275655).}
  proc addCustomMonitor*(self: Performance; id: StringName; callable: Callable; arguments: Array = Array|>init()) {.loadfrom("add_custom_monitor", 2865980031).}
  proc removeCustomMonitor*(self: Performance; id: StringName) {.loadfrom("remove_custom_monitor", 3304788590).}
  proc hasCustomMonitor*(self: Performance; id: StringName): Bool {.loadfrom("has_custom_monitor", 2041966384).}
  proc getCustomMonitor*(self: Performance; id: StringName): Variant {.loadfrom("get_custom_monitor", 2138907829).}
  proc getMonitorModificationTime*(self: Performance): uint64 {.loadfrom("get_monitor_modification_time", 2455072627).}
  proc getCustomMonitorNames*(self: Performance): TypedArray[StringName] {.loadfrom("get_custom_monitor_names", 2915620761).}

# PhysicsDirectBodyState2D
define_godot_engine_class_essencials(PhysicsDirectBodyState2D, Object)
PhysicsDirectBodyState2D.memberProcs:
  proc totalGravity*(self: PhysicsDirectBodyState2D): Vector2 {.loadfrom("get_total_gravity", 3341600327).}
  proc totalLinearDamp*(self: PhysicsDirectBodyState2D): Float {.loadfrom("get_total_linear_damp", 1740695150).}
  proc totalAngularDamp*(self: PhysicsDirectBodyState2D): Float {.loadfrom("get_total_angular_damp", 1740695150).}
  proc centerOfMass*(self: PhysicsDirectBodyState2D): Vector2 {.loadfrom("get_center_of_mass", 3341600327).}
  proc centerOfMassLocal*(self: PhysicsDirectBodyState2D): Vector2 {.loadfrom("get_center_of_mass_local", 3341600327).}
  proc inverseMass*(self: PhysicsDirectBodyState2D): Float {.loadfrom("get_inverse_mass", 1740695150).}
  proc inverseInertia*(self: PhysicsDirectBodyState2D): Float {.loadfrom("get_inverse_inertia", 1740695150).}
  proc `linearVelocity=`*(self: PhysicsDirectBodyState2D; velocity: Vector2) {.loadfrom("set_linear_velocity", 743155724).}
  proc linearVelocity*(self: PhysicsDirectBodyState2D): Vector2 {.loadfrom("get_linear_velocity", 3341600327).}
  proc `angularVelocity=`*(self: PhysicsDirectBodyState2D; velocity: Float) {.loadfrom("set_angular_velocity", 373806689).}
  proc angularVelocity*(self: PhysicsDirectBodyState2D): Float {.loadfrom("get_angular_velocity", 1740695150).}
  proc `transform=`*(self: PhysicsDirectBodyState2D; transform: Transform2D) {.loadfrom("set_transform", 2761652528).}
  proc transform*(self: PhysicsDirectBodyState2D): Transform2D {.loadfrom("get_transform", 3814499831).}
  proc getVelocityAtLocalPosition*(self: PhysicsDirectBodyState2D; localPosition: Vector2): Vector2 {.loadfrom("get_velocity_at_local_position", 2656412154).}
  proc applyCentralImpulse*(self: PhysicsDirectBodyState2D; impulse: Vector2) {.loadfrom("apply_central_impulse", 743155724).}
  proc applyTorqueImpulse*(self: PhysicsDirectBodyState2D; impulse: Float) {.loadfrom("apply_torque_impulse", 373806689).}
  proc applyImpulse*(self: PhysicsDirectBodyState2D; impulse: Vector2; position: Vector2 = gdvec(0, 0)) {.loadfrom("apply_impulse", 496058220).}
  proc applyCentralForce*(self: PhysicsDirectBodyState2D; force: Vector2 = gdvec(0, 0)) {.loadfrom("apply_central_force", 3862383994).}
  proc applyForce*(self: PhysicsDirectBodyState2D; force: Vector2; position: Vector2 = gdvec(0, 0)) {.loadfrom("apply_force", 496058220).}
  proc applyTorque*(self: PhysicsDirectBodyState2D; torque: Float) {.loadfrom("apply_torque", 373806689).}
  proc addConstantCentralForce*(self: PhysicsDirectBodyState2D; force: Vector2 = gdvec(0, 0)) {.loadfrom("add_constant_central_force", 3862383994).}
  proc addConstantForce*(self: PhysicsDirectBodyState2D; force: Vector2; position: Vector2 = gdvec(0, 0)) {.loadfrom("add_constant_force", 496058220).}
  proc addConstantTorque*(self: PhysicsDirectBodyState2D; torque: Float) {.loadfrom("add_constant_torque", 373806689).}
  proc setConstantForce*(self: PhysicsDirectBodyState2D; force: Vector2) {.loadfrom("set_constant_force", 743155724).}
  proc getConstantForce*(self: PhysicsDirectBodyState2D): Vector2 {.loadfrom("get_constant_force", 3341600327).}
  proc setConstantTorque*(self: PhysicsDirectBodyState2D; torque: Float) {.loadfrom("set_constant_torque", 373806689).}
  proc getConstantTorque*(self: PhysicsDirectBodyState2D): Float {.loadfrom("get_constant_torque", 1740695150).}
  proc `sleepState=`*(self: PhysicsDirectBodyState2D; enabled: Bool) {.loadfrom("set_sleep_state", 2586408642).}
  proc isSleeping*(self: PhysicsDirectBodyState2D): Bool {.loadfrom("is_sleeping", 36873697).}
  proc getContactCount*(self: PhysicsDirectBodyState2D): int32 {.loadfrom("get_contact_count", 3905245786).}
  proc getContactLocalPosition*(self: PhysicsDirectBodyState2D; contactIdx: int32): Vector2 {.loadfrom("get_contact_local_position", 2299179447).}
  proc getContactLocalNormal*(self: PhysicsDirectBodyState2D; contactIdx: int32): Vector2 {.loadfrom("get_contact_local_normal", 2299179447).}
  proc getContactLocalShape*(self: PhysicsDirectBodyState2D; contactIdx: int32): int32 {.loadfrom("get_contact_local_shape", 923996154).}
  proc getContactLocalVelocityAtPosition*(self: PhysicsDirectBodyState2D; contactIdx: int32): Vector2 {.loadfrom("get_contact_local_velocity_at_position", 2299179447).}
  proc getContactCollider*(self: PhysicsDirectBodyState2D; contactIdx: int32): RID {.loadfrom("get_contact_collider", 495598643).}
  proc getContactColliderPosition*(self: PhysicsDirectBodyState2D; contactIdx: int32): Vector2 {.loadfrom("get_contact_collider_position", 2299179447).}
  proc getContactColliderId*(self: PhysicsDirectBodyState2D; contactIdx: int32): uint64 {.loadfrom("get_contact_collider_id", 923996154).}
  proc getContactColliderObject*(self: PhysicsDirectBodyState2D; contactIdx: int32): Object {.loadfrom("get_contact_collider_object", 3332903315).}
  proc getContactColliderShape*(self: PhysicsDirectBodyState2D; contactIdx: int32): int32 {.loadfrom("get_contact_collider_shape", 923996154).}
  proc getContactColliderVelocityAtPosition*(self: PhysicsDirectBodyState2D; contactIdx: int32): Vector2 {.loadfrom("get_contact_collider_velocity_at_position", 2299179447).}
  proc getContactImpulse*(self: PhysicsDirectBodyState2D; contactIdx: int32): Vector2 {.loadfrom("get_contact_impulse", 2299179447).}
  proc step*(self: PhysicsDirectBodyState2D): Float {.loadfrom("get_step", 1740695150).}
  proc integrateForces*(self: PhysicsDirectBodyState2D) {.loadfrom("integrate_forces", 3218959716).}
  proc getSpaceState*(self: PhysicsDirectBodyState2D): PhysicsDirectSpaceState2D {.loadfrom("get_space_state", 2506717822).}

# PhysicsDirectBodyState3D
define_godot_engine_class_essencials(PhysicsDirectBodyState3D, Object)
PhysicsDirectBodyState3D.memberProcs:
  proc totalGravity*(self: PhysicsDirectBodyState3D): Vector3 {.loadfrom("get_total_gravity", 3360562783).}
  proc totalLinearDamp*(self: PhysicsDirectBodyState3D): Float {.loadfrom("get_total_linear_damp", 1740695150).}
  proc totalAngularDamp*(self: PhysicsDirectBodyState3D): Float {.loadfrom("get_total_angular_damp", 1740695150).}
  proc centerOfMass*(self: PhysicsDirectBodyState3D): Vector3 {.loadfrom("get_center_of_mass", 3360562783).}
  proc centerOfMassLocal*(self: PhysicsDirectBodyState3D): Vector3 {.loadfrom("get_center_of_mass_local", 3360562783).}
  proc principalInertiaAxes*(self: PhysicsDirectBodyState3D): Basis {.loadfrom("get_principal_inertia_axes", 2716978435).}
  proc inverseMass*(self: PhysicsDirectBodyState3D): Float {.loadfrom("get_inverse_mass", 1740695150).}
  proc inverseInertia*(self: PhysicsDirectBodyState3D): Vector3 {.loadfrom("get_inverse_inertia", 3360562783).}
  proc inverseInertiaTensor*(self: PhysicsDirectBodyState3D): Basis {.loadfrom("get_inverse_inertia_tensor", 2716978435).}
  proc `linearVelocity=`*(self: PhysicsDirectBodyState3D; velocity: Vector3) {.loadfrom("set_linear_velocity", 3460891852).}
  proc linearVelocity*(self: PhysicsDirectBodyState3D): Vector3 {.loadfrom("get_linear_velocity", 3360562783).}
  proc `angularVelocity=`*(self: PhysicsDirectBodyState3D; velocity: Vector3) {.loadfrom("set_angular_velocity", 3460891852).}
  proc angularVelocity*(self: PhysicsDirectBodyState3D): Vector3 {.loadfrom("get_angular_velocity", 3360562783).}
  proc `transform=`*(self: PhysicsDirectBodyState3D; transform: Transform3D) {.loadfrom("set_transform", 2952846383).}
  proc transform*(self: PhysicsDirectBodyState3D): Transform3D {.loadfrom("get_transform", 3229777777).}
  proc getVelocityAtLocalPosition*(self: PhysicsDirectBodyState3D; localPosition: Vector3): Vector3 {.loadfrom("get_velocity_at_local_position", 192990374).}
  proc applyCentralImpulse*(self: PhysicsDirectBodyState3D; impulse: Vector3 = gdvec(0, 0, 0)) {.loadfrom("apply_central_impulse", 2007698547).}
  proc applyImpulse*(self: PhysicsDirectBodyState3D; impulse: Vector3; position: Vector3 = gdvec(0, 0, 0)) {.loadfrom("apply_impulse", 1002852006).}
  proc applyTorqueImpulse*(self: PhysicsDirectBodyState3D; impulse: Vector3) {.loadfrom("apply_torque_impulse", 3460891852).}
  proc applyCentralForce*(self: PhysicsDirectBodyState3D; force: Vector3 = gdvec(0, 0, 0)) {.loadfrom("apply_central_force", 2007698547).}
  proc applyForce*(self: PhysicsDirectBodyState3D; force: Vector3; position: Vector3 = gdvec(0, 0, 0)) {.loadfrom("apply_force", 1002852006).}
  proc applyTorque*(self: PhysicsDirectBodyState3D; torque: Vector3) {.loadfrom("apply_torque", 3460891852).}
  proc addConstantCentralForce*(self: PhysicsDirectBodyState3D; force: Vector3 = gdvec(0, 0, 0)) {.loadfrom("add_constant_central_force", 2007698547).}
  proc addConstantForce*(self: PhysicsDirectBodyState3D; force: Vector3; position: Vector3 = gdvec(0, 0, 0)) {.loadfrom("add_constant_force", 1002852006).}
  proc addConstantTorque*(self: PhysicsDirectBodyState3D; torque: Vector3) {.loadfrom("add_constant_torque", 3460891852).}
  proc setConstantForce*(self: PhysicsDirectBodyState3D; force: Vector3) {.loadfrom("set_constant_force", 3460891852).}
  proc getConstantForce*(self: PhysicsDirectBodyState3D): Vector3 {.loadfrom("get_constant_force", 3360562783).}
  proc setConstantTorque*(self: PhysicsDirectBodyState3D; torque: Vector3) {.loadfrom("set_constant_torque", 3460891852).}
  proc getConstantTorque*(self: PhysicsDirectBodyState3D): Vector3 {.loadfrom("get_constant_torque", 3360562783).}
  proc `sleepState=`*(self: PhysicsDirectBodyState3D; enabled: Bool) {.loadfrom("set_sleep_state", 2586408642).}
  proc isSleeping*(self: PhysicsDirectBodyState3D): Bool {.loadfrom("is_sleeping", 36873697).}
  proc getContactCount*(self: PhysicsDirectBodyState3D): int32 {.loadfrom("get_contact_count", 3905245786).}
  proc getContactLocalPosition*(self: PhysicsDirectBodyState3D; contactIdx: int32): Vector3 {.loadfrom("get_contact_local_position", 711720468).}
  proc getContactLocalNormal*(self: PhysicsDirectBodyState3D; contactIdx: int32): Vector3 {.loadfrom("get_contact_local_normal", 711720468).}
  proc getContactImpulse*(self: PhysicsDirectBodyState3D; contactIdx: int32): Vector3 {.loadfrom("get_contact_impulse", 711720468).}
  proc getContactLocalShape*(self: PhysicsDirectBodyState3D; contactIdx: int32): int32 {.loadfrom("get_contact_local_shape", 923996154).}
  proc getContactLocalVelocityAtPosition*(self: PhysicsDirectBodyState3D; contactIdx: int32): Vector3 {.loadfrom("get_contact_local_velocity_at_position", 711720468).}
  proc getContactCollider*(self: PhysicsDirectBodyState3D; contactIdx: int32): RID {.loadfrom("get_contact_collider", 495598643).}
  proc getContactColliderPosition*(self: PhysicsDirectBodyState3D; contactIdx: int32): Vector3 {.loadfrom("get_contact_collider_position", 711720468).}
  proc getContactColliderId*(self: PhysicsDirectBodyState3D; contactIdx: int32): uint64 {.loadfrom("get_contact_collider_id", 923996154).}
  proc getContactColliderObject*(self: PhysicsDirectBodyState3D; contactIdx: int32): Object {.loadfrom("get_contact_collider_object", 3332903315).}
  proc getContactColliderShape*(self: PhysicsDirectBodyState3D; contactIdx: int32): int32 {.loadfrom("get_contact_collider_shape", 923996154).}
  proc getContactColliderVelocityAtPosition*(self: PhysicsDirectBodyState3D; contactIdx: int32): Vector3 {.loadfrom("get_contact_collider_velocity_at_position", 711720468).}
  proc step*(self: PhysicsDirectBodyState3D): Float {.loadfrom("get_step", 1740695150).}
  proc integrateForces*(self: PhysicsDirectBodyState3D) {.loadfrom("integrate_forces", 3218959716).}
  proc getSpaceState*(self: PhysicsDirectBodyState3D): PhysicsDirectSpaceState3D {.loadfrom("get_space_state", 2069328350).}

# PhysicsDirectSpaceState2D
define_godot_engine_class_essencials(PhysicsDirectSpaceState2D, Object)
PhysicsDirectSpaceState2D.memberProcs:
  proc intersectPoint*(self: PhysicsDirectSpaceState2D; parameters: Ref[PhysicsPointQueryParameters2D]; maxRetvals: int32 = 32): TypedArray[Dictionary] {.loadfrom("intersect_point", 3278207904).}
  proc intersectRay*(self: PhysicsDirectSpaceState2D; parameters: Ref[PhysicsRayQueryParameters2D]): Dictionary {.loadfrom("intersect_ray", 1590275562).}
  proc intersectShape*(self: PhysicsDirectSpaceState2D; parameters: Ref[PhysicsShapeQueryParameters2D]; maxRetvals: int32 = 32): TypedArray[Dictionary] {.loadfrom("intersect_shape", 3803848594).}
  proc castMotion*(self: PhysicsDirectSpaceState2D; parameters: Ref[PhysicsShapeQueryParameters2D]): PackedFloat32Array {.loadfrom("cast_motion", 711275086).}
  proc collideShape*(self: PhysicsDirectSpaceState2D; parameters: Ref[PhysicsShapeQueryParameters2D]; maxRetvals: int32 = 32): TypedArray[Vector2] {.loadfrom("collide_shape", 3803848594).}
  proc getRestInfo*(self: PhysicsDirectSpaceState2D; parameters: Ref[PhysicsShapeQueryParameters2D]): Dictionary {.loadfrom("get_rest_info", 2803666496).}

# PhysicsDirectSpaceState3D
define_godot_engine_class_essencials(PhysicsDirectSpaceState3D, Object)
PhysicsDirectSpaceState3D.memberProcs:
  proc intersectPoint*(self: PhysicsDirectSpaceState3D; parameters: Ref[PhysicsPointQueryParameters3D]; maxRetvals: int32 = 32): TypedArray[Dictionary] {.loadfrom("intersect_point", 45993382).}
  proc intersectRay*(self: PhysicsDirectSpaceState3D; parameters: Ref[PhysicsRayQueryParameters3D]): Dictionary {.loadfrom("intersect_ray", 3957970750).}
  proc intersectShape*(self: PhysicsDirectSpaceState3D; parameters: Ref[PhysicsShapeQueryParameters3D]; maxRetvals: int32 = 32): TypedArray[Dictionary] {.loadfrom("intersect_shape", 550215980).}
  proc castMotion*(self: PhysicsDirectSpaceState3D; parameters: Ref[PhysicsShapeQueryParameters3D]): PackedFloat32Array {.loadfrom("cast_motion", 1778757334).}
  proc collideShape*(self: PhysicsDirectSpaceState3D; parameters: Ref[PhysicsShapeQueryParameters3D]; maxRetvals: int32 = 32): TypedArray[Vector3] {.loadfrom("collide_shape", 550215980).}
  proc getRestInfo*(self: PhysicsDirectSpaceState3D; parameters: Ref[PhysicsShapeQueryParameters3D]): Dictionary {.loadfrom("get_rest_info", 1376751592).}

# PhysicsServer2D
define_godot_engine_class_essencials(PhysicsServer2D, Object)
PhysicsServer2D.memberProcs:
  proc worldBoundaryShapeCreate*(self: PhysicsServer2D): RID {.loadfrom("world_boundary_shape_create", 529393457).}
  proc separationRayShapeCreate*(self: PhysicsServer2D): RID {.loadfrom("separation_ray_shape_create", 529393457).}
  proc segmentShapeCreate*(self: PhysicsServer2D): RID {.loadfrom("segment_shape_create", 529393457).}
  proc circleShapeCreate*(self: PhysicsServer2D): RID {.loadfrom("circle_shape_create", 529393457).}
  proc rectangleShapeCreate*(self: PhysicsServer2D): RID {.loadfrom("rectangle_shape_create", 529393457).}
  proc capsuleShapeCreate*(self: PhysicsServer2D): RID {.loadfrom("capsule_shape_create", 529393457).}
  proc convexPolygonShapeCreate*(self: PhysicsServer2D): RID {.loadfrom("convex_polygon_shape_create", 529393457).}
  proc concavePolygonShapeCreate*(self: PhysicsServer2D): RID {.loadfrom("concave_polygon_shape_create", 529393457).}
  proc shapeSetData*(self: PhysicsServer2D; shape: RID; data: ptr Variant) {.loadfrom("shape_set_data", 3175752987).}
  proc shapeGetType*(self: PhysicsServer2D; shape: RID): PhysicsServer2D|>ShapeType {.loadfrom("shape_get_type", 1240598777).}
  proc shapeGetData*(self: PhysicsServer2D; shape: RID): Variant {.loadfrom("shape_get_data", 4171304767).}
  proc spaceCreate*(self: PhysicsServer2D): RID {.loadfrom("space_create", 529393457).}
  proc spaceSetActive*(self: PhysicsServer2D; space: RID; active: Bool) {.loadfrom("space_set_active", 1265174801).}
  proc spaceIsActive*(self: PhysicsServer2D; space: RID): Bool {.loadfrom("space_is_active", 4155700596).}
  proc spaceSetParam*(self: PhysicsServer2D; space: RID; param: PhysicsServer2D|>SpaceParameter; value: Float) {.loadfrom("space_set_param", 949194586).}
  proc spaceGetParam*(self: PhysicsServer2D; space: RID; param: PhysicsServer2D|>SpaceParameter): Float {.loadfrom("space_get_param", 874111783).}
  proc spaceGetDirectState*(self: PhysicsServer2D; space: RID): PhysicsDirectSpaceState2D {.loadfrom("space_get_direct_state", 3160173886).}
  proc areaCreate*(self: PhysicsServer2D): RID {.loadfrom("area_create", 529393457).}
  proc areaSetSpace*(self: PhysicsServer2D; area: RID; space: RID) {.loadfrom("area_set_space", 395945892).}
  proc areaGetSpace*(self: PhysicsServer2D; area: RID): RID {.loadfrom("area_get_space", 3814569979).}
  proc areaAddShape*(self: PhysicsServer2D; area: RID; shape: RID; transform: Transform2D = Transform2D|>init(); disabled: Bool = false) {.loadfrom("area_add_shape", 754862190).}
  proc areaSetShape*(self: PhysicsServer2D; area: RID; shapeIdx: int32; shape: RID) {.loadfrom("area_set_shape", 2310537182).}
  proc areaSetShapeTransform*(self: PhysicsServer2D; area: RID; shapeIdx: int32; transform: Transform2D) {.loadfrom("area_set_shape_transform", 736082694).}
  proc areaSetShapeDisabled*(self: PhysicsServer2D; area: RID; shapeIdx: int32; disabled: Bool) {.loadfrom("area_set_shape_disabled", 2658558584).}
  proc areaGetShapeCount*(self: PhysicsServer2D; area: RID): int32 {.loadfrom("area_get_shape_count", 2198884583).}
  proc areaGetShape*(self: PhysicsServer2D; area: RID; shapeIdx: int32): RID {.loadfrom("area_get_shape", 1066463050).}
  proc areaGetShapeTransform*(self: PhysicsServer2D; area: RID; shapeIdx: int32): Transform2D {.loadfrom("area_get_shape_transform", 1324854622).}
  proc areaRemoveShape*(self: PhysicsServer2D; area: RID; shapeIdx: int32) {.loadfrom("area_remove_shape", 3411492887).}
  proc areaClearShapes*(self: PhysicsServer2D; area: RID) {.loadfrom("area_clear_shapes", 2722037293).}
  proc areaSetCollisionLayer*(self: PhysicsServer2D; area: RID; layer: uint32) {.loadfrom("area_set_collision_layer", 3411492887).}
  proc areaGetCollisionLayer*(self: PhysicsServer2D; area: RID): uint32 {.loadfrom("area_get_collision_layer", 2198884583).}
  proc areaSetCollisionMask*(self: PhysicsServer2D; area: RID; mask: uint32) {.loadfrom("area_set_collision_mask", 3411492887).}
  proc areaGetCollisionMask*(self: PhysicsServer2D; area: RID): uint32 {.loadfrom("area_get_collision_mask", 2198884583).}
  proc areaSetParam*(self: PhysicsServer2D; area: RID; param: PhysicsServer2D|>AreaParameter; value: ptr Variant) {.loadfrom("area_set_param", 1257146028).}
  proc areaSetTransform*(self: PhysicsServer2D; area: RID; transform: Transform2D) {.loadfrom("area_set_transform", 1246044741).}
  proc areaGetParam*(self: PhysicsServer2D; area: RID; param: PhysicsServer2D|>AreaParameter): Variant {.loadfrom("area_get_param", 3047435120).}
  proc areaGetTransform*(self: PhysicsServer2D; area: RID): Transform2D {.loadfrom("area_get_transform", 213527486).}
  proc areaAttachObjectInstanceId*(self: PhysicsServer2D; area: RID; id: uint64) {.loadfrom("area_attach_object_instance_id", 3411492887).}
  proc areaGetObjectInstanceId*(self: PhysicsServer2D; area: RID): uint64 {.loadfrom("area_get_object_instance_id", 2198884583).}
  proc areaAttachCanvasInstanceId*(self: PhysicsServer2D; area: RID; id: uint64) {.loadfrom("area_attach_canvas_instance_id", 3411492887).}
  proc areaGetCanvasInstanceId*(self: PhysicsServer2D; area: RID): uint64 {.loadfrom("area_get_canvas_instance_id", 2198884583).}
  proc areaSetMonitorCallback*(self: PhysicsServer2D; area: RID; callback: Callable) {.loadfrom("area_set_monitor_callback", 3379118538).}
  proc areaSetAreaMonitorCallback*(self: PhysicsServer2D; area: RID; callback: Callable) {.loadfrom("area_set_area_monitor_callback", 3379118538).}
  proc areaSetMonitorable*(self: PhysicsServer2D; area: RID; monitorable: Bool) {.loadfrom("area_set_monitorable", 1265174801).}
  proc bodyCreate*(self: PhysicsServer2D): RID {.loadfrom("body_create", 529393457).}
  proc bodySetSpace*(self: PhysicsServer2D; body: RID; space: RID) {.loadfrom("body_set_space", 395945892).}
  proc bodyGetSpace*(self: PhysicsServer2D; body: RID): RID {.loadfrom("body_get_space", 3814569979).}
  proc bodySetMode*(self: PhysicsServer2D; body: RID; mode: PhysicsServer2D|>BodyMode) {.loadfrom("body_set_mode", 1658067650).}
  proc bodyGetMode*(self: PhysicsServer2D; body: RID): PhysicsServer2D|>BodyMode {.loadfrom("body_get_mode", 3261702585).}
  proc bodyAddShape*(self: PhysicsServer2D; body: RID; shape: RID; transform: Transform2D = Transform2D|>init(); disabled: Bool = false) {.loadfrom("body_add_shape", 754862190).}
  proc bodySetShape*(self: PhysicsServer2D; body: RID; shapeIdx: int32; shape: RID) {.loadfrom("body_set_shape", 2310537182).}
  proc bodySetShapeTransform*(self: PhysicsServer2D; body: RID; shapeIdx: int32; transform: Transform2D) {.loadfrom("body_set_shape_transform", 736082694).}
  proc bodyGetShapeCount*(self: PhysicsServer2D; body: RID): int32 {.loadfrom("body_get_shape_count", 2198884583).}
  proc bodyGetShape*(self: PhysicsServer2D; body: RID; shapeIdx: int32): RID {.loadfrom("body_get_shape", 1066463050).}
  proc bodyGetShapeTransform*(self: PhysicsServer2D; body: RID; shapeIdx: int32): Transform2D {.loadfrom("body_get_shape_transform", 1324854622).}
  proc bodyRemoveShape*(self: PhysicsServer2D; body: RID; shapeIdx: int32) {.loadfrom("body_remove_shape", 3411492887).}
  proc bodyClearShapes*(self: PhysicsServer2D; body: RID) {.loadfrom("body_clear_shapes", 2722037293).}
  proc bodySetShapeDisabled*(self: PhysicsServer2D; body: RID; shapeIdx: int32; disabled: Bool) {.loadfrom("body_set_shape_disabled", 2658558584).}
  proc bodySetShapeAsOneWayCollision*(self: PhysicsServer2D; body: RID; shapeIdx: int32; enable: Bool; margin: Float) {.loadfrom("body_set_shape_as_one_way_collision", 2556489974).}
  proc bodyAttachObjectInstanceId*(self: PhysicsServer2D; body: RID; id: uint64) {.loadfrom("body_attach_object_instance_id", 3411492887).}
  proc bodyGetObjectInstanceId*(self: PhysicsServer2D; body: RID): uint64 {.loadfrom("body_get_object_instance_id", 2198884583).}
  proc bodyAttachCanvasInstanceId*(self: PhysicsServer2D; body: RID; id: uint64) {.loadfrom("body_attach_canvas_instance_id", 3411492887).}
  proc bodyGetCanvasInstanceId*(self: PhysicsServer2D; body: RID): uint64 {.loadfrom("body_get_canvas_instance_id", 2198884583).}
  proc bodySetContinuousCollisionDetectionMode*(self: PhysicsServer2D; body: RID; mode: PhysicsServer2D|>CCDMode) {.loadfrom("body_set_continuous_collision_detection_mode", 1882257015).}
  proc bodyGetContinuousCollisionDetectionMode*(self: PhysicsServer2D; body: RID): PhysicsServer2D|>CCDMode {.loadfrom("body_get_continuous_collision_detection_mode", 2661282217).}
  proc bodySetCollisionLayer*(self: PhysicsServer2D; body: RID; layer: uint32) {.loadfrom("body_set_collision_layer", 3411492887).}
  proc bodyGetCollisionLayer*(self: PhysicsServer2D; body: RID): uint32 {.loadfrom("body_get_collision_layer", 2198884583).}
  proc bodySetCollisionMask*(self: PhysicsServer2D; body: RID; mask: uint32) {.loadfrom("body_set_collision_mask", 3411492887).}
  proc bodyGetCollisionMask*(self: PhysicsServer2D; body: RID): uint32 {.loadfrom("body_get_collision_mask", 2198884583).}
  proc bodySetCollisionPriority*(self: PhysicsServer2D; body: RID; priority: Float) {.loadfrom("body_set_collision_priority", 1794382983).}
  proc bodyGetCollisionPriority*(self: PhysicsServer2D; body: RID): Float {.loadfrom("body_get_collision_priority", 866169185).}
  proc bodySetParam*(self: PhysicsServer2D; body: RID; param: PhysicsServer2D|>BodyParameter; value: ptr Variant) {.loadfrom("body_set_param", 2715630609).}
  proc bodyGetParam*(self: PhysicsServer2D; body: RID; param: PhysicsServer2D|>BodyParameter): Variant {.loadfrom("body_get_param", 3208033526).}
  proc bodyResetMassProperties*(self: PhysicsServer2D; body: RID) {.loadfrom("body_reset_mass_properties", 2722037293).}
  proc bodySetState*(self: PhysicsServer2D; body: RID; state: PhysicsServer2D|>BodyState; value: ptr Variant) {.loadfrom("body_set_state", 1706355209).}
  proc bodyGetState*(self: PhysicsServer2D; body: RID; state: PhysicsServer2D|>BodyState): Variant {.loadfrom("body_get_state", 4036367961).}
  proc bodyApplyCentralImpulse*(self: PhysicsServer2D; body: RID; impulse: Vector2) {.loadfrom("body_apply_central_impulse", 3201125042).}
  proc bodyApplyTorqueImpulse*(self: PhysicsServer2D; body: RID; impulse: Float) {.loadfrom("body_apply_torque_impulse", 1794382983).}
  proc bodyApplyImpulse*(self: PhysicsServer2D; body: RID; impulse: Vector2; position: Vector2 = gdvec(0, 0)) {.loadfrom("body_apply_impulse", 34330743).}
  proc bodyApplyCentralForce*(self: PhysicsServer2D; body: RID; force: Vector2) {.loadfrom("body_apply_central_force", 3201125042).}
  proc bodyApplyForce*(self: PhysicsServer2D; body: RID; force: Vector2; position: Vector2 = gdvec(0, 0)) {.loadfrom("body_apply_force", 34330743).}
  proc bodyApplyTorque*(self: PhysicsServer2D; body: RID; torque: Float) {.loadfrom("body_apply_torque", 1794382983).}
  proc bodyAddConstantCentralForce*(self: PhysicsServer2D; body: RID; force: Vector2) {.loadfrom("body_add_constant_central_force", 3201125042).}
  proc bodyAddConstantForce*(self: PhysicsServer2D; body: RID; force: Vector2; position: Vector2 = gdvec(0, 0)) {.loadfrom("body_add_constant_force", 34330743).}
  proc bodyAddConstantTorque*(self: PhysicsServer2D; body: RID; torque: Float) {.loadfrom("body_add_constant_torque", 1794382983).}
  proc bodySetConstantForce*(self: PhysicsServer2D; body: RID; force: Vector2) {.loadfrom("body_set_constant_force", 3201125042).}
  proc bodyGetConstantForce*(self: PhysicsServer2D; body: RID): Vector2 {.loadfrom("body_get_constant_force", 2440833711).}
  proc bodySetConstantTorque*(self: PhysicsServer2D; body: RID; torque: Float) {.loadfrom("body_set_constant_torque", 1794382983).}
  proc bodyGetConstantTorque*(self: PhysicsServer2D; body: RID): Float {.loadfrom("body_get_constant_torque", 866169185).}
  proc bodySetAxisVelocity*(self: PhysicsServer2D; body: RID; axisVelocity: Vector2) {.loadfrom("body_set_axis_velocity", 3201125042).}
  proc bodyAddCollisionException*(self: PhysicsServer2D; body: RID; exceptedBody: RID) {.loadfrom("body_add_collision_exception", 395945892).}
  proc bodyRemoveCollisionException*(self: PhysicsServer2D; body: RID; exceptedBody: RID) {.loadfrom("body_remove_collision_exception", 395945892).}
  proc bodySetMaxContactsReported*(self: PhysicsServer2D; body: RID; amount: int32) {.loadfrom("body_set_max_contacts_reported", 3411492887).}
  proc bodyGetMaxContactsReported*(self: PhysicsServer2D; body: RID): int32 {.loadfrom("body_get_max_contacts_reported", 2198884583).}
  proc bodySetOmitForceIntegration*(self: PhysicsServer2D; body: RID; enable: Bool) {.loadfrom("body_set_omit_force_integration", 1265174801).}
  proc bodyIsOmittingForceIntegration*(self: PhysicsServer2D; body: RID): Bool {.loadfrom("body_is_omitting_force_integration", 4155700596).}
  proc bodySetForceIntegrationCallback*(self: PhysicsServer2D; body: RID; callable: Callable; userdata: ptr Variant = nil) {.loadfrom("body_set_force_integration_callback", 3059434249).}
  proc bodyTestMotion*(self: PhysicsServer2D; body: RID; parameters: Ref[PhysicsTestMotionParameters2D]; retval: Ref[PhysicsTestMotionResult2D] = default Ref[PhysicsTestMotionResult2D]): Bool {.loadfrom("body_test_motion", 1699844009).}
  proc bodyGetDirectState*(self: PhysicsServer2D; body: RID): PhysicsDirectBodyState2D {.loadfrom("body_get_direct_state", 1191931871).}
  proc jointCreate*(self: PhysicsServer2D): RID {.loadfrom("joint_create", 529393457).}
  proc jointClear*(self: PhysicsServer2D; joint: RID) {.loadfrom("joint_clear", 2722037293).}
  proc jointSetParam*(self: PhysicsServer2D; joint: RID; param: PhysicsServer2D|>JointParam; value: Float) {.loadfrom("joint_set_param", 3972556514).}
  proc jointGetParam*(self: PhysicsServer2D; joint: RID; param: PhysicsServer2D|>JointParam): Float {.loadfrom("joint_get_param", 4016448949).}
  proc jointDisableCollisionsBetweenBodies*(self: PhysicsServer2D; joint: RID; disable: Bool) {.loadfrom("joint_disable_collisions_between_bodies", 1265174801).}
  proc jointIsDisabledCollisionsBetweenBodies*(self: PhysicsServer2D; joint: RID): Bool {.loadfrom("joint_is_disabled_collisions_between_bodies", 4155700596).}
  proc jointMakePin*(self: PhysicsServer2D; joint: RID; anchor: Vector2; bodyA: RID; bodyB: RID = RID()) {.loadfrom("joint_make_pin", 2288600450).}
  proc jointMakeGroove*(self: PhysicsServer2D; joint: RID; groove1A: Vector2; groove2A: Vector2; anchorB: Vector2; bodyA: RID = RID(); bodyB: RID = RID()) {.loadfrom("joint_make_groove", 3573265764).}
  proc jointMakeDampedSpring*(self: PhysicsServer2D; joint: RID; anchorA: Vector2; anchorB: Vector2; bodyA: RID; bodyB: RID = RID()) {.loadfrom("joint_make_damped_spring", 206603952).}
  proc pinJointSetParam*(self: PhysicsServer2D; joint: RID; param: PhysicsServer2D|>PinJointParam; value: Float) {.loadfrom("pin_joint_set_param", 550574241).}
  proc pinJointGetParam*(self: PhysicsServer2D; joint: RID; param: PhysicsServer2D|>PinJointParam): Float {.loadfrom("pin_joint_get_param", 348281383).}
  proc dampedSpringJointSetParam*(self: PhysicsServer2D; joint: RID; param: PhysicsServer2D|>DampedSpringParam; value: Float) {.loadfrom("damped_spring_joint_set_param", 220564071).}
  proc dampedSpringJointGetParam*(self: PhysicsServer2D; joint: RID; param: PhysicsServer2D|>DampedSpringParam): Float {.loadfrom("damped_spring_joint_get_param", 2075871277).}
  proc jointGetType*(self: PhysicsServer2D; joint: RID): PhysicsServer2D|>JointType {.loadfrom("joint_get_type", 4262502231).}
  proc freeRid*(self: PhysicsServer2D; rid: RID) {.loadfrom("free_rid", 2722037293).}
  proc setActive*(self: PhysicsServer2D; active: Bool) {.loadfrom("set_active", 2586408642).}
  proc getProcessInfo*(self: PhysicsServer2D; processInfo: PhysicsServer2D|>ProcessInfo): int32 {.loadfrom("get_process_info", 576496006).}

# PhysicsServer2DManager
define_godot_engine_class_essencials(PhysicsServer2DManager, Object)
PhysicsServer2DManager.memberProcs:
  proc registerServer*(self: PhysicsServer2DManager; name: String; createCallback: Callable) {.loadfrom("register_server", 2137474292).}
  proc setDefaultServer*(self: PhysicsServer2DManager; name: String; priority: int32) {.loadfrom("set_default_server", 2956805083).}

# PhysicsServer3D
define_godot_engine_class_essencials(PhysicsServer3D, Object)
PhysicsServer3D.memberProcs:
  proc worldBoundaryShapeCreate*(self: PhysicsServer3D): RID {.loadfrom("world_boundary_shape_create", 529393457).}
  proc separationRayShapeCreate*(self: PhysicsServer3D): RID {.loadfrom("separation_ray_shape_create", 529393457).}
  proc sphereShapeCreate*(self: PhysicsServer3D): RID {.loadfrom("sphere_shape_create", 529393457).}
  proc boxShapeCreate*(self: PhysicsServer3D): RID {.loadfrom("box_shape_create", 529393457).}
  proc capsuleShapeCreate*(self: PhysicsServer3D): RID {.loadfrom("capsule_shape_create", 529393457).}
  proc cylinderShapeCreate*(self: PhysicsServer3D): RID {.loadfrom("cylinder_shape_create", 529393457).}
  proc convexPolygonShapeCreate*(self: PhysicsServer3D): RID {.loadfrom("convex_polygon_shape_create", 529393457).}
  proc concavePolygonShapeCreate*(self: PhysicsServer3D): RID {.loadfrom("concave_polygon_shape_create", 529393457).}
  proc heightmapShapeCreate*(self: PhysicsServer3D): RID {.loadfrom("heightmap_shape_create", 529393457).}
  proc customShapeCreate*(self: PhysicsServer3D): RID {.loadfrom("custom_shape_create", 529393457).}
  proc shapeSetData*(self: PhysicsServer3D; shape: RID; data: ptr Variant) {.loadfrom("shape_set_data", 3175752987).}
  proc shapeGetType*(self: PhysicsServer3D; shape: RID): PhysicsServer3D|>ShapeType {.loadfrom("shape_get_type", 3418923367).}
  proc shapeGetData*(self: PhysicsServer3D; shape: RID): Variant {.loadfrom("shape_get_data", 4171304767).}
  proc spaceCreate*(self: PhysicsServer3D): RID {.loadfrom("space_create", 529393457).}
  proc spaceSetActive*(self: PhysicsServer3D; space: RID; active: Bool) {.loadfrom("space_set_active", 1265174801).}
  proc spaceIsActive*(self: PhysicsServer3D; space: RID): Bool {.loadfrom("space_is_active", 4155700596).}
  proc spaceSetParam*(self: PhysicsServer3D; space: RID; param: PhysicsServer3D|>SpaceParameter; value: Float) {.loadfrom("space_set_param", 2406017470).}
  proc spaceGetParam*(self: PhysicsServer3D; space: RID; param: PhysicsServer3D|>SpaceParameter): Float {.loadfrom("space_get_param", 1523206731).}
  proc spaceGetDirectState*(self: PhysicsServer3D; space: RID): PhysicsDirectSpaceState3D {.loadfrom("space_get_direct_state", 2048616813).}
  proc areaCreate*(self: PhysicsServer3D): RID {.loadfrom("area_create", 529393457).}
  proc areaSetSpace*(self: PhysicsServer3D; area: RID; space: RID) {.loadfrom("area_set_space", 395945892).}
  proc areaGetSpace*(self: PhysicsServer3D; area: RID): RID {.loadfrom("area_get_space", 3814569979).}
  proc areaAddShape*(self: PhysicsServer3D; area: RID; shape: RID; transform: Transform3D = Transform3D|>init(); disabled: Bool = false) {.loadfrom("area_add_shape", 4040559639).}
  proc areaSetShape*(self: PhysicsServer3D; area: RID; shapeIdx: int32; shape: RID) {.loadfrom("area_set_shape", 2310537182).}
  proc areaSetShapeTransform*(self: PhysicsServer3D; area: RID; shapeIdx: int32; transform: Transform3D) {.loadfrom("area_set_shape_transform", 675327471).}
  proc areaSetShapeDisabled*(self: PhysicsServer3D; area: RID; shapeIdx: int32; disabled: Bool) {.loadfrom("area_set_shape_disabled", 2658558584).}
  proc areaGetShapeCount*(self: PhysicsServer3D; area: RID): int32 {.loadfrom("area_get_shape_count", 2198884583).}
  proc areaGetShape*(self: PhysicsServer3D; area: RID; shapeIdx: int32): RID {.loadfrom("area_get_shape", 1066463050).}
  proc areaGetShapeTransform*(self: PhysicsServer3D; area: RID; shapeIdx: int32): Transform3D {.loadfrom("area_get_shape_transform", 1050775521).}
  proc areaRemoveShape*(self: PhysicsServer3D; area: RID; shapeIdx: int32) {.loadfrom("area_remove_shape", 3411492887).}
  proc areaClearShapes*(self: PhysicsServer3D; area: RID) {.loadfrom("area_clear_shapes", 2722037293).}
  proc areaSetCollisionLayer*(self: PhysicsServer3D; area: RID; layer: uint32) {.loadfrom("area_set_collision_layer", 3411492887).}
  proc areaGetCollisionLayer*(self: PhysicsServer3D; area: RID): uint32 {.loadfrom("area_get_collision_layer", 2198884583).}
  proc areaSetCollisionMask*(self: PhysicsServer3D; area: RID; mask: uint32) {.loadfrom("area_set_collision_mask", 3411492887).}
  proc areaGetCollisionMask*(self: PhysicsServer3D; area: RID): uint32 {.loadfrom("area_get_collision_mask", 2198884583).}
  proc areaSetParam*(self: PhysicsServer3D; area: RID; param: PhysicsServer3D|>AreaParameter; value: ptr Variant) {.loadfrom("area_set_param", 2980114638).}
  proc areaSetTransform*(self: PhysicsServer3D; area: RID; transform: Transform3D) {.loadfrom("area_set_transform", 3935195649).}
  proc areaGetParam*(self: PhysicsServer3D; area: RID; param: PhysicsServer3D|>AreaParameter): Variant {.loadfrom("area_get_param", 890056067).}
  proc areaGetTransform*(self: PhysicsServer3D; area: RID): Transform3D {.loadfrom("area_get_transform", 1128465797).}
  proc areaAttachObjectInstanceId*(self: PhysicsServer3D; area: RID; id: uint64) {.loadfrom("area_attach_object_instance_id", 3411492887).}
  proc areaGetObjectInstanceId*(self: PhysicsServer3D; area: RID): uint64 {.loadfrom("area_get_object_instance_id", 2198884583).}
  proc areaSetMonitorCallback*(self: PhysicsServer3D; area: RID; callback: Callable) {.loadfrom("area_set_monitor_callback", 3379118538).}
  proc areaSetAreaMonitorCallback*(self: PhysicsServer3D; area: RID; callback: Callable) {.loadfrom("area_set_area_monitor_callback", 3379118538).}
  proc areaSetMonitorable*(self: PhysicsServer3D; area: RID; monitorable: Bool) {.loadfrom("area_set_monitorable", 1265174801).}
  proc areaSetRayPickable*(self: PhysicsServer3D; area: RID; enable: Bool) {.loadfrom("area_set_ray_pickable", 1265174801).}
  proc bodyCreate*(self: PhysicsServer3D): RID {.loadfrom("body_create", 529393457).}
  proc bodySetSpace*(self: PhysicsServer3D; body: RID; space: RID) {.loadfrom("body_set_space", 395945892).}
  proc bodyGetSpace*(self: PhysicsServer3D; body: RID): RID {.loadfrom("body_get_space", 3814569979).}
  proc bodySetMode*(self: PhysicsServer3D; body: RID; mode: PhysicsServer3D|>BodyMode) {.loadfrom("body_set_mode", 606803466).}
  proc bodyGetMode*(self: PhysicsServer3D; body: RID): PhysicsServer3D|>BodyMode {.loadfrom("body_get_mode", 2488819728).}
  proc bodySetCollisionLayer*(self: PhysicsServer3D; body: RID; layer: uint32) {.loadfrom("body_set_collision_layer", 3411492887).}
  proc bodyGetCollisionLayer*(self: PhysicsServer3D; body: RID): uint32 {.loadfrom("body_get_collision_layer", 2198884583).}
  proc bodySetCollisionMask*(self: PhysicsServer3D; body: RID; mask: uint32) {.loadfrom("body_set_collision_mask", 3411492887).}
  proc bodyGetCollisionMask*(self: PhysicsServer3D; body: RID): uint32 {.loadfrom("body_get_collision_mask", 2198884583).}
  proc bodySetCollisionPriority*(self: PhysicsServer3D; body: RID; priority: Float) {.loadfrom("body_set_collision_priority", 1794382983).}
  proc bodyGetCollisionPriority*(self: PhysicsServer3D; body: RID): Float {.loadfrom("body_get_collision_priority", 866169185).}
  proc bodyAddShape*(self: PhysicsServer3D; body: RID; shape: RID; transform: Transform3D = Transform3D|>init(); disabled: Bool = false) {.loadfrom("body_add_shape", 4040559639).}
  proc bodySetShape*(self: PhysicsServer3D; body: RID; shapeIdx: int32; shape: RID) {.loadfrom("body_set_shape", 2310537182).}
  proc bodySetShapeTransform*(self: PhysicsServer3D; body: RID; shapeIdx: int32; transform: Transform3D) {.loadfrom("body_set_shape_transform", 675327471).}
  proc bodySetShapeDisabled*(self: PhysicsServer3D; body: RID; shapeIdx: int32; disabled: Bool) {.loadfrom("body_set_shape_disabled", 2658558584).}
  proc bodyGetShapeCount*(self: PhysicsServer3D; body: RID): int32 {.loadfrom("body_get_shape_count", 2198884583).}
  proc bodyGetShape*(self: PhysicsServer3D; body: RID; shapeIdx: int32): RID {.loadfrom("body_get_shape", 1066463050).}
  proc bodyGetShapeTransform*(self: PhysicsServer3D; body: RID; shapeIdx: int32): Transform3D {.loadfrom("body_get_shape_transform", 1050775521).}
  proc bodyRemoveShape*(self: PhysicsServer3D; body: RID; shapeIdx: int32) {.loadfrom("body_remove_shape", 3411492887).}
  proc bodyClearShapes*(self: PhysicsServer3D; body: RID) {.loadfrom("body_clear_shapes", 2722037293).}
  proc bodyAttachObjectInstanceId*(self: PhysicsServer3D; body: RID; id: uint64) {.loadfrom("body_attach_object_instance_id", 3411492887).}
  proc bodyGetObjectInstanceId*(self: PhysicsServer3D; body: RID): uint64 {.loadfrom("body_get_object_instance_id", 2198884583).}
  proc bodySetEnableContinuousCollisionDetection*(self: PhysicsServer3D; body: RID; enable: Bool) {.loadfrom("body_set_enable_continuous_collision_detection", 1265174801).}
  proc bodyIsContinuousCollisionDetectionEnabled*(self: PhysicsServer3D; body: RID): Bool {.loadfrom("body_is_continuous_collision_detection_enabled", 4155700596).}
  proc bodySetParam*(self: PhysicsServer3D; body: RID; param: PhysicsServer3D|>BodyParameter; value: ptr Variant) {.loadfrom("body_set_param", 910941953).}
  proc bodyGetParam*(self: PhysicsServer3D; body: RID; param: PhysicsServer3D|>BodyParameter): Variant {.loadfrom("body_get_param", 3385027841).}
  proc bodyResetMassProperties*(self: PhysicsServer3D; body: RID) {.loadfrom("body_reset_mass_properties", 2722037293).}
  proc bodySetState*(self: PhysicsServer3D; body: RID; state: PhysicsServer3D|>BodyState; value: ptr Variant) {.loadfrom("body_set_state", 599977762).}
  proc bodyGetState*(self: PhysicsServer3D; body: RID; state: PhysicsServer3D|>BodyState): Variant {.loadfrom("body_get_state", 1850449534).}
  proc bodyApplyCentralImpulse*(self: PhysicsServer3D; body: RID; impulse: Vector3) {.loadfrom("body_apply_central_impulse", 3227306858).}
  proc bodyApplyImpulse*(self: PhysicsServer3D; body: RID; impulse: Vector3; position: Vector3 = gdvec(0, 0, 0)) {.loadfrom("body_apply_impulse", 110375048).}
  proc bodyApplyTorqueImpulse*(self: PhysicsServer3D; body: RID; impulse: Vector3) {.loadfrom("body_apply_torque_impulse", 3227306858).}
  proc bodyApplyCentralForce*(self: PhysicsServer3D; body: RID; force: Vector3) {.loadfrom("body_apply_central_force", 3227306858).}
  proc bodyApplyForce*(self: PhysicsServer3D; body: RID; force: Vector3; position: Vector3 = gdvec(0, 0, 0)) {.loadfrom("body_apply_force", 110375048).}
  proc bodyApplyTorque*(self: PhysicsServer3D; body: RID; torque: Vector3) {.loadfrom("body_apply_torque", 3227306858).}
  proc bodyAddConstantCentralForce*(self: PhysicsServer3D; body: RID; force: Vector3) {.loadfrom("body_add_constant_central_force", 3227306858).}
  proc bodyAddConstantForce*(self: PhysicsServer3D; body: RID; force: Vector3; position: Vector3 = gdvec(0, 0, 0)) {.loadfrom("body_add_constant_force", 110375048).}
  proc bodyAddConstantTorque*(self: PhysicsServer3D; body: RID; torque: Vector3) {.loadfrom("body_add_constant_torque", 3227306858).}
  proc bodySetConstantForce*(self: PhysicsServer3D; body: RID; force: Vector3) {.loadfrom("body_set_constant_force", 3227306858).}
  proc bodyGetConstantForce*(self: PhysicsServer3D; body: RID): Vector3 {.loadfrom("body_get_constant_force", 531438156).}
  proc bodySetConstantTorque*(self: PhysicsServer3D; body: RID; torque: Vector3) {.loadfrom("body_set_constant_torque", 3227306858).}
  proc bodyGetConstantTorque*(self: PhysicsServer3D; body: RID): Vector3 {.loadfrom("body_get_constant_torque", 531438156).}
  proc bodySetAxisVelocity*(self: PhysicsServer3D; body: RID; axisVelocity: Vector3) {.loadfrom("body_set_axis_velocity", 3227306858).}
  proc bodySetAxisLock*(self: PhysicsServer3D; body: RID; axis: PhysicsServer3D|>BodyAxis; lock: Bool) {.loadfrom("body_set_axis_lock", 2020836892).}
  proc bodyIsAxisLocked*(self: PhysicsServer3D; body: RID; axis: PhysicsServer3D|>BodyAxis): Bool {.loadfrom("body_is_axis_locked", 587853580).}
  proc bodyAddCollisionException*(self: PhysicsServer3D; body: RID; exceptedBody: RID) {.loadfrom("body_add_collision_exception", 395945892).}
  proc bodyRemoveCollisionException*(self: PhysicsServer3D; body: RID; exceptedBody: RID) {.loadfrom("body_remove_collision_exception", 395945892).}
  proc bodySetMaxContactsReported*(self: PhysicsServer3D; body: RID; amount: int32) {.loadfrom("body_set_max_contacts_reported", 3411492887).}
  proc bodyGetMaxContactsReported*(self: PhysicsServer3D; body: RID): int32 {.loadfrom("body_get_max_contacts_reported", 2198884583).}
  proc bodySetOmitForceIntegration*(self: PhysicsServer3D; body: RID; enable: Bool) {.loadfrom("body_set_omit_force_integration", 1265174801).}
  proc bodyIsOmittingForceIntegration*(self: PhysicsServer3D; body: RID): Bool {.loadfrom("body_is_omitting_force_integration", 4155700596).}
  proc bodySetForceIntegrationCallback*(self: PhysicsServer3D; body: RID; callable: Callable; userdata: ptr Variant = nil) {.loadfrom("body_set_force_integration_callback", 3059434249).}
  proc bodySetRayPickable*(self: PhysicsServer3D; body: RID; enable: Bool) {.loadfrom("body_set_ray_pickable", 1265174801).}
  proc bodyTestMotion*(self: PhysicsServer3D; body: RID; parameters: Ref[PhysicsTestMotionParameters3D]; retval: Ref[PhysicsTestMotionResult3D] = default Ref[PhysicsTestMotionResult3D]): Bool {.loadfrom("body_test_motion", 1944921792).}
  proc bodyGetDirectState*(self: PhysicsServer3D; body: RID): PhysicsDirectBodyState3D {.loadfrom("body_get_direct_state", 3029727957).}
  proc softBodyGetBounds*(self: PhysicsServer3D; body: RID): AABB {.loadfrom("soft_body_get_bounds", 974181306).}
  proc jointCreate*(self: PhysicsServer3D): RID {.loadfrom("joint_create", 529393457).}
  proc jointClear*(self: PhysicsServer3D; joint: RID) {.loadfrom("joint_clear", 2722037293).}
  proc jointMakePin*(self: PhysicsServer3D; joint: RID; bodyA: RID; localA: Vector3; bodyB: RID; localB: Vector3) {.loadfrom("joint_make_pin", 4280171926).}
  proc pinJointSetParam*(self: PhysicsServer3D; joint: RID; param: PhysicsServer3D|>PinJointParam; value: Float) {.loadfrom("pin_joint_set_param", 810685294).}
  proc pinJointGetParam*(self: PhysicsServer3D; joint: RID; param: PhysicsServer3D|>PinJointParam): Float {.loadfrom("pin_joint_get_param", 2817972347).}
  proc pinJointSetLocalA*(self: PhysicsServer3D; joint: RID; localA: Vector3) {.loadfrom("pin_joint_set_local_a", 3227306858).}
  proc pinJointGetLocalA*(self: PhysicsServer3D; joint: RID): Vector3 {.loadfrom("pin_joint_get_local_a", 531438156).}
  proc pinJointSetLocalB*(self: PhysicsServer3D; joint: RID; localB: Vector3) {.loadfrom("pin_joint_set_local_b", 3227306858).}
  proc pinJointGetLocalB*(self: PhysicsServer3D; joint: RID): Vector3 {.loadfrom("pin_joint_get_local_b", 531438156).}
  proc jointMakeHinge*(self: PhysicsServer3D; joint: RID; bodyA: RID; hingeA: Transform3D; bodyB: RID; hingeB: Transform3D) {.loadfrom("joint_make_hinge", 1684107643).}
  proc hingeJointSetParam*(self: PhysicsServer3D; joint: RID; param: PhysicsServer3D|>HingeJointParam; value: Float) {.loadfrom("hinge_joint_set_param", 3165502333).}
  proc hingeJointGetParam*(self: PhysicsServer3D; joint: RID; param: PhysicsServer3D|>HingeJointParam): Float {.loadfrom("hinge_joint_get_param", 2129207581).}
  proc hingeJointSetFlag*(self: PhysicsServer3D; joint: RID; flag: PhysicsServer3D|>HingeJointFlag; enabled: Bool) {.loadfrom("hinge_joint_set_flag", 1601626188).}
  proc hingeJointGetFlag*(self: PhysicsServer3D; joint: RID; flag: PhysicsServer3D|>HingeJointFlag): Bool {.loadfrom("hinge_joint_get_flag", 4165147865).}
  proc jointMakeSlider*(self: PhysicsServer3D; joint: RID; bodyA: RID; localRefA: Transform3D; bodyB: RID; localRefB: Transform3D) {.loadfrom("joint_make_slider", 1684107643).}
  proc sliderJointSetParam*(self: PhysicsServer3D; joint: RID; param: PhysicsServer3D|>SliderJointParam; value: Float) {.loadfrom("slider_joint_set_param", 2264833593).}
  proc sliderJointGetParam*(self: PhysicsServer3D; joint: RID; param: PhysicsServer3D|>SliderJointParam): Float {.loadfrom("slider_joint_get_param", 3498644957).}
  proc jointMakeConeTwist*(self: PhysicsServer3D; joint: RID; bodyA: RID; localRefA: Transform3D; bodyB: RID; localRefB: Transform3D) {.loadfrom("joint_make_cone_twist", 1684107643).}
  proc coneTwistJointSetParam*(self: PhysicsServer3D; joint: RID; param: PhysicsServer3D|>ConeTwistJointParam; value: Float) {.loadfrom("cone_twist_joint_set_param", 808587618).}
  proc coneTwistJointGetParam*(self: PhysicsServer3D; joint: RID; param: PhysicsServer3D|>ConeTwistJointParam): Float {.loadfrom("cone_twist_joint_get_param", 1134789658).}
  proc jointGetType*(self: PhysicsServer3D; joint: RID): PhysicsServer3D|>JointType {.loadfrom("joint_get_type", 4290791900).}
  proc jointSetSolverPriority*(self: PhysicsServer3D; joint: RID; priority: int32) {.loadfrom("joint_set_solver_priority", 3411492887).}
  proc jointGetSolverPriority*(self: PhysicsServer3D; joint: RID): int32 {.loadfrom("joint_get_solver_priority", 2198884583).}
  proc jointDisableCollisionsBetweenBodies*(self: PhysicsServer3D; joint: RID; disable: Bool) {.loadfrom("joint_disable_collisions_between_bodies", 1265174801).}
  proc jointIsDisabledCollisionsBetweenBodies*(self: PhysicsServer3D; joint: RID): Bool {.loadfrom("joint_is_disabled_collisions_between_bodies", 4155700596).}
  proc jointMakeGeneric6dof*(self: PhysicsServer3D; joint: RID; bodyA: RID; localRefA: Transform3D; bodyB: RID; localRefB: Transform3D) {.loadfrom("joint_make_generic_6dof", 1684107643).}
  proc generic6dofJointSetParam*(self: PhysicsServer3D; joint: RID; axis: Vector3|>Axis; param: PhysicsServer3D|>G6DOFJointAxisParam; value: Float) {.loadfrom("generic_6dof_joint_set_param", 2600081391).}
  proc generic6dofJointGetParam*(self: PhysicsServer3D; joint: RID; axis: Vector3|>Axis; param: PhysicsServer3D|>G6DOFJointAxisParam): Float {.loadfrom("generic_6dof_joint_get_param", 467122058).}
  proc generic6dofJointSetFlag*(self: PhysicsServer3D; joint: RID; axis: Vector3|>Axis; flag: PhysicsServer3D|>G6DOFJointAxisFlag; enable: Bool) {.loadfrom("generic_6dof_joint_set_flag", 3570926903).}
  proc generic6dofJointGetFlag*(self: PhysicsServer3D; joint: RID; axis: Vector3|>Axis; flag: PhysicsServer3D|>G6DOFJointAxisFlag): Bool {.loadfrom("generic_6dof_joint_get_flag", 4158090196).}
  proc freeRid*(self: PhysicsServer3D; rid: RID) {.loadfrom("free_rid", 2722037293).}
  proc setActive*(self: PhysicsServer3D; active: Bool) {.loadfrom("set_active", 2586408642).}
  proc getProcessInfo*(self: PhysicsServer3D; processInfo: PhysicsServer3D|>ProcessInfo): int32 {.loadfrom("get_process_info", 1332958745).}

# PhysicsServer3DManager
define_godot_engine_class_essencials(PhysicsServer3DManager, Object)
PhysicsServer3DManager.memberProcs:
  proc registerServer*(self: PhysicsServer3DManager; name: String; createCallback: Callable) {.loadfrom("register_server", 2137474292).}
  proc setDefaultServer*(self: PhysicsServer3DManager; name: String; priority: int32) {.loadfrom("set_default_server", 2956805083).}

# PhysicsServer3DRenderingServerHandler
define_godot_engine_class_essencials(PhysicsServer3DRenderingServerHandler, Object)
method setVertex*(self: PhysicsServer3DRenderingServerHandler; vertexId: int32; vertices: pointer) {.base.} = (discard)
method setNormal*(self: PhysicsServer3DRenderingServerHandler; vertexId: int32; normals: pointer) {.base.} = (discard)
method setAabb*(self: PhysicsServer3DRenderingServerHandler; aabb: AABB) {.base.} = (discard)

# ProjectSettings
define_godot_engine_class_essencials(ProjectSettings, Object)
ProjectSettings.memberProcs:
  proc hasSetting*(self: ProjectSettings; name: String): Bool {.loadfrom("has_setting", 3927539163).}
  proc setSetting*(self: ProjectSettings; name: String; value: ptr Variant) {.loadfrom("set_setting", 402577236).}
  proc getSetting*(self: ProjectSettings; name: String; defaultValue: ptr Variant = nil): Variant {.loadfrom("get_setting", 223050753).}
  proc getSettingWithOverride*(self: ProjectSettings; name: StringName): Variant {.loadfrom("get_setting_with_override", 2760726917).}
  proc getGlobalClassList*(self: ProjectSettings): TypedArray[Dictionary] {.loadfrom("get_global_class_list", 2915620761).}
  proc setOrder*(self: ProjectSettings; name: String; position: int32) {.loadfrom("set_order", 2956805083).}
  proc getOrder*(self: ProjectSettings; name: String): int32 {.loadfrom("get_order", 1321353865).}
  proc setInitialValue*(self: ProjectSettings; name: String; value: ptr Variant) {.loadfrom("set_initial_value", 402577236).}
  proc setAsBasic*(self: ProjectSettings; name: String; basic: Bool) {.loadfrom("set_as_basic", 2678287736).}
  proc setAsInternal*(self: ProjectSettings; name: String; internal: Bool) {.loadfrom("set_as_internal", 2678287736).}
  proc addPropertyInfo*(self: ProjectSettings; hint: Dictionary) {.loadfrom("add_property_info", 4155329257).}
  proc setRestartIfChanged*(self: ProjectSettings; name: String; restart: Bool) {.loadfrom("set_restart_if_changed", 2678287736).}
  proc clear*(self: ProjectSettings; name: String) {.loadfrom("clear", 83702148).}
  proc localizePath*(self: ProjectSettings; path: String): String {.loadfrom("localize_path", 3135753539).}
  proc globalizePath*(self: ProjectSettings; path: String): String {.loadfrom("globalize_path", 3135753539).}
  proc save*(self: ProjectSettings): Error {.loadfrom("save", 166280745).}
  proc loadResourcePack*(self: ProjectSettings; pack: String; replaceFiles: Bool = true; offset: int32 = 0): Bool {.loadfrom("load_resource_pack", 3001721055).}
  proc saveCustom*(self: ProjectSettings; file: String): Error {.loadfrom("save_custom", 166001499).}

# RefCounted
define_godot_engine_class_essencials(RefCounted, Object)
RefCounted.memberProcs:
  proc initRef*(self: Ref[RefCounted]): Bool {.loadfrom("init_ref", 2240911060).}
  proc reference*(self: Ref[RefCounted]): Bool {.loadfrom("reference", 2240911060).}
  proc unreference*(self: Ref[RefCounted]): Bool {.loadfrom("unreference", 2240911060).}
  proc getReferenceCount*(self: Ref[RefCounted]): int32 {.loadfrom("get_reference_count", 3905245786).}

# RenderingDevice
define_godot_engine_class_essencials(RenderingDevice, Object)
RenderingDevice.memberProcs:
  proc textureCreate*(self: RenderingDevice; format: Ref[RDTextureFormat]; view: Ref[RDTextureView]; data: TypedArray[PackedByteArray] = TypedArray|>init[PackedByteArray]()): RID {.loadfrom("texture_create", 3011278298).}
  proc textureCreateShared*(self: RenderingDevice; view: Ref[RDTextureView]; withTexture: RID): RID {.loadfrom("texture_create_shared", 3178156134).}
  proc textureCreateSharedFromSlice*(self: RenderingDevice; view: Ref[RDTextureView]; withTexture: RID; layer: uint32; mipmap: uint32; mipmaps: uint32 = 1'u32; sliceType: RenderingDevice|>TextureSliceType = textureSlice2d): RID {.loadfrom("texture_create_shared_from_slice", 864132525).}
  proc textureUpdate*(self: RenderingDevice; texture: RID; layer: uint32; data: PackedByteArray; postBarrier: set[RenderingDevice|>BarrierMask] = (RenderingDevice|>BarrierMask).barrierMaskAllBarriers): Error {.loadfrom("texture_update", 2736912341).}
  proc textureGetData*(self: RenderingDevice; texture: RID; layer: uint32): PackedByteArray {.loadfrom("texture_get_data", 1859412099).}
  proc textureIsFormatSupportedForUsage*(self: RenderingDevice; format: RenderingDevice|>DataFormat; usageFlags: set[RenderingDevice|>TextureUsageBits]): Bool {.loadfrom("texture_is_format_supported_for_usage", 2592520478).}
  proc textureIsShared*(self: RenderingDevice; texture: RID): Bool {.loadfrom("texture_is_shared", 3521089500).}
  proc textureIsValid*(self: RenderingDevice; texture: RID): Bool {.loadfrom("texture_is_valid", 3521089500).}
  proc textureCopy*(self: RenderingDevice; fromTexture: RID; toTexture: RID; fromPos: Vector3; toPos: Vector3; size: Vector3; srcMipmap: uint32; dstMipmap: uint32; srcLayer: uint32; dstLayer: uint32; postBarrier: set[RenderingDevice|>BarrierMask] = (RenderingDevice|>BarrierMask).barrierMaskAllBarriers): Error {.loadfrom("texture_copy", 3741367532).}
  proc textureClear*(self: RenderingDevice; texture: RID; color: Color; baseMipmap: uint32; mipmapCount: uint32; baseLayer: uint32; layerCount: uint32; postBarrier: set[RenderingDevice|>BarrierMask] = (RenderingDevice|>BarrierMask).barrierMaskAllBarriers): Error {.loadfrom("texture_clear", 3423681478).}
  proc textureResolveMultisample*(self: RenderingDevice; fromTexture: RID; toTexture: RID; postBarrier: set[RenderingDevice|>BarrierMask] = (RenderingDevice|>BarrierMask).barrierMaskAllBarriers): Error {.loadfrom("texture_resolve_multisample", 2126834943).}
  proc textureGetNativeHandle*(self: RenderingDevice; texture: RID): uint64 {.loadfrom("texture_get_native_handle", 3917799429).}
  proc framebufferFormatCreate*(self: RenderingDevice; attachments: TypedArray[RDAttachmentFormat]; viewCount: uint32 = 1'u32): int64 {.loadfrom("framebuffer_format_create", 2635475316).}
  proc framebufferFormatCreateMultipass*(self: RenderingDevice; attachments: TypedArray[RDAttachmentFormat]; passes: TypedArray[RDFramebufferPass]; viewCount: uint32 = 1'u32): int64 {.loadfrom("framebuffer_format_create_multipass", 1992489524).}
  proc framebufferFormatCreateEmpty*(self: RenderingDevice; samples: RenderingDevice|>TextureSamples = textureSamples1): int64 {.loadfrom("framebuffer_format_create_empty", 555930169).}
  proc framebufferFormatGetTextureSamples*(self: RenderingDevice; format: int64; renderPass: uint32 = 0'u32): RenderingDevice|>TextureSamples {.loadfrom("framebuffer_format_get_texture_samples", 1036806638).}
  proc framebufferCreate*(self: RenderingDevice; textures: TypedArray[RID]; validateWithFormat: int64 = -1; viewCount: uint32 = 1'u32): RID {.loadfrom("framebuffer_create", 1884747791).}
  proc framebufferCreateMultipass*(self: RenderingDevice; textures: TypedArray[RID]; passes: TypedArray[RDFramebufferPass]; validateWithFormat: int64 = -1; viewCount: uint32 = 1'u32): RID {.loadfrom("framebuffer_create_multipass", 452534725).}
  proc framebufferCreateEmpty*(self: RenderingDevice; size: Vector2i; samples: RenderingDevice|>TextureSamples = textureSamples1; validateWithFormat: int64 = -1): RID {.loadfrom("framebuffer_create_empty", 382373098).}
  proc framebufferGetFormat*(self: RenderingDevice; framebuffer: RID): int64 {.loadfrom("framebuffer_get_format", 3917799429).}
  proc framebufferIsValid*(self: RenderingDevice; framebuffer: RID): Bool {.loadfrom("framebuffer_is_valid", 4155700596).}
  proc samplerCreate*(self: RenderingDevice; state: Ref[RDSamplerState]): RID {.loadfrom("sampler_create", 2327892535).}
  proc samplerIsFormatSupportedForFilter*(self: RenderingDevice; format: RenderingDevice|>DataFormat; samplerFilter: RenderingDevice|>SamplerFilter): Bool {.loadfrom("sampler_is_format_supported_for_filter", 2247922238).}
  proc vertexBufferCreate*(self: RenderingDevice; sizeBytes: uint32; data: PackedByteArray = PackedByteArray(); useAsStorage: Bool = false): RID {.loadfrom("vertex_buffer_create", 3491282828).}
  proc vertexFormatCreate*(self: RenderingDevice; vertexDescriptions: TypedArray[RDVertexAttribute]): int64 {.loadfrom("vertex_format_create", 1242678479).}
  proc vertexArrayCreate*(self: RenderingDevice; vertexCount: uint32; vertexFormat: int64; srcBuffers: TypedArray[RID]; offsets: PackedInt64Array = PackedInt64Array()): RID {.loadfrom("vertex_array_create", 3137892244).}
  proc indexBufferCreate*(self: RenderingDevice; sizeIndices: uint32; format: RenderingDevice|>IndexBufferFormat; data: PackedByteArray = PackedByteArray(); useRestartIndices: Bool = false): RID {.loadfrom("index_buffer_create", 975915977).}
  proc indexArrayCreate*(self: RenderingDevice; indexBuffer: RID; indexOffset: uint32; indexCount: uint32): RID {.loadfrom("index_array_create", 2256026069).}
  proc shaderCompileSpirvFromSource*(self: RenderingDevice; shaderSource: Ref[RDShaderSource]; allowCache: Bool = true): Ref[RDShaderSPIRV] {.loadfrom("shader_compile_spirv_from_source", 3459523685).}
  proc shaderCompileBinaryFromSpirv*(self: RenderingDevice; spirvData: Ref[RDShaderSPIRV]; name: String = ""): PackedByteArray {.loadfrom("shader_compile_binary_from_spirv", 1395027180).}
  proc shaderCreateFromSpirv*(self: RenderingDevice; spirvData: Ref[RDShaderSPIRV]; name: String = ""): RID {.loadfrom("shader_create_from_spirv", 3297482566).}
  proc shaderCreateFromBytecode*(self: RenderingDevice; binaryData: PackedByteArray): RID {.loadfrom("shader_create_from_bytecode", 3049171473).}
  proc shaderGetVertexInputAttributeMask*(self: RenderingDevice; shader: RID): uint32 {.loadfrom("shader_get_vertex_input_attribute_mask", 3917799429).}
  proc uniformBufferCreate*(self: RenderingDevice; sizeBytes: uint32; data: PackedByteArray = PackedByteArray()): RID {.loadfrom("uniform_buffer_create", 1453158401).}
  proc storageBufferCreate*(self: RenderingDevice; sizeBytes: uint32; data: PackedByteArray = PackedByteArray(); usage: set[RenderingDevice|>StorageBufferUsage] = {}): RID {.loadfrom("storage_buffer_create", 1173156076).}
  proc textureBufferCreate*(self: RenderingDevice; sizeBytes: uint32; format: RenderingDevice|>DataFormat; data: PackedByteArray = PackedByteArray()): RID {.loadfrom("texture_buffer_create", 2344087557).}
  proc uniformSetCreate*(self: RenderingDevice; uniforms: TypedArray[RDUniform]; shader: RID; shaderSet: uint32): RID {.loadfrom("uniform_set_create", 2280795797).}
  proc uniformSetIsValid*(self: RenderingDevice; uniformSet: RID): Bool {.loadfrom("uniform_set_is_valid", 3521089500).}
  proc bufferUpdate*(self: RenderingDevice; buffer: RID; offset: uint32; sizeBytes: uint32; data: PackedByteArray; postBarrier: set[RenderingDevice|>BarrierMask] = (RenderingDevice|>BarrierMask).barrierMaskAllBarriers): Error {.loadfrom("buffer_update", 652628289).}
  proc bufferClear*(self: RenderingDevice; buffer: RID; offset: uint32; sizeBytes: uint32; postBarrier: set[RenderingDevice|>BarrierMask] = (RenderingDevice|>BarrierMask).barrierMaskAllBarriers): Error {.loadfrom("buffer_clear", 1645170096).}
  proc bufferGetData*(self: RenderingDevice; buffer: RID; offsetBytes: uint32 = 0'u32; sizeBytes: uint32 = 0'u32): PackedByteArray {.loadfrom("buffer_get_data", 125363422).}
  proc renderPipelineCreate*(self: RenderingDevice; shader: RID; framebufferFormat: int64; vertexFormat: int64; primitive: RenderingDevice|>RenderPrimitive; rasterizationState: Ref[RDPipelineRasterizationState]; multisampleState: Ref[RDPipelineMultisampleState]; stencilState: Ref[RDPipelineDepthStencilState]; colorBlendState: Ref[RDPipelineColorBlendState]; dynamicStateFlags: set[RenderingDevice|>PipelineDynamicStateFlags] = {}; forRenderPass: uint32 = 0'u32; specializationConstants: TypedArray[RDPipelineSpecializationConstant] = TypedArray|>init[RDPipelineSpecializationConstant]()): RID {.loadfrom("render_pipeline_create", 2911419500).}
  proc renderPipelineIsValid*(self: RenderingDevice; renderPipeline: RID): Bool {.loadfrom("render_pipeline_is_valid", 3521089500).}
  proc computePipelineCreate*(self: RenderingDevice; shader: RID; specializationConstants: TypedArray[RDPipelineSpecializationConstant] = TypedArray|>init[RDPipelineSpecializationConstant]()): RID {.loadfrom("compute_pipeline_create", 403593840).}
  proc computePipelineIsValid*(self: RenderingDevice; computePipeline: RID): Bool {.loadfrom("compute_pipeline_is_valid", 3521089500).}
  proc screenGetWidth*(self: RenderingDevice; screen: int32 = 0): int32 {.loadfrom("screen_get_width", 1591665591).}
  proc screenGetHeight*(self: RenderingDevice; screen: int32 = 0): int32 {.loadfrom("screen_get_height", 1591665591).}
  proc screenGetFramebufferFormat*(self: RenderingDevice): int64 {.loadfrom("screen_get_framebuffer_format", 3905245786).}
  proc drawListBeginForScreen*(self: RenderingDevice; screen: int32 = 0; clearColor: Color = Color|>init(0, 0, 0, 1)): int64 {.loadfrom("draw_list_begin_for_screen", 3988079995).}
  proc drawListBegin*(self: RenderingDevice; framebuffer: RID; initialColorAction: RenderingDevice|>InitialAction; finalColorAction: RenderingDevice|>FinalAction; initialDepthAction: RenderingDevice|>InitialAction; finalDepthAction: RenderingDevice|>FinalAction; clearColorValues: PackedColorArray = PackedColorArray(); clearDepth: Float = 1.0; clearStencil: uint32 = 0'u32; region: Rect2 = Rect2|>init(0, 0, 0, 0); storageTextures: TypedArray[RID] = TypedArray|>init[RID]()): int64 {.loadfrom("draw_list_begin", 4252992020).}
  proc drawListBeginSplit*(self: RenderingDevice; framebuffer: RID; splits: uint32; initialColorAction: RenderingDevice|>InitialAction; finalColorAction: RenderingDevice|>FinalAction; initialDepthAction: RenderingDevice|>InitialAction; finalDepthAction: RenderingDevice|>FinalAction; clearColorValues: PackedColorArray = PackedColorArray(); clearDepth: Float = 1.0; clearStencil: uint32 = 0'u32; region: Rect2 = Rect2|>init(0, 0, 0, 0); storageTextures: TypedArray[RID] = TypedArray|>init[RID]()): PackedInt64Array {.loadfrom("draw_list_begin_split", 832527510).}
  proc drawListSetBlendConstants*(self: RenderingDevice; drawList: int64; color: Color) {.loadfrom("draw_list_set_blend_constants", 2878471219).}
  proc drawListBindRenderPipeline*(self: RenderingDevice; drawList: int64; renderPipeline: RID) {.loadfrom("draw_list_bind_render_pipeline", 4040184819).}
  proc drawListBindUniformSet*(self: RenderingDevice; drawList: int64; uniformSet: RID; setIndex: uint32) {.loadfrom("draw_list_bind_uniform_set", 749655778).}
  proc drawListBindVertexArray*(self: RenderingDevice; drawList: int64; vertexArray: RID) {.loadfrom("draw_list_bind_vertex_array", 4040184819).}
  proc drawListBindIndexArray*(self: RenderingDevice; drawList: int64; indexArray: RID) {.loadfrom("draw_list_bind_index_array", 4040184819).}
  proc drawListSetPushConstant*(self: RenderingDevice; drawList: int64; buffer: PackedByteArray; sizeBytes: uint32) {.loadfrom("draw_list_set_push_constant", 2772371345).}
  proc drawListDraw*(self: RenderingDevice; drawList: int64; useIndices: Bool; instances: uint32; proceduralVertexCount: uint32 = 0'u32) {.loadfrom("draw_list_draw", 3710874499).}
  proc drawListEnableScissor*(self: RenderingDevice; drawList: int64; rect: Rect2 = Rect2|>init(0, 0, 0, 0)) {.loadfrom("draw_list_enable_scissor", 338791288).}
  proc drawListDisableScissor*(self: RenderingDevice; drawList: int64) {.loadfrom("draw_list_disable_scissor", 1286410249).}
  proc drawListSwitchToNextPass*(self: RenderingDevice): int64 {.loadfrom("draw_list_switch_to_next_pass", 2455072627).}
  proc drawListSwitchToNextPassSplit*(self: RenderingDevice; splits: uint32): PackedInt64Array {.loadfrom("draw_list_switch_to_next_pass_split", 2865087369).}
  proc drawListEnd*(self: RenderingDevice; postBarrier: set[RenderingDevice|>BarrierMask] = (RenderingDevice|>BarrierMask).barrierMaskAllBarriers) {.loadfrom("draw_list_end", 422991495).}
  proc computeListBegin*(self: RenderingDevice; allowDrawOverlap: Bool = false): int64 {.loadfrom("compute_list_begin", 968564752).}
  proc computeListBindComputePipeline*(self: RenderingDevice; computeList: int64; computePipeline: RID) {.loadfrom("compute_list_bind_compute_pipeline", 4040184819).}
  proc computeListSetPushConstant*(self: RenderingDevice; computeList: int64; buffer: PackedByteArray; sizeBytes: uint32) {.loadfrom("compute_list_set_push_constant", 2772371345).}
  proc computeListBindUniformSet*(self: RenderingDevice; computeList: int64; uniformSet: RID; setIndex: uint32) {.loadfrom("compute_list_bind_uniform_set", 749655778).}
  proc computeListDispatch*(self: RenderingDevice; computeList: int64; xGroups: uint32; yGroups: uint32; zGroups: uint32) {.loadfrom("compute_list_dispatch", 4275841770).}
  proc computeListAddBarrier*(self: RenderingDevice; computeList: int64) {.loadfrom("compute_list_add_barrier", 1286410249).}
  proc computeListEnd*(self: RenderingDevice; postBarrier: set[RenderingDevice|>BarrierMask] = (RenderingDevice|>BarrierMask).barrierMaskAllBarriers) {.loadfrom("compute_list_end", 422991495).}
  proc freeRid*(self: RenderingDevice; rid: RID) {.loadfrom("free_rid", 2722037293).}
  proc captureTimestamp*(self: RenderingDevice; name: String) {.loadfrom("capture_timestamp", 83702148).}
  proc getCapturedTimestampsCount*(self: RenderingDevice): uint32 {.loadfrom("get_captured_timestamps_count", 3905245786).}
  proc getCapturedTimestampsFrame*(self: RenderingDevice): uint64 {.loadfrom("get_captured_timestamps_frame", 3905245786).}
  proc getCapturedTimestampGpuTime*(self: RenderingDevice; index: uint32): uint64 {.loadfrom("get_captured_timestamp_gpu_time", 923996154).}
  proc getCapturedTimestampCpuTime*(self: RenderingDevice; index: uint32): uint64 {.loadfrom("get_captured_timestamp_cpu_time", 923996154).}
  proc getCapturedTimestampName*(self: RenderingDevice; index: uint32): String {.loadfrom("get_captured_timestamp_name", 844755477).}
  proc limitGet*(self: RenderingDevice; limit: RenderingDevice|>Limit): uint64 {.loadfrom("limit_get", 1559202131).}
  proc getFrameDelay*(self: RenderingDevice): uint32 {.loadfrom("get_frame_delay", 3905245786).}
  proc submit*(self: RenderingDevice) {.loadfrom("submit", 3218959716).}
  proc sync*(self: RenderingDevice) {.loadfrom("sync", 3218959716).}
  proc barrier*(self: RenderingDevice; `from`: set[RenderingDevice|>BarrierMask] = (RenderingDevice|>BarrierMask).barrierMaskAllBarriers; to: set[RenderingDevice|>BarrierMask] = (RenderingDevice|>BarrierMask).barrierMaskAllBarriers) {.loadfrom("barrier", 266666049).}
  proc fullBarrier*(self: RenderingDevice) {.loadfrom("full_barrier", 3218959716).}
  proc createLocalDevice*(self: RenderingDevice): RenderingDevice {.loadfrom("create_local_device", 2846302423).}
  proc setResourceName*(self: RenderingDevice; id: RID; name: String) {.loadfrom("set_resource_name", 2726140452).}
  proc drawCommandBeginLabel*(self: RenderingDevice; name: String; color: Color) {.loadfrom("draw_command_begin_label", 1636512886).}
  proc drawCommandInsertLabel*(self: RenderingDevice; name: String; color: Color) {.loadfrom("draw_command_insert_label", 1636512886).}
  proc drawCommandEndLabel*(self: RenderingDevice) {.loadfrom("draw_command_end_label", 3218959716).}
  proc getDeviceVendorName*(self: RenderingDevice): String {.loadfrom("get_device_vendor_name", 201670096).}
  proc getDeviceName*(self: RenderingDevice): String {.loadfrom("get_device_name", 201670096).}
  proc getDevicePipelineCacheUuid*(self: RenderingDevice): String {.loadfrom("get_device_pipeline_cache_uuid", 201670096).}
  proc getMemoryUsage*(self: RenderingDevice; `type`: RenderingDevice|>MemoryType): uint64 {.loadfrom("get_memory_usage", 251690689).}
  proc getDriverResource*(self: RenderingDevice; resource: RenderingDevice|>DriverResource; rid: RID; index: uint64): uint64 {.loadfrom("get_driver_resource", 501815484).}

# RenderingServer
define_godot_engine_class_essencials(RenderingServer, Object)
RenderingServer.memberProcs:
  proc texture2dCreate*(self: RenderingServer; image: Ref[Image]): RID {.loadfrom("texture_2d_create", 2010018390).}
  proc texture2dLayeredCreate*(self: RenderingServer; layers: TypedArray[Image]; layeredType: RenderingServer|>TextureLayeredType): RID {.loadfrom("texture_2d_layered_create", 913689023).}
  proc texture3dCreate*(self: RenderingServer; format: Image|>Format; width: int32; height: int32; depth: int32; mipmaps: Bool; data: TypedArray[Image]): RID {.loadfrom("texture_3d_create", 4036838706).}
  proc textureProxyCreate*(self: RenderingServer; base: RID): RID {.loadfrom("texture_proxy_create", 41030802).}
  proc texture2dUpdate*(self: RenderingServer; texture: RID; image: Ref[Image]; layer: int32) {.loadfrom("texture_2d_update", 999539803).}
  proc texture3dUpdate*(self: RenderingServer; texture: RID; data: TypedArray[Image]) {.loadfrom("texture_3d_update", 684822712).}
  proc textureProxyUpdate*(self: RenderingServer; texture: RID; proxyTo: RID) {.loadfrom("texture_proxy_update", 395945892).}
  proc texture2dPlaceholderCreate*(self: RenderingServer): RID {.loadfrom("texture_2d_placeholder_create", 529393457).}
  proc texture2dLayeredPlaceholderCreate*(self: RenderingServer; layeredType: RenderingServer|>TextureLayeredType): RID {.loadfrom("texture_2d_layered_placeholder_create", 1394585590).}
  proc texture3dPlaceholderCreate*(self: RenderingServer): RID {.loadfrom("texture_3d_placeholder_create", 529393457).}
  proc texture2dGet*(self: RenderingServer; texture: RID): Ref[Image] {.loadfrom("texture_2d_get", 4206205781).}
  proc texture2dLayerGet*(self: RenderingServer; texture: RID; layer: int32): Ref[Image] {.loadfrom("texture_2d_layer_get", 2705440895).}
  proc texture3dGet*(self: RenderingServer; texture: RID): TypedArray[Image] {.loadfrom("texture_3d_get", 2684255073).}
  proc textureReplace*(self: RenderingServer; texture: RID; byTexture: RID) {.loadfrom("texture_replace", 395945892).}
  proc textureSetSizeOverride*(self: RenderingServer; texture: RID; width: int32; height: int32) {.loadfrom("texture_set_size_override", 4288446313).}
  proc textureSetPath*(self: RenderingServer; texture: RID; path: String) {.loadfrom("texture_set_path", 2726140452).}
  proc textureGetPath*(self: RenderingServer; texture: RID): String {.loadfrom("texture_get_path", 642473191).}
  proc textureSetForceRedrawIfVisible*(self: RenderingServer; texture: RID; enable: Bool) {.loadfrom("texture_set_force_redraw_if_visible", 1265174801).}
  proc textureGetRdTexture*(self: RenderingServer; texture: RID; srgb: Bool = false): RID {.loadfrom("texture_get_rd_texture", 2790148051).}
  proc textureGetNativeHandle*(self: RenderingServer; texture: RID; srgb: Bool = false): uint64 {.loadfrom("texture_get_native_handle", 1834114100).}
  proc shaderCreate*(self: RenderingServer): RID {.loadfrom("shader_create", 529393457).}
  proc shaderSetCode*(self: RenderingServer; shader: RID; code: String) {.loadfrom("shader_set_code", 2726140452).}
  proc shaderSetPathHint*(self: RenderingServer; shader: RID; path: String) {.loadfrom("shader_set_path_hint", 2726140452).}
  proc shaderGetCode*(self: RenderingServer; shader: RID): String {.loadfrom("shader_get_code", 642473191).}
  proc getShaderParameterList*(self: RenderingServer; shader: RID): TypedArray[Dictionary] {.loadfrom("get_shader_parameter_list", 2684255073).}
  proc shaderGetParameterDefault*(self: RenderingServer; shader: RID; name: StringName): Variant {.loadfrom("shader_get_parameter_default", 2621281810).}
  proc shaderSetDefaultTextureParameter*(self: RenderingServer; shader: RID; name: StringName; texture: RID; index: int32 = 0) {.loadfrom("shader_set_default_texture_parameter", 3864903085).}
  proc shaderGetDefaultTextureParameter*(self: RenderingServer; shader: RID; name: StringName; index: int32 = 0): RID {.loadfrom("shader_get_default_texture_parameter", 2523186822).}
  proc materialCreate*(self: RenderingServer): RID {.loadfrom("material_create", 529393457).}
  proc materialSetShader*(self: RenderingServer; shaderMaterial: RID; shader: RID) {.loadfrom("material_set_shader", 395945892).}
  proc materialSetParam*(self: RenderingServer; material: RID; parameter: StringName; value: ptr Variant) {.loadfrom("material_set_param", 3477296213).}
  proc materialGetParam*(self: RenderingServer; material: RID; parameter: StringName): Variant {.loadfrom("material_get_param", 2621281810).}
  proc materialSetRenderPriority*(self: RenderingServer; material: RID; priority: int32) {.loadfrom("material_set_render_priority", 3411492887).}
  proc materialSetNextPass*(self: RenderingServer; material: RID; nextMaterial: RID) {.loadfrom("material_set_next_pass", 395945892).}
  proc meshCreateFromSurfaces*(self: RenderingServer; surfaces: TypedArray[Dictionary]; blendShapeCount: int32 = 0): RID {.loadfrom("mesh_create_from_surfaces", 4007581507).}
  proc meshCreate*(self: RenderingServer): RID {.loadfrom("mesh_create", 529393457).}
  proc meshSurfaceGetFormatOffset*(self: RenderingServer; format: set[RenderingServer|>ArrayFormat]; vertexCount: int32; arrayIndex: int32): uint32 {.loadfrom("mesh_surface_get_format_offset", 2981368685).}
  proc meshSurfaceGetFormatVertexStride*(self: RenderingServer; format: set[RenderingServer|>ArrayFormat]; vertexCount: int32): uint32 {.loadfrom("mesh_surface_get_format_vertex_stride", 3188363337).}
  proc meshSurfaceGetFormatAttributeStride*(self: RenderingServer; format: set[RenderingServer|>ArrayFormat]; vertexCount: int32): uint32 {.loadfrom("mesh_surface_get_format_attribute_stride", 3188363337).}
  proc meshSurfaceGetFormatSkinStride*(self: RenderingServer; format: set[RenderingServer|>ArrayFormat]; vertexCount: int32): uint32 {.loadfrom("mesh_surface_get_format_skin_stride", 3188363337).}
  proc meshAddSurface*(self: RenderingServer; mesh: RID; surface: Dictionary) {.loadfrom("mesh_add_surface", 1217542888).}
  proc meshAddSurfaceFromArrays*(self: RenderingServer; mesh: RID; primitive: RenderingServer|>PrimitiveType; arrays: Array; blendShapes: Array = Array|>init(); lods: Dictionary = Dictionary|>init(); compressFormat: set[RenderingServer|>ArrayFormat] = {}) {.loadfrom("mesh_add_surface_from_arrays", 1247008646).}
  proc meshGetBlendShapeCount*(self: RenderingServer; mesh: RID): int32 {.loadfrom("mesh_get_blend_shape_count", 2198884583).}
  proc meshSetBlendShapeMode*(self: RenderingServer; mesh: RID; mode: RenderingServer|>BlendShapeMode) {.loadfrom("mesh_set_blend_shape_mode", 1294662092).}
  proc meshGetBlendShapeMode*(self: RenderingServer; mesh: RID): RenderingServer|>BlendShapeMode {.loadfrom("mesh_get_blend_shape_mode", 4282291819).}
  proc meshSurfaceSetMaterial*(self: RenderingServer; mesh: RID; surface: int32; material: RID) {.loadfrom("mesh_surface_set_material", 2310537182).}
  proc meshSurfaceGetMaterial*(self: RenderingServer; mesh: RID; surface: int32): RID {.loadfrom("mesh_surface_get_material", 1066463050).}
  proc meshGetSurface*(self: RenderingServer; mesh: RID; surface: int32): Dictionary {.loadfrom("mesh_get_surface", 186674697).}
  proc meshSurfaceGetArrays*(self: RenderingServer; mesh: RID; surface: int32): Array {.loadfrom("mesh_surface_get_arrays", 1778388067).}
  proc meshSurfaceGetBlendShapeArrays*(self: RenderingServer; mesh: RID; surface: int32): TypedArray[Array] {.loadfrom("mesh_surface_get_blend_shape_arrays", 1778388067).}
  proc meshGetSurfaceCount*(self: RenderingServer; mesh: RID): int32 {.loadfrom("mesh_get_surface_count", 2198884583).}
  proc meshSetCustomAabb*(self: RenderingServer; mesh: RID; aabb: AABB) {.loadfrom("mesh_set_custom_aabb", 3696536120).}
  proc meshGetCustomAabb*(self: RenderingServer; mesh: RID): AABB {.loadfrom("mesh_get_custom_aabb", 974181306).}
  proc meshClear*(self: RenderingServer; mesh: RID) {.loadfrom("mesh_clear", 2722037293).}
  proc meshSurfaceUpdateVertexRegion*(self: RenderingServer; mesh: RID; surface: int32; offset: int32; data: PackedByteArray) {.loadfrom("mesh_surface_update_vertex_region", 2900195149).}
  proc meshSurfaceUpdateAttributeRegion*(self: RenderingServer; mesh: RID; surface: int32; offset: int32; data: PackedByteArray) {.loadfrom("mesh_surface_update_attribute_region", 2900195149).}
  proc meshSurfaceUpdateSkinRegion*(self: RenderingServer; mesh: RID; surface: int32; offset: int32; data: PackedByteArray) {.loadfrom("mesh_surface_update_skin_region", 2900195149).}
  proc meshSetShadowMesh*(self: RenderingServer; mesh: RID; shadowMesh: RID) {.loadfrom("mesh_set_shadow_mesh", 395945892).}
  proc multimeshCreate*(self: RenderingServer): RID {.loadfrom("multimesh_create", 529393457).}
  proc multimeshAllocateData*(self: RenderingServer; multimesh: RID; instances: int32; transformFormat: RenderingServer|>MultimeshTransformFormat; colorFormat: Bool = false; customDataFormat: Bool = false) {.loadfrom("multimesh_allocate_data", 283685892).}
  proc multimeshGetInstanceCount*(self: RenderingServer; multimesh: RID): int32 {.loadfrom("multimesh_get_instance_count", 2198884583).}
  proc multimeshSetMesh*(self: RenderingServer; multimesh: RID; mesh: RID) {.loadfrom("multimesh_set_mesh", 395945892).}
  proc multimeshInstanceSetTransform*(self: RenderingServer; multimesh: RID; index: int32; transform: Transform3D) {.loadfrom("multimesh_instance_set_transform", 675327471).}
  proc multimeshInstanceSetTransform2d*(self: RenderingServer; multimesh: RID; index: int32; transform: Transform2D) {.loadfrom("multimesh_instance_set_transform_2d", 736082694).}
  proc multimeshInstanceSetColor*(self: RenderingServer; multimesh: RID; index: int32; color: Color) {.loadfrom("multimesh_instance_set_color", 176975443).}
  proc multimeshInstanceSetCustomData*(self: RenderingServer; multimesh: RID; index: int32; customData: Color) {.loadfrom("multimesh_instance_set_custom_data", 176975443).}
  proc multimeshGetMesh*(self: RenderingServer; multimesh: RID): RID {.loadfrom("multimesh_get_mesh", 3814569979).}
  proc multimeshGetAabb*(self: RenderingServer; multimesh: RID): AABB {.loadfrom("multimesh_get_aabb", 974181306).}
  proc multimeshInstanceGetTransform*(self: RenderingServer; multimesh: RID; index: int32): Transform3D {.loadfrom("multimesh_instance_get_transform", 1050775521).}
  proc multimeshInstanceGetTransform2d*(self: RenderingServer; multimesh: RID; index: int32): Transform2D {.loadfrom("multimesh_instance_get_transform_2d", 1324854622).}
  proc multimeshInstanceGetColor*(self: RenderingServer; multimesh: RID; index: int32): Color {.loadfrom("multimesh_instance_get_color", 2946315076).}
  proc multimeshInstanceGetCustomData*(self: RenderingServer; multimesh: RID; index: int32): Color {.loadfrom("multimesh_instance_get_custom_data", 2946315076).}
  proc multimeshSetVisibleInstances*(self: RenderingServer; multimesh: RID; visible: int32) {.loadfrom("multimesh_set_visible_instances", 3411492887).}
  proc multimeshGetVisibleInstances*(self: RenderingServer; multimesh: RID): int32 {.loadfrom("multimesh_get_visible_instances", 2198884583).}
  proc multimeshSetBuffer*(self: RenderingServer; multimesh: RID; buffer: PackedFloat32Array) {.loadfrom("multimesh_set_buffer", 2960552364).}
  proc multimeshGetBuffer*(self: RenderingServer; multimesh: RID): PackedFloat32Array {.loadfrom("multimesh_get_buffer", 3964669176).}
  proc skeletonCreate*(self: RenderingServer): RID {.loadfrom("skeleton_create", 529393457).}
  proc skeletonAllocateData*(self: RenderingServer; skeleton: RID; bones: int32; is2dSkeleton: Bool = false) {.loadfrom("skeleton_allocate_data", 1904426712).}
  proc skeletonGetBoneCount*(self: RenderingServer; skeleton: RID): int32 {.loadfrom("skeleton_get_bone_count", 2198884583).}
  proc skeletonBoneSetTransform*(self: RenderingServer; skeleton: RID; bone: int32; transform: Transform3D) {.loadfrom("skeleton_bone_set_transform", 675327471).}
  proc skeletonBoneGetTransform*(self: RenderingServer; skeleton: RID; bone: int32): Transform3D {.loadfrom("skeleton_bone_get_transform", 1050775521).}
  proc skeletonBoneSetTransform2d*(self: RenderingServer; skeleton: RID; bone: int32; transform: Transform2D) {.loadfrom("skeleton_bone_set_transform_2d", 736082694).}
  proc skeletonBoneGetTransform2d*(self: RenderingServer; skeleton: RID; bone: int32): Transform2D {.loadfrom("skeleton_bone_get_transform_2d", 1324854622).}
  proc skeletonSetBaseTransform2d*(self: RenderingServer; skeleton: RID; baseTransform: Transform2D) {.loadfrom("skeleton_set_base_transform_2d", 1246044741).}
  proc directionalLightCreate*(self: RenderingServer): RID {.loadfrom("directional_light_create", 529393457).}
  proc omniLightCreate*(self: RenderingServer): RID {.loadfrom("omni_light_create", 529393457).}
  proc spotLightCreate*(self: RenderingServer): RID {.loadfrom("spot_light_create", 529393457).}
  proc lightSetColor*(self: RenderingServer; light: RID; color: Color) {.loadfrom("light_set_color", 2948539648).}
  proc lightSetParam*(self: RenderingServer; light: RID; param: RenderingServer|>LightParam; value: Float) {.loadfrom("light_set_param", 501936875).}
  proc lightSetShadow*(self: RenderingServer; light: RID; enabled: Bool) {.loadfrom("light_set_shadow", 1265174801).}
  proc lightSetProjector*(self: RenderingServer; light: RID; texture: RID) {.loadfrom("light_set_projector", 395945892).}
  proc lightSetNegative*(self: RenderingServer; light: RID; enable: Bool) {.loadfrom("light_set_negative", 1265174801).}
  proc lightSetCullMask*(self: RenderingServer; light: RID; mask: uint32) {.loadfrom("light_set_cull_mask", 3411492887).}
  proc lightSetDistanceFade*(self: RenderingServer; decal: RID; enabled: Bool; begin: Float; shadow: Float; length: Float) {.loadfrom("light_set_distance_fade", 1622292572).}
  proc lightSetReverseCullFaceMode*(self: RenderingServer; light: RID; enabled: Bool) {.loadfrom("light_set_reverse_cull_face_mode", 1265174801).}
  proc lightSetBakeMode*(self: RenderingServer; light: RID; bakeMode: RenderingServer|>LightBakeMode) {.loadfrom("light_set_bake_mode", 1048525260).}
  proc lightSetMaxSdfgiCascade*(self: RenderingServer; light: RID; cascade: uint32) {.loadfrom("light_set_max_sdfgi_cascade", 3411492887).}
  proc lightOmniSetShadowMode*(self: RenderingServer; light: RID; mode: RenderingServer|>LightOmniShadowMode) {.loadfrom("light_omni_set_shadow_mode", 2552677200).}
  proc lightDirectionalSetShadowMode*(self: RenderingServer; light: RID; mode: RenderingServer|>LightDirectionalShadowMode) {.loadfrom("light_directional_set_shadow_mode", 380462970).}
  proc lightDirectionalSetBlendSplits*(self: RenderingServer; light: RID; enable: Bool) {.loadfrom("light_directional_set_blend_splits", 1265174801).}
  proc lightDirectionalSetSkyMode*(self: RenderingServer; light: RID; mode: RenderingServer|>LightDirectionalSkyMode) {.loadfrom("light_directional_set_sky_mode", 2559740754).}
  proc lightProjectorsSetFilter*(self: RenderingServer; filter: RenderingServer|>LightProjectorFilter) {.loadfrom("light_projectors_set_filter", 43944325).}
  proc positionalSoftShadowFilterSetQuality*(self: RenderingServer; quality: RenderingServer|>ShadowQuality) {.loadfrom("positional_soft_shadow_filter_set_quality", 3613045266).}
  proc directionalSoftShadowFilterSetQuality*(self: RenderingServer; quality: RenderingServer|>ShadowQuality) {.loadfrom("directional_soft_shadow_filter_set_quality", 3613045266).}
  proc directionalShadowAtlasSetSize*(self: RenderingServer; size: int32; is16bits: Bool) {.loadfrom("directional_shadow_atlas_set_size", 300928843).}
  proc reflectionProbeCreate*(self: RenderingServer): RID {.loadfrom("reflection_probe_create", 529393457).}
  proc reflectionProbeSetUpdateMode*(self: RenderingServer; probe: RID; mode: RenderingServer|>ReflectionProbeUpdateMode) {.loadfrom("reflection_probe_set_update_mode", 3853670147).}
  proc reflectionProbeSetIntensity*(self: RenderingServer; probe: RID; intensity: Float) {.loadfrom("reflection_probe_set_intensity", 1794382983).}
  proc reflectionProbeSetAmbientMode*(self: RenderingServer; probe: RID; mode: RenderingServer|>ReflectionProbeAmbientMode) {.loadfrom("reflection_probe_set_ambient_mode", 184163074).}
  proc reflectionProbeSetAmbientColor*(self: RenderingServer; probe: RID; color: Color) {.loadfrom("reflection_probe_set_ambient_color", 2948539648).}
  proc reflectionProbeSetAmbientEnergy*(self: RenderingServer; probe: RID; energy: Float) {.loadfrom("reflection_probe_set_ambient_energy", 1794382983).}
  proc reflectionProbeSetMaxDistance*(self: RenderingServer; probe: RID; distance: Float) {.loadfrom("reflection_probe_set_max_distance", 1794382983).}
  proc reflectionProbeSetSize*(self: RenderingServer; probe: RID; size: Vector3) {.loadfrom("reflection_probe_set_size", 3227306858).}
  proc reflectionProbeSetOriginOffset*(self: RenderingServer; probe: RID; offset: Vector3) {.loadfrom("reflection_probe_set_origin_offset", 3227306858).}
  proc reflectionProbeSetAsInterior*(self: RenderingServer; probe: RID; enable: Bool) {.loadfrom("reflection_probe_set_as_interior", 1265174801).}
  proc reflectionProbeSetEnableBoxProjection*(self: RenderingServer; probe: RID; enable: Bool) {.loadfrom("reflection_probe_set_enable_box_projection", 1265174801).}
  proc reflectionProbeSetEnableShadows*(self: RenderingServer; probe: RID; enable: Bool) {.loadfrom("reflection_probe_set_enable_shadows", 1265174801).}
  proc reflectionProbeSetCullMask*(self: RenderingServer; probe: RID; layers: uint32) {.loadfrom("reflection_probe_set_cull_mask", 3411492887).}
  proc reflectionProbeSetResolution*(self: RenderingServer; probe: RID; resolution: int32) {.loadfrom("reflection_probe_set_resolution", 3411492887).}
  proc reflectionProbeSetMeshLodThreshold*(self: RenderingServer; probe: RID; pixels: Float) {.loadfrom("reflection_probe_set_mesh_lod_threshold", 1794382983).}
  proc decalCreate*(self: RenderingServer): RID {.loadfrom("decal_create", 529393457).}
  proc decalSetSize*(self: RenderingServer; decal: RID; size: Vector3) {.loadfrom("decal_set_size", 3227306858).}
  proc decalSetTexture*(self: RenderingServer; decal: RID; `type`: RenderingServer|>DecalTexture; texture: RID) {.loadfrom("decal_set_texture", 3953344054).}
  proc decalSetEmissionEnergy*(self: RenderingServer; decal: RID; energy: Float) {.loadfrom("decal_set_emission_energy", 1794382983).}
  proc decalSetAlbedoMix*(self: RenderingServer; decal: RID; albedoMix: Float) {.loadfrom("decal_set_albedo_mix", 1794382983).}
  proc decalSetModulate*(self: RenderingServer; decal: RID; color: Color) {.loadfrom("decal_set_modulate", 2948539648).}
  proc decalSetCullMask*(self: RenderingServer; decal: RID; mask: uint32) {.loadfrom("decal_set_cull_mask", 3411492887).}
  proc decalSetDistanceFade*(self: RenderingServer; decal: RID; enabled: Bool; begin: Float; length: Float) {.loadfrom("decal_set_distance_fade", 2972769666).}
  proc decalSetFade*(self: RenderingServer; decal: RID; above: Float; below: Float) {.loadfrom("decal_set_fade", 2513314492).}
  proc decalSetNormalFade*(self: RenderingServer; decal: RID; fade: Float) {.loadfrom("decal_set_normal_fade", 1794382983).}
  proc decalsSetFilter*(self: RenderingServer; filter: RenderingServer|>DecalFilter) {.loadfrom("decals_set_filter", 3519875702).}
  proc giSetUseHalfResolution*(self: RenderingServer; halfResolution: Bool) {.loadfrom("gi_set_use_half_resolution", 2586408642).}
  proc voxelGiCreate*(self: RenderingServer): RID {.loadfrom("voxel_gi_create", 529393457).}
  proc voxelGiAllocateData*(self: RenderingServer; voxelGi: RID; toCellXform: Transform3D; aabb: AABB; octreeSize: Vector3i; octreeCells: PackedByteArray; dataCells: PackedByteArray; distanceField: PackedByteArray; levelCounts: PackedInt32Array) {.loadfrom("voxel_gi_allocate_data", 4108223027).}
  proc voxelGiGetOctreeSize*(self: RenderingServer; voxelGi: RID): Vector3i {.loadfrom("voxel_gi_get_octree_size", 2607699645).}
  proc voxelGiGetOctreeCells*(self: RenderingServer; voxelGi: RID): PackedByteArray {.loadfrom("voxel_gi_get_octree_cells", 3348040486).}
  proc voxelGiGetDataCells*(self: RenderingServer; voxelGi: RID): PackedByteArray {.loadfrom("voxel_gi_get_data_cells", 3348040486).}
  proc voxelGiGetDistanceField*(self: RenderingServer; voxelGi: RID): PackedByteArray {.loadfrom("voxel_gi_get_distance_field", 3348040486).}
  proc voxelGiGetLevelCounts*(self: RenderingServer; voxelGi: RID): PackedInt32Array {.loadfrom("voxel_gi_get_level_counts", 788230395).}
  proc voxelGiGetToCellXform*(self: RenderingServer; voxelGi: RID): Transform3D {.loadfrom("voxel_gi_get_to_cell_xform", 1128465797).}
  proc voxelGiSetDynamicRange*(self: RenderingServer; voxelGi: RID; range: Float) {.loadfrom("voxel_gi_set_dynamic_range", 1794382983).}
  proc voxelGiSetPropagation*(self: RenderingServer; voxelGi: RID; amount: Float) {.loadfrom("voxel_gi_set_propagation", 1794382983).}
  proc voxelGiSetEnergy*(self: RenderingServer; voxelGi: RID; energy: Float) {.loadfrom("voxel_gi_set_energy", 1794382983).}
  proc voxelGiSetBakedExposureNormalization*(self: RenderingServer; voxelGi: RID; bakedExposure: Float) {.loadfrom("voxel_gi_set_baked_exposure_normalization", 1794382983).}
  proc voxelGiSetBias*(self: RenderingServer; voxelGi: RID; bias: Float) {.loadfrom("voxel_gi_set_bias", 1794382983).}
  proc voxelGiSetNormalBias*(self: RenderingServer; voxelGi: RID; bias: Float) {.loadfrom("voxel_gi_set_normal_bias", 1794382983).}
  proc voxelGiSetInterior*(self: RenderingServer; voxelGi: RID; enable: Bool) {.loadfrom("voxel_gi_set_interior", 1265174801).}
  proc voxelGiSetUseTwoBounces*(self: RenderingServer; voxelGi: RID; enable: Bool) {.loadfrom("voxel_gi_set_use_two_bounces", 1265174801).}
  proc voxelGiSetQuality*(self: RenderingServer; quality: RenderingServer|>VoxelGIQuality) {.loadfrom("voxel_gi_set_quality", 1538689978).}
  proc lightmapCreate*(self: RenderingServer): RID {.loadfrom("lightmap_create", 529393457).}
  proc lightmapSetTextures*(self: RenderingServer; lightmap: RID; light: RID; usesSh: Bool) {.loadfrom("lightmap_set_textures", 2646464759).}
  proc lightmapSetProbeBounds*(self: RenderingServer; lightmap: RID; bounds: AABB) {.loadfrom("lightmap_set_probe_bounds", 3696536120).}
  proc lightmapSetProbeInterior*(self: RenderingServer; lightmap: RID; interior: Bool) {.loadfrom("lightmap_set_probe_interior", 1265174801).}
  proc lightmapSetProbeCaptureData*(self: RenderingServer; lightmap: RID; points: PackedVector3Array; pointSh: PackedColorArray; tetrahedra: PackedInt32Array; bspTree: PackedInt32Array) {.loadfrom("lightmap_set_probe_capture_data", 3217845880).}
  proc lightmapGetProbeCapturePoints*(self: RenderingServer; lightmap: RID): PackedVector3Array {.loadfrom("lightmap_get_probe_capture_points", 808965560).}
  proc lightmapGetProbeCaptureSh*(self: RenderingServer; lightmap: RID): PackedColorArray {.loadfrom("lightmap_get_probe_capture_sh", 1569415609).}
  proc lightmapGetProbeCaptureTetrahedra*(self: RenderingServer; lightmap: RID): PackedInt32Array {.loadfrom("lightmap_get_probe_capture_tetrahedra", 788230395).}
  proc lightmapGetProbeCaptureBspTree*(self: RenderingServer; lightmap: RID): PackedInt32Array {.loadfrom("lightmap_get_probe_capture_bsp_tree", 788230395).}
  proc lightmapSetBakedExposureNormalization*(self: RenderingServer; lightmap: RID; bakedExposure: Float) {.loadfrom("lightmap_set_baked_exposure_normalization", 1794382983).}
  proc lightmapSetProbeCaptureUpdateSpeed*(self: RenderingServer; speed: Float) {.loadfrom("lightmap_set_probe_capture_update_speed", 373806689).}
  proc particlesCreate*(self: RenderingServer): RID {.loadfrom("particles_create", 529393457).}
  proc particlesSetMode*(self: RenderingServer; particles: RID; mode: RenderingServer|>ParticlesMode) {.loadfrom("particles_set_mode", 3492270028).}
  proc particlesSetEmitting*(self: RenderingServer; particles: RID; emitting: Bool) {.loadfrom("particles_set_emitting", 1265174801).}
  proc particlesGetEmitting*(self: RenderingServer; particles: RID): Bool {.loadfrom("particles_get_emitting", 3521089500).}
  proc particlesSetAmount*(self: RenderingServer; particles: RID; amount: int32) {.loadfrom("particles_set_amount", 3411492887).}
  proc particlesSetLifetime*(self: RenderingServer; particles: RID; lifetime: float64) {.loadfrom("particles_set_lifetime", 1794382983).}
  proc particlesSetOneShot*(self: RenderingServer; particles: RID; oneShot: Bool) {.loadfrom("particles_set_one_shot", 1265174801).}
  proc particlesSetPreProcessTime*(self: RenderingServer; particles: RID; time: float64) {.loadfrom("particles_set_pre_process_time", 1794382983).}
  proc particlesSetExplosivenessRatio*(self: RenderingServer; particles: RID; ratio: Float) {.loadfrom("particles_set_explosiveness_ratio", 1794382983).}
  proc particlesSetRandomnessRatio*(self: RenderingServer; particles: RID; ratio: Float) {.loadfrom("particles_set_randomness_ratio", 1794382983).}
  proc particlesSetCustomAabb*(self: RenderingServer; particles: RID; aabb: AABB) {.loadfrom("particles_set_custom_aabb", 3696536120).}
  proc particlesSetSpeedScale*(self: RenderingServer; particles: RID; scale: float64) {.loadfrom("particles_set_speed_scale", 1794382983).}
  proc particlesSetUseLocalCoordinates*(self: RenderingServer; particles: RID; enable: Bool) {.loadfrom("particles_set_use_local_coordinates", 1265174801).}
  proc particlesSetProcessMaterial*(self: RenderingServer; particles: RID; material: RID) {.loadfrom("particles_set_process_material", 395945892).}
  proc particlesSetFixedFps*(self: RenderingServer; particles: RID; fps: int32) {.loadfrom("particles_set_fixed_fps", 3411492887).}
  proc particlesSetInterpolate*(self: RenderingServer; particles: RID; enable: Bool) {.loadfrom("particles_set_interpolate", 1265174801).}
  proc particlesSetFractionalDelta*(self: RenderingServer; particles: RID; enable: Bool) {.loadfrom("particles_set_fractional_delta", 1265174801).}
  proc particlesSetCollisionBaseSize*(self: RenderingServer; particles: RID; size: Float) {.loadfrom("particles_set_collision_base_size", 1794382983).}
  proc particlesSetTransformAlign*(self: RenderingServer; particles: RID; align: RenderingServer|>ParticlesTransformAlign) {.loadfrom("particles_set_transform_align", 3264971368).}
  proc particlesSetTrails*(self: RenderingServer; particles: RID; enable: Bool; lengthSec: Float) {.loadfrom("particles_set_trails", 2010054925).}
  proc particlesSetTrailBindPoses*(self: RenderingServer; particles: RID; bindPoses: TypedArray[Transform3D]) {.loadfrom("particles_set_trail_bind_poses", 684822712).}
  proc particlesIsInactive*(self: RenderingServer; particles: RID): Bool {.loadfrom("particles_is_inactive", 3521089500).}
  proc particlesRequestProcess*(self: RenderingServer; particles: RID) {.loadfrom("particles_request_process", 2722037293).}
  proc particlesRestart*(self: RenderingServer; particles: RID) {.loadfrom("particles_restart", 2722037293).}
  proc particlesSetSubemitter*(self: RenderingServer; particles: RID; subemitterParticles: RID) {.loadfrom("particles_set_subemitter", 395945892).}
  proc particlesEmit*(self: RenderingServer; particles: RID; transform: Transform3D; velocity: Vector3; color: Color; custom: Color; emitFlags: uint32) {.loadfrom("particles_emit", 4043136117).}
  proc particlesSetDrawOrder*(self: RenderingServer; particles: RID; order: RenderingServer|>ParticlesDrawOrder) {.loadfrom("particles_set_draw_order", 935028487).}
  proc particlesSetDrawPasses*(self: RenderingServer; particles: RID; count: int32) {.loadfrom("particles_set_draw_passes", 3411492887).}
  proc particlesSetDrawPassMesh*(self: RenderingServer; particles: RID; pass: int32; mesh: RID) {.loadfrom("particles_set_draw_pass_mesh", 2310537182).}
  proc particlesGetCurrentAabb*(self: RenderingServer; particles: RID): AABB {.loadfrom("particles_get_current_aabb", 3952830260).}
  proc particlesSetEmissionTransform*(self: RenderingServer; particles: RID; transform: Transform3D) {.loadfrom("particles_set_emission_transform", 3935195649).}
  proc particlesCollisionCreate*(self: RenderingServer): RID {.loadfrom("particles_collision_create", 529393457).}
  proc particlesCollisionSetCollisionType*(self: RenderingServer; particlesCollision: RID; `type`: RenderingServer|>ParticlesCollisionType) {.loadfrom("particles_collision_set_collision_type", 1497044930).}
  proc particlesCollisionSetCullMask*(self: RenderingServer; particlesCollision: RID; mask: uint32) {.loadfrom("particles_collision_set_cull_mask", 3411492887).}
  proc particlesCollisionSetSphereRadius*(self: RenderingServer; particlesCollision: RID; radius: Float) {.loadfrom("particles_collision_set_sphere_radius", 1794382983).}
  proc particlesCollisionSetBoxExtents*(self: RenderingServer; particlesCollision: RID; extents: Vector3) {.loadfrom("particles_collision_set_box_extents", 3227306858).}
  proc particlesCollisionSetAttractorStrength*(self: RenderingServer; particlesCollision: RID; strength: Float) {.loadfrom("particles_collision_set_attractor_strength", 1794382983).}
  proc particlesCollisionSetAttractorDirectionality*(self: RenderingServer; particlesCollision: RID; amount: Float) {.loadfrom("particles_collision_set_attractor_directionality", 1794382983).}
  proc particlesCollisionSetAttractorAttenuation*(self: RenderingServer; particlesCollision: RID; curve: Float) {.loadfrom("particles_collision_set_attractor_attenuation", 1794382983).}
  proc particlesCollisionSetFieldTexture*(self: RenderingServer; particlesCollision: RID; texture: RID) {.loadfrom("particles_collision_set_field_texture", 395945892).}
  proc particlesCollisionHeightFieldUpdate*(self: RenderingServer; particlesCollision: RID) {.loadfrom("particles_collision_height_field_update", 2722037293).}
  proc particlesCollisionSetHeightFieldResolution*(self: RenderingServer; particlesCollision: RID; resolution: RenderingServer|>ParticlesCollisionHeightfieldResolution) {.loadfrom("particles_collision_set_height_field_resolution", 962977297).}
  proc fogVolumeCreate*(self: RenderingServer): RID {.loadfrom("fog_volume_create", 529393457).}
  proc fogVolumeSetShape*(self: RenderingServer; fogVolume: RID; shape: RenderingServer|>FogVolumeShape) {.loadfrom("fog_volume_set_shape", 3818703106).}
  proc fogVolumeSetSize*(self: RenderingServer; fogVolume: RID; size: Vector3) {.loadfrom("fog_volume_set_size", 3227306858).}
  proc fogVolumeSetMaterial*(self: RenderingServer; fogVolume: RID; material: RID) {.loadfrom("fog_volume_set_material", 395945892).}
  proc visibilityNotifierCreate*(self: RenderingServer): RID {.loadfrom("visibility_notifier_create", 529393457).}
  proc visibilityNotifierSetAabb*(self: RenderingServer; notifier: RID; aabb: AABB) {.loadfrom("visibility_notifier_set_aabb", 3696536120).}
  proc visibilityNotifierSetCallbacks*(self: RenderingServer; notifier: RID; enterCallable: Callable; exitCallable: Callable) {.loadfrom("visibility_notifier_set_callbacks", 2689735388).}
  proc occluderCreate*(self: RenderingServer): RID {.loadfrom("occluder_create", 529393457).}
  proc occluderSetMesh*(self: RenderingServer; occluder: RID; vertices: PackedVector3Array; indices: PackedInt32Array) {.loadfrom("occluder_set_mesh", 3854404263).}
  proc cameraCreate*(self: RenderingServer): RID {.loadfrom("camera_create", 529393457).}
  proc cameraSetPerspective*(self: RenderingServer; camera: RID; fovyDegrees: Float; zNear: Float; zFar: Float) {.loadfrom("camera_set_perspective", 157498339).}
  proc cameraSetOrthogonal*(self: RenderingServer; camera: RID; size: Float; zNear: Float; zFar: Float) {.loadfrom("camera_set_orthogonal", 157498339).}
  proc cameraSetFrustum*(self: RenderingServer; camera: RID; size: Float; offset: Vector2; zNear: Float; zFar: Float) {.loadfrom("camera_set_frustum", 1889878953).}
  proc cameraSetTransform*(self: RenderingServer; camera: RID; transform: Transform3D) {.loadfrom("camera_set_transform", 3935195649).}
  proc cameraSetCullMask*(self: RenderingServer; camera: RID; layers: uint32) {.loadfrom("camera_set_cull_mask", 3411492887).}
  proc cameraSetEnvironment*(self: RenderingServer; camera: RID; env: RID) {.loadfrom("camera_set_environment", 395945892).}
  proc cameraSetCameraAttributes*(self: RenderingServer; camera: RID; effects: RID) {.loadfrom("camera_set_camera_attributes", 395945892).}
  proc cameraSetUseVerticalAspect*(self: RenderingServer; camera: RID; enable: Bool) {.loadfrom("camera_set_use_vertical_aspect", 1265174801).}
  proc viewportCreate*(self: RenderingServer): RID {.loadfrom("viewport_create", 529393457).}
  proc viewportSetUseXr*(self: RenderingServer; viewport: RID; useXr: Bool) {.loadfrom("viewport_set_use_xr", 1265174801).}
  proc viewportSetSize*(self: RenderingServer; viewport: RID; width: int32; height: int32) {.loadfrom("viewport_set_size", 4288446313).}
  proc viewportSetActive*(self: RenderingServer; viewport: RID; active: Bool) {.loadfrom("viewport_set_active", 1265174801).}
  proc viewportSetParentViewport*(self: RenderingServer; viewport: RID; parentViewport: RID) {.loadfrom("viewport_set_parent_viewport", 395945892).}
  proc viewportAttachToScreen*(self: RenderingServer; viewport: RID; rect: Rect2 = Rect2|>init(0, 0, 0, 0); screen: int32 = 0) {.loadfrom("viewport_attach_to_screen", 1278520651).}
  proc viewportSetRenderDirectToScreen*(self: RenderingServer; viewport: RID; enabled: Bool) {.loadfrom("viewport_set_render_direct_to_screen", 1265174801).}
  proc viewportSetCanvasCullMask*(self: RenderingServer; viewport: RID; canvasCullMask: uint32) {.loadfrom("viewport_set_canvas_cull_mask", 3411492887).}
  proc viewportSetScaling3dMode*(self: RenderingServer; viewport: RID; scaling3dMode: RenderingServer|>ViewportScaling3DMode) {.loadfrom("viewport_set_scaling_3d_mode", 2386524376).}
  proc viewportSetScaling3dScale*(self: RenderingServer; viewport: RID; scale: Float) {.loadfrom("viewport_set_scaling_3d_scale", 1794382983).}
  proc viewportSetFsrSharpness*(self: RenderingServer; viewport: RID; sharpness: Float) {.loadfrom("viewport_set_fsr_sharpness", 1794382983).}
  proc viewportSetTextureMipmapBias*(self: RenderingServer; viewport: RID; mipmapBias: Float) {.loadfrom("viewport_set_texture_mipmap_bias", 1794382983).}
  proc viewportSetUpdateMode*(self: RenderingServer; viewport: RID; updateMode: RenderingServer|>ViewportUpdateMode) {.loadfrom("viewport_set_update_mode", 3161116010).}
  proc viewportSetClearMode*(self: RenderingServer; viewport: RID; clearMode: RenderingServer|>ViewportClearMode) {.loadfrom("viewport_set_clear_mode", 3628367896).}
  proc viewportGetRenderTarget*(self: RenderingServer; viewport: RID): RID {.loadfrom("viewport_get_render_target", 3814569979).}
  proc viewportGetTexture*(self: RenderingServer; viewport: RID): RID {.loadfrom("viewport_get_texture", 3814569979).}
  proc viewportSetDisable3d*(self: RenderingServer; viewport: RID; disable: Bool) {.loadfrom("viewport_set_disable_3d", 1265174801).}
  proc viewportSetDisable2d*(self: RenderingServer; viewport: RID; disable: Bool) {.loadfrom("viewport_set_disable_2d", 1265174801).}
  proc viewportSetEnvironmentMode*(self: RenderingServer; viewport: RID; mode: RenderingServer|>ViewportEnvironmentMode) {.loadfrom("viewport_set_environment_mode", 2196892182).}
  proc viewportAttachCamera*(self: RenderingServer; viewport: RID; camera: RID) {.loadfrom("viewport_attach_camera", 395945892).}
  proc viewportSetScenario*(self: RenderingServer; viewport: RID; scenario: RID) {.loadfrom("viewport_set_scenario", 395945892).}
  proc viewportAttachCanvas*(self: RenderingServer; viewport: RID; canvas: RID) {.loadfrom("viewport_attach_canvas", 395945892).}
  proc viewportRemoveCanvas*(self: RenderingServer; viewport: RID; canvas: RID) {.loadfrom("viewport_remove_canvas", 395945892).}
  proc viewportSetSnap2dTransformsToPixel*(self: RenderingServer; viewport: RID; enabled: Bool) {.loadfrom("viewport_set_snap_2d_transforms_to_pixel", 1265174801).}
  proc viewportSetSnap2dVerticesToPixel*(self: RenderingServer; viewport: RID; enabled: Bool) {.loadfrom("viewport_set_snap_2d_vertices_to_pixel", 1265174801).}
  proc viewportSetDefaultCanvasItemTextureFilter*(self: RenderingServer; viewport: RID; filter: RenderingServer|>CanvasItemTextureFilter) {.loadfrom("viewport_set_default_canvas_item_texture_filter", 1155129294).}
  proc viewportSetDefaultCanvasItemTextureRepeat*(self: RenderingServer; viewport: RID; repeat: RenderingServer|>CanvasItemTextureRepeat) {.loadfrom("viewport_set_default_canvas_item_texture_repeat", 1652956681).}
  proc viewportSetCanvasTransform*(self: RenderingServer; viewport: RID; canvas: RID; offset: Transform2D) {.loadfrom("viewport_set_canvas_transform", 3608606053).}
  proc viewportSetCanvasStacking*(self: RenderingServer; viewport: RID; canvas: RID; layer: int32; sublayer: int32) {.loadfrom("viewport_set_canvas_stacking", 3713930247).}
  proc viewportSetTransparentBackground*(self: RenderingServer; viewport: RID; enabled: Bool) {.loadfrom("viewport_set_transparent_background", 1265174801).}
  proc viewportSetGlobalCanvasTransform*(self: RenderingServer; viewport: RID; transform: Transform2D) {.loadfrom("viewport_set_global_canvas_transform", 1246044741).}
  proc viewportSetSdfOversizeAndScale*(self: RenderingServer; viewport: RID; oversize: RenderingServer|>ViewportSDFOversize; scale: RenderingServer|>ViewportSDFScale) {.loadfrom("viewport_set_sdf_oversize_and_scale", 1329198632).}
  proc viewportSetPositionalShadowAtlasSize*(self: RenderingServer; viewport: RID; size: int32; use16Bits: Bool = false) {.loadfrom("viewport_set_positional_shadow_atlas_size", 1904426712).}
  proc viewportSetPositionalShadowAtlasQuadrantSubdivision*(self: RenderingServer; viewport: RID; quadrant: int32; subdivision: int32) {.loadfrom("viewport_set_positional_shadow_atlas_quadrant_subdivision", 4288446313).}
  proc viewportSetMsaa3d*(self: RenderingServer; viewport: RID; msaa: RenderingServer|>ViewportMSAA) {.loadfrom("viewport_set_msaa_3d", 3764433340).}
  proc viewportSetMsaa2d*(self: RenderingServer; viewport: RID; msaa: RenderingServer|>ViewportMSAA) {.loadfrom("viewport_set_msaa_2d", 3764433340).}
  proc viewportSetScreenSpaceAa*(self: RenderingServer; viewport: RID; mode: RenderingServer|>ViewportScreenSpaceAA) {.loadfrom("viewport_set_screen_space_aa", 1447279591).}
  proc viewportSetUseTaa*(self: RenderingServer; viewport: RID; enable: Bool) {.loadfrom("viewport_set_use_taa", 1265174801).}
  proc viewportSetUseDebanding*(self: RenderingServer; viewport: RID; enable: Bool) {.loadfrom("viewport_set_use_debanding", 1265174801).}
  proc viewportSetUseOcclusionCulling*(self: RenderingServer; viewport: RID; enable: Bool) {.loadfrom("viewport_set_use_occlusion_culling", 1265174801).}
  proc viewportSetOcclusionRaysPerThread*(self: RenderingServer; raysPerThread: int32) {.loadfrom("viewport_set_occlusion_rays_per_thread", 1286410249).}
  proc viewportSetOcclusionCullingBuildQuality*(self: RenderingServer; quality: RenderingServer|>ViewportOcclusionCullingBuildQuality) {.loadfrom("viewport_set_occlusion_culling_build_quality", 2069725696).}
  proc viewportGetRenderInfo*(self: RenderingServer; viewport: RID; `type`: RenderingServer|>ViewportRenderInfoType; info: RenderingServer|>ViewportRenderInfo): int32 {.loadfrom("viewport_get_render_info", 2041262392).}
  proc viewportSetDebugDraw*(self: RenderingServer; viewport: RID; draw: RenderingServer|>ViewportDebugDraw) {.loadfrom("viewport_set_debug_draw", 2089420930).}
  proc viewportSetMeasureRenderTime*(self: RenderingServer; viewport: RID; enable: Bool) {.loadfrom("viewport_set_measure_render_time", 1265174801).}
  proc viewportGetMeasuredRenderTimeCpu*(self: RenderingServer; viewport: RID): float64 {.loadfrom("viewport_get_measured_render_time_cpu", 866169185).}
  proc viewportGetMeasuredRenderTimeGpu*(self: RenderingServer; viewport: RID): float64 {.loadfrom("viewport_get_measured_render_time_gpu", 866169185).}
  proc viewportSetVrsMode*(self: RenderingServer; viewport: RID; mode: RenderingServer|>ViewportVRSMode) {.loadfrom("viewport_set_vrs_mode", 398809874).}
  proc viewportSetVrsTexture*(self: RenderingServer; viewport: RID; texture: RID) {.loadfrom("viewport_set_vrs_texture", 395945892).}
  proc skyCreate*(self: RenderingServer): RID {.loadfrom("sky_create", 529393457).}
  proc skySetRadianceSize*(self: RenderingServer; sky: RID; radianceSize: int32) {.loadfrom("sky_set_radiance_size", 3411492887).}
  proc skySetMode*(self: RenderingServer; sky: RID; mode: RenderingServer|>SkyMode) {.loadfrom("sky_set_mode", 3279019937).}
  proc skySetMaterial*(self: RenderingServer; sky: RID; material: RID) {.loadfrom("sky_set_material", 395945892).}
  proc skyBakePanorama*(self: RenderingServer; sky: RID; energy: Float; bakeIrradiance: Bool; size: Vector2i): Ref[Image] {.loadfrom("sky_bake_panorama", 3875285818).}
  proc environmentCreate*(self: RenderingServer): RID {.loadfrom("environment_create", 529393457).}
  proc environmentSetBackground*(self: RenderingServer; env: RID; bg: RenderingServer|>EnvironmentBG) {.loadfrom("environment_set_background", 3937328877).}
  proc environmentSetSky*(self: RenderingServer; env: RID; sky: RID) {.loadfrom("environment_set_sky", 395945892).}
  proc environmentSetSkyCustomFov*(self: RenderingServer; env: RID; scale: Float) {.loadfrom("environment_set_sky_custom_fov", 1794382983).}
  proc environmentSetSkyOrientation*(self: RenderingServer; env: RID; orientation: Basis) {.loadfrom("environment_set_sky_orientation", 1735850857).}
  proc environmentSetBgColor*(self: RenderingServer; env: RID; color: Color) {.loadfrom("environment_set_bg_color", 2948539648).}
  proc environmentSetBgEnergy*(self: RenderingServer; env: RID; multiplier: Float; exposureValue: Float) {.loadfrom("environment_set_bg_energy", 2513314492).}
  proc environmentSetCanvasMaxLayer*(self: RenderingServer; env: RID; maxLayer: int32) {.loadfrom("environment_set_canvas_max_layer", 3411492887).}
  proc environmentSetAmbientLight*(self: RenderingServer; env: RID; color: Color; ambient: RenderingServer|>EnvironmentAmbientSource = envAmbientSourceBg; energy: Float = 1.0; skyContibution: Float = 0.0; reflectionSource: RenderingServer|>EnvironmentReflectionSource = envReflectionSourceBg) {.loadfrom("environment_set_ambient_light", 491659071).}
  proc environmentSetGlow*(self: RenderingServer; env: RID; enable: Bool; levels: PackedFloat32Array; intensity: Float; strength: Float; mix: Float; bloomThreshold: Float; blendMode: RenderingServer|>EnvironmentGlowBlendMode; hdrBleedThreshold: Float; hdrBleedScale: Float; hdrLuminanceCap: Float; glowMapStrength: Float; glowMap: RID) {.loadfrom("environment_set_glow", 2421724940).}
  proc environmentSetTonemap*(self: RenderingServer; env: RID; toneMapper: RenderingServer|>EnvironmentToneMapper; exposure: Float; white: Float) {.loadfrom("environment_set_tonemap", 2914312638).}
  proc environmentSetAdjustment*(self: RenderingServer; env: RID; enable: Bool; brightness: Float; contrast: Float; saturation: Float; use1dColorCorrection: Bool; colorCorrection: RID) {.loadfrom("environment_set_adjustment", 876799838).}
  proc environmentSetSsr*(self: RenderingServer; env: RID; enable: Bool; maxSteps: int32; fadeIn: Float; fadeOut: Float; depthTolerance: Float) {.loadfrom("environment_set_ssr", 3607294374).}
  proc environmentSetSsao*(self: RenderingServer; env: RID; enable: Bool; radius: Float; intensity: Float; power: Float; detail: Float; horizon: Float; sharpness: Float; lightAffect: Float; aoChannelAffect: Float) {.loadfrom("environment_set_ssao", 3994732740).}
  proc environmentSetFog*(self: RenderingServer; env: RID; enable: Bool; lightColor: Color; lightEnergy: Float; sunScatter: Float; density: Float; height: Float; heightDensity: Float; aerialPerspective: Float; skyAffect: Float) {.loadfrom("environment_set_fog", 2793577733).}
  proc environmentSetSdfgi*(self: RenderingServer; env: RID; enable: Bool; cascades: int32; minCellSize: Float; yScale: RenderingServer|>EnvironmentSDFGIYScale; useOcclusion: Bool; bounceFeedback: Float; readSky: Bool; energy: Float; normalBias: Float; probeBias: Float) {.loadfrom("environment_set_sdfgi", 3519144388).}
  proc environmentSetVolumetricFog*(self: RenderingServer; env: RID; enable: Bool; density: Float; albedo: Color; emission: Color; emissionEnergy: Float; anisotropy: Float; length: Float; pDetailSpread: Float; giInject: Float; temporalReprojection: Bool; temporalReprojectionAmount: Float; ambientInject: Float; skyAffect: Float) {.loadfrom("environment_set_volumetric_fog", 1553633833).}
  proc environmentGlowSetUseBicubicUpscale*(self: RenderingServer; enable: Bool) {.loadfrom("environment_glow_set_use_bicubic_upscale", 2586408642).}
  proc environmentSetSsrRoughnessQuality*(self: RenderingServer; quality: RenderingServer|>EnvironmentSSRRoughnessQuality) {.loadfrom("environment_set_ssr_roughness_quality", 1190026788).}
  proc environmentSetSsaoQuality*(self: RenderingServer; quality: RenderingServer|>EnvironmentSSAOQuality; halfSize: Bool; adaptiveTarget: Float; blurPasses: int32; fadeoutFrom: Float; fadeoutTo: Float) {.loadfrom("environment_set_ssao_quality", 189753569).}
  proc environmentSetSsilQuality*(self: RenderingServer; quality: RenderingServer|>EnvironmentSSILQuality; halfSize: Bool; adaptiveTarget: Float; blurPasses: int32; fadeoutFrom: Float; fadeoutTo: Float) {.loadfrom("environment_set_ssil_quality", 1713836683).}
  proc environmentSetSdfgiRayCount*(self: RenderingServer; rayCount: RenderingServer|>EnvironmentSDFGIRayCount) {.loadfrom("environment_set_sdfgi_ray_count", 340137951).}
  proc environmentSetSdfgiFramesToConverge*(self: RenderingServer; frames: RenderingServer|>EnvironmentSDFGIFramesToConverge) {.loadfrom("environment_set_sdfgi_frames_to_converge", 2182444374).}
  proc environmentSetSdfgiFramesToUpdateLight*(self: RenderingServer; frames: RenderingServer|>EnvironmentSDFGIFramesToUpdateLight) {.loadfrom("environment_set_sdfgi_frames_to_update_light", 1251144068).}
  proc environmentSetVolumetricFogVolumeSize*(self: RenderingServer; size: int32; depth: int32) {.loadfrom("environment_set_volumetric_fog_volume_size", 3937882851).}
  proc environmentSetVolumetricFogFilterActive*(self: RenderingServer; active: Bool) {.loadfrom("environment_set_volumetric_fog_filter_active", 2586408642).}
  proc environmentBakePanorama*(self: RenderingServer; environment: RID; bakeIrradiance: Bool; size: Vector2i): Ref[Image] {.loadfrom("environment_bake_panorama", 2452908646).}
  proc screenSpaceRoughnessLimiterSetActive*(self: RenderingServer; enable: Bool; amount: Float; limit: Float) {.loadfrom("screen_space_roughness_limiter_set_active", 916716790).}
  proc subSurfaceScatteringSetQuality*(self: RenderingServer; quality: RenderingServer|>SubSurfaceScatteringQuality) {.loadfrom("sub_surface_scattering_set_quality", 64571803).}
  proc subSurfaceScatteringSetScale*(self: RenderingServer; scale: Float; depthScale: Float) {.loadfrom("sub_surface_scattering_set_scale", 1017552074).}
  proc cameraAttributesCreate*(self: RenderingServer): RID {.loadfrom("camera_attributes_create", 529393457).}
  proc cameraAttributesSetDofBlurQuality*(self: RenderingServer; quality: RenderingServer|>DOFBlurQuality; useJitter: Bool) {.loadfrom("camera_attributes_set_dof_blur_quality", 2220136795).}
  proc cameraAttributesSetDofBlurBokehShape*(self: RenderingServer; shape: RenderingServer|>DOFBokehShape) {.loadfrom("camera_attributes_set_dof_blur_bokeh_shape", 1205058394).}
  proc cameraAttributesSetDofBlur*(self: RenderingServer; cameraAttributes: RID; farEnable: Bool; farDistance: Float; farTransition: Float; nearEnable: Bool; nearDistance: Float; nearTransition: Float; amount: Float) {.loadfrom("camera_attributes_set_dof_blur", 316272616).}
  proc cameraAttributesSetExposure*(self: RenderingServer; cameraAttributes: RID; multiplier: Float; normalization: Float) {.loadfrom("camera_attributes_set_exposure", 2513314492).}
  proc cameraAttributesSetAutoExposure*(self: RenderingServer; cameraAttributes: RID; enable: Bool; minSensitivity: Float; maxSensitivity: Float; speed: Float; scale: Float) {.loadfrom("camera_attributes_set_auto_exposure", 4266986332).}
  proc scenarioCreate*(self: RenderingServer): RID {.loadfrom("scenario_create", 529393457).}
  proc scenarioSetEnvironment*(self: RenderingServer; scenario: RID; environment: RID) {.loadfrom("scenario_set_environment", 395945892).}
  proc scenarioSetFallbackEnvironment*(self: RenderingServer; scenario: RID; environment: RID) {.loadfrom("scenario_set_fallback_environment", 395945892).}
  proc scenarioSetCameraAttributes*(self: RenderingServer; scenario: RID; effects: RID) {.loadfrom("scenario_set_camera_attributes", 395945892).}
  proc instanceCreate2*(self: RenderingServer; base: RID; scenario: RID): RID {.loadfrom("instance_create2", 746547085).}
  proc instanceCreate*(self: RenderingServer): RID {.loadfrom("instance_create", 529393457).}
  proc instanceSetBase*(self: RenderingServer; instance: RID; base: RID) {.loadfrom("instance_set_base", 395945892).}
  proc instanceSetScenario*(self: RenderingServer; instance: RID; scenario: RID) {.loadfrom("instance_set_scenario", 395945892).}
  proc instanceSetLayerMask*(self: RenderingServer; instance: RID; mask: uint32) {.loadfrom("instance_set_layer_mask", 3411492887).}
  proc instanceSetPivotData*(self: RenderingServer; instance: RID; sortingOffset: Float; useAabbCenter: Bool) {.loadfrom("instance_set_pivot_data", 1280615259).}
  proc instanceSetTransform*(self: RenderingServer; instance: RID; transform: Transform3D) {.loadfrom("instance_set_transform", 3935195649).}
  proc instanceAttachObjectInstanceId*(self: RenderingServer; instance: RID; id: uint64) {.loadfrom("instance_attach_object_instance_id", 3411492887).}
  proc instanceSetBlendShapeWeight*(self: RenderingServer; instance: RID; shape: int32; weight: Float) {.loadfrom("instance_set_blend_shape_weight", 1892459533).}
  proc instanceSetSurfaceOverrideMaterial*(self: RenderingServer; instance: RID; surface: int32; material: RID) {.loadfrom("instance_set_surface_override_material", 2310537182).}
  proc instanceSetVisible*(self: RenderingServer; instance: RID; visible: Bool) {.loadfrom("instance_set_visible", 1265174801).}
  proc instanceGeometrySetTransparency*(self: RenderingServer; instance: RID; transparency: Float) {.loadfrom("instance_geometry_set_transparency", 1794382983).}
  proc instanceSetCustomAabb*(self: RenderingServer; instance: RID; aabb: AABB) {.loadfrom("instance_set_custom_aabb", 3696536120).}
  proc instanceAttachSkeleton*(self: RenderingServer; instance: RID; skeleton: RID) {.loadfrom("instance_attach_skeleton", 395945892).}
  proc instanceSetExtraVisibilityMargin*(self: RenderingServer; instance: RID; margin: Float) {.loadfrom("instance_set_extra_visibility_margin", 1794382983).}
  proc instanceSetVisibilityParent*(self: RenderingServer; instance: RID; parent: RID) {.loadfrom("instance_set_visibility_parent", 395945892).}
  proc instanceSetIgnoreCulling*(self: RenderingServer; instance: RID; enabled: Bool) {.loadfrom("instance_set_ignore_culling", 1265174801).}
  proc instanceGeometrySetFlag*(self: RenderingServer; instance: RID; flag: RenderingServer|>InstanceFlags; enabled: Bool) {.loadfrom("instance_geometry_set_flag", 1014989537).}
  proc instanceGeometrySetCastShadowsSetting*(self: RenderingServer; instance: RID; shadowCastingSetting: RenderingServer|>ShadowCastingSetting) {.loadfrom("instance_geometry_set_cast_shadows_setting", 3768836020).}
  proc instanceGeometrySetMaterialOverride*(self: RenderingServer; instance: RID; material: RID) {.loadfrom("instance_geometry_set_material_override", 395945892).}
  proc instanceGeometrySetMaterialOverlay*(self: RenderingServer; instance: RID; material: RID) {.loadfrom("instance_geometry_set_material_overlay", 395945892).}
  proc instanceGeometrySetVisibilityRange*(self: RenderingServer; instance: RID; min: Float; max: Float; minMargin: Float; maxMargin: Float; fadeMode: RenderingServer|>VisibilityRangeFadeMode) {.loadfrom("instance_geometry_set_visibility_range", 4263925858).}
  proc instanceGeometrySetLightmap*(self: RenderingServer; instance: RID; lightmap: RID; lightmapUvScale: Rect2; lightmapSlice: int32) {.loadfrom("instance_geometry_set_lightmap", 536974962).}
  proc instanceGeometrySetLodBias*(self: RenderingServer; instance: RID; lodBias: Float) {.loadfrom("instance_geometry_set_lod_bias", 1794382983).}
  proc instanceGeometrySetShaderParameter*(self: RenderingServer; instance: RID; parameter: StringName; value: ptr Variant) {.loadfrom("instance_geometry_set_shader_parameter", 3477296213).}
  proc instanceGeometryGetShaderParameter*(self: RenderingServer; instance: RID; parameter: StringName): Variant {.loadfrom("instance_geometry_get_shader_parameter", 2621281810).}
  proc instanceGeometryGetShaderParameterDefaultValue*(self: RenderingServer; instance: RID; parameter: StringName): Variant {.loadfrom("instance_geometry_get_shader_parameter_default_value", 2621281810).}
  proc instanceGeometryGetShaderParameterList*(self: RenderingServer; instance: RID): TypedArray[Dictionary] {.loadfrom("instance_geometry_get_shader_parameter_list", 2684255073).}
  proc instancesCullAabb*(self: RenderingServer; aabb: AABB; scenario: RID = RID()): PackedInt64Array {.loadfrom("instances_cull_aabb", 2031554939).}
  proc instancesCullRay*(self: RenderingServer; `from`: Vector3; to: Vector3; scenario: RID = RID()): PackedInt64Array {.loadfrom("instances_cull_ray", 3388524336).}
  proc instancesCullConvex*(self: RenderingServer; convex: TypedArray[Plane]; scenario: RID = RID()): PackedInt64Array {.loadfrom("instances_cull_convex", 3690700105).}
  proc bakeRenderUv2*(self: RenderingServer; base: RID; materialOverrides: TypedArray[RID]; imageSize: Vector2i): TypedArray[Image] {.loadfrom("bake_render_uv2", 1904608558).}
  proc canvasCreate*(self: RenderingServer): RID {.loadfrom("canvas_create", 529393457).}
  proc canvasSetItemMirroring*(self: RenderingServer; canvas: RID; item: RID; mirroring: Vector2) {.loadfrom("canvas_set_item_mirroring", 2343975398).}
  proc canvasSetModulate*(self: RenderingServer; canvas: RID; color: Color) {.loadfrom("canvas_set_modulate", 2948539648).}
  proc canvasSetDisableScale*(self: RenderingServer; disable: Bool) {.loadfrom("canvas_set_disable_scale", 2586408642).}
  proc canvasTextureCreate*(self: RenderingServer): RID {.loadfrom("canvas_texture_create", 529393457).}
  proc canvasTextureSetChannel*(self: RenderingServer; canvasTexture: RID; channel: RenderingServer|>CanvasTextureChannel; texture: RID) {.loadfrom("canvas_texture_set_channel", 3822119138).}
  proc canvasTextureSetShadingParameters*(self: RenderingServer; canvasTexture: RID; baseColor: Color; shininess: Float) {.loadfrom("canvas_texture_set_shading_parameters", 2124967469).}
  proc canvasTextureSetTextureFilter*(self: RenderingServer; canvasTexture: RID; filter: RenderingServer|>CanvasItemTextureFilter) {.loadfrom("canvas_texture_set_texture_filter", 1155129294).}
  proc canvasTextureSetTextureRepeat*(self: RenderingServer; canvasTexture: RID; repeat: RenderingServer|>CanvasItemTextureRepeat) {.loadfrom("canvas_texture_set_texture_repeat", 1652956681).}
  proc canvasItemCreate*(self: RenderingServer): RID {.loadfrom("canvas_item_create", 529393457).}
  proc canvasItemSetParent*(self: RenderingServer; item: RID; parent: RID) {.loadfrom("canvas_item_set_parent", 395945892).}
  proc canvasItemSetDefaultTextureFilter*(self: RenderingServer; item: RID; filter: RenderingServer|>CanvasItemTextureFilter) {.loadfrom("canvas_item_set_default_texture_filter", 1155129294).}
  proc canvasItemSetDefaultTextureRepeat*(self: RenderingServer; item: RID; repeat: RenderingServer|>CanvasItemTextureRepeat) {.loadfrom("canvas_item_set_default_texture_repeat", 1652956681).}
  proc canvasItemSetVisible*(self: RenderingServer; item: RID; visible: Bool) {.loadfrom("canvas_item_set_visible", 1265174801).}
  proc canvasItemSetLightMask*(self: RenderingServer; item: RID; mask: int32) {.loadfrom("canvas_item_set_light_mask", 3411492887).}
  proc canvasItemSetVisibilityLayer*(self: RenderingServer; item: RID; visibilityLayer: uint32) {.loadfrom("canvas_item_set_visibility_layer", 3411492887).}
  proc canvasItemSetTransform*(self: RenderingServer; item: RID; transform: Transform2D) {.loadfrom("canvas_item_set_transform", 1246044741).}
  proc canvasItemSetClip*(self: RenderingServer; item: RID; clip: Bool) {.loadfrom("canvas_item_set_clip", 1265174801).}
  proc canvasItemSetDistanceFieldMode*(self: RenderingServer; item: RID; enabled: Bool) {.loadfrom("canvas_item_set_distance_field_mode", 1265174801).}
  proc canvasItemSetCustomRect*(self: RenderingServer; item: RID; useCustomRect: Bool; rect: Rect2 = Rect2|>init(0, 0, 0, 0)) {.loadfrom("canvas_item_set_custom_rect", 2180266943).}
  proc canvasItemSetModulate*(self: RenderingServer; item: RID; color: Color) {.loadfrom("canvas_item_set_modulate", 2948539648).}
  proc canvasItemSetSelfModulate*(self: RenderingServer; item: RID; color: Color) {.loadfrom("canvas_item_set_self_modulate", 2948539648).}
  proc canvasItemSetDrawBehindParent*(self: RenderingServer; item: RID; enabled: Bool) {.loadfrom("canvas_item_set_draw_behind_parent", 1265174801).}
  proc canvasItemAddLine*(self: RenderingServer; item: RID; `from`: Vector2; to: Vector2; color: Color; width: Float = -1.0; antialiased: Bool = false) {.loadfrom("canvas_item_add_line", 2843922985).}
  proc canvasItemAddPolyline*(self: RenderingServer; item: RID; points: PackedVector2Array; colors: PackedColorArray; width: Float = -1.0; antialiased: Bool = false) {.loadfrom("canvas_item_add_polyline", 3438017257).}
  proc canvasItemAddMultiline*(self: RenderingServer; item: RID; points: PackedVector2Array; colors: PackedColorArray; width: Float = -1.0) {.loadfrom("canvas_item_add_multiline", 3176074788).}
  proc canvasItemAddRect*(self: RenderingServer; item: RID; rect: Rect2; color: Color) {.loadfrom("canvas_item_add_rect", 934531857).}
  proc canvasItemAddCircle*(self: RenderingServer; item: RID; pos: Vector2; radius: Float; color: Color) {.loadfrom("canvas_item_add_circle", 2439351960).}
  proc canvasItemAddTextureRect*(self: RenderingServer; item: RID; rect: Rect2; texture: RID; tile: Bool = false; modulate: Color = Color|>init(1, 1, 1, 1); transpose: Bool = false) {.loadfrom("canvas_item_add_texture_rect", 3205360868).}
  proc canvasItemAddMsdfTextureRectRegion*(self: RenderingServer; item: RID; rect: Rect2; texture: RID; srcRect: Rect2; modulate: Color = Color|>init(1, 1, 1, 1); outlineSize: int32 = 0; pxRange: Float = 1.0; scale: Float = 1.0) {.loadfrom("canvas_item_add_msdf_texture_rect_region", 349157222).}
  proc canvasItemAddLcdTextureRectRegion*(self: RenderingServer; item: RID; rect: Rect2; texture: RID; srcRect: Rect2; modulate: Color) {.loadfrom("canvas_item_add_lcd_texture_rect_region", 359793297).}
  proc canvasItemAddTextureRectRegion*(self: RenderingServer; item: RID; rect: Rect2; texture: RID; srcRect: Rect2; modulate: Color = Color|>init(1, 1, 1, 1); transpose: Bool = false; clipUv: Bool = true) {.loadfrom("canvas_item_add_texture_rect_region", 2782979504).}
  proc canvasItemAddNinePatch*(self: RenderingServer; item: RID; rect: Rect2; source: Rect2; texture: RID; topleft: Vector2; bottomright: Vector2; xAxisMode: RenderingServer|>NinePatchAxisMode = ninePatchStretch; yAxisMode: RenderingServer|>NinePatchAxisMode = ninePatchStretch; drawCenter: Bool = true; modulate: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("canvas_item_add_nine_patch", 904428547).}
  proc canvasItemAddPrimitive*(self: RenderingServer; item: RID; points: PackedVector2Array; colors: PackedColorArray; uvs: PackedVector2Array; texture: RID) {.loadfrom("canvas_item_add_primitive", 3731601077).}
  proc canvasItemAddPolygon*(self: RenderingServer; item: RID; points: PackedVector2Array; colors: PackedColorArray; uvs: PackedVector2Array = PackedVector2Array(); texture: RID = RID()) {.loadfrom("canvas_item_add_polygon", 2907936855).}
  proc canvasItemAddTriangleArray*(self: RenderingServer; item: RID; indices: PackedInt32Array; points: PackedVector2Array; colors: PackedColorArray; uvs: PackedVector2Array = PackedVector2Array(); bones: PackedInt32Array = PackedInt32Array(); weights: PackedFloat32Array = PackedFloat32Array(); texture: RID = RID(); count: int32 = -1) {.loadfrom("canvas_item_add_triangle_array", 749685193).}
  proc canvasItemAddMesh*(self: RenderingServer; item: RID; mesh: RID; transform: Transform2D = Transform2D|>init(); modulate: Color = Color|>init(1, 1, 1, 1); texture: RID = RID()) {.loadfrom("canvas_item_add_mesh", 3548053052).}
  proc canvasItemAddMultimesh*(self: RenderingServer; item: RID; mesh: RID; texture: RID = RID()) {.loadfrom("canvas_item_add_multimesh", 1541595251).}
  proc canvasItemAddParticles*(self: RenderingServer; item: RID; particles: RID; texture: RID) {.loadfrom("canvas_item_add_particles", 2575754278).}
  proc canvasItemAddSetTransform*(self: RenderingServer; item: RID; transform: Transform2D) {.loadfrom("canvas_item_add_set_transform", 1246044741).}
  proc canvasItemAddClipIgnore*(self: RenderingServer; item: RID; ignore: Bool) {.loadfrom("canvas_item_add_clip_ignore", 1265174801).}
  proc canvasItemAddAnimationSlice*(self: RenderingServer; item: RID; animationLength: float64; sliceBegin: float64; sliceEnd: float64; offset: float64 = 0.0) {.loadfrom("canvas_item_add_animation_slice", 4107531031).}
  proc canvasItemSetSortChildrenByY*(self: RenderingServer; item: RID; enabled: Bool) {.loadfrom("canvas_item_set_sort_children_by_y", 1265174801).}
  proc canvasItemSetZIndex*(self: RenderingServer; item: RID; zIndex: int32) {.loadfrom("canvas_item_set_z_index", 3411492887).}
  proc canvasItemSetZAsRelativeToParent*(self: RenderingServer; item: RID; enabled: Bool) {.loadfrom("canvas_item_set_z_as_relative_to_parent", 1265174801).}
  proc canvasItemSetCopyToBackbuffer*(self: RenderingServer; item: RID; enabled: Bool; rect: Rect2) {.loadfrom("canvas_item_set_copy_to_backbuffer", 2429202503).}
  proc canvasItemClear*(self: RenderingServer; item: RID) {.loadfrom("canvas_item_clear", 2722037293).}
  proc canvasItemSetDrawIndex*(self: RenderingServer; item: RID; index: int32) {.loadfrom("canvas_item_set_draw_index", 3411492887).}
  proc canvasItemSetMaterial*(self: RenderingServer; item: RID; material: RID) {.loadfrom("canvas_item_set_material", 395945892).}
  proc canvasItemSetUseParentMaterial*(self: RenderingServer; item: RID; enabled: Bool) {.loadfrom("canvas_item_set_use_parent_material", 1265174801).}
  proc canvasItemSetVisibilityNotifier*(self: RenderingServer; item: RID; enable: Bool; area: Rect2; enterCallable: Callable; exitCallable: Callable) {.loadfrom("canvas_item_set_visibility_notifier", 3568945579).}
  proc canvasItemSetCanvasGroupMode*(self: RenderingServer; item: RID; mode: RenderingServer|>CanvasGroupMode; clearMargin: Float = 5.0; fitEmpty: Bool = false; fitMargin: Float = 0.0; blurMipmaps: Bool = false) {.loadfrom("canvas_item_set_canvas_group_mode", 41973386).}
  proc canvasLightCreate*(self: RenderingServer): RID {.loadfrom("canvas_light_create", 529393457).}
  proc canvasLightAttachToCanvas*(self: RenderingServer; light: RID; canvas: RID) {.loadfrom("canvas_light_attach_to_canvas", 395945892).}
  proc canvasLightSetEnabled*(self: RenderingServer; light: RID; enabled: Bool) {.loadfrom("canvas_light_set_enabled", 1265174801).}
  proc canvasLightSetTextureScale*(self: RenderingServer; light: RID; scale: Float) {.loadfrom("canvas_light_set_texture_scale", 1794382983).}
  proc canvasLightSetTransform*(self: RenderingServer; light: RID; transform: Transform2D) {.loadfrom("canvas_light_set_transform", 1246044741).}
  proc canvasLightSetTexture*(self: RenderingServer; light: RID; texture: RID) {.loadfrom("canvas_light_set_texture", 395945892).}
  proc canvasLightSetTextureOffset*(self: RenderingServer; light: RID; offset: Vector2) {.loadfrom("canvas_light_set_texture_offset", 3201125042).}
  proc canvasLightSetColor*(self: RenderingServer; light: RID; color: Color) {.loadfrom("canvas_light_set_color", 2948539648).}
  proc canvasLightSetHeight*(self: RenderingServer; light: RID; height: Float) {.loadfrom("canvas_light_set_height", 1794382983).}
  proc canvasLightSetEnergy*(self: RenderingServer; light: RID; energy: Float) {.loadfrom("canvas_light_set_energy", 1794382983).}
  proc canvasLightSetZRange*(self: RenderingServer; light: RID; minZ: int32; maxZ: int32) {.loadfrom("canvas_light_set_z_range", 4288446313).}
  proc canvasLightSetLayerRange*(self: RenderingServer; light: RID; minLayer: int32; maxLayer: int32) {.loadfrom("canvas_light_set_layer_range", 4288446313).}
  proc canvasLightSetItemCullMask*(self: RenderingServer; light: RID; mask: int32) {.loadfrom("canvas_light_set_item_cull_mask", 3411492887).}
  proc canvasLightSetItemShadowCullMask*(self: RenderingServer; light: RID; mask: int32) {.loadfrom("canvas_light_set_item_shadow_cull_mask", 3411492887).}
  proc canvasLightSetMode*(self: RenderingServer; light: RID; mode: RenderingServer|>CanvasLightMode) {.loadfrom("canvas_light_set_mode", 2957564891).}
  proc canvasLightSetShadowEnabled*(self: RenderingServer; light: RID; enabled: Bool) {.loadfrom("canvas_light_set_shadow_enabled", 1265174801).}
  proc canvasLightSetShadowFilter*(self: RenderingServer; light: RID; filter: RenderingServer|>CanvasLightShadowFilter) {.loadfrom("canvas_light_set_shadow_filter", 393119659).}
  proc canvasLightSetShadowColor*(self: RenderingServer; light: RID; color: Color) {.loadfrom("canvas_light_set_shadow_color", 2948539648).}
  proc canvasLightSetShadowSmooth*(self: RenderingServer; light: RID; smooth: Float) {.loadfrom("canvas_light_set_shadow_smooth", 1794382983).}
  proc canvasLightSetBlendMode*(self: RenderingServer; light: RID; mode: RenderingServer|>CanvasLightBlendMode) {.loadfrom("canvas_light_set_blend_mode", 804895945).}
  proc canvasLightOccluderCreate*(self: RenderingServer): RID {.loadfrom("canvas_light_occluder_create", 529393457).}
  proc canvasLightOccluderAttachToCanvas*(self: RenderingServer; occluder: RID; canvas: RID) {.loadfrom("canvas_light_occluder_attach_to_canvas", 395945892).}
  proc canvasLightOccluderSetEnabled*(self: RenderingServer; occluder: RID; enabled: Bool) {.loadfrom("canvas_light_occluder_set_enabled", 1265174801).}
  proc canvasLightOccluderSetPolygon*(self: RenderingServer; occluder: RID; polygon: RID) {.loadfrom("canvas_light_occluder_set_polygon", 395945892).}
  proc canvasLightOccluderSetAsSdfCollision*(self: RenderingServer; occluder: RID; enable: Bool) {.loadfrom("canvas_light_occluder_set_as_sdf_collision", 1265174801).}
  proc canvasLightOccluderSetTransform*(self: RenderingServer; occluder: RID; transform: Transform2D) {.loadfrom("canvas_light_occluder_set_transform", 1246044741).}
  proc canvasLightOccluderSetLightMask*(self: RenderingServer; occluder: RID; mask: int32) {.loadfrom("canvas_light_occluder_set_light_mask", 3411492887).}
  proc canvasOccluderPolygonCreate*(self: RenderingServer): RID {.loadfrom("canvas_occluder_polygon_create", 529393457).}
  proc canvasOccluderPolygonSetShape*(self: RenderingServer; occluderPolygon: RID; shape: PackedVector2Array; closed: Bool) {.loadfrom("canvas_occluder_polygon_set_shape", 2103882027).}
  proc canvasOccluderPolygonSetCullMode*(self: RenderingServer; occluderPolygon: RID; mode: RenderingServer|>CanvasOccluderPolygonCullMode) {.loadfrom("canvas_occluder_polygon_set_cull_mode", 1839404663).}
  proc canvasSetShadowTextureSize*(self: RenderingServer; size: int32) {.loadfrom("canvas_set_shadow_texture_size", 1286410249).}
  proc globalShaderParameterAdd*(self: RenderingServer; name: StringName; `type`: RenderingServer|>GlobalShaderParameterType; defaultValue: ptr Variant) {.loadfrom("global_shader_parameter_add", 463390080).}
  proc globalShaderParameterRemove*(self: RenderingServer; name: StringName) {.loadfrom("global_shader_parameter_remove", 3304788590).}
  proc globalShaderParameterGetList*(self: RenderingServer): TypedArray[StringName] {.loadfrom("global_shader_parameter_get_list", 3995934104).}
  proc globalShaderParameterSet*(self: RenderingServer; name: StringName; value: ptr Variant) {.loadfrom("global_shader_parameter_set", 3776071444).}
  proc globalShaderParameterSetOverride*(self: RenderingServer; name: StringName; value: ptr Variant) {.loadfrom("global_shader_parameter_set_override", 3776071444).}
  proc globalShaderParameterGet*(self: RenderingServer; name: StringName): Variant {.loadfrom("global_shader_parameter_get", 2760726917).}
  proc globalShaderParameterGetType*(self: RenderingServer; name: StringName): RenderingServer|>GlobalShaderParameterType {.loadfrom("global_shader_parameter_get_type", 1601414142).}
  proc freeRid*(self: RenderingServer; rid: RID) {.loadfrom("free_rid", 2722037293).}
  proc requestFrameDrawnCallback*(self: RenderingServer; callable: Callable) {.loadfrom("request_frame_drawn_callback", 1611583062).}
  proc hasChanged*(self: RenderingServer): Bool {.loadfrom("has_changed", 36873697).}
  proc getRenderingInfo*(self: RenderingServer; info: RenderingServer|>RenderingInfo): uint64 {.loadfrom("get_rendering_info", 3763192241).}
  proc getVideoAdapterName*(self: RenderingServer): String {.loadfrom("get_video_adapter_name", 201670096).}
  proc getVideoAdapterVendor*(self: RenderingServer): String {.loadfrom("get_video_adapter_vendor", 201670096).}
  proc getVideoAdapterType*(self: RenderingServer): RenderingDevice|>DeviceType {.loadfrom("get_video_adapter_type", 3099547011).}
  proc getVideoAdapterApiVersion*(self: RenderingServer): String {.loadfrom("get_video_adapter_api_version", 201670096).}
  proc makeSphereMesh*(self: RenderingServer; latitudes: int32; longitudes: int32; radius: Float): RID {.loadfrom("make_sphere_mesh", 2251015897).}
  proc getTestCube*(self: RenderingServer): RID {.loadfrom("get_test_cube", 529393457).}
  proc getTestTexture*(self: RenderingServer): RID {.loadfrom("get_test_texture", 529393457).}
  proc getWhiteTexture*(self: RenderingServer): RID {.loadfrom("get_white_texture", 529393457).}
  proc setBootImage*(self: RenderingServer; image: Ref[Image]; color: Color; scale: Bool; useFilter: Bool = true) {.loadfrom("set_boot_image", 2244367877).}
  proc getDefaultClearColor*(self: RenderingServer): Color {.loadfrom("get_default_clear_color", 3200896285).}
  proc setDefaultClearColor*(self: RenderingServer; color: Color) {.loadfrom("set_default_clear_color", 2920490490).}
  proc hasFeature*(self: RenderingServer; feature: RenderingServer|>Features): Bool {.loadfrom("has_feature", 598462696).}
  proc hasOsFeature*(self: RenderingServer; feature: String): Bool {.loadfrom("has_os_feature", 3927539163).}
  proc setDebugGenerateWireframes*(self: RenderingServer; generate: Bool) {.loadfrom("set_debug_generate_wireframes", 2586408642).}
  proc isRenderLoopEnabled*(self: RenderingServer): Bool {.loadfrom("is_render_loop_enabled", 36873697).}
  proc `renderLoopEnabled=`*(self: RenderingServer; enabled: Bool) {.loadfrom("set_render_loop_enabled", 2586408642).}
  proc getFrameSetupTimeCpu*(self: RenderingServer): float64 {.loadfrom("get_frame_setup_time_cpu", 1740695150).}
  proc forceSync*(self: RenderingServer) {.loadfrom("force_sync", 3218959716).}
  proc forceDraw*(self: RenderingServer; swapBuffers: Bool = true; frameStep: float64 = 0.0) {.loadfrom("force_draw", 1076185472).}
  proc getRenderingDevice*(self: RenderingServer): RenderingDevice {.loadfrom("get_rendering_device", 1405107940).}
  proc createLocalRenderingDevice*(self: RenderingServer): RenderingDevice {.loadfrom("create_local_rendering_device", 1405107940).}

# ResourceLoader
define_godot_engine_class_essencials(ResourceLoader, Object)
ResourceLoader.memberProcs:
  proc loadThreadedRequest*(self: ResourceLoader; path: String; typeHint: String = ""; useSubThreads: Bool = false; cacheMode: ResourceLoader|>CacheMode = cacheModeReuse): Error {.loadfrom("load_threaded_request", 1939848623).}
  proc loadThreadedGetStatus*(self: ResourceLoader; path: String; progress: Array = Array|>init()): ResourceLoader|>ThreadLoadStatus {.loadfrom("load_threaded_get_status", 3931021148).}
  proc loadThreadedGet*(self: ResourceLoader; path: String): Ref[Resource] {.loadfrom("load_threaded_get", 1748875256).}
  proc load*(self: ResourceLoader; path: String; typeHint: String = ""; cacheMode: ResourceLoader|>CacheMode = cacheModeReuse): Ref[Resource] {.loadfrom("load", 2622212233).}
  proc getRecognizedExtensionsForType*(self: ResourceLoader; `type`: String): PackedStringArray {.loadfrom("get_recognized_extensions_for_type", 3538744774).}
  proc addResourceFormatLoader*(self: ResourceLoader; formatLoader: Ref[ResourceFormatLoader]; atFront: Bool = false) {.loadfrom("add_resource_format_loader", 2896595483).}
  proc removeResourceFormatLoader*(self: ResourceLoader; formatLoader: Ref[ResourceFormatLoader]) {.loadfrom("remove_resource_format_loader", 405397102).}
  proc setAbortOnMissingResources*(self: ResourceLoader; abort: Bool) {.loadfrom("set_abort_on_missing_resources", 2586408642).}
  proc getDependencies*(self: ResourceLoader; path: String): PackedStringArray {.loadfrom("get_dependencies", 3538744774).}
  proc hasCached*(self: ResourceLoader; path: String): Bool {.loadfrom("has_cached", 2323990056).}
  proc exists*(self: ResourceLoader; path: String; typeHint: String = ""): Bool {.loadfrom("exists", 2220807150).}
  proc getResourceUid*(self: ResourceLoader; path: String): int64 {.loadfrom("get_resource_uid", 1597066294).}

# ResourceSaver
define_godot_engine_class_essencials(ResourceSaver, Object)
ResourceSaver.memberProcs:
  proc save*(self: ResourceSaver; resource: Ref[Resource]; path: String = ""; flags: set[ResourceSaver|>SaverFlags] = {}): Error {.loadfrom("save", 2303056517).}
  proc getRecognizedExtensions*(self: ResourceSaver; `type`: Ref[Resource]): PackedStringArray {.loadfrom("get_recognized_extensions", 4223597960).}
  proc addResourceFormatSaver*(self: ResourceSaver; formatSaver: Ref[ResourceFormatSaver]; atFront: Bool = false) {.loadfrom("add_resource_format_saver", 362894272).}
  proc removeResourceFormatSaver*(self: ResourceSaver; formatSaver: Ref[ResourceFormatSaver]) {.loadfrom("remove_resource_format_saver", 3373026878).}

# ResourceUID
define_godot_engine_class_essencials(ResourceUID, Object)
ResourceUID.memberProcs:
  proc idToText*(self: ResourceUID; id: int64): String {.loadfrom("id_to_text", 844755477).}
  proc textToId*(self: ResourceUID; textId: String): int64 {.loadfrom("text_to_id", 1321353865).}
  proc createId*(self: ResourceUID): int64 {.loadfrom("create_id", 2455072627).}
  proc hasId*(self: ResourceUID; id: int64): Bool {.loadfrom("has_id", 1116898809).}
  proc addId*(self: ResourceUID; id: int64; path: String) {.loadfrom("add_id", 501894301).}
  proc setId*(self: ResourceUID; id: int64; path: String) {.loadfrom("set_id", 501894301).}
  proc getIdPath*(self: ResourceUID; id: int64): String {.loadfrom("get_id_path", 844755477).}
  proc removeId*(self: ResourceUID; id: int64) {.loadfrom("remove_id", 1286410249).}

# ScriptLanguage
define_godot_engine_class_essencials(ScriptLanguage, Object)

# TextServerManager
define_godot_engine_class_essencials(TextServerManager, Object)
TextServerManager.memberProcs:
  proc addInterface*(self: TextServerManager; `interface`: Ref[TextServer]) {.loadfrom("add_interface", 1799689403).}
  proc getInterfaceCount*(self: TextServerManager): int32 {.loadfrom("get_interface_count", 3905245786).}
  proc removeInterface*(self: TextServerManager; `interface`: Ref[TextServer]) {.loadfrom("remove_interface", 1799689403).}
  proc getInterface*(self: TextServerManager; idx: int32): Ref[TextServer] {.loadfrom("get_interface", 1672475555).}
  proc getInterfaces*(self: TextServerManager): TypedArray[Dictionary] {.loadfrom("get_interfaces", 3995934104).}
  proc findInterface*(self: TextServerManager; name: String): Ref[TextServer] {.loadfrom("find_interface", 2240905781).}
  proc setPrimaryInterface*(self: TextServerManager; index: Ref[TextServer]) {.loadfrom("set_primary_interface", 1799689403).}
  proc getPrimaryInterface*(self: TextServerManager): Ref[TextServer] {.loadfrom("get_primary_interface", 905850878).}

# ThemeDB
define_godot_engine_class_essencials(ThemeDB, Object)
ThemeDB.memberProcs:
  proc getDefaultTheme*(self: ThemeDB): Ref[Theme] {.loadfrom("get_default_theme", 754276358).}
  proc getProjectTheme*(self: ThemeDB): Ref[Theme] {.loadfrom("get_project_theme", 754276358).}
  proc `fallbackBaseScale=`*(self: ThemeDB; baseScale: Float) {.loadfrom("set_fallback_base_scale", 373806689).}
  proc fallbackBaseScale*(self: ThemeDB): Float {.loadfrom("get_fallback_base_scale", 191475506).}
  proc `fallbackFont=`*(self: ThemeDB; font: Ref[Font]) {.loadfrom("set_fallback_font", 1262170328).}
  proc fallbackFont*(self: ThemeDB): Ref[Font] {.loadfrom("get_fallback_font", 3656929885).}
  proc `fallbackFontSize=`*(self: ThemeDB; fontSize: int32) {.loadfrom("set_fallback_font_size", 1286410249).}
  proc fallbackFontSize*(self: ThemeDB): int32 {.loadfrom("get_fallback_font_size", 2455072627).}
  proc `fallbackIcon=`*(self: ThemeDB; icon: Ref[Texture2D]) {.loadfrom("set_fallback_icon", 4051416890).}
  proc fallbackIcon*(self: ThemeDB): Ref[Texture2D] {.loadfrom("get_fallback_icon", 255860311).}
  proc `fallbackStylebox=`*(self: ThemeDB; stylebox: Ref[StyleBox]) {.loadfrom("set_fallback_stylebox", 2797200388).}
  proc fallbackStylebox*(self: ThemeDB): Ref[StyleBox] {.loadfrom("get_fallback_stylebox", 496040854).}

# TileData
define_godot_engine_class_essencials(TileData, Object)
TileData.memberProcs:
  proc `flipH=`*(self: TileData; flipH: Bool) {.loadfrom("set_flip_h", 2586408642).}
  proc flipH*(self: TileData): Bool {.loadfrom("get_flip_h", 36873697).}
  proc `flipV=`*(self: TileData; flipV: Bool) {.loadfrom("set_flip_v", 2586408642).}
  proc flipV*(self: TileData): Bool {.loadfrom("get_flip_v", 36873697).}
  proc `transpose=`*(self: TileData; transpose: Bool) {.loadfrom("set_transpose", 2586408642).}
  proc transpose*(self: TileData): Bool {.loadfrom("get_transpose", 36873697).}
  proc `material=`*(self: TileData; material: Ref[Material]) {.loadfrom("set_material", 2757459619).}
  proc material*(self: TileData): Ref[Material] {.loadfrom("get_material", 5934680).}
  proc `textureOrigin=`*(self: TileData; textureOrigin: Vector2i) {.loadfrom("set_texture_origin", 1130785943).}
  proc textureOrigin*(self: TileData): Vector2i {.loadfrom("get_texture_origin", 3690982128).}
  proc `modulate=`*(self: TileData; modulate: Color) {.loadfrom("set_modulate", 2920490490).}
  proc modulate*(self: TileData): Color {.loadfrom("get_modulate", 3444240500).}
  proc `zIndex=`*(self: TileData; zIndex: int32) {.loadfrom("set_z_index", 1286410249).}
  proc zIndex*(self: TileData): int32 {.loadfrom("get_z_index", 3905245786).}
  proc `ySortOrigin=`*(self: TileData; ySortOrigin: int32) {.loadfrom("set_y_sort_origin", 1286410249).}
  proc ySortOrigin*(self: TileData): int32 {.loadfrom("get_y_sort_origin", 3905245786).}
  proc setOccluder*(self: TileData; layerId: int32; occluderPolygon: Ref[OccluderPolygon2D]) {.loadfrom("set_occluder", 914399637).}
  proc getOccluder*(self: TileData; layerId: int32): Ref[OccluderPolygon2D] {.loadfrom("get_occluder", 2458574231).}
  proc setConstantLinearVelocity*(self: TileData; layerId: int32; velocity: Vector2) {.loadfrom("set_constant_linear_velocity", 163021252).}
  proc getConstantLinearVelocity*(self: TileData; layerId: int32): Vector2 {.loadfrom("get_constant_linear_velocity", 2299179447).}
  proc setConstantAngularVelocity*(self: TileData; layerId: int32; velocity: Float) {.loadfrom("set_constant_angular_velocity", 1602489585).}
  proc getConstantAngularVelocity*(self: TileData; layerId: int32): Float {.loadfrom("get_constant_angular_velocity", 2339986948).}
  proc setCollisionPolygonsCount*(self: TileData; layerId: int32; polygonsCount: int32) {.loadfrom("set_collision_polygons_count", 3937882851).}
  proc getCollisionPolygonsCount*(self: TileData; layerId: int32): int32 {.loadfrom("get_collision_polygons_count", 923996154).}
  proc addCollisionPolygon*(self: TileData; layerId: int32) {.loadfrom("add_collision_polygon", 1286410249).}
  proc removeCollisionPolygon*(self: TileData; layerId: int32; polygonIndex: int32) {.loadfrom("remove_collision_polygon", 3937882851).}
  proc setCollisionPolygonPoints*(self: TileData; layerId: int32; polygonIndex: int32; polygon: PackedVector2Array) {.loadfrom("set_collision_polygon_points", 3230546541).}
  proc getCollisionPolygonPoints*(self: TileData; layerId: int32; polygonIndex: int32): PackedVector2Array {.loadfrom("get_collision_polygon_points", 103942801).}
  proc setCollisionPolygonOneWay*(self: TileData; layerId: int32; polygonIndex: int32; oneWay: Bool) {.loadfrom("set_collision_polygon_one_way", 1383440665).}
  proc isCollisionPolygonOneWay*(self: TileData; layerId: int32; polygonIndex: int32): Bool {.loadfrom("is_collision_polygon_one_way", 2522259332).}
  proc setCollisionPolygonOneWayMargin*(self: TileData; layerId: int32; polygonIndex: int32; oneWayMargin: Float) {.loadfrom("set_collision_polygon_one_way_margin", 3506521499).}
  proc getCollisionPolygonOneWayMargin*(self: TileData; layerId: int32; polygonIndex: int32): Float {.loadfrom("get_collision_polygon_one_way_margin", 3085491603).}
  proc `terrainSet=`*(self: TileData; terrainSet: int32) {.loadfrom("set_terrain_set", 1286410249).}
  proc terrainSet*(self: TileData): int32 {.loadfrom("get_terrain_set", 3905245786).}
  proc `terrain=`*(self: TileData; terrain: int32) {.loadfrom("set_terrain", 1286410249).}
  proc terrain*(self: TileData): int32 {.loadfrom("get_terrain", 3905245786).}
  proc setTerrainPeeringBit*(self: TileData; peeringBit: TileSet|>CellNeighbor; terrain: int32) {.loadfrom("set_terrain_peering_bit", 1084452308).}
  proc getTerrainPeeringBit*(self: TileData; peeringBit: TileSet|>CellNeighbor): int32 {.loadfrom("get_terrain_peering_bit", 3831796792).}
  proc setNavigationPolygon*(self: TileData; layerId: int32; navigationPolygon: Ref[NavigationPolygon]) {.loadfrom("set_navigation_polygon", 2224691167).}
  proc getNavigationPolygon*(self: TileData; layerId: int32): Ref[NavigationPolygon] {.loadfrom("get_navigation_polygon", 3991786031).}
  proc `probability=`*(self: TileData; probability: Float) {.loadfrom("set_probability", 373806689).}
  proc probability*(self: TileData): Float {.loadfrom("get_probability", 1740695150).}
  proc setCustomData*(self: TileData; layerName: String; value: ptr Variant) {.loadfrom("set_custom_data", 402577236).}
  proc getCustomData*(self: TileData; layerName: String): Variant {.loadfrom("get_custom_data", 1868160156).}
  proc setCustomDataByLayerId*(self: TileData; layerId: int32; value: ptr Variant) {.loadfrom("set_custom_data_by_layer_id", 2152698145).}
  proc getCustomDataByLayerId*(self: TileData; layerId: int32): Variant {.loadfrom("get_custom_data_by_layer_id", 4227898402).}

# Time
define_godot_engine_class_essencials(Time, Object)
Time.memberProcs:
  proc getDatetimeDictFromUnixTime*(self: Time; unixTimeVal: int64): Dictionary {.loadfrom("get_datetime_dict_from_unix_time", 3485342025).}
  proc getDateDictFromUnixTime*(self: Time; unixTimeVal: int64): Dictionary {.loadfrom("get_date_dict_from_unix_time", 3485342025).}
  proc getTimeDictFromUnixTime*(self: Time; unixTimeVal: int64): Dictionary {.loadfrom("get_time_dict_from_unix_time", 3485342025).}
  proc getDatetimeStringFromUnixTime*(self: Time; unixTimeVal: int64; useSpace: Bool = false): String {.loadfrom("get_datetime_string_from_unix_time", 2311239925).}
  proc getDateStringFromUnixTime*(self: Time; unixTimeVal: int64): String {.loadfrom("get_date_string_from_unix_time", 844755477).}
  proc getTimeStringFromUnixTime*(self: Time; unixTimeVal: int64): String {.loadfrom("get_time_string_from_unix_time", 844755477).}
  proc getDatetimeDictFromDatetimeString*(self: Time; datetime: String; weekday: Bool): Dictionary {.loadfrom("get_datetime_dict_from_datetime_string", 3253569256).}
  proc getDatetimeStringFromDatetimeDict*(self: Time; datetime: Dictionary; useSpace: Bool): String {.loadfrom("get_datetime_string_from_datetime_dict", 1898123706).}
  proc getUnixTimeFromDatetimeDict*(self: Time; datetime: Dictionary): int64 {.loadfrom("get_unix_time_from_datetime_dict", 3021115443).}
  proc getUnixTimeFromDatetimeString*(self: Time; datetime: String): int64 {.loadfrom("get_unix_time_from_datetime_string", 1321353865).}
  proc getOffsetStringFromOffsetMinutes*(self: Time; offsetMinutes: int64): String {.loadfrom("get_offset_string_from_offset_minutes", 844755477).}
  proc getDatetimeDictFromSystem*(self: Time; utc: Bool = false): Dictionary {.loadfrom("get_datetime_dict_from_system", 205769976).}
  proc getDateDictFromSystem*(self: Time; utc: Bool = false): Dictionary {.loadfrom("get_date_dict_from_system", 205769976).}
  proc getTimeDictFromSystem*(self: Time; utc: Bool = false): Dictionary {.loadfrom("get_time_dict_from_system", 205769976).}
  proc getDatetimeStringFromSystem*(self: Time; utc: Bool = false; useSpace: Bool = false): String {.loadfrom("get_datetime_string_from_system", 1136425492).}
  proc getDateStringFromSystem*(self: Time; utc: Bool = false): String {.loadfrom("get_date_string_from_system", 1162154673).}
  proc getTimeStringFromSystem*(self: Time; utc: Bool = false): String {.loadfrom("get_time_string_from_system", 1162154673).}
  proc getTimeZoneFromSystem*(self: Time): Dictionary {.loadfrom("get_time_zone_from_system", 3102165223).}
  proc getUnixTimeFromSystem*(self: Time): float64 {.loadfrom("get_unix_time_from_system", 1740695150).}
  proc getTicksMsec*(self: Time): uint64 {.loadfrom("get_ticks_msec", 3905245786).}
  proc getTicksUsec*(self: Time): uint64 {.loadfrom("get_ticks_usec", 3905245786).}

# TranslationServer
define_godot_engine_class_essencials(TranslationServer, Object)
TranslationServer.memberProcs:
  proc setLocale*(self: TranslationServer; locale: String) {.loadfrom("set_locale", 83702148).}
  proc getLocale*(self: TranslationServer): String {.loadfrom("get_locale", 201670096).}
  proc getToolLocale*(self: TranslationServer): String {.loadfrom("get_tool_locale", 2841200299).}
  proc compareLocales*(self: TranslationServer; localeA: String; localeB: String): int32 {.loadfrom("compare_locales", 2878152881).}
  proc standardizeLocale*(self: TranslationServer; locale: String): String {.loadfrom("standardize_locale", 3135753539).}
  proc getAllLanguages*(self: TranslationServer): PackedStringArray {.loadfrom("get_all_languages", 1139954409).}
  proc getLanguageName*(self: TranslationServer; language: String): String {.loadfrom("get_language_name", 3135753539).}
  proc getAllScripts*(self: TranslationServer): PackedStringArray {.loadfrom("get_all_scripts", 1139954409).}
  proc getScriptName*(self: TranslationServer; script: String): String {.loadfrom("get_script_name", 3135753539).}
  proc getAllCountries*(self: TranslationServer): PackedStringArray {.loadfrom("get_all_countries", 1139954409).}
  proc getCountryName*(self: TranslationServer; country: String): String {.loadfrom("get_country_name", 3135753539).}
  proc getLocaleName*(self: TranslationServer; locale: String): String {.loadfrom("get_locale_name", 3135753539).}
  proc translate*(self: TranslationServer; message: StringName; context: StringName = ""): StringName {.loadfrom("translate", 58037827).}
  proc translatePlural*(self: TranslationServer; message: StringName; pluralMessage: StringName; n: int32; context: StringName = ""): StringName {.loadfrom("translate_plural", 1333931916).}
  proc addTranslation*(self: TranslationServer; translation: Ref[Translation]) {.loadfrom("add_translation", 1466479800).}
  proc removeTranslation*(self: TranslationServer; translation: Ref[Translation]) {.loadfrom("remove_translation", 1466479800).}
  proc getTranslationObject*(self: TranslationServer; locale: String): Ref[Translation] {.loadfrom("get_translation_object", 2065240175).}
  proc clear*(self: TranslationServer) {.loadfrom("clear", 3218959716).}
  proc getLoadedLocales*(self: TranslationServer): PackedStringArray {.loadfrom("get_loaded_locales", 1139954409).}
  proc isPseudolocalizationEnabled*(self: TranslationServer): Bool {.loadfrom("is_pseudolocalization_enabled", 36873697).}
  proc `pseudolocalizationEnabled=`*(self: TranslationServer; enabled: Bool) {.loadfrom("set_pseudolocalization_enabled", 2586408642).}
  proc reloadPseudolocalization*(self: TranslationServer) {.loadfrom("reload_pseudolocalization", 3218959716).}
  proc pseudolocalize*(self: TranslationServer; message: StringName): StringName {.loadfrom("pseudolocalize", 1965194235).}

# TreeItem
define_godot_engine_class_essencials(TreeItem, Object)
TreeItem.memberProcs:
  proc setCellMode*(self: TreeItem; column: int32; mode: TreeItem|>TreeCellMode) {.loadfrom("set_cell_mode", 289920701).}
  proc getCellMode*(self: TreeItem; column: int32): TreeItem|>TreeCellMode {.loadfrom("get_cell_mode", 3406114978).}
  proc setEditMultiline*(self: TreeItem; column: int32; multiline: Bool) {.loadfrom("set_edit_multiline", 300928843).}
  proc isEditMultiline*(self: TreeItem; column: int32): Bool {.loadfrom("is_edit_multiline", 1116898809).}
  proc setChecked*(self: TreeItem; column: int32; checked: Bool) {.loadfrom("set_checked", 300928843).}
  proc setIndeterminate*(self: TreeItem; column: int32; indeterminate: Bool) {.loadfrom("set_indeterminate", 300928843).}
  proc isChecked*(self: TreeItem; column: int32): Bool {.loadfrom("is_checked", 1116898809).}
  proc isIndeterminate*(self: TreeItem; column: int32): Bool {.loadfrom("is_indeterminate", 1116898809).}
  proc propagateCheck*(self: TreeItem; column: int32; emitSignal: Bool = true) {.loadfrom("propagate_check", 4023243586).}
  proc setText*(self: TreeItem; column: int32; text: String) {.loadfrom("set_text", 501894301).}
  proc getText*(self: TreeItem; column: int32): String {.loadfrom("get_text", 844755477).}
  proc setTextDirection*(self: TreeItem; column: int32; direction: Control|>TextDirection) {.loadfrom("set_text_direction", 1707680378).}
  proc getTextDirection*(self: TreeItem; column: int32): Control|>TextDirection {.loadfrom("get_text_direction", 4235602388).}
  proc setAutowrapMode*(self: TreeItem; column: int32; autowrapMode: TextServer|>AutowrapMode) {.loadfrom("set_autowrap_mode", 3633006561).}
  proc getAutowrapMode*(self: TreeItem; column: int32): TextServer|>AutowrapMode {.loadfrom("get_autowrap_mode", 2902757236).}
  proc setStructuredTextBidiOverride*(self: TreeItem; column: int32; parser: TextServer|>StructuredTextParser) {.loadfrom("set_structured_text_bidi_override", 868756907).}
  proc getStructuredTextBidiOverride*(self: TreeItem; column: int32): TextServer|>StructuredTextParser {.loadfrom("get_structured_text_bidi_override", 3377823772).}
  proc setStructuredTextBidiOverrideOptions*(self: TreeItem; column: int32; args: Array) {.loadfrom("set_structured_text_bidi_override_options", 537221740).}
  proc getStructuredTextBidiOverrideOptions*(self: TreeItem; column: int32): Array {.loadfrom("get_structured_text_bidi_override_options", 663333327).}
  proc setLanguage*(self: TreeItem; column: int32; language: String) {.loadfrom("set_language", 501894301).}
  proc getLanguage*(self: TreeItem; column: int32): String {.loadfrom("get_language", 844755477).}
  proc setSuffix*(self: TreeItem; column: int32; text: String) {.loadfrom("set_suffix", 501894301).}
  proc getSuffix*(self: TreeItem; column: int32): String {.loadfrom("get_suffix", 844755477).}
  proc setIcon*(self: TreeItem; column: int32; texture: Ref[Texture2D]) {.loadfrom("set_icon", 666127730).}
  proc getIcon*(self: TreeItem; column: int32): Ref[Texture2D] {.loadfrom("get_icon", 3536238170).}
  proc setIconRegion*(self: TreeItem; column: int32; region: Rect2) {.loadfrom("set_icon_region", 1356297692).}
  proc getIconRegion*(self: TreeItem; column: int32): Rect2 {.loadfrom("get_icon_region", 3327874267).}
  proc setIconMaxWidth*(self: TreeItem; column: int32; width: int32) {.loadfrom("set_icon_max_width", 3937882851).}
  proc getIconMaxWidth*(self: TreeItem; column: int32): int32 {.loadfrom("get_icon_max_width", 923996154).}
  proc setIconModulate*(self: TreeItem; column: int32; modulate: Color) {.loadfrom("set_icon_modulate", 2878471219).}
  proc getIconModulate*(self: TreeItem; column: int32): Color {.loadfrom("get_icon_modulate", 3457211756).}
  proc setRange*(self: TreeItem; column: int32; value: float64) {.loadfrom("set_range", 1602489585).}
  proc getRange*(self: TreeItem; column: int32): float64 {.loadfrom("get_range", 2339986948).}
  proc setRangeConfig*(self: TreeItem; column: int32; min: float64; max: float64; step: float64; expr: Bool = false) {.loadfrom("set_range_config", 1547181014).}
  proc getRangeConfig*(self: TreeItem; column: int32): Dictionary {.loadfrom("get_range_config", 3554694381).}
  proc setMetadata*(self: TreeItem; column: int32; meta: ptr Variant) {.loadfrom("set_metadata", 2152698145).}
  proc getMetadata*(self: TreeItem; column: int32): Variant {.loadfrom("get_metadata", 4227898402).}
  proc setCustomDraw*(self: TreeItem; column: int32; `object`: ptr Object; callback: StringName) {.loadfrom("set_custom_draw", 272420368).}
  proc `collapsed=`*(self: TreeItem; enable: Bool) {.loadfrom("set_collapsed", 2586408642).}
  proc isCollapsed*(self: TreeItem): Bool {.loadfrom("is_collapsed", 2240911060).}
  proc setCollapsedRecursive*(self: TreeItem; enable: Bool) {.loadfrom("set_collapsed_recursive", 2586408642).}
  proc isAnyCollapsed*(self: TreeItem; onlyVisible: Bool = false): Bool {.loadfrom("is_any_collapsed", 2595650253).}
  proc `visible=`*(self: TreeItem; enable: Bool) {.loadfrom("set_visible", 2586408642).}
  proc isVisible*(self: TreeItem): Bool {.loadfrom("is_visible", 2240911060).}
  proc uncollapseTree*(self: TreeItem) {.loadfrom("uncollapse_tree", 3218959716).}
  proc `customMinimumHeight=`*(self: TreeItem; height: int32) {.loadfrom("set_custom_minimum_height", 1286410249).}
  proc customMinimumHeight*(self: TreeItem): int32 {.loadfrom("get_custom_minimum_height", 3905245786).}
  proc setSelectable*(self: TreeItem; column: int32; selectable: Bool) {.loadfrom("set_selectable", 300928843).}
  proc isSelectable*(self: TreeItem; column: int32): Bool {.loadfrom("is_selectable", 1116898809).}
  proc isSelected*(self: TreeItem; column: int32): Bool {.loadfrom("is_selected", 3067735520).}
  proc select*(self: TreeItem; column: int32) {.loadfrom("select", 1286410249).}
  proc deselect*(self: TreeItem; column: int32) {.loadfrom("deselect", 1286410249).}
  proc setEditable*(self: TreeItem; column: int32; enabled: Bool) {.loadfrom("set_editable", 300928843).}
  proc isEditable*(self: TreeItem; column: int32): Bool {.loadfrom("is_editable", 3067735520).}
  proc setCustomColor*(self: TreeItem; column: int32; color: Color) {.loadfrom("set_custom_color", 2878471219).}
  proc getCustomColor*(self: TreeItem; column: int32): Color {.loadfrom("get_custom_color", 3457211756).}
  proc clearCustomColor*(self: TreeItem; column: int32) {.loadfrom("clear_custom_color", 1286410249).}
  proc setCustomFont*(self: TreeItem; column: int32; font: Ref[Font]) {.loadfrom("set_custom_font", 2637609184).}
  proc getCustomFont*(self: TreeItem; column: int32): Ref[Font] {.loadfrom("get_custom_font", 4244553094).}
  proc setCustomFontSize*(self: TreeItem; column: int32; fontSize: int32) {.loadfrom("set_custom_font_size", 3937882851).}
  proc getCustomFontSize*(self: TreeItem; column: int32): int32 {.loadfrom("get_custom_font_size", 923996154).}
  proc setCustomBgColor*(self: TreeItem; column: int32; color: Color; justOutline: Bool = false) {.loadfrom("set_custom_bg_color", 894174518).}
  proc clearCustomBgColor*(self: TreeItem; column: int32) {.loadfrom("clear_custom_bg_color", 1286410249).}
  proc getCustomBgColor*(self: TreeItem; column: int32): Color {.loadfrom("get_custom_bg_color", 3457211756).}
  proc setCustomAsButton*(self: TreeItem; column: int32; enable: Bool) {.loadfrom("set_custom_as_button", 300928843).}
  proc isCustomSetAsButton*(self: TreeItem; column: int32): Bool {.loadfrom("is_custom_set_as_button", 1116898809).}
  proc addButton*(self: TreeItem; column: int32; button: Ref[Texture2D]; id: int32 = -1; disabled: Bool = false; tooltipText: String = "") {.loadfrom("add_button", 1507727907).}
  proc getButtonCount*(self: TreeItem; column: int32): int32 {.loadfrom("get_button_count", 923996154).}
  proc getButtonTooltipText*(self: TreeItem; column: int32; buttonIndex: int32): String {.loadfrom("get_button_tooltip_text", 1391810591).}
  proc getButtonId*(self: TreeItem; column: int32; buttonIndex: int32): int32 {.loadfrom("get_button_id", 3175239445).}
  proc getButtonById*(self: TreeItem; column: int32; id: int32): int32 {.loadfrom("get_button_by_id", 3175239445).}
  proc getButton*(self: TreeItem; column: int32; buttonIndex: int32): Ref[Texture2D] {.loadfrom("get_button", 2584904275).}
  proc setButton*(self: TreeItem; column: int32; buttonIndex: int32; button: Ref[Texture2D]) {.loadfrom("set_button", 176101966).}
  proc eraseButton*(self: TreeItem; column: int32; buttonIndex: int32) {.loadfrom("erase_button", 3937882851).}
  proc setButtonDisabled*(self: TreeItem; column: int32; buttonIndex: int32; disabled: Bool) {.loadfrom("set_button_disabled", 1383440665).}
  proc setButtonColor*(self: TreeItem; column: int32; buttonIndex: int32; color: Color) {.loadfrom("set_button_color", 3733378741).}
  proc isButtonDisabled*(self: TreeItem; column: int32; buttonIndex: int32): Bool {.loadfrom("is_button_disabled", 2522259332).}
  proc setTooltipText*(self: TreeItem; column: int32; tooltip: String) {.loadfrom("set_tooltip_text", 501894301).}
  proc getTooltipText*(self: TreeItem; column: int32): String {.loadfrom("get_tooltip_text", 844755477).}
  proc setTextAlignment*(self: TreeItem; column: int32; textAlignment: HorizontalAlignment) {.loadfrom("set_text_alignment", 3276431499).}
  proc getTextAlignment*(self: TreeItem; column: int32): HorizontalAlignment {.loadfrom("get_text_alignment", 4171562184).}
  proc setExpandRight*(self: TreeItem; column: int32; enable: Bool) {.loadfrom("set_expand_right", 300928843).}
  proc getExpandRight*(self: TreeItem; column: int32): Bool {.loadfrom("get_expand_right", 1116898809).}
  proc `disableFolding=`*(self: TreeItem; disable: Bool) {.loadfrom("set_disable_folding", 2586408642).}
  proc isFoldingDisabled*(self: TreeItem): Bool {.loadfrom("is_folding_disabled", 36873697).}
  proc createChild*(self: TreeItem; index: int32 = -1): TreeItem {.loadfrom("create_child", 954243986).}
  proc addChild*(self: TreeItem; child: ptr TreeItem) {.loadfrom("add_child", 1819951137).}
  proc removeChild*(self: TreeItem; child: ptr TreeItem) {.loadfrom("remove_child", 1819951137).}
  proc getTree*(self: TreeItem): Tree {.loadfrom("get_tree", 2243340556).}
  proc getNext*(self: TreeItem): TreeItem {.loadfrom("get_next", 1514277247).}
  proc getPrev*(self: TreeItem): TreeItem {.loadfrom("get_prev", 2768121250).}
  proc getParent*(self: TreeItem): TreeItem {.loadfrom("get_parent", 1514277247).}
  proc getFirstChild*(self: TreeItem): TreeItem {.loadfrom("get_first_child", 1514277247).}
  proc getNextInTree*(self: TreeItem; wrap: Bool = false): TreeItem {.loadfrom("get_next_in_tree", 1666920593).}
  proc getPrevInTree*(self: TreeItem; wrap: Bool = false): TreeItem {.loadfrom("get_prev_in_tree", 1666920593).}
  proc getNextVisible*(self: TreeItem; wrap: Bool = false): TreeItem {.loadfrom("get_next_visible", 1666920593).}
  proc getPrevVisible*(self: TreeItem; wrap: Bool = false): TreeItem {.loadfrom("get_prev_visible", 1666920593).}
  proc getChild*(self: TreeItem; index: int32): TreeItem {.loadfrom("get_child", 306700752).}
  proc getChildCount*(self: TreeItem): int32 {.loadfrom("get_child_count", 2455072627).}
  proc getChildren*(self: TreeItem): TypedArray[TreeItem] {.loadfrom("get_children", 2915620761).}
  proc getIndex*(self: TreeItem): int32 {.loadfrom("get_index", 2455072627).}
  proc moveBefore*(self: TreeItem; item: ptr TreeItem) {.loadfrom("move_before", 1819951137).}
  proc moveAfter*(self: TreeItem; item: ptr TreeItem) {.loadfrom("move_after", 1819951137).}
  proc callRecursive*(self: TreeItem; `method`: StringName) {.loadfrom("call_recursive", 2866548813).}

# UndoRedo
define_godot_engine_class_essencials(UndoRedo, Object)
UndoRedo.memberProcs:
  proc createAction*(self: UndoRedo; name: String; mergeMode: UndoRedo|>MergeMode = mergeDisable; backwardUndoOps: Bool = false) {.loadfrom("create_action", 3900135403).}
  proc commitAction*(self: UndoRedo; execute: Bool = true) {.loadfrom("commit_action", 3216645846).}
  proc isCommittingAction*(self: UndoRedo): Bool {.loadfrom("is_committing_action", 36873697).}
  proc addDoMethod*(self: UndoRedo; callable: Callable) {.loadfrom("add_do_method", 1611583062).}
  proc addUndoMethod*(self: UndoRedo; callable: Callable) {.loadfrom("add_undo_method", 1611583062).}
  proc addDoProperty*(self: UndoRedo; `object`: ptr Object; property: StringName; value: ptr Variant) {.loadfrom("add_do_property", 1017172818).}
  proc addUndoProperty*(self: UndoRedo; `object`: ptr Object; property: StringName; value: ptr Variant) {.loadfrom("add_undo_property", 1017172818).}
  proc addDoReference*(self: UndoRedo; `object`: ptr Object) {.loadfrom("add_do_reference", 3975164845).}
  proc addUndoReference*(self: UndoRedo; `object`: ptr Object) {.loadfrom("add_undo_reference", 3975164845).}
  proc startForceKeepInMergeEnds*(self: UndoRedo) {.loadfrom("start_force_keep_in_merge_ends", 3218959716).}
  proc endForceKeepInMergeEnds*(self: UndoRedo) {.loadfrom("end_force_keep_in_merge_ends", 3218959716).}
  proc getHistoryCount*(self: UndoRedo): int32 {.loadfrom("get_history_count", 2455072627).}
  proc getCurrentAction*(self: UndoRedo): int32 {.loadfrom("get_current_action", 2455072627).}
  proc getActionName*(self: UndoRedo; id: int32): String {.loadfrom("get_action_name", 990163283).}
  proc clearHistory*(self: UndoRedo; increaseVersion: Bool = true) {.loadfrom("clear_history", 3216645846).}
  proc getCurrentActionName*(self: UndoRedo): String {.loadfrom("get_current_action_name", 201670096).}
  proc hasUndo*(self: UndoRedo): Bool {.loadfrom("has_undo", 36873697).}
  proc hasRedo*(self: UndoRedo): Bool {.loadfrom("has_redo", 36873697).}
  proc getVersion*(self: UndoRedo): uint64 {.loadfrom("get_version", 3905245786).}
  proc redo*(self: UndoRedo): Bool {.loadfrom("redo", 2240911060).}
  proc undo*(self: UndoRedo): Bool {.loadfrom("undo", 2240911060).}

# UniformSetCacheRD
define_godot_engine_class_essencials(UniformSetCacheRD, Object)

# WorkerThreadPool
define_godot_engine_class_essencials(WorkerThreadPool, Object)
WorkerThreadPool.memberProcs:
  proc addTask*(self: WorkerThreadPool; action: Callable; highPriority: Bool = false; description: String = ""): int64 {.loadfrom("add_task", 3976347598).}
  proc isTaskCompleted*(self: WorkerThreadPool; taskId: int64): Bool {.loadfrom("is_task_completed", 1116898809).}
  proc waitForTaskCompletion*(self: WorkerThreadPool; taskId: int64): Error {.loadfrom("wait_for_task_completion", 844576869).}
  proc addGroupTask*(self: WorkerThreadPool; action: Callable; elements: int32; tasksNeeded: int32 = -1; highPriority: Bool = false; description: String = ""): int64 {.loadfrom("add_group_task", 2377228549).}
  proc isGroupTaskCompleted*(self: WorkerThreadPool; groupId: int64): Bool {.loadfrom("is_group_task_completed", 1116898809).}
  proc getGroupProcessedElementCount*(self: WorkerThreadPool; groupId: int64): uint32 {.loadfrom("get_group_processed_element_count", 923996154).}
  proc waitForGroupTaskCompletion*(self: WorkerThreadPool; groupId: int64) {.loadfrom("wait_for_group_task_completion", 1286410249).}

# XRServer
define_godot_engine_class_essencials(XRServer, Object)
XRServer.memberProcs:
  proc worldScale*(self: XRServer): float64 {.loadfrom("get_world_scale", 1740695150).}
  proc `worldScale=`*(self: XRServer; scale: float64) {.loadfrom("set_world_scale", 373806689).}
  proc worldOrigin*(self: XRServer): Transform3D {.loadfrom("get_world_origin", 3229777777).}
  proc `worldOrigin=`*(self: XRServer; worldOrigin: Transform3D) {.loadfrom("set_world_origin", 2952846383).}
  proc getReferenceFrame*(self: XRServer): Transform3D {.loadfrom("get_reference_frame", 3229777777).}
  proc centerOnHmd*(self: XRServer; rotationMode: XRServer|>RotationMode; keepHeight: Bool) {.loadfrom("center_on_hmd", 1450904707).}
  proc getHmdTransform*(self: XRServer): Transform3D {.loadfrom("get_hmd_transform", 4183770049).}
  proc addInterface*(self: XRServer; `interface`: Ref[XRInterface]) {.loadfrom("add_interface", 1898711491).}
  proc getInterfaceCount*(self: XRServer): int32 {.loadfrom("get_interface_count", 3905245786).}
  proc removeInterface*(self: XRServer; `interface`: Ref[XRInterface]) {.loadfrom("remove_interface", 1898711491).}
  proc getInterface*(self: XRServer; idx: int32): Ref[XRInterface] {.loadfrom("get_interface", 4237347919).}
  proc getInterfaces*(self: XRServer): TypedArray[Dictionary] {.loadfrom("get_interfaces", 3995934104).}
  proc findInterface*(self: XRServer; name: String): Ref[XRInterface] {.loadfrom("find_interface", 1395192955).}
  proc addTracker*(self: XRServer; tracker: Ref[XRPositionalTracker]) {.loadfrom("add_tracker", 2692800323).}
  proc removeTracker*(self: XRServer; tracker: Ref[XRPositionalTracker]) {.loadfrom("remove_tracker", 2692800323).}
  proc getTrackers*(self: XRServer; trackerTypes: int32): Dictionary {.loadfrom("get_trackers", 3554694381).}
  proc getTracker*(self: XRServer; trackerName: StringName): Ref[XRPositionalTracker] {.loadfrom("get_tracker", 2742084544).}
  proc primaryInterface*(self: XRServer): Ref[XRInterface] {.loadfrom("get_primary_interface", 2143545064).}
  proc `primaryInterface=`*(self: XRServer; `interface`: Ref[XRInterface]) {.loadfrom("set_primary_interface", 1898711491).}

# IPUnix
define_godot_engine_class_essencials(IPUnix, IP)

# SceneTree
define_godot_engine_class_essencials(SceneTree, MainLoop)
SceneTree.memberProcs:
  proc root*(self: SceneTree): Window {.loadfrom("get_root", 1757182445).}
  proc hasGroup*(self: SceneTree; name: StringName): Bool {.loadfrom("has_group", 2619796661).}
  proc isAutoAcceptQuit*(self: SceneTree): Bool {.loadfrom("is_auto_accept_quit", 36873697).}
  proc `autoAcceptQuit=`*(self: SceneTree; enabled: Bool) {.loadfrom("set_auto_accept_quit", 2586408642).}
  proc isQuitOnGoBack*(self: SceneTree): Bool {.loadfrom("is_quit_on_go_back", 36873697).}
  proc `quitOnGoBack=`*(self: SceneTree; enabled: Bool) {.loadfrom("set_quit_on_go_back", 2586408642).}
  proc `debugCollisionsHint=`*(self: SceneTree; enable: Bool) {.loadfrom("set_debug_collisions_hint", 2586408642).}
  proc isDebuggingCollisionsHint*(self: SceneTree): Bool {.loadfrom("is_debugging_collisions_hint", 36873697).}
  proc `debugPathsHint=`*(self: SceneTree; enable: Bool) {.loadfrom("set_debug_paths_hint", 2586408642).}
  proc isDebuggingPathsHint*(self: SceneTree): Bool {.loadfrom("is_debugging_paths_hint", 36873697).}
  proc `debugNavigationHint=`*(self: SceneTree; enable: Bool) {.loadfrom("set_debug_navigation_hint", 2586408642).}
  proc isDebuggingNavigationHint*(self: SceneTree): Bool {.loadfrom("is_debugging_navigation_hint", 36873697).}
  proc `editedSceneRoot=`*(self: SceneTree; scene: ptr Node) {.loadfrom("set_edited_scene_root", 1078189570).}
  proc editedSceneRoot*(self: SceneTree): Node {.loadfrom("get_edited_scene_root", 3160264692).}
  proc `pause=`*(self: SceneTree; enable: Bool) {.loadfrom("set_pause", 2586408642).}
  proc isPaused*(self: SceneTree): Bool {.loadfrom("is_paused", 36873697).}
  proc createTimer*(self: SceneTree; timeSec: float64; processAlways: Bool = true; processInPhysics: Bool = false; ignoreTimeScale: Bool = false): Ref[SceneTreeTimer] {.loadfrom("create_timer", 1780978058).}
  proc createTween*(self: SceneTree): Ref[Tween] {.loadfrom("create_tween", 3426978995).}
  proc getProcessedTweens*(self: SceneTree): TypedArray[Tween] {.loadfrom("get_processed_tweens", 2915620761).}
  proc getNodeCount*(self: SceneTree): int32 {.loadfrom("get_node_count", 3905245786).}
  proc getFrame*(self: SceneTree): int64 {.loadfrom("get_frame", 3905245786).}
  proc quit*(self: SceneTree; exitCode: int32 = 0) {.loadfrom("quit", 1995695955).}
  proc queueDelete*(self: SceneTree; obj: ptr Object) {.loadfrom("queue_delete", 3975164845).}
  proc callGroupFlags*(self: SceneTree; flags: Int; group: StringName; `method`: StringName) {.loadfrom("call_group_flags", 1527739229).}
  proc notifyGroupFlags*(self: SceneTree; callFlags: uint32; group: StringName; notification: int32) {.loadfrom("notify_group_flags", 1245489420).}
  proc setGroupFlags*(self: SceneTree; callFlags: uint32; group: StringName; property: String; value: ptr Variant) {.loadfrom("set_group_flags", 3497599527).}
  proc callGroup*(self: SceneTree; group: StringName; `method`: StringName) {.loadfrom("call_group", 1257962832).}
  proc notifyGroup*(self: SceneTree; group: StringName; notification: int32) {.loadfrom("notify_group", 2415702435).}
  proc setGroup*(self: SceneTree; group: StringName; property: String; value: ptr Variant) {.loadfrom("set_group", 1279312029).}
  proc getNodesInGroup*(self: SceneTree; group: StringName): TypedArray[Node] {.loadfrom("get_nodes_in_group", 689397652).}
  proc getFirstNodeInGroup*(self: SceneTree; group: StringName): Node {.loadfrom("get_first_node_in_group", 4071044623).}
  proc `currentScene=`*(self: SceneTree; childNode: ptr Node) {.loadfrom("set_current_scene", 1078189570).}
  proc currentScene*(self: SceneTree): Node {.loadfrom("get_current_scene", 3160264692).}
  proc changeSceneToFile*(self: SceneTree; path: String): Error {.loadfrom("change_scene_to_file", 166001499).}
  proc changeSceneToPacked*(self: SceneTree; packedScene: Ref[PackedScene]): Error {.loadfrom("change_scene_to_packed", 107349098).}
  proc reloadCurrentScene*(self: SceneTree): Error {.loadfrom("reload_current_scene", 166280745).}
  proc unloadCurrentScene*(self: SceneTree) {.loadfrom("unload_current_scene", 3218959716).}
  proc setMultiplayer*(self: SceneTree; multiplayer: Ref[MultiplayerAPI]; rootPath: NodePath = NodePath|>init()) {.loadfrom("set_multiplayer", 2385607013).}
  proc getMultiplayer*(self: SceneTree; forPath: NodePath = NodePath|>init()): Ref[MultiplayerAPI] {.loadfrom("get_multiplayer", 3453401404).}
  proc `multiplayerPollEnabled=`*(self: SceneTree; enabled: Bool) {.loadfrom("set_multiplayer_poll_enabled", 2586408642).}
  proc isMultiplayerPollEnabled*(self: SceneTree): Bool {.loadfrom("is_multiplayer_poll_enabled", 36873697).}

# MovieWriterMJPEG
define_godot_engine_class_essencials(MovieWriterMJPEG, MovieWriter)

# MovieWriterPNGWAV
define_godot_engine_class_essencials(MovieWriterPNGWAV, MovieWriter)

# AnimationPlayer
define_godot_engine_class_essencials(AnimationPlayer, Node)
method postProcessKeyValue*(self: AnimationPlayer; animation: Ref[Animation]; track: int32; value: ptr Variant; `object`: ptr Object; objectIdx: int32): Variant {.base.} = (discard)
AnimationPlayer.memberProcs:
  proc addAnimationLibrary*(self: AnimationPlayer; name: StringName; library: Ref[AnimationLibrary]): Error {.loadfrom("add_animation_library", 618909818).}
  proc removeAnimationLibrary*(self: AnimationPlayer; name: StringName) {.loadfrom("remove_animation_library", 3304788590).}
  proc renameAnimationLibrary*(self: AnimationPlayer; name: StringName; newname: StringName) {.loadfrom("rename_animation_library", 3740211285).}
  proc hasAnimationLibrary*(self: AnimationPlayer; name: StringName): Bool {.loadfrom("has_animation_library", 2619796661).}
  proc getAnimationLibrary*(self: AnimationPlayer; name: StringName): Ref[AnimationLibrary] {.loadfrom("get_animation_library", 147342321).}
  proc getAnimationLibraryList*(self: AnimationPlayer): TypedArray[StringName] {.loadfrom("get_animation_library_list", 3995934104).}
  proc hasAnimation*(self: AnimationPlayer; name: StringName): Bool {.loadfrom("has_animation", 2619796661).}
  proc getAnimation*(self: AnimationPlayer; name: StringName): Ref[Animation] {.loadfrom("get_animation", 2933122410).}
  proc getAnimationList*(self: AnimationPlayer): PackedStringArray {.loadfrom("get_animation_list", 1139954409).}
  proc animationSetNext*(self: AnimationPlayer; animFrom: StringName; animTo: StringName) {.loadfrom("animation_set_next", 3740211285).}
  proc animationGetNext*(self: AnimationPlayer; animFrom: StringName): StringName {.loadfrom("animation_get_next", 1965194235).}
  proc setBlendTime*(self: AnimationPlayer; animFrom: StringName; animTo: StringName; sec: float64) {.loadfrom("set_blend_time", 3231131886).}
  proc getBlendTime*(self: AnimationPlayer; animFrom: StringName; animTo: StringName): float64 {.loadfrom("get_blend_time", 1958752504).}
  proc `defaultBlendTime=`*(self: AnimationPlayer; sec: float64) {.loadfrom("set_default_blend_time", 373806689).}
  proc defaultBlendTime*(self: AnimationPlayer): float64 {.loadfrom("get_default_blend_time", 1740695150).}
  proc play*(self: AnimationPlayer; name: StringName = ""; customBlend: float64 = -1; customSpeed: Float = 1.0; fromEnd: Bool = false) {.loadfrom("play", 3118260607).}
  proc playBackwards*(self: AnimationPlayer; name: StringName = ""; customBlend: float64 = -1) {.loadfrom("play_backwards", 2787282401).}
  proc pause*(self: AnimationPlayer) {.loadfrom("pause", 3218959716).}
  proc stop*(self: AnimationPlayer; keepState: Bool = false) {.loadfrom("stop", 107499316).}
  proc isPlaying*(self: AnimationPlayer): Bool {.loadfrom("is_playing", 36873697).}
  proc `currentAnimation=`*(self: AnimationPlayer; anim: String) {.loadfrom("set_current_animation", 83702148).}
  proc currentAnimation*(self: AnimationPlayer): String {.loadfrom("get_current_animation", 201670096).}
  proc `assignedAnimation=`*(self: AnimationPlayer; anim: String) {.loadfrom("set_assigned_animation", 83702148).}
  proc assignedAnimation*(self: AnimationPlayer): String {.loadfrom("get_assigned_animation", 201670096).}
  proc queue*(self: AnimationPlayer; name: StringName) {.loadfrom("queue", 3304788590).}
  proc getQueue*(self: AnimationPlayer): PackedStringArray {.loadfrom("get_queue", 2981934095).}
  proc clearQueue*(self: AnimationPlayer) {.loadfrom("clear_queue", 3218959716).}
  proc `active=`*(self: AnimationPlayer; active: Bool) {.loadfrom("set_active", 2586408642).}
  proc isActive*(self: AnimationPlayer): Bool {.loadfrom("is_active", 36873697).}
  proc `speedScale=`*(self: AnimationPlayer; speed: Float) {.loadfrom("set_speed_scale", 373806689).}
  proc speedScale*(self: AnimationPlayer): Float {.loadfrom("get_speed_scale", 1740695150).}
  proc getPlayingSpeed*(self: AnimationPlayer): Float {.loadfrom("get_playing_speed", 1740695150).}
  proc `autoplay=`*(self: AnimationPlayer; name: String) {.loadfrom("set_autoplay", 83702148).}
  proc autoplay*(self: AnimationPlayer): String {.loadfrom("get_autoplay", 201670096).}
  proc `reonSaveEnabled=`*(self: AnimationPlayer; enabled: Bool) {.loadfrom("set_reset_on_save_enabled", 2586408642).}
  proc isResetOnSaveEnabled*(self: AnimationPlayer): Bool {.loadfrom("is_reset_on_save_enabled", 36873697).}
  proc `root=`*(self: AnimationPlayer; path: NodePath) {.loadfrom("set_root", 1348162250).}
  proc root*(self: AnimationPlayer): NodePath {.loadfrom("get_root", 4075236667).}
  proc findAnimation*(self: AnimationPlayer; animation: Ref[Animation]): StringName {.loadfrom("find_animation", 1559484580).}
  proc findAnimationLibrary*(self: AnimationPlayer; animation: Ref[Animation]): StringName {.loadfrom("find_animation_library", 1559484580).}
  proc clearCaches*(self: AnimationPlayer) {.loadfrom("clear_caches", 3218959716).}
  proc `processCallback=`*(self: AnimationPlayer; mode: AnimationPlayer|>AnimationProcessCallback) {.loadfrom("set_process_callback", 1663839457).}
  proc processCallback*(self: AnimationPlayer): AnimationPlayer|>AnimationProcessCallback {.loadfrom("get_process_callback", 4207496604).}
  proc `methodCallMode=`*(self: AnimationPlayer; mode: AnimationPlayer|>AnimationMethodCallMode) {.loadfrom("set_method_call_mode", 3413514846).}
  proc methodCallMode*(self: AnimationPlayer): AnimationPlayer|>AnimationMethodCallMode {.loadfrom("get_method_call_mode", 3583380054).}
  proc `audioMaxPolyphony=`*(self: AnimationPlayer; maxPolyphony: int32) {.loadfrom("set_audio_max_polyphony", 1286410249).}
  proc audioMaxPolyphony*(self: AnimationPlayer): int32 {.loadfrom("get_audio_max_polyphony", 3905245786).}
  proc `movieQuitOnFinishEnabled=`*(self: AnimationPlayer; enabled: Bool) {.loadfrom("set_movie_quit_on_finish_enabled", 2586408642).}
  proc isMovieQuitOnFinishEnabled*(self: AnimationPlayer): Bool {.loadfrom("is_movie_quit_on_finish_enabled", 36873697).}
  proc currentAnimationPosition*(self: AnimationPlayer): float64 {.loadfrom("get_current_animation_position", 1740695150).}
  proc currentAnimationLength*(self: AnimationPlayer): float64 {.loadfrom("get_current_animation_length", 1740695150).}
  proc seek*(self: AnimationPlayer; seconds: float64; update: Bool = false) {.loadfrom("seek", 2087892650).}
  proc advance*(self: AnimationPlayer; delta: float64) {.loadfrom("advance", 373806689).}

# AnimationTree
define_godot_engine_class_essencials(AnimationTree, Node)
method postProcessKeyValue*(self: AnimationTree; animation: Ref[Animation]; track: int32; value: ptr Variant; `object`: ptr Object; objectIdx: int32): Variant {.base.} = (discard)
AnimationTree.memberProcs:
  proc `active=`*(self: AnimationTree; active: Bool) {.loadfrom("set_active", 2586408642).}
  proc isActive*(self: AnimationTree): Bool {.loadfrom("is_active", 36873697).}
  proc `treeRoot=`*(self: AnimationTree; root: Ref[AnimationNode]) {.loadfrom("set_tree_root", 712869711).}
  proc treeRoot*(self: AnimationTree): Ref[AnimationNode] {.loadfrom("get_tree_root", 1462070895).}
  proc `processCallback=`*(self: AnimationTree; mode: AnimationTree|>AnimationProcessCallback) {.loadfrom("set_process_callback", 1723352826).}
  proc processCallback*(self: AnimationTree): AnimationTree|>AnimationProcessCallback {.loadfrom("get_process_callback", 891317132).}
  proc `animationPlayer=`*(self: AnimationTree; root: NodePath) {.loadfrom("set_animation_player", 1348162250).}
  proc animationPlayer*(self: AnimationTree): NodePath {.loadfrom("get_animation_player", 4075236667).}
  proc `advanceExpressionBaseNode=`*(self: AnimationTree; node: NodePath) {.loadfrom("set_advance_expression_base_node", 1348162250).}
  proc advanceExpressionBaseNode*(self: AnimationTree): NodePath {.loadfrom("get_advance_expression_base_node", 4075236667).}
  proc `rootMotionTrack=`*(self: AnimationTree; path: NodePath) {.loadfrom("set_root_motion_track", 1348162250).}
  proc rootMotionTrack*(self: AnimationTree): NodePath {.loadfrom("get_root_motion_track", 4075236667).}
  proc `audioMaxPolyphony=`*(self: AnimationTree; maxPolyphony: int32) {.loadfrom("set_audio_max_polyphony", 1286410249).}
  proc audioMaxPolyphony*(self: AnimationTree): int32 {.loadfrom("get_audio_max_polyphony", 3905245786).}
  proc getRootMotionPosition*(self: AnimationTree): Vector3 {.loadfrom("get_root_motion_position", 3360562783).}
  proc getRootMotionRotation*(self: AnimationTree): Quaternion {.loadfrom("get_root_motion_rotation", 1222331677).}
  proc getRootMotionScale*(self: AnimationTree): Vector3 {.loadfrom("get_root_motion_scale", 3360562783).}
  proc getRootMotionPositionAccumulator*(self: AnimationTree): Vector3 {.loadfrom("get_root_motion_position_accumulator", 3360562783).}
  proc getRootMotionRotationAccumulator*(self: AnimationTree): Quaternion {.loadfrom("get_root_motion_rotation_accumulator", 1222331677).}
  proc getRootMotionScaleAccumulator*(self: AnimationTree): Vector3 {.loadfrom("get_root_motion_scale_accumulator", 3360562783).}
  proc advance*(self: AnimationTree; delta: float64) {.loadfrom("advance", 373806689).}

# AudioStreamPlayer
define_godot_engine_class_essencials(AudioStreamPlayer, Node)
AudioStreamPlayer.memberProcs:
  proc `stream=`*(self: AudioStreamPlayer; stream: Ref[AudioStream]) {.loadfrom("set_stream", 2210767741).}
  proc stream*(self: AudioStreamPlayer): Ref[AudioStream] {.loadfrom("get_stream", 160907539).}
  proc `volumeDb=`*(self: AudioStreamPlayer; volumeDb: Float) {.loadfrom("set_volume_db", 373806689).}
  proc volumeDb*(self: AudioStreamPlayer): Float {.loadfrom("get_volume_db", 1740695150).}
  proc `pitchScale=`*(self: AudioStreamPlayer; pitchScale: Float) {.loadfrom("set_pitch_scale", 373806689).}
  proc pitchScale*(self: AudioStreamPlayer): Float {.loadfrom("get_pitch_scale", 1740695150).}
  proc play*(self: AudioStreamPlayer; fromPosition: Float = 0.0) {.loadfrom("play", 1958160172).}
  proc seek*(self: AudioStreamPlayer; toPosition: Float) {.loadfrom("seek", 373806689).}
  proc stop*(self: AudioStreamPlayer) {.loadfrom("stop", 3218959716).}
  proc isPlaying*(self: AudioStreamPlayer): Bool {.loadfrom("is_playing", 36873697).}
  proc getPlaybackPosition*(self: AudioStreamPlayer): Float {.loadfrom("get_playback_position", 191475506).}
  proc `bus=`*(self: AudioStreamPlayer; bus: StringName) {.loadfrom("set_bus", 3304788590).}
  proc bus*(self: AudioStreamPlayer): StringName {.loadfrom("get_bus", 2002593661).}
  proc `autoplay=`*(self: AudioStreamPlayer; enable: Bool) {.loadfrom("set_autoplay", 2586408642).}
  proc isAutoplayEnabled*(self: AudioStreamPlayer): Bool {.loadfrom("is_autoplay_enabled", 2240911060).}
  proc `mixTarget=`*(self: AudioStreamPlayer; mixTarget: AudioStreamPlayer|>MixTarget) {.loadfrom("set_mix_target", 2300306138).}
  proc mixTarget*(self: AudioStreamPlayer): AudioStreamPlayer|>MixTarget {.loadfrom("get_mix_target", 172807476).}
  proc `streamPaused=`*(self: AudioStreamPlayer; pause: Bool) {.loadfrom("set_stream_paused", 2586408642).}
  proc streamPaused*(self: AudioStreamPlayer): Bool {.loadfrom("get_stream_paused", 36873697).}
  proc `maxPolyphony=`*(self: AudioStreamPlayer; maxPolyphony: int32) {.loadfrom("set_max_polyphony", 1286410249).}
  proc maxPolyphony*(self: AudioStreamPlayer): int32 {.loadfrom("get_max_polyphony", 3905245786).}
  proc hasStreamPlayback*(self: AudioStreamPlayer): Bool {.loadfrom("has_stream_playback", 2240911060).}
  proc getStreamPlayback*(self: AudioStreamPlayer): Ref[AudioStreamPlayback] {.loadfrom("get_stream_playback", 210135309).}

# CanvasItem
define_godot_engine_class_essencials(CanvasItem, Node)
method draw*(self: CanvasItem) {.base.} = (discard)
CanvasItem.memberProcs:
  proc getCanvasItem*(self: CanvasItem): RID {.loadfrom("get_canvas_item", 2944877500).}
  proc `visible=`*(self: CanvasItem; visible: Bool) {.loadfrom("set_visible", 2586408642).}
  proc isVisible*(self: CanvasItem): Bool {.loadfrom("is_visible", 36873697).}
  proc isVisibleInTree*(self: CanvasItem): Bool {.loadfrom("is_visible_in_tree", 36873697).}
  proc show*(self: CanvasItem) {.loadfrom("show", 3218959716).}
  proc hide*(self: CanvasItem) {.loadfrom("hide", 3218959716).}
  proc queueRedraw*(self: CanvasItem) {.loadfrom("queue_redraw", 3218959716).}
  proc moveToFront*(self: CanvasItem) {.loadfrom("move_to_front", 3218959716).}
  proc `asTopLevel=`*(self: CanvasItem; enable: Bool) {.loadfrom("set_as_top_level", 2586408642).}
  proc isSetAsTopLevel*(self: CanvasItem): Bool {.loadfrom("is_set_as_top_level", 36873697).}
  proc `lightMask=`*(self: CanvasItem; lightMask: int32) {.loadfrom("set_light_mask", 1286410249).}
  proc lightMask*(self: CanvasItem): int32 {.loadfrom("get_light_mask", 3905245786).}
  proc `modulate=`*(self: CanvasItem; modulate: Color) {.loadfrom("set_modulate", 2920490490).}
  proc modulate*(self: CanvasItem): Color {.loadfrom("get_modulate", 3444240500).}
  proc `selfModulate=`*(self: CanvasItem; selfModulate: Color) {.loadfrom("set_self_modulate", 2920490490).}
  proc selfModulate*(self: CanvasItem): Color {.loadfrom("get_self_modulate", 3444240500).}
  proc `zIndex=`*(self: CanvasItem; zIndex: int32) {.loadfrom("set_z_index", 1286410249).}
  proc zIndex*(self: CanvasItem): int32 {.loadfrom("get_z_index", 3905245786).}
  proc `zAsRelative=`*(self: CanvasItem; enable: Bool) {.loadfrom("set_z_as_relative", 2586408642).}
  proc isZRelative*(self: CanvasItem): Bool {.loadfrom("is_z_relative", 36873697).}
  proc `ySortEnabled=`*(self: CanvasItem; enabled: Bool) {.loadfrom("set_y_sort_enabled", 2586408642).}
  proc isYSortEnabled*(self: CanvasItem): Bool {.loadfrom("is_y_sort_enabled", 36873697).}
  proc `drawBehindParent=`*(self: CanvasItem; enable: Bool) {.loadfrom("set_draw_behind_parent", 2586408642).}
  proc isDrawBehindParentEnabled*(self: CanvasItem): Bool {.loadfrom("is_draw_behind_parent_enabled", 36873697).}
  proc drawLine*(self: CanvasItem; `from`: Vector2; to: Vector2; color: Color; width: Float = -1.0; antialiased: Bool = false) {.loadfrom("draw_line", 2516941890).}
  proc drawDashedLine*(self: CanvasItem; `from`: Vector2; to: Vector2; color: Color; width: Float = -1.0; dash: Float = 2.0; aligned: Bool = true) {.loadfrom("draw_dashed_line", 2175215884).}
  proc drawPolyline*(self: CanvasItem; points: PackedVector2Array; color: Color; width: Float = -1.0; antialiased: Bool = false) {.loadfrom("draw_polyline", 4175878946).}
  proc drawPolylineColors*(self: CanvasItem; points: PackedVector2Array; colors: PackedColorArray; width: Float = -1.0; antialiased: Bool = false) {.loadfrom("draw_polyline_colors", 2239164197).}
  proc drawArc*(self: CanvasItem; center: Vector2; radius: Float; startAngle: Float; endAngle: Float; pointCount: int32; color: Color; width: Float = -1.0; antialiased: Bool = false) {.loadfrom("draw_arc", 3486841771).}
  proc drawMultiline*(self: CanvasItem; points: PackedVector2Array; color: Color; width: Float = -1.0) {.loadfrom("draw_multiline", 4230657331).}
  proc drawMultilineColors*(self: CanvasItem; points: PackedVector2Array; colors: PackedColorArray; width: Float = -1.0) {.loadfrom("draw_multiline_colors", 235933050).}
  proc drawRect*(self: CanvasItem; rect: Rect2; color: Color; filled: Bool = true; width: Float = -1.0) {.loadfrom("draw_rect", 84391229).}
  proc drawCircle*(self: CanvasItem; position: Vector2; radius: Float; color: Color) {.loadfrom("draw_circle", 3063020269).}
  proc drawTexture*(self: CanvasItem; texture: Ref[Texture2D]; position: Vector2; modulate: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("draw_texture", 1695860435).}
  proc drawTextureRect*(self: CanvasItem; texture: Ref[Texture2D]; rect: Rect2; tile: Bool; modulate: Color = Color|>init(1, 1, 1, 1); transpose: Bool = false) {.loadfrom("draw_texture_rect", 3204081724).}
  proc drawTextureRectRegion*(self: CanvasItem; texture: Ref[Texture2D]; rect: Rect2; srcRect: Rect2; modulate: Color = Color|>init(1, 1, 1, 1); transpose: Bool = false; clipUv: Bool = true) {.loadfrom("draw_texture_rect_region", 3196597532).}
  proc drawMsdfTextureRectRegion*(self: CanvasItem; texture: Ref[Texture2D]; rect: Rect2; srcRect: Rect2; modulate: Color = Color|>init(1, 1, 1, 1); outline: float64 = 0.0; pixelRange: float64 = 4.0; scale: float64 = 1.0) {.loadfrom("draw_msdf_texture_rect_region", 2672026175).}
  proc drawLcdTextureRectRegion*(self: CanvasItem; texture: Ref[Texture2D]; rect: Rect2; srcRect: Rect2; modulate: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("draw_lcd_texture_rect_region", 169610548).}
  proc drawStyleBox*(self: CanvasItem; styleBox: Ref[StyleBox]; rect: Rect2) {.loadfrom("draw_style_box", 388176283).}
  proc drawPrimitive*(self: CanvasItem; points: PackedVector2Array; colors: PackedColorArray; uvs: PackedVector2Array; texture: Ref[Texture2D] = default Ref[Texture2D]) {.loadfrom("draw_primitive", 2248678295).}
  proc drawPolygon*(self: CanvasItem; points: PackedVector2Array; colors: PackedColorArray; uvs: PackedVector2Array = PackedVector2Array(); texture: Ref[Texture2D] = default Ref[Texture2D]) {.loadfrom("draw_polygon", 2683625537).}
  proc drawColoredPolygon*(self: CanvasItem; points: PackedVector2Array; color: Color; uvs: PackedVector2Array = PackedVector2Array(); texture: Ref[Texture2D] = default Ref[Texture2D]) {.loadfrom("draw_colored_polygon", 1659099617).}
  proc drawString*(self: CanvasItem; font: Ref[Font]; pos: Vector2; text: String; alignment: HorizontalAlignment = horizontalAlignmentLeft; width: Float = -1; fontSize: int32 = 16; modulate: Color = Color|>init(1, 1, 1, 1); justificationFlags: set[TextServer|>JustificationFlag] = {}; direction: TextServer|>Direction = directionAuto; orientation: TextServer|>Orientation = orientationHorizontal) {.loadfrom("draw_string", 2552080639).}
  proc drawMultilineString*(self: CanvasItem; font: Ref[Font]; pos: Vector2; text: String; alignment: HorizontalAlignment = horizontalAlignmentLeft; width: Float = -1; fontSize: int32 = 16; maxLines: int32 = -1; modulate: Color = Color|>init(1, 1, 1, 1); brkFlags: set[TextServer|>LineBreakFlag] = {}; justificationFlags: set[TextServer|>JustificationFlag] = {}; direction: TextServer|>Direction = directionAuto; orientation: TextServer|>Orientation = orientationHorizontal) {.loadfrom("draw_multiline_string", 4002645436).}
  proc drawStringOutline*(self: CanvasItem; font: Ref[Font]; pos: Vector2; text: String; alignment: HorizontalAlignment = horizontalAlignmentLeft; width: Float = -1; fontSize: int32 = 16; size: int32 = 1; modulate: Color = Color|>init(1, 1, 1, 1); justificationFlags: set[TextServer|>JustificationFlag] = {}; direction: TextServer|>Direction = directionAuto; orientation: TextServer|>Orientation = orientationHorizontal) {.loadfrom("draw_string_outline", 850005221).}
  proc drawMultilineStringOutline*(self: CanvasItem; font: Ref[Font]; pos: Vector2; text: String; alignment: HorizontalAlignment = horizontalAlignmentLeft; width: Float = -1; fontSize: int32 = 16; maxLines: int32 = -1; size: int32 = 1; modulate: Color = Color|>init(1, 1, 1, 1); brkFlags: set[TextServer|>LineBreakFlag] = {}; justificationFlags: set[TextServer|>JustificationFlag] = {}; direction: TextServer|>Direction = directionAuto; orientation: TextServer|>Orientation = orientationHorizontal) {.loadfrom("draw_multiline_string_outline", 3717870722).}
  proc drawChar*(self: CanvasItem; font: Ref[Font]; pos: Vector2; char: String; fontSize: int32 = 16; modulate: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("draw_char", 2329089032).}
  proc drawCharOutline*(self: CanvasItem; font: Ref[Font]; pos: Vector2; char: String; fontSize: int32 = 16; size: int32 = -1; modulate: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("draw_char_outline", 419453826).}
  proc drawMesh*(self: CanvasItem; mesh: Ref[Mesh]; texture: Ref[Texture2D]; transform: Transform2D = Transform2D|>init(); modulate: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("draw_mesh", 1634855856).}
  proc drawMultimesh*(self: CanvasItem; multimesh: Ref[MultiMesh]; texture: Ref[Texture2D]) {.loadfrom("draw_multimesh", 937992368).}
  proc drawSetTransform*(self: CanvasItem; position: Vector2; rotation: Float = 0.0; scale: Vector2 = gdvec(1, 1)) {.loadfrom("draw_set_transform", 3283884939).}
  proc drawSetTransformMatrix*(self: CanvasItem; xform: Transform2D) {.loadfrom("draw_set_transform_matrix", 2761652528).}
  proc drawAnimationSlice*(self: CanvasItem; animationLength: float64; sliceBegin: float64; sliceEnd: float64; offset: float64 = 0.0) {.loadfrom("draw_animation_slice", 2295343543).}
  proc drawEndAnimation*(self: CanvasItem) {.loadfrom("draw_end_animation", 3218959716).}
  proc getTransform*(self: CanvasItem): Transform2D {.loadfrom("get_transform", 3814499831).}
  proc getGlobalTransform*(self: CanvasItem): Transform2D {.loadfrom("get_global_transform", 3814499831).}
  proc getGlobalTransformWithCanvas*(self: CanvasItem): Transform2D {.loadfrom("get_global_transform_with_canvas", 3814499831).}
  proc getViewportTransform*(self: CanvasItem): Transform2D {.loadfrom("get_viewport_transform", 3814499831).}
  proc getViewportRect*(self: CanvasItem): Rect2 {.loadfrom("get_viewport_rect", 1639390495).}
  proc getCanvasTransform*(self: CanvasItem): Transform2D {.loadfrom("get_canvas_transform", 3814499831).}
  proc getScreenTransform*(self: CanvasItem): Transform2D {.loadfrom("get_screen_transform", 3814499831).}
  proc getLocalMousePosition*(self: CanvasItem): Vector2 {.loadfrom("get_local_mouse_position", 3341600327).}
  proc getGlobalMousePosition*(self: CanvasItem): Vector2 {.loadfrom("get_global_mouse_position", 3341600327).}
  proc getCanvas*(self: CanvasItem): RID {.loadfrom("get_canvas", 2944877500).}
  proc getWorld2d*(self: CanvasItem): Ref[World2D] {.loadfrom("get_world_2d", 2339128592).}
  proc `material=`*(self: CanvasItem; material: Ref[Material]) {.loadfrom("set_material", 2757459619).}
  proc material*(self: CanvasItem): Ref[Material] {.loadfrom("get_material", 5934680).}
  proc `useParentMaterial=`*(self: CanvasItem; enable: Bool) {.loadfrom("set_use_parent_material", 2586408642).}
  proc useParentMaterial*(self: CanvasItem): Bool {.loadfrom("get_use_parent_material", 36873697).}
  proc setNotifyLocalTransform*(self: CanvasItem; enable: Bool) {.loadfrom("set_notify_local_transform", 2586408642).}
  proc isLocalTransformNotificationEnabled*(self: CanvasItem): Bool {.loadfrom("is_local_transform_notification_enabled", 36873697).}
  proc setNotifyTransform*(self: CanvasItem; enable: Bool) {.loadfrom("set_notify_transform", 2586408642).}
  proc isTransformNotificationEnabled*(self: CanvasItem): Bool {.loadfrom("is_transform_notification_enabled", 36873697).}
  proc forceUpdateTransform*(self: CanvasItem) {.loadfrom("force_update_transform", 3218959716).}
  proc makeCanvasPositionLocal*(self: CanvasItem; screenPoint: Vector2): Vector2 {.loadfrom("make_canvas_position_local", 2656412154).}
  proc makeInputLocal*(self: CanvasItem; event: Ref[InputEvent]): Ref[InputEvent] {.loadfrom("make_input_local", 811130057).}
  proc `visibilityLayer=`*(self: CanvasItem; layer: uint32) {.loadfrom("set_visibility_layer", 1286410249).}
  proc visibilityLayer*(self: CanvasItem): uint32 {.loadfrom("get_visibility_layer", 3905245786).}
  proc setVisibilityLayerBit*(self: CanvasItem; layer: uint32; enabled: Bool) {.loadfrom("set_visibility_layer_bit", 300928843).}
  proc getVisibilityLayerBit*(self: CanvasItem; layer: uint32): Bool {.loadfrom("get_visibility_layer_bit", 1116898809).}
  proc `textureFilter=`*(self: CanvasItem; mode: CanvasItem|>TextureFilter) {.loadfrom("set_texture_filter", 1037999706).}
  proc textureFilter*(self: CanvasItem): CanvasItem|>TextureFilter {.loadfrom("get_texture_filter", 121960042).}
  proc `textureRepeat=`*(self: CanvasItem; mode: CanvasItem|>TextureRepeat) {.loadfrom("set_texture_repeat", 1716472974).}
  proc textureRepeat*(self: CanvasItem): CanvasItem|>TextureRepeat {.loadfrom("get_texture_repeat", 2667158319).}
  proc `clipChildrenMode=`*(self: CanvasItem; mode: CanvasItem|>ClipChildrenMode) {.loadfrom("set_clip_children_mode", 1319393776).}
  proc clipChildrenMode*(self: CanvasItem): CanvasItem|>ClipChildrenMode {.loadfrom("get_clip_children_mode", 3581808349).}

# CanvasLayer
define_godot_engine_class_essencials(CanvasLayer, Node)
CanvasLayer.memberProcs:
  proc `layer=`*(self: CanvasLayer; layer: int32) {.loadfrom("set_layer", 1286410249).}
  proc layer*(self: CanvasLayer): int32 {.loadfrom("get_layer", 3905245786).}
  proc `visible=`*(self: CanvasLayer; visible: Bool) {.loadfrom("set_visible", 2586408642).}
  proc isVisible*(self: CanvasLayer): Bool {.loadfrom("is_visible", 36873697).}
  proc show*(self: CanvasLayer) {.loadfrom("show", 3218959716).}
  proc hide*(self: CanvasLayer) {.loadfrom("hide", 3218959716).}
  proc `transform=`*(self: CanvasLayer; transform: Transform2D) {.loadfrom("set_transform", 2761652528).}
  proc transform*(self: CanvasLayer): Transform2D {.loadfrom("get_transform", 3814499831).}
  proc getFinalTransform*(self: CanvasLayer): Transform2D {.loadfrom("get_final_transform", 3814499831).}
  proc `offset=`*(self: CanvasLayer; offset: Vector2) {.loadfrom("set_offset", 743155724).}
  proc offset*(self: CanvasLayer): Vector2 {.loadfrom("get_offset", 3341600327).}
  proc `rotation=`*(self: CanvasLayer; radians: Float) {.loadfrom("set_rotation", 373806689).}
  proc rotation*(self: CanvasLayer): Float {.loadfrom("get_rotation", 1740695150).}
  proc `scale=`*(self: CanvasLayer; scale: Vector2) {.loadfrom("set_scale", 743155724).}
  proc scale*(self: CanvasLayer): Vector2 {.loadfrom("get_scale", 3341600327).}
  proc `followViewport=`*(self: CanvasLayer; enable: Bool) {.loadfrom("set_follow_viewport", 2586408642).}
  proc isFollowingViewport*(self: CanvasLayer): Bool {.loadfrom("is_following_viewport", 36873697).}
  proc `followViewportScale=`*(self: CanvasLayer; scale: Float) {.loadfrom("set_follow_viewport_scale", 373806689).}
  proc followViewportScale*(self: CanvasLayer): Float {.loadfrom("get_follow_viewport_scale", 1740695150).}
  proc `customViewport=`*(self: CanvasLayer; viewport: ptr Node) {.loadfrom("set_custom_viewport", 1078189570).}
  proc customViewport*(self: CanvasLayer): Node {.loadfrom("get_custom_viewport", 3160264692).}
  proc getCanvas*(self: CanvasLayer): RID {.loadfrom("get_canvas", 2944877500).}

# EditorFileSystem
define_godot_engine_class_essencials(EditorFileSystem, Node)
EditorFileSystem.memberProcs:
  proc getFilesystem*(self: EditorFileSystem): EditorFileSystemDirectory {.loadfrom("get_filesystem", 842323275).}
  proc isScanning*(self: EditorFileSystem): Bool {.loadfrom("is_scanning", 36873697).}
  proc getScanningProgress*(self: EditorFileSystem): Float {.loadfrom("get_scanning_progress", 1740695150).}
  proc scan*(self: EditorFileSystem) {.loadfrom("scan", 3218959716).}
  proc scanSources*(self: EditorFileSystem) {.loadfrom("scan_sources", 3218959716).}
  proc updateFile*(self: EditorFileSystem; path: String) {.loadfrom("update_file", 83702148).}
  proc getFilesystemPath*(self: EditorFileSystem; path: String): EditorFileSystemDirectory {.loadfrom("get_filesystem_path", 3188521125).}
  proc getFileType*(self: EditorFileSystem; path: String): String {.loadfrom("get_file_type", 3135753539).}
  proc reimportFiles*(self: EditorFileSystem; files: PackedStringArray) {.loadfrom("reimport_files", 4015028928).}

# EditorPlugin
define_godot_engine_class_essencials(EditorPlugin, Node)
method forwardCanvasGuiInput*(self: EditorPlugin; event: Ref[InputEvent]): Bool {.base.} = (discard)
method forwardCanvasDrawOverViewport*(self: EditorPlugin; viewportControl: Control) {.base.} = (discard)
method forwardCanvasForceDrawOverViewport*(self: EditorPlugin; viewportControl: Control) {.base.} = (discard)
method forward3dGuiInput*(self: EditorPlugin; viewportCamera: Camera3D; event: Ref[InputEvent]): int32 {.base.} = (discard)
method forward3dDrawOverViewport*(self: EditorPlugin; viewportControl: Control) {.base.} = (discard)
method forward3dForceDrawOverViewport*(self: EditorPlugin; viewportControl: Control) {.base.} = (discard)
method getPluginName*(self: EditorPlugin): String {.base.} = (discard)
method getPluginIcon*(self: EditorPlugin): Ref[Texture2D] {.base.} = (discard)
method hasMainScreen*(self: EditorPlugin): Bool {.base.} = (discard)
method makeVisible*(self: EditorPlugin; visible: Bool) {.base.} = (discard)
method edit*(self: EditorPlugin; `object`: ptr Object) {.base.} = (discard)
method handles*(self: EditorPlugin; `object`: ptr Object): Bool {.base.} = (discard)
method getState*(self: EditorPlugin): Dictionary {.base.} = (discard)
method setState*(self: EditorPlugin; state: Dictionary) {.base.} = (discard)
method clear*(self: EditorPlugin) {.base.} = (discard)
method saveExternalData*(self: EditorPlugin) {.base.} = (discard)
method applyChanges*(self: EditorPlugin) {.base.} = (discard)
method getBreakpoints*(self: EditorPlugin): PackedStringArray {.base.} = (discard)
method setWindowLayout*(self: EditorPlugin; configuration: Ref[ConfigFile]) {.base.} = (discard)
method getWindowLayout*(self: EditorPlugin; configuration: Ref[ConfigFile]) {.base.} = (discard)
method build*(self: EditorPlugin): Bool {.base.} = (discard)
method enablePlugin*(self: EditorPlugin) {.base.} = (discard)
method disablePlugin*(self: EditorPlugin) {.base.} = (discard)
EditorPlugin.memberProcs:
  proc addControlToContainer*(self: EditorPlugin; container: EditorPlugin|>CustomControlContainer; control: Control) {.loadfrom("add_control_to_container", 3092750152).}
  proc addControlToBottomPanel*(self: EditorPlugin; control: Control; title: String): Button {.loadfrom("add_control_to_bottom_panel", 3526039376).}
  proc addControlToDock*(self: EditorPlugin; slot: EditorPlugin|>DockSlot; control: Control) {.loadfrom("add_control_to_dock", 3354871258).}
  proc removeControlFromDocks*(self: EditorPlugin; control: Control) {.loadfrom("remove_control_from_docks", 1496901182).}
  proc removeControlFromBottomPanel*(self: EditorPlugin; control: Control) {.loadfrom("remove_control_from_bottom_panel", 1496901182).}
  proc removeControlFromContainer*(self: EditorPlugin; container: EditorPlugin|>CustomControlContainer; control: Control) {.loadfrom("remove_control_from_container", 3092750152).}
  proc addToolMenuItem*(self: EditorPlugin; name: String; callable: Callable) {.loadfrom("add_tool_menu_item", 2137474292).}
  proc addToolSubmenuItem*(self: EditorPlugin; name: String; submenu: PopupMenu) {.loadfrom("add_tool_submenu_item", 1019428915).}
  proc removeToolMenuItem*(self: EditorPlugin; name: String) {.loadfrom("remove_tool_menu_item", 83702148).}
  proc getExportAsMenu*(self: EditorPlugin): PopupMenu {.loadfrom("get_export_as_menu", 1775878644).}
  proc addCustomType*(self: EditorPlugin; `type`: String; base: String; script: Ref[Script]; icon: Ref[Texture2D]) {.loadfrom("add_custom_type", 1986814599).}
  proc removeCustomType*(self: EditorPlugin; `type`: String) {.loadfrom("remove_custom_type", 83702148).}
  proc addAutoloadSingleton*(self: EditorPlugin; name: String; path: String) {.loadfrom("add_autoload_singleton", 3186203200).}
  proc removeAutoloadSingleton*(self: EditorPlugin; name: String) {.loadfrom("remove_autoload_singleton", 83702148).}
  proc updateOverlays*(self: EditorPlugin): int32 {.loadfrom("update_overlays", 3905245786).}
  proc makeBottomPanelItemVisible*(self: EditorPlugin; item: Control) {.loadfrom("make_bottom_panel_item_visible", 1496901182).}
  proc hideBottomPanel*(self: EditorPlugin) {.loadfrom("hide_bottom_panel", 3218959716).}
  proc getUndoRedo*(self: EditorPlugin): EditorUndoRedoManager {.loadfrom("get_undo_redo", 773492341).}
  proc addUndoRedoInspectorHookCallback*(self: EditorPlugin; callable: Callable) {.loadfrom("add_undo_redo_inspector_hook_callback", 1611583062).}
  proc removeUndoRedoInspectorHookCallback*(self: EditorPlugin; callable: Callable) {.loadfrom("remove_undo_redo_inspector_hook_callback", 1611583062).}
  proc queueSaveLayout*(self: EditorPlugin) {.loadfrom("queue_save_layout", 3218959716).}
  proc addTranslationParserPlugin*(self: EditorPlugin; parser: Ref[EditorTranslationParserPlugin]) {.loadfrom("add_translation_parser_plugin", 3116463128).}
  proc removeTranslationParserPlugin*(self: EditorPlugin; parser: Ref[EditorTranslationParserPlugin]) {.loadfrom("remove_translation_parser_plugin", 3116463128).}
  proc addImportPlugin*(self: EditorPlugin; importer: Ref[EditorImportPlugin]; firstPriority: Bool = false) {.loadfrom("add_import_plugin", 3113975762).}
  proc removeImportPlugin*(self: EditorPlugin; importer: Ref[EditorImportPlugin]) {.loadfrom("remove_import_plugin", 2312482773).}
  proc addSceneFormatImporterPlugin*(self: EditorPlugin; sceneFormatImporter: Ref[EditorSceneFormatImporter]; firstPriority: Bool = false) {.loadfrom("add_scene_format_importer_plugin", 2764104752).}
  proc removeSceneFormatImporterPlugin*(self: EditorPlugin; sceneFormatImporter: Ref[EditorSceneFormatImporter]) {.loadfrom("remove_scene_format_importer_plugin", 2637776123).}
  proc addScenePostImportPlugin*(self: EditorPlugin; sceneImportPlugin: Ref[EditorScenePostImportPlugin]; firstPriority: Bool = false) {.loadfrom("add_scene_post_import_plugin", 3492436322).}
  proc removeScenePostImportPlugin*(self: EditorPlugin; sceneImportPlugin: Ref[EditorScenePostImportPlugin]) {.loadfrom("remove_scene_post_import_plugin", 3045178206).}
  proc addExportPlugin*(self: EditorPlugin; plugin: Ref[EditorExportPlugin]) {.loadfrom("add_export_plugin", 4095952207).}
  proc removeExportPlugin*(self: EditorPlugin; plugin: Ref[EditorExportPlugin]) {.loadfrom("remove_export_plugin", 4095952207).}
  proc addNode3dGizmoPlugin*(self: EditorPlugin; plugin: Ref[EditorNode3DGizmoPlugin]) {.loadfrom("add_node_3d_gizmo_plugin", 1541015022).}
  proc removeNode3dGizmoPlugin*(self: EditorPlugin; plugin: Ref[EditorNode3DGizmoPlugin]) {.loadfrom("remove_node_3d_gizmo_plugin", 1541015022).}
  proc addInspectorPlugin*(self: EditorPlugin; plugin: Ref[EditorInspectorPlugin]) {.loadfrom("add_inspector_plugin", 546395733).}
  proc removeInspectorPlugin*(self: EditorPlugin; plugin: Ref[EditorInspectorPlugin]) {.loadfrom("remove_inspector_plugin", 546395733).}
  proc addResourceConversionPlugin*(self: EditorPlugin; plugin: Ref[EditorResourceConversionPlugin]) {.loadfrom("add_resource_conversion_plugin", 2124849111).}
  proc removeResourceConversionPlugin*(self: EditorPlugin; plugin: Ref[EditorResourceConversionPlugin]) {.loadfrom("remove_resource_conversion_plugin", 2124849111).}
  proc setInputEventForwardingAlwaysEnabled*(self: EditorPlugin) {.loadfrom("set_input_event_forwarding_always_enabled", 3218959716).}
  proc setForceDrawOverForwardingEnabled*(self: EditorPlugin) {.loadfrom("set_force_draw_over_forwarding_enabled", 3218959716).}
  proc getEditorInterface*(self: EditorPlugin): EditorInterface {.loadfrom("get_editor_interface", 4223731786).}
  proc getScriptCreateDialog*(self: EditorPlugin): ScriptCreateDialog {.loadfrom("get_script_create_dialog", 3121871482).}
  proc addDebuggerPlugin*(self: EditorPlugin; script: Ref[EditorDebuggerPlugin]) {.loadfrom("add_debugger_plugin", 3749880309).}
  proc removeDebuggerPlugin*(self: EditorPlugin; script: Ref[EditorDebuggerPlugin]) {.loadfrom("remove_debugger_plugin", 3749880309).}

# EditorResourcePreview
define_godot_engine_class_essencials(EditorResourcePreview, Node)
EditorResourcePreview.memberProcs:
  proc queueResourcePreview*(self: EditorResourcePreview; path: String; receiver: ptr Object; receiverFunc: StringName; userdata: ptr Variant) {.loadfrom("queue_resource_preview", 233177534).}
  proc queueEditedResourcePreview*(self: EditorResourcePreview; resource: Ref[Resource]; receiver: ptr Object; receiverFunc: StringName; userdata: ptr Variant) {.loadfrom("queue_edited_resource_preview", 1608376650).}
  proc addPreviewGenerator*(self: EditorResourcePreview; generator: Ref[EditorResourcePreviewGenerator]) {.loadfrom("add_preview_generator", 332288124).}
  proc removePreviewGenerator*(self: EditorResourcePreview; generator: Ref[EditorResourcePreviewGenerator]) {.loadfrom("remove_preview_generator", 332288124).}
  proc checkForInvalidation*(self: EditorResourcePreview; path: String) {.loadfrom("check_for_invalidation", 83702148).}

# HTTPRequest
define_godot_engine_class_essencials(HTTPRequest, Node)
HTTPRequest.memberProcs:
  proc request*(self: HTTPRequest; url: String; customHeaders: PackedStringArray = PackedStringArray(); `method`: HTTPClient|>Method = methodGet; requestData: String = ""): Error {.loadfrom("request", 2720304520).}
  proc requestRaw*(self: HTTPRequest; url: String; customHeaders: PackedStringArray = PackedStringArray(); `method`: HTTPClient|>Method = methodGet; requestDataRaw: PackedByteArray = PackedByteArray()): Error {.loadfrom("request_raw", 4282724657).}
  proc cancelRequest*(self: HTTPRequest) {.loadfrom("cancel_request", 3218959716).}
  proc setTlsOptions*(self: HTTPRequest; clientOptions: Ref[TLSOptions]) {.loadfrom("set_tls_options", 2210231844).}
  proc getHttpClientStatus*(self: HTTPRequest): HTTPClient|>Status {.loadfrom("get_http_client_status", 1426656811).}
  proc `useThreads=`*(self: HTTPRequest; enable: Bool) {.loadfrom("set_use_threads", 2586408642).}
  proc isUsingThreads*(self: HTTPRequest): Bool {.loadfrom("is_using_threads", 36873697).}
  proc `acceptGzip=`*(self: HTTPRequest; enable: Bool) {.loadfrom("set_accept_gzip", 2586408642).}
  proc isAcceptingGzip*(self: HTTPRequest): Bool {.loadfrom("is_accepting_gzip", 36873697).}
  proc `bodySizeLimit=`*(self: HTTPRequest; bytes: int32) {.loadfrom("set_body_size_limit", 1286410249).}
  proc bodySizeLimit*(self: HTTPRequest): int32 {.loadfrom("get_body_size_limit", 3905245786).}
  proc `maxRedirects=`*(self: HTTPRequest; amount: int32) {.loadfrom("set_max_redirects", 1286410249).}
  proc maxRedirects*(self: HTTPRequest): int32 {.loadfrom("get_max_redirects", 3905245786).}
  proc `downloadFile=`*(self: HTTPRequest; path: String) {.loadfrom("set_download_file", 83702148).}
  proc downloadFile*(self: HTTPRequest): String {.loadfrom("get_download_file", 201670096).}
  proc getDownloadedBytes*(self: HTTPRequest): int32 {.loadfrom("get_downloaded_bytes", 3905245786).}
  proc getBodySize*(self: HTTPRequest): int32 {.loadfrom("get_body_size", 3905245786).}
  proc `timeout=`*(self: HTTPRequest; timeout: float64) {.loadfrom("set_timeout", 373806689).}
  proc timeout*(self: HTTPRequest): float64 {.loadfrom("get_timeout", 191475506).}
  proc `downloadChunkSize=`*(self: HTTPRequest; chunkSize: int32) {.loadfrom("set_download_chunk_size", 1286410249).}
  proc downloadChunkSize*(self: HTTPRequest): int32 {.loadfrom("get_download_chunk_size", 3905245786).}
  proc setHttpProxy*(self: HTTPRequest; host: String; port: int32) {.loadfrom("set_http_proxy", 2956805083).}
  proc setHttpsProxy*(self: HTTPRequest; host: String; port: int32) {.loadfrom("set_https_proxy", 2956805083).}

# InstancePlaceholder
define_godot_engine_class_essencials(InstancePlaceholder, Node)
InstancePlaceholder.memberProcs:
  proc getStoredValues*(self: InstancePlaceholder; withOrder: Bool = false): Dictionary {.loadfrom("get_stored_values", 2230153369).}
  proc createInstance*(self: InstancePlaceholder; replace: Bool = false; customScene: Ref[PackedScene] = default Ref[PackedScene]): Node {.loadfrom("create_instance", 3794612210).}
  proc getInstancePath*(self: InstancePlaceholder): String {.loadfrom("get_instance_path", 201670096).}

# MissingNode
define_godot_engine_class_essencials(MissingNode, Node)
MissingNode.memberProcs:
  proc `originalClass=`*(self: MissingNode; name: String) {.loadfrom("set_original_class", 83702148).}
  proc originalClass*(self: MissingNode): String {.loadfrom("get_original_class", 201670096).}
  proc `recordingProperties=`*(self: MissingNode; enable: Bool) {.loadfrom("set_recording_properties", 2586408642).}
  proc isRecordingProperties*(self: MissingNode): Bool {.loadfrom("is_recording_properties", 36873697).}

# MultiplayerSpawner
define_godot_engine_class_essencials(MultiplayerSpawner, Node)
MultiplayerSpawner.memberProcs:
  proc addSpawnableScene*(self: MultiplayerSpawner; path: String) {.loadfrom("add_spawnable_scene", 83702148).}
  proc getSpawnableSceneCount*(self: MultiplayerSpawner): int32 {.loadfrom("get_spawnable_scene_count", 3905245786).}
  proc getSpawnableScene*(self: MultiplayerSpawner; index: int32): String {.loadfrom("get_spawnable_scene", 844755477).}
  proc clearSpawnableScenes*(self: MultiplayerSpawner) {.loadfrom("clear_spawnable_scenes", 3218959716).}
  proc spawn*(self: MultiplayerSpawner; data: ptr Variant = nil): Node {.loadfrom("spawn", 1991184589).}
  proc spawnPath*(self: MultiplayerSpawner): NodePath {.loadfrom("get_spawn_path", 4075236667).}
  proc `spawnPath=`*(self: MultiplayerSpawner; path: NodePath) {.loadfrom("set_spawn_path", 1348162250).}
  proc spawnLimit*(self: MultiplayerSpawner): uint32 {.loadfrom("get_spawn_limit", 3905245786).}
  proc `spawnLimit=`*(self: MultiplayerSpawner; limit: uint32) {.loadfrom("set_spawn_limit", 1286410249).}
  proc spawnFunction*(self: MultiplayerSpawner): Callable {.loadfrom("get_spawn_function", 1307783378).}
  proc `spawnFunction=`*(self: MultiplayerSpawner; spawnFunction: Callable) {.loadfrom("set_spawn_function", 1611583062).}

# MultiplayerSynchronizer
define_godot_engine_class_essencials(MultiplayerSynchronizer, Node)
MultiplayerSynchronizer.memberProcs:
  proc `rootPath=`*(self: MultiplayerSynchronizer; path: NodePath) {.loadfrom("set_root_path", 1348162250).}
  proc rootPath*(self: MultiplayerSynchronizer): NodePath {.loadfrom("get_root_path", 4075236667).}
  proc `replicationInterval=`*(self: MultiplayerSynchronizer; milliseconds: float64) {.loadfrom("set_replication_interval", 373806689).}
  proc replicationInterval*(self: MultiplayerSynchronizer): float64 {.loadfrom("get_replication_interval", 1740695150).}
  proc `deltaInterval=`*(self: MultiplayerSynchronizer; milliseconds: float64) {.loadfrom("set_delta_interval", 373806689).}
  proc deltaInterval*(self: MultiplayerSynchronizer): float64 {.loadfrom("get_delta_interval", 1740695150).}
  proc `replicationConfig=`*(self: MultiplayerSynchronizer; config: Ref[SceneReplicationConfig]) {.loadfrom("set_replication_config", 3889206742).}
  proc replicationConfig*(self: MultiplayerSynchronizer): Ref[SceneReplicationConfig] {.loadfrom("get_replication_config", 3200254614).}
  proc `visibilityUpdateMode=`*(self: MultiplayerSynchronizer; mode: MultiplayerSynchronizer|>VisibilityUpdateMode) {.loadfrom("set_visibility_update_mode", 3494860300).}
  proc visibilityUpdateMode*(self: MultiplayerSynchronizer): MultiplayerSynchronizer|>VisibilityUpdateMode {.loadfrom("get_visibility_update_mode", 3352241418).}
  proc updateVisibility*(self: MultiplayerSynchronizer; forPeer: int32 = 0) {.loadfrom("update_visibility", 1995695955).}
  proc `visibilityPublic=`*(self: MultiplayerSynchronizer; visible: Bool) {.loadfrom("set_visibility_public", 2586408642).}
  proc isVisibilityPublic*(self: MultiplayerSynchronizer): Bool {.loadfrom("is_visibility_public", 36873697).}
  proc addVisibilityFilter*(self: MultiplayerSynchronizer; filter: Callable) {.loadfrom("add_visibility_filter", 1611583062).}
  proc removeVisibilityFilter*(self: MultiplayerSynchronizer; filter: Callable) {.loadfrom("remove_visibility_filter", 1611583062).}
  proc setVisibilityFor*(self: MultiplayerSynchronizer; peer: int32; visible: Bool) {.loadfrom("set_visibility_for", 300928843).}
  proc getVisibilityFor*(self: MultiplayerSynchronizer; peer: int32): Bool {.loadfrom("get_visibility_for", 1116898809).}

# NavigationAgent2D
define_godot_engine_class_essencials(NavigationAgent2D, Node)
NavigationAgent2D.memberProcs:
  proc getRid*(self: NavigationAgent2D): RID {.loadfrom("get_rid", 2944877500).}
  proc `avoidanceEnabled=`*(self: NavigationAgent2D; enabled: Bool) {.loadfrom("set_avoidance_enabled", 2586408642).}
  proc avoidanceEnabled*(self: NavigationAgent2D): Bool {.loadfrom("get_avoidance_enabled", 36873697).}
  proc `pathDesiredDistance=`*(self: NavigationAgent2D; desiredDistance: Float) {.loadfrom("set_path_desired_distance", 373806689).}
  proc pathDesiredDistance*(self: NavigationAgent2D): Float {.loadfrom("get_path_desired_distance", 1740695150).}
  proc `targetDesiredDistance=`*(self: NavigationAgent2D; desiredDistance: Float) {.loadfrom("set_target_desired_distance", 373806689).}
  proc tardesiredDistance*(self: NavigationAgent2D): Float {.loadfrom("get_target_desired_distance", 1740695150).}
  proc `radius=`*(self: NavigationAgent2D; radius: Float) {.loadfrom("set_radius", 373806689).}
  proc radius*(self: NavigationAgent2D): Float {.loadfrom("get_radius", 1740695150).}
  proc `neighborDistance=`*(self: NavigationAgent2D; neighborDistance: Float) {.loadfrom("set_neighbor_distance", 373806689).}
  proc neighborDistance*(self: NavigationAgent2D): Float {.loadfrom("get_neighbor_distance", 1740695150).}
  proc `maxNeighbors=`*(self: NavigationAgent2D; maxNeighbors: int32) {.loadfrom("set_max_neighbors", 1286410249).}
  proc maxNeighbors*(self: NavigationAgent2D): int32 {.loadfrom("get_max_neighbors", 3905245786).}
  proc `timeHorizonAgents=`*(self: NavigationAgent2D; timeHorizon: Float) {.loadfrom("set_time_horizon_agents", 373806689).}
  proc timeHorizonAgents*(self: NavigationAgent2D): Float {.loadfrom("get_time_horizon_agents", 1740695150).}
  proc `timeHorizonObstacles=`*(self: NavigationAgent2D; timeHorizon: Float) {.loadfrom("set_time_horizon_obstacles", 373806689).}
  proc timeHorizonObstacles*(self: NavigationAgent2D): Float {.loadfrom("get_time_horizon_obstacles", 1740695150).}
  proc `maxSpeed=`*(self: NavigationAgent2D; maxSpeed: Float) {.loadfrom("set_max_speed", 373806689).}
  proc maxSpeed*(self: NavigationAgent2D): Float {.loadfrom("get_max_speed", 1740695150).}
  proc `pathMaxDistance=`*(self: NavigationAgent2D; maxSpeed: Float) {.loadfrom("set_path_max_distance", 373806689).}
  proc pathMaxDistance*(self: NavigationAgent2D): Float {.loadfrom("get_path_max_distance", 191475506).}
  proc `navigationLayers=`*(self: NavigationAgent2D; navigationLayers: uint32) {.loadfrom("set_navigation_layers", 1286410249).}
  proc navigationLayers*(self: NavigationAgent2D): uint32 {.loadfrom("get_navigation_layers", 3905245786).}
  proc setNavigationLayerValue*(self: NavigationAgent2D; layerNumber: int32; value: Bool) {.loadfrom("set_navigation_layer_value", 300928843).}
  proc getNavigationLayerValue*(self: NavigationAgent2D; layerNumber: int32): Bool {.loadfrom("get_navigation_layer_value", 1116898809).}
  proc `pathfindingAlgorithm=`*(self: NavigationAgent2D; pathfindingAlgorithm: NavigationPathQueryParameters2D|>PathfindingAlgorithm) {.loadfrom("set_pathfinding_algorithm", 2783519915).}
  proc pathfindingAlgorithm*(self: NavigationAgent2D): NavigationPathQueryParameters2D|>PathfindingAlgorithm {.loadfrom("get_pathfinding_algorithm", 3000421146).}
  proc `pathPostprocessing=`*(self: NavigationAgent2D; pathPostprocessing: NavigationPathQueryParameters2D|>PathPostProcessing) {.loadfrom("set_path_postprocessing", 2864409082).}
  proc pathPostprocessing*(self: NavigationAgent2D): NavigationPathQueryParameters2D|>PathPostProcessing {.loadfrom("get_path_postprocessing", 3798118993).}
  proc `pathMetadataFlags=`*(self: NavigationAgent2D; flags: set[NavigationPathQueryParameters2D|>PathMetadataFlags]) {.loadfrom("set_path_metadata_flags", 24274129).}
  proc pathMetadataFlags*(self: NavigationAgent2D): set[NavigationPathQueryParameters2D|>PathMetadataFlags] {.loadfrom("get_path_metadata_flags", 488152976).}
  proc setNavigationMap*(self: NavigationAgent2D; navigationMap: RID) {.loadfrom("set_navigation_map", 2722037293).}
  proc getNavigationMap*(self: NavigationAgent2D): RID {.loadfrom("get_navigation_map", 2944877500).}
  proc `targetPosition=`*(self: NavigationAgent2D; position: Vector2) {.loadfrom("set_target_position", 743155724).}
  proc tarposition*(self: NavigationAgent2D): Vector2 {.loadfrom("get_target_position", 3341600327).}
  proc getNextPathPosition*(self: NavigationAgent2D): Vector2 {.loadfrom("get_next_path_position", 1497962370).}
  proc setVelocityForced*(self: NavigationAgent2D; velocity: Vector2) {.loadfrom("set_velocity_forced", 743155724).}
  proc `velocity=`*(self: NavigationAgent2D; velocity: Vector2) {.loadfrom("set_velocity", 743155724).}
  proc velocity*(self: NavigationAgent2D): Vector2 {.loadfrom("get_velocity", 1497962370).}
  proc distanceToTarget*(self: NavigationAgent2D): Float {.loadfrom("distance_to_target", 1740695150).}
  proc getCurrentNavigationResult*(self: NavigationAgent2D): Ref[NavigationPathQueryResult2D] {.loadfrom("get_current_navigation_result", 166799483).}
  proc getCurrentNavigationPath*(self: NavigationAgent2D): PackedVector2Array {.loadfrom("get_current_navigation_path", 2961356807).}
  proc getCurrentNavigationPathIndex*(self: NavigationAgent2D): int32 {.loadfrom("get_current_navigation_path_index", 3905245786).}
  proc isTargetReached*(self: NavigationAgent2D): Bool {.loadfrom("is_target_reached", 36873697).}
  proc isTargetReachable*(self: NavigationAgent2D): Bool {.loadfrom("is_target_reachable", 2240911060).}
  proc isNavigationFinished*(self: NavigationAgent2D): Bool {.loadfrom("is_navigation_finished", 2240911060).}
  proc getFinalPosition*(self: NavigationAgent2D): Vector2 {.loadfrom("get_final_position", 1497962370).}
  proc `avoidanceLayers=`*(self: NavigationAgent2D; layers: uint32) {.loadfrom("set_avoidance_layers", 1286410249).}
  proc avoidanceLayers*(self: NavigationAgent2D): uint32 {.loadfrom("get_avoidance_layers", 3905245786).}
  proc `avoidanceMask=`*(self: NavigationAgent2D; mask: uint32) {.loadfrom("set_avoidance_mask", 1286410249).}
  proc avoidanceMask*(self: NavigationAgent2D): uint32 {.loadfrom("get_avoidance_mask", 3905245786).}
  proc setAvoidanceLayerValue*(self: NavigationAgent2D; layerNumber: int32; value: Bool) {.loadfrom("set_avoidance_layer_value", 300928843).}
  proc getAvoidanceLayerValue*(self: NavigationAgent2D; layerNumber: int32): Bool {.loadfrom("get_avoidance_layer_value", 1116898809).}
  proc setAvoidanceMaskValue*(self: NavigationAgent2D; maskNumber: int32; value: Bool) {.loadfrom("set_avoidance_mask_value", 300928843).}
  proc getAvoidanceMaskValue*(self: NavigationAgent2D; maskNumber: int32): Bool {.loadfrom("get_avoidance_mask_value", 1116898809).}
  proc `avoidancePriority=`*(self: NavigationAgent2D; priority: Float) {.loadfrom("set_avoidance_priority", 373806689).}
  proc avoidancePriority*(self: NavigationAgent2D): Float {.loadfrom("get_avoidance_priority", 1740695150).}
  proc `debugEnabled=`*(self: NavigationAgent2D; enabled: Bool) {.loadfrom("set_debug_enabled", 2586408642).}
  proc debugEnabled*(self: NavigationAgent2D): Bool {.loadfrom("get_debug_enabled", 36873697).}
  proc `debugUseCustom=`*(self: NavigationAgent2D; enabled: Bool) {.loadfrom("set_debug_use_custom", 2586408642).}
  proc debugUseCustom*(self: NavigationAgent2D): Bool {.loadfrom("get_debug_use_custom", 36873697).}
  proc `debugPathCustomColor=`*(self: NavigationAgent2D; color: Color) {.loadfrom("set_debug_path_custom_color", 2920490490).}
  proc debugPathCustomColor*(self: NavigationAgent2D): Color {.loadfrom("get_debug_path_custom_color", 3444240500).}
  proc `debugPathCustomPointSize=`*(self: NavigationAgent2D; pointSize: Float) {.loadfrom("set_debug_path_custom_point_size", 373806689).}
  proc debugPathCustomPointSize*(self: NavigationAgent2D): Float {.loadfrom("get_debug_path_custom_point_size", 1740695150).}
  proc `debugPathCustomLineWidth=`*(self: NavigationAgent2D; lineWidth: Float) {.loadfrom("set_debug_path_custom_line_width", 373806689).}
  proc debugPathCustomLineWidth*(self: NavigationAgent2D): Float {.loadfrom("get_debug_path_custom_line_width", 1740695150).}

# NavigationAgent3D
define_godot_engine_class_essencials(NavigationAgent3D, Node)
NavigationAgent3D.memberProcs:
  proc getRid*(self: NavigationAgent3D): RID {.loadfrom("get_rid", 2944877500).}
  proc `avoidanceEnabled=`*(self: NavigationAgent3D; enabled: Bool) {.loadfrom("set_avoidance_enabled", 2586408642).}
  proc avoidanceEnabled*(self: NavigationAgent3D): Bool {.loadfrom("get_avoidance_enabled", 36873697).}
  proc `pathDesiredDistance=`*(self: NavigationAgent3D; desiredDistance: Float) {.loadfrom("set_path_desired_distance", 373806689).}
  proc pathDesiredDistance*(self: NavigationAgent3D): Float {.loadfrom("get_path_desired_distance", 1740695150).}
  proc `targetDesiredDistance=`*(self: NavigationAgent3D; desiredDistance: Float) {.loadfrom("set_target_desired_distance", 373806689).}
  proc tardesiredDistance*(self: NavigationAgent3D): Float {.loadfrom("get_target_desired_distance", 1740695150).}
  proc `radius=`*(self: NavigationAgent3D; radius: Float) {.loadfrom("set_radius", 373806689).}
  proc radius*(self: NavigationAgent3D): Float {.loadfrom("get_radius", 1740695150).}
  proc `height=`*(self: NavigationAgent3D; height: Float) {.loadfrom("set_height", 373806689).}
  proc height*(self: NavigationAgent3D): Float {.loadfrom("get_height", 1740695150).}
  proc `pathHeightOffset=`*(self: NavigationAgent3D; pathHeightOffset: Float) {.loadfrom("set_path_height_offset", 373806689).}
  proc pathHeightOffset*(self: NavigationAgent3D): Float {.loadfrom("get_path_height_offset", 1740695150).}
  proc `use3dAvoidance=`*(self: NavigationAgent3D; enabled: Bool) {.loadfrom("set_use_3d_avoidance", 2586408642).}
  proc use3dAvoidance*(self: NavigationAgent3D): Bool {.loadfrom("get_use_3d_avoidance", 36873697).}
  proc `neighborDistance=`*(self: NavigationAgent3D; neighborDistance: Float) {.loadfrom("set_neighbor_distance", 373806689).}
  proc neighborDistance*(self: NavigationAgent3D): Float {.loadfrom("get_neighbor_distance", 1740695150).}
  proc `maxNeighbors=`*(self: NavigationAgent3D; maxNeighbors: int32) {.loadfrom("set_max_neighbors", 1286410249).}
  proc maxNeighbors*(self: NavigationAgent3D): int32 {.loadfrom("get_max_neighbors", 3905245786).}
  proc `timeHorizonAgents=`*(self: NavigationAgent3D; timeHorizon: Float) {.loadfrom("set_time_horizon_agents", 373806689).}
  proc timeHorizonAgents*(self: NavigationAgent3D): Float {.loadfrom("get_time_horizon_agents", 1740695150).}
  proc `timeHorizonObstacles=`*(self: NavigationAgent3D; timeHorizon: Float) {.loadfrom("set_time_horizon_obstacles", 373806689).}
  proc timeHorizonObstacles*(self: NavigationAgent3D): Float {.loadfrom("get_time_horizon_obstacles", 1740695150).}
  proc `maxSpeed=`*(self: NavigationAgent3D; maxSpeed: Float) {.loadfrom("set_max_speed", 373806689).}
  proc maxSpeed*(self: NavigationAgent3D): Float {.loadfrom("get_max_speed", 1740695150).}
  proc `pathMaxDistance=`*(self: NavigationAgent3D; maxSpeed: Float) {.loadfrom("set_path_max_distance", 373806689).}
  proc pathMaxDistance*(self: NavigationAgent3D): Float {.loadfrom("get_path_max_distance", 191475506).}
  proc `navigationLayers=`*(self: NavigationAgent3D; navigationLayers: uint32) {.loadfrom("set_navigation_layers", 1286410249).}
  proc navigationLayers*(self: NavigationAgent3D): uint32 {.loadfrom("get_navigation_layers", 3905245786).}
  proc setNavigationLayerValue*(self: NavigationAgent3D; layerNumber: int32; value: Bool) {.loadfrom("set_navigation_layer_value", 300928843).}
  proc getNavigationLayerValue*(self: NavigationAgent3D; layerNumber: int32): Bool {.loadfrom("get_navigation_layer_value", 1116898809).}
  proc `pathfindingAlgorithm=`*(self: NavigationAgent3D; pathfindingAlgorithm: NavigationPathQueryParameters3D|>PathfindingAlgorithm) {.loadfrom("set_pathfinding_algorithm", 394560454).}
  proc pathfindingAlgorithm*(self: NavigationAgent3D): NavigationPathQueryParameters3D|>PathfindingAlgorithm {.loadfrom("get_pathfinding_algorithm", 3398491350).}
  proc `pathPostprocessing=`*(self: NavigationAgent3D; pathPostprocessing: NavigationPathQueryParameters3D|>PathPostProcessing) {.loadfrom("set_path_postprocessing", 2267362344).}
  proc pathPostprocessing*(self: NavigationAgent3D): NavigationPathQueryParameters3D|>PathPostProcessing {.loadfrom("get_path_postprocessing", 3883858360).}
  proc `pathMetadataFlags=`*(self: NavigationAgent3D; flags: set[NavigationPathQueryParameters3D|>PathMetadataFlags]) {.loadfrom("set_path_metadata_flags", 2713846708).}
  proc pathMetadataFlags*(self: NavigationAgent3D): set[NavigationPathQueryParameters3D|>PathMetadataFlags] {.loadfrom("get_path_metadata_flags", 1582332802).}
  proc setNavigationMap*(self: NavigationAgent3D; navigationMap: RID) {.loadfrom("set_navigation_map", 2722037293).}
  proc getNavigationMap*(self: NavigationAgent3D): RID {.loadfrom("get_navigation_map", 2944877500).}
  proc `targetPosition=`*(self: NavigationAgent3D; position: Vector3) {.loadfrom("set_target_position", 3460891852).}
  proc tarposition*(self: NavigationAgent3D): Vector3 {.loadfrom("get_target_position", 3360562783).}
  proc getNextPathPosition*(self: NavigationAgent3D): Vector3 {.loadfrom("get_next_path_position", 3783033775).}
  proc setVelocityForced*(self: NavigationAgent3D; velocity: Vector3) {.loadfrom("set_velocity_forced", 3460891852).}
  proc `velocity=`*(self: NavigationAgent3D; velocity: Vector3) {.loadfrom("set_velocity", 3460891852).}
  proc velocity*(self: NavigationAgent3D): Vector3 {.loadfrom("get_velocity", 3783033775).}
  proc distanceToTarget*(self: NavigationAgent3D): Float {.loadfrom("distance_to_target", 1740695150).}
  proc getCurrentNavigationResult*(self: NavigationAgent3D): Ref[NavigationPathQueryResult3D] {.loadfrom("get_current_navigation_result", 728825684).}
  proc getCurrentNavigationPath*(self: NavigationAgent3D): PackedVector3Array {.loadfrom("get_current_navigation_path", 497664490).}
  proc getCurrentNavigationPathIndex*(self: NavigationAgent3D): int32 {.loadfrom("get_current_navigation_path_index", 3905245786).}
  proc isTargetReached*(self: NavigationAgent3D): Bool {.loadfrom("is_target_reached", 36873697).}
  proc isTargetReachable*(self: NavigationAgent3D): Bool {.loadfrom("is_target_reachable", 2240911060).}
  proc isNavigationFinished*(self: NavigationAgent3D): Bool {.loadfrom("is_navigation_finished", 2240911060).}
  proc getFinalPosition*(self: NavigationAgent3D): Vector3 {.loadfrom("get_final_position", 3783033775).}
  proc `avoidanceLayers=`*(self: NavigationAgent3D; layers: uint32) {.loadfrom("set_avoidance_layers", 1286410249).}
  proc avoidanceLayers*(self: NavigationAgent3D): uint32 {.loadfrom("get_avoidance_layers", 3905245786).}
  proc `avoidanceMask=`*(self: NavigationAgent3D; mask: uint32) {.loadfrom("set_avoidance_mask", 1286410249).}
  proc avoidanceMask*(self: NavigationAgent3D): uint32 {.loadfrom("get_avoidance_mask", 3905245786).}
  proc setAvoidanceLayerValue*(self: NavigationAgent3D; layerNumber: int32; value: Bool) {.loadfrom("set_avoidance_layer_value", 300928843).}
  proc getAvoidanceLayerValue*(self: NavigationAgent3D; layerNumber: int32): Bool {.loadfrom("get_avoidance_layer_value", 1116898809).}
  proc setAvoidanceMaskValue*(self: NavigationAgent3D; maskNumber: int32; value: Bool) {.loadfrom("set_avoidance_mask_value", 300928843).}
  proc getAvoidanceMaskValue*(self: NavigationAgent3D; maskNumber: int32): Bool {.loadfrom("get_avoidance_mask_value", 1116898809).}
  proc `avoidancePriority=`*(self: NavigationAgent3D; priority: Float) {.loadfrom("set_avoidance_priority", 373806689).}
  proc avoidancePriority*(self: NavigationAgent3D): Float {.loadfrom("get_avoidance_priority", 1740695150).}
  proc `debugEnabled=`*(self: NavigationAgent3D; enabled: Bool) {.loadfrom("set_debug_enabled", 2586408642).}
  proc debugEnabled*(self: NavigationAgent3D): Bool {.loadfrom("get_debug_enabled", 36873697).}
  proc `debugUseCustom=`*(self: NavigationAgent3D; enabled: Bool) {.loadfrom("set_debug_use_custom", 2586408642).}
  proc debugUseCustom*(self: NavigationAgent3D): Bool {.loadfrom("get_debug_use_custom", 36873697).}
  proc `debugPathCustomColor=`*(self: NavigationAgent3D; color: Color) {.loadfrom("set_debug_path_custom_color", 2920490490).}
  proc debugPathCustomColor*(self: NavigationAgent3D): Color {.loadfrom("get_debug_path_custom_color", 3444240500).}
  proc `debugPathCustomPointSize=`*(self: NavigationAgent3D; pointSize: Float) {.loadfrom("set_debug_path_custom_point_size", 373806689).}
  proc debugPathCustomPointSize*(self: NavigationAgent3D): Float {.loadfrom("get_debug_path_custom_point_size", 1740695150).}

# Node3D
define_godot_engine_class_essencials(Node3D, Node)
Node3D.memberProcs:
  proc `transform=`*(self: Node3D; local: Transform3D) {.loadfrom("set_transform", 2952846383).}
  proc transform*(self: Node3D): Transform3D {.loadfrom("get_transform", 3229777777).}
  proc `position=`*(self: Node3D; position: Vector3) {.loadfrom("set_position", 3460891852).}
  proc position*(self: Node3D): Vector3 {.loadfrom("get_position", 3360562783).}
  proc `rotation=`*(self: Node3D; eulerRadians: Vector3) {.loadfrom("set_rotation", 3460891852).}
  proc rotation*(self: Node3D): Vector3 {.loadfrom("get_rotation", 3360562783).}
  proc `rotationDegrees=`*(self: Node3D; eulerDegrees: Vector3) {.loadfrom("set_rotation_degrees", 3460891852).}
  proc rotationDegrees*(self: Node3D): Vector3 {.loadfrom("get_rotation_degrees", 3360562783).}
  proc `rotationOrder=`*(self: Node3D; order: EulerOrder) {.loadfrom("set_rotation_order", 1820889989).}
  proc rotationOrder*(self: Node3D): EulerOrder {.loadfrom("get_rotation_order", 916939469).}
  proc `rotationEditMode=`*(self: Node3D; editMode: Node3D|>RotationEditMode) {.loadfrom("set_rotation_edit_mode", 141483330).}
  proc rotationEditMode*(self: Node3D): Node3D|>RotationEditMode {.loadfrom("get_rotation_edit_mode", 1572188370).}
  proc `scale=`*(self: Node3D; scale: Vector3) {.loadfrom("set_scale", 3460891852).}
  proc scale*(self: Node3D): Vector3 {.loadfrom("get_scale", 3360562783).}
  proc `quaternion=`*(self: Node3D; quaternion: Quaternion) {.loadfrom("set_quaternion", 1727505552).}
  proc quaternion*(self: Node3D): Quaternion {.loadfrom("get_quaternion", 1222331677).}
  proc `basis=`*(self: Node3D; basis: Basis) {.loadfrom("set_basis", 1055510324).}
  proc basis*(self: Node3D): Basis {.loadfrom("get_basis", 2716978435).}
  proc `globalTransform=`*(self: Node3D; global: Transform3D) {.loadfrom("set_global_transform", 2952846383).}
  proc globalTransform*(self: Node3D): Transform3D {.loadfrom("get_global_transform", 3229777777).}
  proc `globalPosition=`*(self: Node3D; position: Vector3) {.loadfrom("set_global_position", 3460891852).}
  proc globalPosition*(self: Node3D): Vector3 {.loadfrom("get_global_position", 3360562783).}
  proc `globalRotation=`*(self: Node3D; eulerRadians: Vector3) {.loadfrom("set_global_rotation", 3460891852).}
  proc globalRotation*(self: Node3D): Vector3 {.loadfrom("get_global_rotation", 3360562783).}
  proc `globalRotationDegrees=`*(self: Node3D; eulerDegrees: Vector3) {.loadfrom("set_global_rotation_degrees", 3460891852).}
  proc globalRotationDegrees*(self: Node3D): Vector3 {.loadfrom("get_global_rotation_degrees", 3360562783).}
  proc getParentNode3d*(self: Node3D): Node3D {.loadfrom("get_parent_node_3d", 151077316).}
  proc setIgnoreTransformNotification*(self: Node3D; enabled: Bool) {.loadfrom("set_ignore_transform_notification", 2586408642).}
  proc `asTopLevel=`*(self: Node3D; enable: Bool) {.loadfrom("set_as_top_level", 2586408642).}
  proc isSetAsTopLevel*(self: Node3D): Bool {.loadfrom("is_set_as_top_level", 36873697).}
  proc setDisableScale*(self: Node3D; disable: Bool) {.loadfrom("set_disable_scale", 2586408642).}
  proc isScaleDisabled*(self: Node3D): Bool {.loadfrom("is_scale_disabled", 36873697).}
  proc getWorld3d*(self: Node3D): Ref[World3D] {.loadfrom("get_world_3d", 317588385).}
  proc forceUpdateTransform*(self: Node3D) {.loadfrom("force_update_transform", 3218959716).}
  proc `visibilityParent=`*(self: Node3D; path: NodePath) {.loadfrom("set_visibility_parent", 1348162250).}
  proc visibilityParent*(self: Node3D): NodePath {.loadfrom("get_visibility_parent", 4075236667).}
  proc updateGizmos*(self: Node3D) {.loadfrom("update_gizmos", 3218959716).}
  proc addGizmo*(self: Node3D; gizmo: Ref[Node3DGizmo]) {.loadfrom("add_gizmo", 1544533845).}
  proc getGizmos*(self: Node3D): TypedArray[Node3DGizmo] {.loadfrom("get_gizmos", 3995934104).}
  proc clearGizmos*(self: Node3D) {.loadfrom("clear_gizmos", 3218959716).}
  proc setSubgizmoSelection*(self: Node3D; gizmo: Ref[Node3DGizmo]; id: int32; transform: Transform3D) {.loadfrom("set_subgizmo_selection", 3317607635).}
  proc clearSubgizmoSelection*(self: Node3D) {.loadfrom("clear_subgizmo_selection", 3218959716).}
  proc `visible=`*(self: Node3D; visible: Bool) {.loadfrom("set_visible", 2586408642).}
  proc isVisible*(self: Node3D): Bool {.loadfrom("is_visible", 36873697).}
  proc isVisibleInTree*(self: Node3D): Bool {.loadfrom("is_visible_in_tree", 36873697).}
  proc show*(self: Node3D) {.loadfrom("show", 3218959716).}
  proc hide*(self: Node3D) {.loadfrom("hide", 3218959716).}
  proc setNotifyLocalTransform*(self: Node3D; enable: Bool) {.loadfrom("set_notify_local_transform", 2586408642).}
  proc isLocalTransformNotificationEnabled*(self: Node3D): Bool {.loadfrom("is_local_transform_notification_enabled", 36873697).}
  proc setNotifyTransform*(self: Node3D; enable: Bool) {.loadfrom("set_notify_transform", 2586408642).}
  proc isTransformNotificationEnabled*(self: Node3D): Bool {.loadfrom("is_transform_notification_enabled", 36873697).}
  proc rotate*(self: Node3D; axis: Vector3; angle: Float) {.loadfrom("rotate", 3436291937).}
  proc globalRotate*(self: Node3D; axis: Vector3; angle: Float) {.loadfrom("global_rotate", 3436291937).}
  proc globalScale*(self: Node3D; scale: Vector3) {.loadfrom("global_scale", 3460891852).}
  proc globalTranslate*(self: Node3D; offset: Vector3) {.loadfrom("global_translate", 3460891852).}
  proc rotateObjectLocal*(self: Node3D; axis: Vector3; angle: Float) {.loadfrom("rotate_object_local", 3436291937).}
  proc scaleObjectLocal*(self: Node3D; scale: Vector3) {.loadfrom("scale_object_local", 3460891852).}
  proc translateObjectLocal*(self: Node3D; offset: Vector3) {.loadfrom("translate_object_local", 3460891852).}
  proc rotateX*(self: Node3D; angle: Float) {.loadfrom("rotate_x", 373806689).}
  proc rotateY*(self: Node3D; angle: Float) {.loadfrom("rotate_y", 373806689).}
  proc rotateZ*(self: Node3D; angle: Float) {.loadfrom("rotate_z", 373806689).}
  proc translate*(self: Node3D; offset: Vector3) {.loadfrom("translate", 3460891852).}
  proc orthonormalize*(self: Node3D) {.loadfrom("orthonormalize", 3218959716).}
  proc setIdentity*(self: Node3D) {.loadfrom("set_identity", 3218959716).}
  proc lookAt*(self: Node3D; target: Vector3; up: Vector3 = gdvec(0, 1, 0); useModelFront: Bool = false) {.loadfrom("look_at", 3123400617).}
  proc lookAtFromPosition*(self: Node3D; position: Vector3; target: Vector3; up: Vector3 = gdvec(0, 1, 0); useModelFront: Bool = false) {.loadfrom("look_at_from_position", 4067663783).}
  proc toLocal*(self: Node3D; globalPoint: Vector3): Vector3 {.loadfrom("to_local", 192990374).}
  proc toGlobal*(self: Node3D; localPoint: Vector3): Vector3 {.loadfrom("to_global", 192990374).}

# ResourcePreloader
define_godot_engine_class_essencials(ResourcePreloader, Node)
ResourcePreloader.memberProcs:
  proc addResource*(self: ResourcePreloader; name: StringName; resource: Ref[Resource]) {.loadfrom("add_resource", 1168801743).}
  proc removeResource*(self: ResourcePreloader; name: StringName) {.loadfrom("remove_resource", 3304788590).}
  proc renameResource*(self: ResourcePreloader; name: StringName; newname: StringName) {.loadfrom("rename_resource", 3740211285).}
  proc hasResource*(self: ResourcePreloader; name: StringName): Bool {.loadfrom("has_resource", 2619796661).}
  proc getResource*(self: ResourcePreloader; name: StringName): Ref[Resource] {.loadfrom("get_resource", 3742749261).}
  proc getResourceList*(self: ResourcePreloader): PackedStringArray {.loadfrom("get_resource_list", 1139954409).}

# ShaderGlobalsOverride
define_godot_engine_class_essencials(ShaderGlobalsOverride, Node)

# SkeletonIK3D
define_godot_engine_class_essencials(SkeletonIK3D, Node)
SkeletonIK3D.memberProcs:
  proc `rootBone=`*(self: SkeletonIK3D; rootBone: StringName) {.loadfrom("set_root_bone", 3304788590).}
  proc rootBone*(self: SkeletonIK3D): StringName {.loadfrom("get_root_bone", 2002593661).}
  proc `tipBone=`*(self: SkeletonIK3D; tipBone: StringName) {.loadfrom("set_tip_bone", 3304788590).}
  proc tipBone*(self: SkeletonIK3D): StringName {.loadfrom("get_tip_bone", 2002593661).}
  proc `interpolation=`*(self: SkeletonIK3D; interpolation: Float) {.loadfrom("set_interpolation", 373806689).}
  proc interpolation*(self: SkeletonIK3D): Float {.loadfrom("get_interpolation", 1740695150).}
  proc `targetTransform=`*(self: SkeletonIK3D; target: Transform3D) {.loadfrom("set_target_transform", 2952846383).}
  proc tartransform*(self: SkeletonIK3D): Transform3D {.loadfrom("get_target_transform", 3229777777).}
  proc `targetNode=`*(self: SkeletonIK3D; node: NodePath) {.loadfrom("set_target_node", 1348162250).}
  proc tarnode*(self: SkeletonIK3D): NodePath {.loadfrom("get_target_node", 277076166).}
  proc `overrideTipBasis=`*(self: SkeletonIK3D; override: Bool) {.loadfrom("set_override_tip_basis", 2586408642).}
  proc isOverrideTipBasis*(self: SkeletonIK3D): Bool {.loadfrom("is_override_tip_basis", 36873697).}
  proc `useMagnet=`*(self: SkeletonIK3D; use: Bool) {.loadfrom("set_use_magnet", 2586408642).}
  proc isUsingMagnet*(self: SkeletonIK3D): Bool {.loadfrom("is_using_magnet", 36873697).}
  proc `magnetPosition=`*(self: SkeletonIK3D; localPosition: Vector3) {.loadfrom("set_magnet_position", 3460891852).}
  proc magnetPosition*(self: SkeletonIK3D): Vector3 {.loadfrom("get_magnet_position", 3360562783).}
  proc getParentSkeleton*(self: SkeletonIK3D): Skeleton3D {.loadfrom("get_parent_skeleton", 1488626673).}
  proc isRunning*(self: SkeletonIK3D): Bool {.loadfrom("is_running", 2240911060).}
  proc `minDistance=`*(self: SkeletonIK3D; minDistance: Float) {.loadfrom("set_min_distance", 373806689).}
  proc minDistance*(self: SkeletonIK3D): Float {.loadfrom("get_min_distance", 1740695150).}
  proc `maxIterations=`*(self: SkeletonIK3D; iterations: int32) {.loadfrom("set_max_iterations", 1286410249).}
  proc maxIterations*(self: SkeletonIK3D): int32 {.loadfrom("get_max_iterations", 3905245786).}
  proc start*(self: SkeletonIK3D; oneTime: Bool = false) {.loadfrom("start", 107499316).}
  proc stop*(self: SkeletonIK3D) {.loadfrom("stop", 3218959716).}

# Timer
define_godot_engine_class_essencials(Timer, Node)
Timer.memberProcs:
  proc `waitTime=`*(self: Timer; timeSec: float64) {.loadfrom("set_wait_time", 373806689).}
  proc waitTime*(self: Timer): float64 {.loadfrom("get_wait_time", 1740695150).}
  proc `oneShot=`*(self: Timer; enable: Bool) {.loadfrom("set_one_shot", 2586408642).}
  proc isOneShot*(self: Timer): Bool {.loadfrom("is_one_shot", 36873697).}
  proc `autostart=`*(self: Timer; enable: Bool) {.loadfrom("set_autostart", 2586408642).}
  proc hasAutostart*(self: Timer): Bool {.loadfrom("has_autostart", 36873697).}
  proc start*(self: Timer; timeSec: float64 = -1) {.loadfrom("start", 1392008558).}
  proc stop*(self: Timer) {.loadfrom("stop", 3218959716).}
  proc `paused=`*(self: Timer; paused: Bool) {.loadfrom("set_paused", 2586408642).}
  proc isPaused*(self: Timer): Bool {.loadfrom("is_paused", 36873697).}
  proc isStopped*(self: Timer): Bool {.loadfrom("is_stopped", 36873697).}
  proc timeLeft*(self: Timer): float64 {.loadfrom("get_time_left", 1740695150).}
  proc `timerProcessCallback=`*(self: Timer; callback: Timer|>TimerProcessCallback) {.loadfrom("set_timer_process_callback", 3469495063).}
  proc timerProcessCallback*(self: Timer): Timer|>TimerProcessCallback {.loadfrom("get_timer_process_callback", 2672570227).}

# Viewport
define_godot_engine_class_essencials(Viewport, Node)
Viewport.memberProcs:
  proc `world2d=`*(self: Viewport; world2d: Ref[World2D]) {.loadfrom("set_world_2d", 2736080068).}
  proc world2d*(self: Viewport): Ref[World2D] {.loadfrom("get_world_2d", 2339128592).}
  proc findWorld2d*(self: Viewport): Ref[World2D] {.loadfrom("find_world_2d", 2339128592).}
  proc `canvasTransform=`*(self: Viewport; xform: Transform2D) {.loadfrom("set_canvas_transform", 2761652528).}
  proc canvasTransform*(self: Viewport): Transform2D {.loadfrom("get_canvas_transform", 3814499831).}
  proc `globalCanvasTransform=`*(self: Viewport; xform: Transform2D) {.loadfrom("set_global_canvas_transform", 2761652528).}
  proc globalCanvasTransform*(self: Viewport): Transform2D {.loadfrom("get_global_canvas_transform", 3814499831).}
  proc getFinalTransform*(self: Viewport): Transform2D {.loadfrom("get_final_transform", 3814499831).}
  proc getScreenTransform*(self: Viewport): Transform2D {.loadfrom("get_screen_transform", 3814499831).}
  proc getVisibleRect*(self: Viewport): Rect2 {.loadfrom("get_visible_rect", 1639390495).}
  proc `transparentBackground=`*(self: Viewport; enable: Bool) {.loadfrom("set_transparent_background", 2586408642).}
  proc hasTransparentBackground*(self: Viewport): Bool {.loadfrom("has_transparent_background", 36873697).}
  proc `msaa2d=`*(self: Viewport; msaa: Viewport|>MSAA) {.loadfrom("set_msaa_2d", 3330258708).}
  proc msaa2d*(self: Viewport): Viewport|>MSAA {.loadfrom("get_msaa_2d", 2542055527).}
  proc `msaa3d=`*(self: Viewport; msaa: Viewport|>MSAA) {.loadfrom("set_msaa_3d", 3330258708).}
  proc msaa3d*(self: Viewport): Viewport|>MSAA {.loadfrom("get_msaa_3d", 2542055527).}
  proc `screenSpaceAa=`*(self: Viewport; screenSpaceAa: Viewport|>ScreenSpaceAA) {.loadfrom("set_screen_space_aa", 3544169389).}
  proc screenSpaceAa*(self: Viewport): Viewport|>ScreenSpaceAA {.loadfrom("get_screen_space_aa", 1390814124).}
  proc `useTaa=`*(self: Viewport; enable: Bool) {.loadfrom("set_use_taa", 2586408642).}
  proc isUsingTaa*(self: Viewport): Bool {.loadfrom("is_using_taa", 36873697).}
  proc `useDebanding=`*(self: Viewport; enable: Bool) {.loadfrom("set_use_debanding", 2586408642).}
  proc isUsingDebanding*(self: Viewport): Bool {.loadfrom("is_using_debanding", 36873697).}
  proc `useOcclusionCulling=`*(self: Viewport; enable: Bool) {.loadfrom("set_use_occlusion_culling", 2586408642).}
  proc isUsingOcclusionCulling*(self: Viewport): Bool {.loadfrom("is_using_occlusion_culling", 36873697).}
  proc `debugDraw=`*(self: Viewport; debugDraw: Viewport|>DebugDraw) {.loadfrom("set_debug_draw", 1970246205).}
  proc debugDraw*(self: Viewport): Viewport|>DebugDraw {.loadfrom("get_debug_draw", 579191299).}
  proc getRenderInfo*(self: Viewport; `type`: Viewport|>RenderInfoType; info: Viewport|>RenderInfo): int32 {.loadfrom("get_render_info", 481977019).}
  proc getTexture*(self: Viewport): Ref[ViewportTexture] {.loadfrom("get_texture", 1746695840).}
  proc `physicsObjectPicking=`*(self: Viewport; enable: Bool) {.loadfrom("set_physics_object_picking", 2586408642).}
  proc physicsObjectPicking*(self: Viewport): Bool {.loadfrom("get_physics_object_picking", 2240911060).}
  proc `physicsObjectPickingSort=`*(self: Viewport; enable: Bool) {.loadfrom("set_physics_object_picking_sort", 2586408642).}
  proc physicsObjectPickingSort*(self: Viewport): Bool {.loadfrom("get_physics_object_picking_sort", 2240911060).}
  proc getViewportRid*(self: Viewport): RID {.loadfrom("get_viewport_rid", 2944877500).}
  proc pushTextInput*(self: Viewport; text: String) {.loadfrom("push_text_input", 83702148).}
  proc pushInput*(self: Viewport; event: Ref[InputEvent]; inLocalCoords: Bool = false) {.loadfrom("push_input", 3644664830).}
  proc pushUnhandledInput*(self: Viewport; event: Ref[InputEvent]; inLocalCoords: Bool = false) {.loadfrom("push_unhandled_input", 3644664830).}
  proc getCamera2d*(self: Viewport): Camera2D {.loadfrom("get_camera_2d", 3551466917).}
  proc `asAudioListener2d=`*(self: Viewport; enable: Bool) {.loadfrom("set_as_audio_listener_2d", 2586408642).}
  proc isAudioListener2d*(self: Viewport): Bool {.loadfrom("is_audio_listener_2d", 36873697).}
  proc getMousePosition*(self: Viewport): Vector2 {.loadfrom("get_mouse_position", 3341600327).}
  proc warpMouse*(self: Viewport; position: Vector2) {.loadfrom("warp_mouse", 743155724).}
  proc updateMouseCursorState*(self: Viewport) {.loadfrom("update_mouse_cursor_state", 3218959716).}
  proc guiGetDragData*(self: Viewport): Variant {.loadfrom("gui_get_drag_data", 1214101251).}
  proc guiIsDragging*(self: Viewport): Bool {.loadfrom("gui_is_dragging", 36873697).}
  proc guiIsDragSuccessful*(self: Viewport): Bool {.loadfrom("gui_is_drag_successful", 36873697).}
  proc guiReleaseFocus*(self: Viewport) {.loadfrom("gui_release_focus", 3218959716).}
  proc guiGetFocusOwner*(self: Viewport): Control {.loadfrom("gui_get_focus_owner", 2783021301).}
  proc `disableInput=`*(self: Viewport; disable: Bool) {.loadfrom("set_disable_input", 2586408642).}
  proc isInputDisabled*(self: Viewport): Bool {.loadfrom("is_input_disabled", 36873697).}
  proc `positionalShadowAtlasSize=`*(self: Viewport; size: int32) {.loadfrom("set_positional_shadow_atlas_size", 1286410249).}
  proc positionalShadowAtlasSize*(self: Viewport): int32 {.loadfrom("get_positional_shadow_atlas_size", 3905245786).}
  proc `positionalShadowAtlas16Bits=`*(self: Viewport; enable: Bool) {.loadfrom("set_positional_shadow_atlas_16_bits", 2586408642).}
  proc positionalShadowAtlas16Bits*(self: Viewport): Bool {.loadfrom("get_positional_shadow_atlas_16_bits", 36873697).}
  proc `snapControlsToPixels=`*(self: Viewport; enabled: Bool) {.loadfrom("set_snap_controls_to_pixels", 2586408642).}
  proc isSnapControlsToPixelsEnabled*(self: Viewport): Bool {.loadfrom("is_snap_controls_to_pixels_enabled", 36873697).}
  proc `snap2dTransformsToPixel=`*(self: Viewport; enabled: Bool) {.loadfrom("set_snap_2d_transforms_to_pixel", 2586408642).}
  proc isSnap2dTransformsToPixelEnabled*(self: Viewport): Bool {.loadfrom("is_snap_2d_transforms_to_pixel_enabled", 36873697).}
  proc `snap2dVerticesToPixel=`*(self: Viewport; enabled: Bool) {.loadfrom("set_snap_2d_vertices_to_pixel", 2586408642).}
  proc isSnap2dVerticesToPixelEnabled*(self: Viewport): Bool {.loadfrom("is_snap_2d_vertices_to_pixel_enabled", 36873697).}
  proc `positionalShadowAtlasQuadrantSubdiv=`*(self: Viewport; quadrant: int32; subdiv: Viewport|>PositionalShadowAtlasQuadrantSubdiv) {.loadfrom("set_positional_shadow_atlas_quadrant_subdiv", 2596956071).}
  proc positionalShadowAtlasQuadrantSubdiv*(self: Viewport; quadrant: int32): Viewport|>PositionalShadowAtlasQuadrantSubdiv {.loadfrom("get_positional_shadow_atlas_quadrant_subdiv", 2676778355).}
  proc setInputAsHandled*(self: Viewport) {.loadfrom("set_input_as_handled", 3218959716).}
  proc isInputHandled*(self: Viewport): Bool {.loadfrom("is_input_handled", 36873697).}
  proc `handleInputLocally=`*(self: Viewport; enable: Bool) {.loadfrom("set_handle_input_locally", 2586408642).}
  proc isHandlingInputLocally*(self: Viewport): Bool {.loadfrom("is_handling_input_locally", 36873697).}
  proc `defaultCanvasItemTextureFilter=`*(self: Viewport; mode: Viewport|>DefaultCanvasItemTextureFilter) {.loadfrom("set_default_canvas_item_texture_filter", 2815160100).}
  proc defaultCanvasItemTextureFilter*(self: Viewport): Viewport|>DefaultCanvasItemTextureFilter {.loadfrom("get_default_canvas_item_texture_filter", 896601198).}
  proc `embeddingSubwindows=`*(self: Viewport; enable: Bool) {.loadfrom("set_embedding_subwindows", 2586408642).}
  proc isEmbeddingSubwindows*(self: Viewport): Bool {.loadfrom("is_embedding_subwindows", 36873697).}
  proc `canvasCullMask=`*(self: Viewport; mask: uint32) {.loadfrom("set_canvas_cull_mask", 1286410249).}
  proc canvasCullMask*(self: Viewport): uint32 {.loadfrom("get_canvas_cull_mask", 3905245786).}
  proc setCanvasCullMaskBit*(self: Viewport; layer: uint32; enable: Bool) {.loadfrom("set_canvas_cull_mask_bit", 300928843).}
  proc getCanvasCullMaskBit*(self: Viewport; layer: uint32): Bool {.loadfrom("get_canvas_cull_mask_bit", 1116898809).}
  proc `defaultCanvasItemTextureRepeat=`*(self: Viewport; mode: Viewport|>DefaultCanvasItemTextureRepeat) {.loadfrom("set_default_canvas_item_texture_repeat", 1658513413).}
  proc defaultCanvasItemTextureRepeat*(self: Viewport): Viewport|>DefaultCanvasItemTextureRepeat {.loadfrom("get_default_canvas_item_texture_repeat", 4049774160).}
  proc `sdfOversize=`*(self: Viewport; oversize: Viewport|>SDFOversize) {.loadfrom("set_sdf_oversize", 2574159017).}
  proc sdfOversize*(self: Viewport): Viewport|>SDFOversize {.loadfrom("get_sdf_oversize", 2631427510).}
  proc `sdfScale=`*(self: Viewport; scale: Viewport|>SDFScale) {.loadfrom("set_sdf_scale", 1402773951).}
  proc sdfScale*(self: Viewport): Viewport|>SDFScale {.loadfrom("get_sdf_scale", 3162688184).}
  proc `meshLodThreshold=`*(self: Viewport; pixels: Float) {.loadfrom("set_mesh_lod_threshold", 373806689).}
  proc meshLodThreshold*(self: Viewport): Float {.loadfrom("get_mesh_lod_threshold", 1740695150).}
  proc `world3d=`*(self: Viewport; world3d: Ref[World3D]) {.loadfrom("set_world_3d", 1400875337).}
  proc world3d*(self: Viewport): Ref[World3D] {.loadfrom("get_world_3d", 317588385).}
  proc findWorld3d*(self: Viewport): Ref[World3D] {.loadfrom("find_world_3d", 317588385).}
  proc `useOwnWorld3d=`*(self: Viewport; enable: Bool) {.loadfrom("set_use_own_world_3d", 2586408642).}
  proc isUsingOwnWorld3d*(self: Viewport): Bool {.loadfrom("is_using_own_world_3d", 36873697).}
  proc getCamera3d*(self: Viewport): Camera3D {.loadfrom("get_camera_3d", 2285090890).}
  proc `asAudioListener3d=`*(self: Viewport; enable: Bool) {.loadfrom("set_as_audio_listener_3d", 2586408642).}
  proc isAudioListener3d*(self: Viewport): Bool {.loadfrom("is_audio_listener_3d", 36873697).}
  proc `disable3d=`*(self: Viewport; disable: Bool) {.loadfrom("set_disable_3d", 2586408642).}
  proc is3dDisabled*(self: Viewport): Bool {.loadfrom("is_3d_disabled", 36873697).}
  proc `useXr=`*(self: Viewport; use: Bool) {.loadfrom("set_use_xr", 2586408642).}
  proc isUsingXr*(self: Viewport): Bool {.loadfrom("is_using_xr", 2240911060).}
  proc `scaling3dMode=`*(self: Viewport; scaling3dMode: Viewport|>Scaling3DMode) {.loadfrom("set_scaling_3d_mode", 1531597597).}
  proc scaling3dMode*(self: Viewport): Viewport|>Scaling3DMode {.loadfrom("get_scaling_3d_mode", 2597660574).}
  proc `scaling3dScale=`*(self: Viewport; scale: Float) {.loadfrom("set_scaling_3d_scale", 373806689).}
  proc scaling3dScale*(self: Viewport): Float {.loadfrom("get_scaling_3d_scale", 1740695150).}
  proc `fsrSharpness=`*(self: Viewport; fsrSharpness: Float) {.loadfrom("set_fsr_sharpness", 373806689).}
  proc fsrSharpness*(self: Viewport): Float {.loadfrom("get_fsr_sharpness", 1740695150).}
  proc `textureMipmapBias=`*(self: Viewport; textureMipmapBias: Float) {.loadfrom("set_texture_mipmap_bias", 373806689).}
  proc textureMipmapBias*(self: Viewport): Float {.loadfrom("get_texture_mipmap_bias", 1740695150).}
  proc `vrsMode=`*(self: Viewport; mode: Viewport|>VRSMode) {.loadfrom("set_vrs_mode", 2749867817).}
  proc vrsMode*(self: Viewport): Viewport|>VRSMode {.loadfrom("get_vrs_mode", 349660525).}
  proc `vrsTexture=`*(self: Viewport; texture: Ref[Texture2D]) {.loadfrom("set_vrs_texture", 4051416890).}
  proc vrsTexture*(self: Viewport): Ref[Texture2D] {.loadfrom("get_vrs_texture", 3635182373).}

# WorldEnvironment
define_godot_engine_class_essencials(WorldEnvironment, Node)
WorldEnvironment.memberProcs:
  proc `environment=`*(self: WorldEnvironment; env: Ref[Environment]) {.loadfrom("set_environment", 4143518816).}
  proc environment*(self: WorldEnvironment): Ref[Environment] {.loadfrom("get_environment", 3082064660).}
  proc `cameraAttributes=`*(self: WorldEnvironment; cameraAttributes: Ref[CameraAttributes]) {.loadfrom("set_camera_attributes", 2817810567).}
  proc cameraAttributes*(self: WorldEnvironment): Ref[CameraAttributes] {.loadfrom("get_camera_attributes", 3921283215).}

# PhysicsDirectBodyState2DExtension
define_godot_engine_class_essencials(PhysicsDirectBodyState2DExtension, PhysicsDirectBodyState2D)
method getTotalGravity*(self: PhysicsDirectBodyState2DExtension): Vector2 {.base.} = (discard)
method getTotalLinearDamp*(self: PhysicsDirectBodyState2DExtension): Float {.base.} = (discard)
method getTotalAngularDamp*(self: PhysicsDirectBodyState2DExtension): Float {.base.} = (discard)
method getCenterOfMass*(self: PhysicsDirectBodyState2DExtension): Vector2 {.base.} = (discard)
method getCenterOfMassLocal*(self: PhysicsDirectBodyState2DExtension): Vector2 {.base.} = (discard)
method getInverseMass*(self: PhysicsDirectBodyState2DExtension): Float {.base.} = (discard)
method getInverseInertia*(self: PhysicsDirectBodyState2DExtension): Float {.base.} = (discard)
method setLinearVelocity*(self: PhysicsDirectBodyState2DExtension; velocity: Vector2) {.base.} = (discard)
method getLinearVelocity*(self: PhysicsDirectBodyState2DExtension): Vector2 {.base.} = (discard)
method setAngularVelocity*(self: PhysicsDirectBodyState2DExtension; velocity: Float) {.base.} = (discard)
method getAngularVelocity*(self: PhysicsDirectBodyState2DExtension): Float {.base.} = (discard)
method setTransform*(self: PhysicsDirectBodyState2DExtension; transform: Transform2D) {.base.} = (discard)
method getTransform*(self: PhysicsDirectBodyState2DExtension): Transform2D {.base.} = (discard)
method getVelocityAtLocalPosition*(self: PhysicsDirectBodyState2DExtension; localPosition: Vector2): Vector2 {.base.} = (discard)
method applyCentralImpulse*(self: PhysicsDirectBodyState2DExtension; impulse: Vector2) {.base.} = (discard)
method applyImpulse*(self: PhysicsDirectBodyState2DExtension; impulse: Vector2; position: Vector2) {.base.} = (discard)
method applyTorqueImpulse*(self: PhysicsDirectBodyState2DExtension; impulse: Float) {.base.} = (discard)
method applyCentralForce*(self: PhysicsDirectBodyState2DExtension; force: Vector2) {.base.} = (discard)
method applyForce*(self: PhysicsDirectBodyState2DExtension; force: Vector2; position: Vector2) {.base.} = (discard)
method applyTorque*(self: PhysicsDirectBodyState2DExtension; torque: Float) {.base.} = (discard)
method addConstantCentralForce*(self: PhysicsDirectBodyState2DExtension; force: Vector2) {.base.} = (discard)
method addConstantForce*(self: PhysicsDirectBodyState2DExtension; force: Vector2; position: Vector2) {.base.} = (discard)
method addConstantTorque*(self: PhysicsDirectBodyState2DExtension; torque: Float) {.base.} = (discard)
method setConstantForce*(self: PhysicsDirectBodyState2DExtension; force: Vector2) {.base.} = (discard)
method getConstantForce*(self: PhysicsDirectBodyState2DExtension): Vector2 {.base.} = (discard)
method setConstantTorque*(self: PhysicsDirectBodyState2DExtension; torque: Float) {.base.} = (discard)
method getConstantTorque*(self: PhysicsDirectBodyState2DExtension): Float {.base.} = (discard)
method setSleepState*(self: PhysicsDirectBodyState2DExtension; enabled: Bool) {.base.} = (discard)
method isSleeping*(self: PhysicsDirectBodyState2DExtension): Bool {.base.} = (discard)
method getContactCount*(self: PhysicsDirectBodyState2DExtension): int32 {.base.} = (discard)
method getContactLocalPosition*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): Vector2 {.base.} = (discard)
method getContactLocalNormal*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): Vector2 {.base.} = (discard)
method getContactLocalShape*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): int32 {.base.} = (discard)
method getContactLocalVelocityAtPosition*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): Vector2 {.base.} = (discard)
method getContactCollider*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): RID {.base.} = (discard)
method getContactColliderPosition*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): Vector2 {.base.} = (discard)
method getContactColliderId*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): uint64 {.base.} = (discard)
method getContactColliderObject*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): Object {.base.} = (discard)
method getContactColliderShape*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): int32 {.base.} = (discard)
method getContactColliderVelocityAtPosition*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): Vector2 {.base.} = (discard)
method getContactImpulse*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): Vector2 {.base.} = (discard)
method getStep*(self: PhysicsDirectBodyState2DExtension): Float {.base.} = (discard)
method integrateForces*(self: PhysicsDirectBodyState2DExtension) {.base.} = (discard)
method getSpaceState*(self: PhysicsDirectBodyState2DExtension): PhysicsDirectSpaceState2D {.base.} = (discard)

# PhysicsDirectBodyState3DExtension
define_godot_engine_class_essencials(PhysicsDirectBodyState3DExtension, PhysicsDirectBodyState3D)
method getTotalGravity*(self: PhysicsDirectBodyState3DExtension): Vector3 {.base.} = (discard)
method getTotalLinearDamp*(self: PhysicsDirectBodyState3DExtension): Float {.base.} = (discard)
method getTotalAngularDamp*(self: PhysicsDirectBodyState3DExtension): Float {.base.} = (discard)
method getCenterOfMass*(self: PhysicsDirectBodyState3DExtension): Vector3 {.base.} = (discard)
method getCenterOfMassLocal*(self: PhysicsDirectBodyState3DExtension): Vector3 {.base.} = (discard)
method getPrincipalInertiaAxes*(self: PhysicsDirectBodyState3DExtension): Basis {.base.} = (discard)
method getInverseMass*(self: PhysicsDirectBodyState3DExtension): Float {.base.} = (discard)
method getInverseInertia*(self: PhysicsDirectBodyState3DExtension): Vector3 {.base.} = (discard)
method getInverseInertiaTensor*(self: PhysicsDirectBodyState3DExtension): Basis {.base.} = (discard)
method setLinearVelocity*(self: PhysicsDirectBodyState3DExtension; velocity: Vector3) {.base.} = (discard)
method getLinearVelocity*(self: PhysicsDirectBodyState3DExtension): Vector3 {.base.} = (discard)
method setAngularVelocity*(self: PhysicsDirectBodyState3DExtension; velocity: Vector3) {.base.} = (discard)
method getAngularVelocity*(self: PhysicsDirectBodyState3DExtension): Vector3 {.base.} = (discard)
method setTransform*(self: PhysicsDirectBodyState3DExtension; transform: Transform3D) {.base.} = (discard)
method getTransform*(self: PhysicsDirectBodyState3DExtension): Transform3D {.base.} = (discard)
method getVelocityAtLocalPosition*(self: PhysicsDirectBodyState3DExtension; localPosition: Vector3): Vector3 {.base.} = (discard)
method applyCentralImpulse*(self: PhysicsDirectBodyState3DExtension; impulse: Vector3) {.base.} = (discard)
method applyImpulse*(self: PhysicsDirectBodyState3DExtension; impulse: Vector3; position: Vector3) {.base.} = (discard)
method applyTorqueImpulse*(self: PhysicsDirectBodyState3DExtension; impulse: Vector3) {.base.} = (discard)
method applyCentralForce*(self: PhysicsDirectBodyState3DExtension; force: Vector3) {.base.} = (discard)
method applyForce*(self: PhysicsDirectBodyState3DExtension; force: Vector3; position: Vector3) {.base.} = (discard)
method applyTorque*(self: PhysicsDirectBodyState3DExtension; torque: Vector3) {.base.} = (discard)
method addConstantCentralForce*(self: PhysicsDirectBodyState3DExtension; force: Vector3) {.base.} = (discard)
method addConstantForce*(self: PhysicsDirectBodyState3DExtension; force: Vector3; position: Vector3) {.base.} = (discard)
method addConstantTorque*(self: PhysicsDirectBodyState3DExtension; torque: Vector3) {.base.} = (discard)
method setConstantForce*(self: PhysicsDirectBodyState3DExtension; force: Vector3) {.base.} = (discard)
method getConstantForce*(self: PhysicsDirectBodyState3DExtension): Vector3 {.base.} = (discard)
method setConstantTorque*(self: PhysicsDirectBodyState3DExtension; torque: Vector3) {.base.} = (discard)
method getConstantTorque*(self: PhysicsDirectBodyState3DExtension): Vector3 {.base.} = (discard)
method setSleepState*(self: PhysicsDirectBodyState3DExtension; enabled: Bool) {.base.} = (discard)
method isSleeping*(self: PhysicsDirectBodyState3DExtension): Bool {.base.} = (discard)
method getContactCount*(self: PhysicsDirectBodyState3DExtension): int32 {.base.} = (discard)
method getContactLocalPosition*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): Vector3 {.base.} = (discard)
method getContactLocalNormal*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): Vector3 {.base.} = (discard)
method getContactImpulse*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): Vector3 {.base.} = (discard)
method getContactLocalShape*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): int32 {.base.} = (discard)
method getContactLocalVelocityAtPosition*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): Vector3 {.base.} = (discard)
method getContactCollider*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): RID {.base.} = (discard)
method getContactColliderPosition*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): Vector3 {.base.} = (discard)
method getContactColliderId*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): uint64 {.base.} = (discard)
method getContactColliderObject*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): Object {.base.} = (discard)
method getContactColliderShape*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): int32 {.base.} = (discard)
method getContactColliderVelocityAtPosition*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): Vector3 {.base.} = (discard)
method getStep*(self: PhysicsDirectBodyState3DExtension): Float {.base.} = (discard)
method integrateForces*(self: PhysicsDirectBodyState3DExtension) {.base.} = (discard)
method getSpaceState*(self: PhysicsDirectBodyState3DExtension): PhysicsDirectSpaceState3D {.base.} = (discard)

# PhysicsDirectSpaceState2DExtension
define_godot_engine_class_essencials(PhysicsDirectSpaceState2DExtension, PhysicsDirectSpaceState2D)
method intersectRay*(self: PhysicsDirectSpaceState2DExtension; `from`: Vector2; to: Vector2; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; hitFromInside: Bool; retval: ptr PhysicsServer2DExtensionRayResult): Bool {.base.} = (discard)
method intersectPoint*(self: PhysicsDirectSpaceState2DExtension; position: Vector2; canvasInstanceId: uint64; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; retvals: ptr PhysicsServer2DExtensionShapeResult; maxRetvals: int32): int32 {.base.} = (discard)
method intersectShape*(self: PhysicsDirectSpaceState2DExtension; shapeRid: RID; transform: Transform2D; motion: Vector2; margin: Float; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; retval: ptr PhysicsServer2DExtensionShapeResult; maxRetvals: int32): int32 {.base.} = (discard)
method castMotion*(self: PhysicsDirectSpaceState2DExtension; shapeRid: RID; transform: Transform2D; motion: Vector2; margin: Float; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; closestSafe: ptr Float; closestUnsafe: ptr Float): Bool {.base.} = (discard)
method collideShape*(self: PhysicsDirectSpaceState2DExtension; shapeRid: RID; transform: Transform2D; motion: Vector2; margin: Float; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; retvals: pointer; maxRetvals: int32; retvalCount: ptr int32): Bool {.base.} = (discard)
method restInfo*(self: PhysicsDirectSpaceState2DExtension; shapeRid: RID; transform: Transform2D; motion: Vector2; margin: Float; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; restInfo: ptr PhysicsServer2DExtensionShapeRestInfo): Bool {.base.} = (discard)
PhysicsDirectSpaceState2DExtension.memberProcs:
  proc isBodyExcludedFromQuery*(self: PhysicsDirectSpaceState2DExtension; body: RID): Bool {.loadfrom("is_body_excluded_from_query", 4155700596).}

# PhysicsDirectSpaceState3DExtension
define_godot_engine_class_essencials(PhysicsDirectSpaceState3DExtension, PhysicsDirectSpaceState3D)
method intersectRay*(self: PhysicsDirectSpaceState3DExtension; `from`: Vector3; to: Vector3; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; hitFromInside: Bool; hitBackFaces: Bool; pickRay: Bool; retval: ptr PhysicsServer3DExtensionRayResult): Bool {.base.} = (discard)
method intersectPoint*(self: PhysicsDirectSpaceState3DExtension; position: Vector3; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; retvals: ptr PhysicsServer3DExtensionShapeResult; maxRetvals: int32): int32 {.base.} = (discard)
method intersectShape*(self: PhysicsDirectSpaceState3DExtension; shapeRid: RID; transform: Transform3D; motion: Vector3; margin: Float; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; retvalCount: ptr PhysicsServer3DExtensionShapeResult; maxRetvals: int32): int32 {.base.} = (discard)
method castMotion*(self: PhysicsDirectSpaceState3DExtension; shapeRid: RID; transform: Transform3D; motion: Vector3; margin: Float; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; closestSafe: ptr Float; closestUnsafe: ptr Float; info: ptr PhysicsServer3DExtensionShapeRestInfo): Bool {.base.} = (discard)
method collideShape*(self: PhysicsDirectSpaceState3DExtension; shapeRid: RID; transform: Transform3D; motion: Vector3; margin: Float; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; retvals: pointer; maxRetvals: int32; retvalCount: ptr int32): Bool {.base.} = (discard)
method restInfo*(self: PhysicsDirectSpaceState3DExtension; shapeRid: RID; transform: Transform3D; motion: Vector3; margin: Float; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; restInfo: ptr PhysicsServer3DExtensionShapeRestInfo): Bool {.base.} = (discard)
method getClosestPointToObjectVolume*(self: PhysicsDirectSpaceState3DExtension; `object`: RID; point: Vector3): Vector3 {.base.} = (discard)
PhysicsDirectSpaceState3DExtension.memberProcs:
  proc isBodyExcludedFromQuery*(self: PhysicsDirectSpaceState3DExtension; body: RID): Bool {.loadfrom("is_body_excluded_from_query", 4155700596).}

# GodotPhysicsServer2D
define_godot_engine_class_essencials(GodotPhysicsServer2D, PhysicsServer2D)

# PhysicsServer2DExtension
define_godot_engine_class_essencials(PhysicsServer2DExtension, PhysicsServer2D)
method worldBoundaryShapeCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method separationRayShapeCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method segmentShapeCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method circleShapeCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method rectangleShapeCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method capsuleShapeCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method convexPolygonShapeCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method concavePolygonShapeCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method shapeSetData*(self: PhysicsServer2DExtension; shape: RID; data: ptr Variant) {.base.} = (discard)
method shapeSetCustomSolverBias*(self: PhysicsServer2DExtension; shape: RID; bias: Float) {.base.} = (discard)
method shapeGetType*(self: PhysicsServer2DExtension; shape: RID): PhysicsServer2D|>ShapeType {.base.} = (discard)
method shapeGetData*(self: PhysicsServer2DExtension; shape: RID): Variant {.base.} = (discard)
method shapeGetCustomSolverBias*(self: PhysicsServer2DExtension; shape: RID): Float {.base.} = (discard)
method shapeCollide*(self: PhysicsServer2DExtension; shapeA: RID; xformA: Transform2D; motionA: Vector2; shapeB: RID; xformB: Transform2D; motionB: Vector2; retvals: pointer; retvalMax: int32; retvalCount: ptr int32): Bool {.base.} = (discard)
method spaceCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method spaceSetActive*(self: PhysicsServer2DExtension; space: RID; active: Bool) {.base.} = (discard)
method spaceIsActive*(self: PhysicsServer2DExtension; space: RID): Bool {.base.} = (discard)
method spaceSetParam*(self: PhysicsServer2DExtension; space: RID; param: PhysicsServer2D|>SpaceParameter; value: Float) {.base.} = (discard)
method spaceGetParam*(self: PhysicsServer2DExtension; space: RID; param: PhysicsServer2D|>SpaceParameter): Float {.base.} = (discard)
method spaceGetDirectState*(self: PhysicsServer2DExtension; space: RID): PhysicsDirectSpaceState2D {.base.} = (discard)
method spaceSetDebugContacts*(self: PhysicsServer2DExtension; space: RID; maxContacts: int32) {.base.} = (discard)
method spaceGetContacts*(self: PhysicsServer2DExtension; space: RID): PackedVector2Array {.base.} = (discard)
method spaceGetContactCount*(self: PhysicsServer2DExtension; space: RID): int32 {.base.} = (discard)
method areaCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method areaSetSpace*(self: PhysicsServer2DExtension; area: RID; space: RID) {.base.} = (discard)
method areaGetSpace*(self: PhysicsServer2DExtension; area: RID): RID {.base.} = (discard)
method areaAddShape*(self: PhysicsServer2DExtension; area: RID; shape: RID; transform: Transform2D; disabled: Bool) {.base.} = (discard)
method areaSetShape*(self: PhysicsServer2DExtension; area: RID; shapeIdx: int32; shape: RID) {.base.} = (discard)
method areaSetShapeTransform*(self: PhysicsServer2DExtension; area: RID; shapeIdx: int32; transform: Transform2D) {.base.} = (discard)
method areaSetShapeDisabled*(self: PhysicsServer2DExtension; area: RID; shapeIdx: int32; disabled: Bool) {.base.} = (discard)
method areaGetShapeCount*(self: PhysicsServer2DExtension; area: RID): int32 {.base.} = (discard)
method areaGetShape*(self: PhysicsServer2DExtension; area: RID; shapeIdx: int32): RID {.base.} = (discard)
method areaGetShapeTransform*(self: PhysicsServer2DExtension; area: RID; shapeIdx: int32): Transform2D {.base.} = (discard)
method areaRemoveShape*(self: PhysicsServer2DExtension; area: RID; shapeIdx: int32) {.base.} = (discard)
method areaClearShapes*(self: PhysicsServer2DExtension; area: RID) {.base.} = (discard)
method areaAttachObjectInstanceId*(self: PhysicsServer2DExtension; area: RID; id: uint64) {.base.} = (discard)
method areaGetObjectInstanceId*(self: PhysicsServer2DExtension; area: RID): uint64 {.base.} = (discard)
method areaAttachCanvasInstanceId*(self: PhysicsServer2DExtension; area: RID; id: uint64) {.base.} = (discard)
method areaGetCanvasInstanceId*(self: PhysicsServer2DExtension; area: RID): uint64 {.base.} = (discard)
method areaSetParam*(self: PhysicsServer2DExtension; area: RID; param: PhysicsServer2D|>AreaParameter; value: ptr Variant) {.base.} = (discard)
method areaSetTransform*(self: PhysicsServer2DExtension; area: RID; transform: Transform2D) {.base.} = (discard)
method areaGetParam*(self: PhysicsServer2DExtension; area: RID; param: PhysicsServer2D|>AreaParameter): Variant {.base.} = (discard)
method areaGetTransform*(self: PhysicsServer2DExtension; area: RID): Transform2D {.base.} = (discard)
method areaSetCollisionLayer*(self: PhysicsServer2DExtension; area: RID; layer: uint32) {.base.} = (discard)
method areaGetCollisionLayer*(self: PhysicsServer2DExtension; area: RID): uint32 {.base.} = (discard)
method areaSetCollisionMask*(self: PhysicsServer2DExtension; area: RID; mask: uint32) {.base.} = (discard)
method areaGetCollisionMask*(self: PhysicsServer2DExtension; area: RID): uint32 {.base.} = (discard)
method areaSetMonitorable*(self: PhysicsServer2DExtension; area: RID; monitorable: Bool) {.base.} = (discard)
method areaSetPickable*(self: PhysicsServer2DExtension; area: RID; pickable: Bool) {.base.} = (discard)
method areaSetMonitorCallback*(self: PhysicsServer2DExtension; area: RID; callback: Callable) {.base.} = (discard)
method areaSetAreaMonitorCallback*(self: PhysicsServer2DExtension; area: RID; callback: Callable) {.base.} = (discard)
method bodyCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method bodySetSpace*(self: PhysicsServer2DExtension; body: RID; space: RID) {.base.} = (discard)
method bodyGetSpace*(self: PhysicsServer2DExtension; body: RID): RID {.base.} = (discard)
method bodySetMode*(self: PhysicsServer2DExtension; body: RID; mode: PhysicsServer2D|>BodyMode) {.base.} = (discard)
method bodyGetMode*(self: PhysicsServer2DExtension; body: RID): PhysicsServer2D|>BodyMode {.base.} = (discard)
method bodyAddShape*(self: PhysicsServer2DExtension; body: RID; shape: RID; transform: Transform2D; disabled: Bool) {.base.} = (discard)
method bodySetShape*(self: PhysicsServer2DExtension; body: RID; shapeIdx: int32; shape: RID) {.base.} = (discard)
method bodySetShapeTransform*(self: PhysicsServer2DExtension; body: RID; shapeIdx: int32; transform: Transform2D) {.base.} = (discard)
method bodyGetShapeCount*(self: PhysicsServer2DExtension; body: RID): int32 {.base.} = (discard)
method bodyGetShape*(self: PhysicsServer2DExtension; body: RID; shapeIdx: int32): RID {.base.} = (discard)
method bodyGetShapeTransform*(self: PhysicsServer2DExtension; body: RID; shapeIdx: int32): Transform2D {.base.} = (discard)
method bodySetShapeDisabled*(self: PhysicsServer2DExtension; body: RID; shapeIdx: int32; disabled: Bool) {.base.} = (discard)
method bodySetShapeAsOneWayCollision*(self: PhysicsServer2DExtension; body: RID; shapeIdx: int32; enable: Bool; margin: Float) {.base.} = (discard)
method bodyRemoveShape*(self: PhysicsServer2DExtension; body: RID; shapeIdx: int32) {.base.} = (discard)
method bodyClearShapes*(self: PhysicsServer2DExtension; body: RID) {.base.} = (discard)
method bodyAttachObjectInstanceId*(self: PhysicsServer2DExtension; body: RID; id: uint64) {.base.} = (discard)
method bodyGetObjectInstanceId*(self: PhysicsServer2DExtension; body: RID): uint64 {.base.} = (discard)
method bodyAttachCanvasInstanceId*(self: PhysicsServer2DExtension; body: RID; id: uint64) {.base.} = (discard)
method bodyGetCanvasInstanceId*(self: PhysicsServer2DExtension; body: RID): uint64 {.base.} = (discard)
method bodySetContinuousCollisionDetectionMode*(self: PhysicsServer2DExtension; body: RID; mode: PhysicsServer2D|>CCDMode) {.base.} = (discard)
method bodyGetContinuousCollisionDetectionMode*(self: PhysicsServer2DExtension; body: RID): PhysicsServer2D|>CCDMode {.base.} = (discard)
method bodySetCollisionLayer*(self: PhysicsServer2DExtension; body: RID; layer: uint32) {.base.} = (discard)
method bodyGetCollisionLayer*(self: PhysicsServer2DExtension; body: RID): uint32 {.base.} = (discard)
method bodySetCollisionMask*(self: PhysicsServer2DExtension; body: RID; mask: uint32) {.base.} = (discard)
method bodyGetCollisionMask*(self: PhysicsServer2DExtension; body: RID): uint32 {.base.} = (discard)
method bodySetCollisionPriority*(self: PhysicsServer2DExtension; body: RID; priority: Float) {.base.} = (discard)
method bodyGetCollisionPriority*(self: PhysicsServer2DExtension; body: RID): Float {.base.} = (discard)
method bodySetParam*(self: PhysicsServer2DExtension; body: RID; param: PhysicsServer2D|>BodyParameter; value: ptr Variant) {.base.} = (discard)
method bodyGetParam*(self: PhysicsServer2DExtension; body: RID; param: PhysicsServer2D|>BodyParameter): Variant {.base.} = (discard)
method bodyResetMassProperties*(self: PhysicsServer2DExtension; body: RID) {.base.} = (discard)
method bodySetState*(self: PhysicsServer2DExtension; body: RID; state: PhysicsServer2D|>BodyState; value: ptr Variant) {.base.} = (discard)
method bodyGetState*(self: PhysicsServer2DExtension; body: RID; state: PhysicsServer2D|>BodyState): Variant {.base.} = (discard)
method bodyApplyCentralImpulse*(self: PhysicsServer2DExtension; body: RID; impulse: Vector2) {.base.} = (discard)
method bodyApplyTorqueImpulse*(self: PhysicsServer2DExtension; body: RID; impulse: Float) {.base.} = (discard)
method bodyApplyImpulse*(self: PhysicsServer2DExtension; body: RID; impulse: Vector2; position: Vector2) {.base.} = (discard)
method bodyApplyCentralForce*(self: PhysicsServer2DExtension; body: RID; force: Vector2) {.base.} = (discard)
method bodyApplyForce*(self: PhysicsServer2DExtension; body: RID; force: Vector2; position: Vector2) {.base.} = (discard)
method bodyApplyTorque*(self: PhysicsServer2DExtension; body: RID; torque: Float) {.base.} = (discard)
method bodyAddConstantCentralForce*(self: PhysicsServer2DExtension; body: RID; force: Vector2) {.base.} = (discard)
method bodyAddConstantForce*(self: PhysicsServer2DExtension; body: RID; force: Vector2; position: Vector2) {.base.} = (discard)
method bodyAddConstantTorque*(self: PhysicsServer2DExtension; body: RID; torque: Float) {.base.} = (discard)
method bodySetConstantForce*(self: PhysicsServer2DExtension; body: RID; force: Vector2) {.base.} = (discard)
method bodyGetConstantForce*(self: PhysicsServer2DExtension; body: RID): Vector2 {.base.} = (discard)
method bodySetConstantTorque*(self: PhysicsServer2DExtension; body: RID; torque: Float) {.base.} = (discard)
method bodyGetConstantTorque*(self: PhysicsServer2DExtension; body: RID): Float {.base.} = (discard)
method bodySetAxisVelocity*(self: PhysicsServer2DExtension; body: RID; axisVelocity: Vector2) {.base.} = (discard)
method bodyAddCollisionException*(self: PhysicsServer2DExtension; body: RID; exceptedBody: RID) {.base.} = (discard)
method bodyRemoveCollisionException*(self: PhysicsServer2DExtension; body: RID; exceptedBody: RID) {.base.} = (discard)
method bodyGetCollisionExceptions*(self: PhysicsServer2DExtension; body: RID): TypedArray[RID] {.base.} = (discard)
method bodySetMaxContactsReported*(self: PhysicsServer2DExtension; body: RID; amount: int32) {.base.} = (discard)
method bodyGetMaxContactsReported*(self: PhysicsServer2DExtension; body: RID): int32 {.base.} = (discard)
method bodySetContactsReportedDepthThreshold*(self: PhysicsServer2DExtension; body: RID; threshold: Float) {.base.} = (discard)
method bodyGetContactsReportedDepthThreshold*(self: PhysicsServer2DExtension; body: RID): Float {.base.} = (discard)
method bodySetOmitForceIntegration*(self: PhysicsServer2DExtension; body: RID; enable: Bool) {.base.} = (discard)
method bodyIsOmittingForceIntegration*(self: PhysicsServer2DExtension; body: RID): Bool {.base.} = (discard)
method bodySetStateSyncCallback*(self: PhysicsServer2DExtension; body: RID; callable: Callable) {.base.} = (discard)
method bodySetForceIntegrationCallback*(self: PhysicsServer2DExtension; body: RID; callable: Callable; userdata: ptr Variant) {.base.} = (discard)
method bodyCollideShape*(self: PhysicsServer2DExtension; body: RID; bodyShape: int32; shape: RID; shapeXform: Transform2D; motion: Vector2; retvals: pointer; retvalMax: int32; retvalCount: ptr int32): Bool {.base.} = (discard)
method bodySetPickable*(self: PhysicsServer2DExtension; body: RID; pickable: Bool) {.base.} = (discard)
method bodyGetDirectState*(self: PhysicsServer2DExtension; body: RID): PhysicsDirectBodyState2D {.base.} = (discard)
method bodyTestMotion*(self: PhysicsServer2DExtension; body: RID; `from`: Transform2D; motion: Vector2; margin: Float; collideSeparationRay: Bool; recoveryAsCollision: Bool; retval: ptr PhysicsServer2DExtensionMotionResult): Bool {.base.} = (discard)
method jointCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method jointClear*(self: PhysicsServer2DExtension; joint: RID) {.base.} = (discard)
method jointSetParam*(self: PhysicsServer2DExtension; joint: RID; param: PhysicsServer2D|>JointParam; value: Float) {.base.} = (discard)
method jointGetParam*(self: PhysicsServer2DExtension; joint: RID; param: PhysicsServer2D|>JointParam): Float {.base.} = (discard)
method jointDisableCollisionsBetweenBodies*(self: PhysicsServer2DExtension; joint: RID; disable: Bool) {.base.} = (discard)
method jointIsDisabledCollisionsBetweenBodies*(self: PhysicsServer2DExtension; joint: RID): Bool {.base.} = (discard)
method jointMakePin*(self: PhysicsServer2DExtension; joint: RID; anchor: Vector2; bodyA: RID; bodyB: RID) {.base.} = (discard)
method jointMakeGroove*(self: PhysicsServer2DExtension; joint: RID; aGroove1: Vector2; aGroove2: Vector2; bAnchor: Vector2; bodyA: RID; bodyB: RID) {.base.} = (discard)
method jointMakeDampedSpring*(self: PhysicsServer2DExtension; joint: RID; anchorA: Vector2; anchorB: Vector2; bodyA: RID; bodyB: RID) {.base.} = (discard)
method pinJointSetParam*(self: PhysicsServer2DExtension; joint: RID; param: PhysicsServer2D|>PinJointParam; value: Float) {.base.} = (discard)
method pinJointGetParam*(self: PhysicsServer2DExtension; joint: RID; param: PhysicsServer2D|>PinJointParam): Float {.base.} = (discard)
method dampedSpringJointSetParam*(self: PhysicsServer2DExtension; joint: RID; param: PhysicsServer2D|>DampedSpringParam; value: Float) {.base.} = (discard)
method dampedSpringJointGetParam*(self: PhysicsServer2DExtension; joint: RID; param: PhysicsServer2D|>DampedSpringParam): Float {.base.} = (discard)
method jointGetType*(self: PhysicsServer2DExtension; joint: RID): PhysicsServer2D|>JointType {.base.} = (discard)
method freeRid*(self: PhysicsServer2DExtension; rid: RID) {.base.} = (discard)
method setActive*(self: PhysicsServer2DExtension; active: Bool) {.base.} = (discard)
method init*(self: PhysicsServer2DExtension) {.base.} = (discard)
method step*(self: PhysicsServer2DExtension; step: Float) {.base.} = (discard)
method sync*(self: PhysicsServer2DExtension) {.base.} = (discard)
method flushQueries*(self: PhysicsServer2DExtension) {.base.} = (discard)
method endSync*(self: PhysicsServer2DExtension) {.base.} = (discard)
method finish*(self: PhysicsServer2DExtension) {.base.} = (discard)
method isFlushingQueries*(self: PhysicsServer2DExtension): Bool {.base.} = (discard)
method getProcessInfo*(self: PhysicsServer2DExtension; processInfo: PhysicsServer2D|>ProcessInfo): int32 {.base.} = (discard)
PhysicsServer2DExtension.memberProcs:
  proc bodyTestMotionIsExcludingBody*(self: PhysicsServer2DExtension; body: RID): Bool {.loadfrom("body_test_motion_is_excluding_body", 4155700596).}
  proc bodyTestMotionIsExcludingObject*(self: PhysicsServer2DExtension; `object`: uint64): Bool {.loadfrom("body_test_motion_is_excluding_object", 1116898809).}

# GodotPhysicsServer3D
define_godot_engine_class_essencials(GodotPhysicsServer3D, PhysicsServer3D)

# PhysicsServer3DExtension
define_godot_engine_class_essencials(PhysicsServer3DExtension, PhysicsServer3D)
method worldBoundaryShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method separationRayShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method sphereShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method boxShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method capsuleShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method cylinderShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method convexPolygonShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method concavePolygonShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method heightmapShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method customShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method shapeSetData*(self: PhysicsServer3DExtension; shape: RID; data: ptr Variant) {.base.} = (discard)
method shapeSetCustomSolverBias*(self: PhysicsServer3DExtension; shape: RID; bias: Float) {.base.} = (discard)
method shapeSetMargin*(self: PhysicsServer3DExtension; shape: RID; margin: Float) {.base.} = (discard)
method shapeGetMargin*(self: PhysicsServer3DExtension; shape: RID): Float {.base.} = (discard)
method shapeGetType*(self: PhysicsServer3DExtension; shape: RID): PhysicsServer3D|>ShapeType {.base.} = (discard)
method shapeGetData*(self: PhysicsServer3DExtension; shape: RID): Variant {.base.} = (discard)
method shapeGetCustomSolverBias*(self: PhysicsServer3DExtension; shape: RID): Float {.base.} = (discard)
method spaceCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method spaceSetActive*(self: PhysicsServer3DExtension; space: RID; active: Bool) {.base.} = (discard)
method spaceIsActive*(self: PhysicsServer3DExtension; space: RID): Bool {.base.} = (discard)
method spaceSetParam*(self: PhysicsServer3DExtension; space: RID; param: PhysicsServer3D|>SpaceParameter; value: Float) {.base.} = (discard)
method spaceGetParam*(self: PhysicsServer3DExtension; space: RID; param: PhysicsServer3D|>SpaceParameter): Float {.base.} = (discard)
method spaceGetDirectState*(self: PhysicsServer3DExtension; space: RID): PhysicsDirectSpaceState3D {.base.} = (discard)
method spaceSetDebugContacts*(self: PhysicsServer3DExtension; space: RID; maxContacts: int32) {.base.} = (discard)
method spaceGetContacts*(self: PhysicsServer3DExtension; space: RID): PackedVector3Array {.base.} = (discard)
method spaceGetContactCount*(self: PhysicsServer3DExtension; space: RID): int32 {.base.} = (discard)
method areaCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method areaSetSpace*(self: PhysicsServer3DExtension; area: RID; space: RID) {.base.} = (discard)
method areaGetSpace*(self: PhysicsServer3DExtension; area: RID): RID {.base.} = (discard)
method areaAddShape*(self: PhysicsServer3DExtension; area: RID; shape: RID; transform: Transform3D; disabled: Bool) {.base.} = (discard)
method areaSetShape*(self: PhysicsServer3DExtension; area: RID; shapeIdx: int32; shape: RID) {.base.} = (discard)
method areaSetShapeTransform*(self: PhysicsServer3DExtension; area: RID; shapeIdx: int32; transform: Transform3D) {.base.} = (discard)
method areaSetShapeDisabled*(self: PhysicsServer3DExtension; area: RID; shapeIdx: int32; disabled: Bool) {.base.} = (discard)
method areaGetShapeCount*(self: PhysicsServer3DExtension; area: RID): int32 {.base.} = (discard)
method areaGetShape*(self: PhysicsServer3DExtension; area: RID; shapeIdx: int32): RID {.base.} = (discard)
method areaGetShapeTransform*(self: PhysicsServer3DExtension; area: RID; shapeIdx: int32): Transform3D {.base.} = (discard)
method areaRemoveShape*(self: PhysicsServer3DExtension; area: RID; shapeIdx: int32) {.base.} = (discard)
method areaClearShapes*(self: PhysicsServer3DExtension; area: RID) {.base.} = (discard)
method areaAttachObjectInstanceId*(self: PhysicsServer3DExtension; area: RID; id: uint64) {.base.} = (discard)
method areaGetObjectInstanceId*(self: PhysicsServer3DExtension; area: RID): uint64 {.base.} = (discard)
method areaSetParam*(self: PhysicsServer3DExtension; area: RID; param: PhysicsServer3D|>AreaParameter; value: ptr Variant) {.base.} = (discard)
method areaSetTransform*(self: PhysicsServer3DExtension; area: RID; transform: Transform3D) {.base.} = (discard)
method areaGetParam*(self: PhysicsServer3DExtension; area: RID; param: PhysicsServer3D|>AreaParameter): Variant {.base.} = (discard)
method areaGetTransform*(self: PhysicsServer3DExtension; area: RID): Transform3D {.base.} = (discard)
method areaSetCollisionLayer*(self: PhysicsServer3DExtension; area: RID; layer: uint32) {.base.} = (discard)
method areaGetCollisionLayer*(self: PhysicsServer3DExtension; area: RID): uint32 {.base.} = (discard)
method areaSetCollisionMask*(self: PhysicsServer3DExtension; area: RID; mask: uint32) {.base.} = (discard)
method areaGetCollisionMask*(self: PhysicsServer3DExtension; area: RID): uint32 {.base.} = (discard)
method areaSetMonitorable*(self: PhysicsServer3DExtension; area: RID; monitorable: Bool) {.base.} = (discard)
method areaSetRayPickable*(self: PhysicsServer3DExtension; area: RID; enable: Bool) {.base.} = (discard)
method areaSetMonitorCallback*(self: PhysicsServer3DExtension; area: RID; callback: Callable) {.base.} = (discard)
method areaSetAreaMonitorCallback*(self: PhysicsServer3DExtension; area: RID; callback: Callable) {.base.} = (discard)
method bodyCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method bodySetSpace*(self: PhysicsServer3DExtension; body: RID; space: RID) {.base.} = (discard)
method bodyGetSpace*(self: PhysicsServer3DExtension; body: RID): RID {.base.} = (discard)
method bodySetMode*(self: PhysicsServer3DExtension; body: RID; mode: PhysicsServer3D|>BodyMode) {.base.} = (discard)
method bodyGetMode*(self: PhysicsServer3DExtension; body: RID): PhysicsServer3D|>BodyMode {.base.} = (discard)
method bodyAddShape*(self: PhysicsServer3DExtension; body: RID; shape: RID; transform: Transform3D; disabled: Bool) {.base.} = (discard)
method bodySetShape*(self: PhysicsServer3DExtension; body: RID; shapeIdx: int32; shape: RID) {.base.} = (discard)
method bodySetShapeTransform*(self: PhysicsServer3DExtension; body: RID; shapeIdx: int32; transform: Transform3D) {.base.} = (discard)
method bodySetShapeDisabled*(self: PhysicsServer3DExtension; body: RID; shapeIdx: int32; disabled: Bool) {.base.} = (discard)
method bodyGetShapeCount*(self: PhysicsServer3DExtension; body: RID): int32 {.base.} = (discard)
method bodyGetShape*(self: PhysicsServer3DExtension; body: RID; shapeIdx: int32): RID {.base.} = (discard)
method bodyGetShapeTransform*(self: PhysicsServer3DExtension; body: RID; shapeIdx: int32): Transform3D {.base.} = (discard)
method bodyRemoveShape*(self: PhysicsServer3DExtension; body: RID; shapeIdx: int32) {.base.} = (discard)
method bodyClearShapes*(self: PhysicsServer3DExtension; body: RID) {.base.} = (discard)
method bodyAttachObjectInstanceId*(self: PhysicsServer3DExtension; body: RID; id: uint64) {.base.} = (discard)
method bodyGetObjectInstanceId*(self: PhysicsServer3DExtension; body: RID): uint64 {.base.} = (discard)
method bodySetEnableContinuousCollisionDetection*(self: PhysicsServer3DExtension; body: RID; enable: Bool) {.base.} = (discard)
method bodyIsContinuousCollisionDetectionEnabled*(self: PhysicsServer3DExtension; body: RID): Bool {.base.} = (discard)
method bodySetCollisionLayer*(self: PhysicsServer3DExtension; body: RID; layer: uint32) {.base.} = (discard)
method bodyGetCollisionLayer*(self: PhysicsServer3DExtension; body: RID): uint32 {.base.} = (discard)
method bodySetCollisionMask*(self: PhysicsServer3DExtension; body: RID; mask: uint32) {.base.} = (discard)
method bodyGetCollisionMask*(self: PhysicsServer3DExtension; body: RID): uint32 {.base.} = (discard)
method bodySetCollisionPriority*(self: PhysicsServer3DExtension; body: RID; priority: Float) {.base.} = (discard)
method bodyGetCollisionPriority*(self: PhysicsServer3DExtension; body: RID): Float {.base.} = (discard)
method bodySetUserFlags*(self: PhysicsServer3DExtension; body: RID; flags: uint32) {.base.} = (discard)
method bodyGetUserFlags*(self: PhysicsServer3DExtension; body: RID): uint32 {.base.} = (discard)
method bodySetParam*(self: PhysicsServer3DExtension; body: RID; param: PhysicsServer3D|>BodyParameter; value: ptr Variant) {.base.} = (discard)
method bodyGetParam*(self: PhysicsServer3DExtension; body: RID; param: PhysicsServer3D|>BodyParameter): Variant {.base.} = (discard)
method bodyResetMassProperties*(self: PhysicsServer3DExtension; body: RID) {.base.} = (discard)
method bodySetState*(self: PhysicsServer3DExtension; body: RID; state: PhysicsServer3D|>BodyState; value: ptr Variant) {.base.} = (discard)
method bodyGetState*(self: PhysicsServer3DExtension; body: RID; state: PhysicsServer3D|>BodyState): Variant {.base.} = (discard)
method bodyApplyCentralImpulse*(self: PhysicsServer3DExtension; body: RID; impulse: Vector3) {.base.} = (discard)
method bodyApplyImpulse*(self: PhysicsServer3DExtension; body: RID; impulse: Vector3; position: Vector3) {.base.} = (discard)
method bodyApplyTorqueImpulse*(self: PhysicsServer3DExtension; body: RID; impulse: Vector3) {.base.} = (discard)
method bodyApplyCentralForce*(self: PhysicsServer3DExtension; body: RID; force: Vector3) {.base.} = (discard)
method bodyApplyForce*(self: PhysicsServer3DExtension; body: RID; force: Vector3; position: Vector3) {.base.} = (discard)
method bodyApplyTorque*(self: PhysicsServer3DExtension; body: RID; torque: Vector3) {.base.} = (discard)
method bodyAddConstantCentralForce*(self: PhysicsServer3DExtension; body: RID; force: Vector3) {.base.} = (discard)
method bodyAddConstantForce*(self: PhysicsServer3DExtension; body: RID; force: Vector3; position: Vector3) {.base.} = (discard)
method bodyAddConstantTorque*(self: PhysicsServer3DExtension; body: RID; torque: Vector3) {.base.} = (discard)
method bodySetConstantForce*(self: PhysicsServer3DExtension; body: RID; force: Vector3) {.base.} = (discard)
method bodyGetConstantForce*(self: PhysicsServer3DExtension; body: RID): Vector3 {.base.} = (discard)
method bodySetConstantTorque*(self: PhysicsServer3DExtension; body: RID; torque: Vector3) {.base.} = (discard)
method bodyGetConstantTorque*(self: PhysicsServer3DExtension; body: RID): Vector3 {.base.} = (discard)
method bodySetAxisVelocity*(self: PhysicsServer3DExtension; body: RID; axisVelocity: Vector3) {.base.} = (discard)
method bodySetAxisLock*(self: PhysicsServer3DExtension; body: RID; axis: PhysicsServer3D|>BodyAxis; lock: Bool) {.base.} = (discard)
method bodyIsAxisLocked*(self: PhysicsServer3DExtension; body: RID; axis: PhysicsServer3D|>BodyAxis): Bool {.base.} = (discard)
method bodyAddCollisionException*(self: PhysicsServer3DExtension; body: RID; exceptedBody: RID) {.base.} = (discard)
method bodyRemoveCollisionException*(self: PhysicsServer3DExtension; body: RID; exceptedBody: RID) {.base.} = (discard)
method bodyGetCollisionExceptions*(self: PhysicsServer3DExtension; body: RID): TypedArray[RID] {.base.} = (discard)
method bodySetMaxContactsReported*(self: PhysicsServer3DExtension; body: RID; amount: int32) {.base.} = (discard)
method bodyGetMaxContactsReported*(self: PhysicsServer3DExtension; body: RID): int32 {.base.} = (discard)
method bodySetContactsReportedDepthThreshold*(self: PhysicsServer3DExtension; body: RID; threshold: Float) {.base.} = (discard)
method bodyGetContactsReportedDepthThreshold*(self: PhysicsServer3DExtension; body: RID): Float {.base.} = (discard)
method bodySetOmitForceIntegration*(self: PhysicsServer3DExtension; body: RID; enable: Bool) {.base.} = (discard)
method bodyIsOmittingForceIntegration*(self: PhysicsServer3DExtension; body: RID): Bool {.base.} = (discard)
method bodySetStateSyncCallback*(self: PhysicsServer3DExtension; body: RID; callable: Callable) {.base.} = (discard)
method bodySetForceIntegrationCallback*(self: PhysicsServer3DExtension; body: RID; callable: Callable; userdata: ptr Variant) {.base.} = (discard)
method bodySetRayPickable*(self: PhysicsServer3DExtension; body: RID; enable: Bool) {.base.} = (discard)
method bodyTestMotion*(self: PhysicsServer3DExtension; body: RID; `from`: Transform3D; motion: Vector3; margin: Float; maxCollisions: int32; collideSeparationRay: Bool; recoveryAsCollision: Bool; retval: ptr PhysicsServer3DExtensionMotionResult): Bool {.base.} = (discard)
method bodyGetDirectState*(self: PhysicsServer3DExtension; body: RID): PhysicsDirectBodyState3D {.base.} = (discard)
method softBodyCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method softBodyUpdateRenderingServer*(self: PhysicsServer3DExtension; body: RID; renderingServerHandler: PhysicsServer3DRenderingServerHandler) {.base.} = (discard)
method softBodySetSpace*(self: PhysicsServer3DExtension; body: RID; space: RID) {.base.} = (discard)
method softBodyGetSpace*(self: PhysicsServer3DExtension; body: RID): RID {.base.} = (discard)
method softBodySetRayPickable*(self: PhysicsServer3DExtension; body: RID; enable: Bool) {.base.} = (discard)
method softBodySetCollisionLayer*(self: PhysicsServer3DExtension; body: RID; layer: uint32) {.base.} = (discard)
method softBodyGetCollisionLayer*(self: PhysicsServer3DExtension; body: RID): uint32 {.base.} = (discard)
method softBodySetCollisionMask*(self: PhysicsServer3DExtension; body: RID; mask: uint32) {.base.} = (discard)
method softBodyGetCollisionMask*(self: PhysicsServer3DExtension; body: RID): uint32 {.base.} = (discard)
method softBodyAddCollisionException*(self: PhysicsServer3DExtension; body: RID; bodyB: RID) {.base.} = (discard)
method softBodyRemoveCollisionException*(self: PhysicsServer3DExtension; body: RID; bodyB: RID) {.base.} = (discard)
method softBodyGetCollisionExceptions*(self: PhysicsServer3DExtension; body: RID): TypedArray[RID] {.base.} = (discard)
method softBodySetState*(self: PhysicsServer3DExtension; body: RID; state: PhysicsServer3D|>BodyState; variant: ptr Variant) {.base.} = (discard)
method softBodyGetState*(self: PhysicsServer3DExtension; body: RID; state: PhysicsServer3D|>BodyState): Variant {.base.} = (discard)
method softBodySetTransform*(self: PhysicsServer3DExtension; body: RID; transform: Transform3D) {.base.} = (discard)
method softBodySetSimulationPrecision*(self: PhysicsServer3DExtension; body: RID; simulationPrecision: int32) {.base.} = (discard)
method softBodyGetSimulationPrecision*(self: PhysicsServer3DExtension; body: RID): int32 {.base.} = (discard)
method softBodySetTotalMass*(self: PhysicsServer3DExtension; body: RID; totalMass: Float) {.base.} = (discard)
method softBodyGetTotalMass*(self: PhysicsServer3DExtension; body: RID): Float {.base.} = (discard)
method softBodySetLinearStiffness*(self: PhysicsServer3DExtension; body: RID; linearStiffness: Float) {.base.} = (discard)
method softBodyGetLinearStiffness*(self: PhysicsServer3DExtension; body: RID): Float {.base.} = (discard)
method softBodySetPressureCoefficient*(self: PhysicsServer3DExtension; body: RID; pressureCoefficient: Float) {.base.} = (discard)
method softBodyGetPressureCoefficient*(self: PhysicsServer3DExtension; body: RID): Float {.base.} = (discard)
method softBodySetDampingCoefficient*(self: PhysicsServer3DExtension; body: RID; dampingCoefficient: Float) {.base.} = (discard)
method softBodyGetDampingCoefficient*(self: PhysicsServer3DExtension; body: RID): Float {.base.} = (discard)
method softBodySetDragCoefficient*(self: PhysicsServer3DExtension; body: RID; dragCoefficient: Float) {.base.} = (discard)
method softBodyGetDragCoefficient*(self: PhysicsServer3DExtension; body: RID): Float {.base.} = (discard)
method softBodySetMesh*(self: PhysicsServer3DExtension; body: RID; mesh: RID) {.base.} = (discard)
method softBodyGetBounds*(self: PhysicsServer3DExtension; body: RID): AABB {.base.} = (discard)
method softBodyMovePoint*(self: PhysicsServer3DExtension; body: RID; pointIndex: int32; globalPosition: Vector3) {.base.} = (discard)
method softBodyGetPointGlobalPosition*(self: PhysicsServer3DExtension; body: RID; pointIndex: int32): Vector3 {.base.} = (discard)
method softBodyRemoveAllPinnedPoints*(self: PhysicsServer3DExtension; body: RID) {.base.} = (discard)
method softBodyPinPoint*(self: PhysicsServer3DExtension; body: RID; pointIndex: int32; pin: Bool) {.base.} = (discard)
method softBodyIsPointPinned*(self: PhysicsServer3DExtension; body: RID; pointIndex: int32): Bool {.base.} = (discard)
method jointCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method jointClear*(self: PhysicsServer3DExtension; joint: RID) {.base.} = (discard)
method jointMakePin*(self: PhysicsServer3DExtension; joint: RID; bodyA: RID; localA: Vector3; bodyB: RID; localB: Vector3) {.base.} = (discard)
method pinJointSetParam*(self: PhysicsServer3DExtension; joint: RID; param: PhysicsServer3D|>PinJointParam; value: Float) {.base.} = (discard)
method pinJointGetParam*(self: PhysicsServer3DExtension; joint: RID; param: PhysicsServer3D|>PinJointParam): Float {.base.} = (discard)
method pinJointSetLocalA*(self: PhysicsServer3DExtension; joint: RID; localA: Vector3) {.base.} = (discard)
method pinJointGetLocalA*(self: PhysicsServer3DExtension; joint: RID): Vector3 {.base.} = (discard)
method pinJointSetLocalB*(self: PhysicsServer3DExtension; joint: RID; localB: Vector3) {.base.} = (discard)
method pinJointGetLocalB*(self: PhysicsServer3DExtension; joint: RID): Vector3 {.base.} = (discard)
method jointMakeHinge*(self: PhysicsServer3DExtension; joint: RID; bodyA: RID; hingeA: Transform3D; bodyB: RID; hingeB: Transform3D) {.base.} = (discard)
method jointMakeHingeSimple*(self: PhysicsServer3DExtension; joint: RID; bodyA: RID; pivotA: Vector3; axisA: Vector3; bodyB: RID; pivotB: Vector3; axisB: Vector3) {.base.} = (discard)
method hingeJointSetParam*(self: PhysicsServer3DExtension; joint: RID; param: PhysicsServer3D|>HingeJointParam; value: Float) {.base.} = (discard)
method hingeJointGetParam*(self: PhysicsServer3DExtension; joint: RID; param: PhysicsServer3D|>HingeJointParam): Float {.base.} = (discard)
method hingeJointSetFlag*(self: PhysicsServer3DExtension; joint: RID; flag: PhysicsServer3D|>HingeJointFlag; enabled: Bool) {.base.} = (discard)
method hingeJointGetFlag*(self: PhysicsServer3DExtension; joint: RID; flag: PhysicsServer3D|>HingeJointFlag): Bool {.base.} = (discard)
method jointMakeSlider*(self: PhysicsServer3DExtension; joint: RID; bodyA: RID; localRefA: Transform3D; bodyB: RID; localRefB: Transform3D) {.base.} = (discard)
method sliderJointSetParam*(self: PhysicsServer3DExtension; joint: RID; param: PhysicsServer3D|>SliderJointParam; value: Float) {.base.} = (discard)
method sliderJointGetParam*(self: PhysicsServer3DExtension; joint: RID; param: PhysicsServer3D|>SliderJointParam): Float {.base.} = (discard)
method jointMakeConeTwist*(self: PhysicsServer3DExtension; joint: RID; bodyA: RID; localRefA: Transform3D; bodyB: RID; localRefB: Transform3D) {.base.} = (discard)
method coneTwistJointSetParam*(self: PhysicsServer3DExtension; joint: RID; param: PhysicsServer3D|>ConeTwistJointParam; value: Float) {.base.} = (discard)
method coneTwistJointGetParam*(self: PhysicsServer3DExtension; joint: RID; param: PhysicsServer3D|>ConeTwistJointParam): Float {.base.} = (discard)
method jointMakeGeneric6dof*(self: PhysicsServer3DExtension; joint: RID; bodyA: RID; localRefA: Transform3D; bodyB: RID; localRefB: Transform3D) {.base.} = (discard)
method generic6dofJointSetParam*(self: PhysicsServer3DExtension; joint: RID; axis: Vector3|>Axis; param: PhysicsServer3D|>G6DOFJointAxisParam; value: Float) {.base.} = (discard)
method generic6dofJointGetParam*(self: PhysicsServer3DExtension; joint: RID; axis: Vector3|>Axis; param: PhysicsServer3D|>G6DOFJointAxisParam): Float {.base.} = (discard)
method generic6dofJointSetFlag*(self: PhysicsServer3DExtension; joint: RID; axis: Vector3|>Axis; flag: PhysicsServer3D|>G6DOFJointAxisFlag; enable: Bool) {.base.} = (discard)
method generic6dofJointGetFlag*(self: PhysicsServer3DExtension; joint: RID; axis: Vector3|>Axis; flag: PhysicsServer3D|>G6DOFJointAxisFlag): Bool {.base.} = (discard)
method jointGetType*(self: PhysicsServer3DExtension; joint: RID): PhysicsServer3D|>JointType {.base.} = (discard)
method jointSetSolverPriority*(self: PhysicsServer3DExtension; joint: RID; priority: int32) {.base.} = (discard)
method jointGetSolverPriority*(self: PhysicsServer3DExtension; joint: RID): int32 {.base.} = (discard)
method jointDisableCollisionsBetweenBodies*(self: PhysicsServer3DExtension; joint: RID; disable: Bool) {.base.} = (discard)
method jointIsDisabledCollisionsBetweenBodies*(self: PhysicsServer3DExtension; joint: RID): Bool {.base.} = (discard)
method freeRid*(self: PhysicsServer3DExtension; rid: RID) {.base.} = (discard)
method setActive*(self: PhysicsServer3DExtension; active: Bool) {.base.} = (discard)
method init*(self: PhysicsServer3DExtension) {.base.} = (discard)
method step*(self: PhysicsServer3DExtension; step: Float) {.base.} = (discard)
method sync*(self: PhysicsServer3DExtension) {.base.} = (discard)
method flushQueries*(self: PhysicsServer3DExtension) {.base.} = (discard)
method endSync*(self: PhysicsServer3DExtension) {.base.} = (discard)
method finish*(self: PhysicsServer3DExtension) {.base.} = (discard)
method isFlushingQueries*(self: PhysicsServer3DExtension): Bool {.base.} = (discard)
method getProcessInfo*(self: PhysicsServer3DExtension; processInfo: PhysicsServer3D|>ProcessInfo): int32 {.base.} = (discard)
PhysicsServer3DExtension.memberProcs:
  proc bodyTestMotionIsExcludingBody*(self: PhysicsServer3DExtension; body: RID): Bool {.loadfrom("body_test_motion_is_excluding_body", 4155700596).}
  proc bodyTestMotionIsExcludingObject*(self: PhysicsServer3DExtension; `object`: uint64): Bool {.loadfrom("body_test_motion_is_excluding_object", 1116898809).}

# AESContext
define_godot_engine_class_essencials(AESContext, RefCounted)
AESContext.memberProcs:
  proc start*(self: Ref[AESContext]; mode: AESContext|>Mode; key: PackedByteArray; iv: PackedByteArray = PackedByteArray()): Error {.loadfrom("start", 3167574919).}
  proc update*(self: Ref[AESContext]; src: PackedByteArray): PackedByteArray {.loadfrom("update", 527836100).}
  proc getIvState*(self: Ref[AESContext]): PackedByteArray {.loadfrom("get_iv_state", 2115431945).}
  proc finish*(self: Ref[AESContext]) {.loadfrom("finish", 3218959716).}

# AStar2D
define_godot_engine_class_essencials(AStar2D, RefCounted)
method estimateCost*(self: Ref[AStar2D]; fromId: int64; toId: int64): Float {.base.} = (discard)
method computeCost*(self: Ref[AStar2D]; fromId: int64; toId: int64): Float {.base.} = (discard)
AStar2D.memberProcs:
  proc getAvailablePointId*(self: Ref[AStar2D]): int64 {.loadfrom("get_available_point_id", 3905245786).}
  proc addPoint*(self: Ref[AStar2D]; id: int64; position: Vector2; weightScale: Float = 1.0) {.loadfrom("add_point", 3370185124).}
  proc getPointPosition*(self: Ref[AStar2D]; id: int64): Vector2 {.loadfrom("get_point_position", 2299179447).}
  proc setPointPosition*(self: Ref[AStar2D]; id: int64; position: Vector2) {.loadfrom("set_point_position", 163021252).}
  proc getPointWeightScale*(self: Ref[AStar2D]; id: int64): Float {.loadfrom("get_point_weight_scale", 2339986948).}
  proc setPointWeightScale*(self: Ref[AStar2D]; id: int64; weightScale: Float) {.loadfrom("set_point_weight_scale", 1602489585).}
  proc removePoint*(self: Ref[AStar2D]; id: int64) {.loadfrom("remove_point", 1286410249).}
  proc hasPoint*(self: Ref[AStar2D]; id: int64): Bool {.loadfrom("has_point", 1116898809).}
  proc getPointConnections*(self: Ref[AStar2D]; id: int64): PackedInt64Array {.loadfrom("get_point_connections", 2865087369).}
  proc getPointIds*(self: Ref[AStar2D]): PackedInt64Array {.loadfrom("get_point_ids", 3851388692).}
  proc setPointDisabled*(self: Ref[AStar2D]; id: int64; disabled: Bool = true) {.loadfrom("set_point_disabled", 4023243586).}
  proc isPointDisabled*(self: Ref[AStar2D]; id: int64): Bool {.loadfrom("is_point_disabled", 1116898809).}
  proc connectPoints*(self: Ref[AStar2D]; id: int64; toId: int64; bidirectional: Bool = true) {.loadfrom("connect_points", 3785370599).}
  proc disconnectPoints*(self: Ref[AStar2D]; id: int64; toId: int64; bidirectional: Bool = true) {.loadfrom("disconnect_points", 3785370599).}
  proc arePointsConnected*(self: Ref[AStar2D]; id: int64; toId: int64; bidirectional: Bool = true): Bool {.loadfrom("are_points_connected", 4063588998).}
  proc getPointCount*(self: Ref[AStar2D]): int64 {.loadfrom("get_point_count", 3905245786).}
  proc getPointCapacity*(self: Ref[AStar2D]): int64 {.loadfrom("get_point_capacity", 3905245786).}
  proc reserveSpace*(self: Ref[AStar2D]; numNodes: int64) {.loadfrom("reserve_space", 1286410249).}
  proc clear*(self: Ref[AStar2D]) {.loadfrom("clear", 3218959716).}
  proc getClosestPoint*(self: Ref[AStar2D]; toPosition: Vector2; includeDisabled: Bool = false): int64 {.loadfrom("get_closest_point", 2300324924).}
  proc getClosestPositionInSegment*(self: Ref[AStar2D]; toPosition: Vector2): Vector2 {.loadfrom("get_closest_position_in_segment", 2656412154).}
  proc getPointPath*(self: Ref[AStar2D]; fromId: int64; toId: int64): PackedVector2Array {.loadfrom("get_point_path", 281625055).}
  proc getIdPath*(self: Ref[AStar2D]; fromId: int64; toId: int64): PackedInt64Array {.loadfrom("get_id_path", 3404614526).}

# AStar3D
define_godot_engine_class_essencials(AStar3D, RefCounted)
method estimateCost*(self: Ref[AStar3D]; fromId: int64; toId: int64): Float {.base.} = (discard)
method computeCost*(self: Ref[AStar3D]; fromId: int64; toId: int64): Float {.base.} = (discard)
AStar3D.memberProcs:
  proc getAvailablePointId*(self: Ref[AStar3D]): int64 {.loadfrom("get_available_point_id", 3905245786).}
  proc addPoint*(self: Ref[AStar3D]; id: int64; position: Vector3; weightScale: Float = 1.0) {.loadfrom("add_point", 2920922839).}
  proc getPointPosition*(self: Ref[AStar3D]; id: int64): Vector3 {.loadfrom("get_point_position", 711720468).}
  proc setPointPosition*(self: Ref[AStar3D]; id: int64; position: Vector3) {.loadfrom("set_point_position", 1530502735).}
  proc getPointWeightScale*(self: Ref[AStar3D]; id: int64): Float {.loadfrom("get_point_weight_scale", 2339986948).}
  proc setPointWeightScale*(self: Ref[AStar3D]; id: int64; weightScale: Float) {.loadfrom("set_point_weight_scale", 1602489585).}
  proc removePoint*(self: Ref[AStar3D]; id: int64) {.loadfrom("remove_point", 1286410249).}
  proc hasPoint*(self: Ref[AStar3D]; id: int64): Bool {.loadfrom("has_point", 1116898809).}
  proc getPointConnections*(self: Ref[AStar3D]; id: int64): PackedInt64Array {.loadfrom("get_point_connections", 2865087369).}
  proc getPointIds*(self: Ref[AStar3D]): PackedInt64Array {.loadfrom("get_point_ids", 3851388692).}
  proc setPointDisabled*(self: Ref[AStar3D]; id: int64; disabled: Bool = true) {.loadfrom("set_point_disabled", 4023243586).}
  proc isPointDisabled*(self: Ref[AStar3D]; id: int64): Bool {.loadfrom("is_point_disabled", 1116898809).}
  proc connectPoints*(self: Ref[AStar3D]; id: int64; toId: int64; bidirectional: Bool = true) {.loadfrom("connect_points", 3785370599).}
  proc disconnectPoints*(self: Ref[AStar3D]; id: int64; toId: int64; bidirectional: Bool = true) {.loadfrom("disconnect_points", 3785370599).}
  proc arePointsConnected*(self: Ref[AStar3D]; id: int64; toId: int64; bidirectional: Bool = true): Bool {.loadfrom("are_points_connected", 4063588998).}
  proc getPointCount*(self: Ref[AStar3D]): int64 {.loadfrom("get_point_count", 3905245786).}
  proc getPointCapacity*(self: Ref[AStar3D]): int64 {.loadfrom("get_point_capacity", 3905245786).}
  proc reserveSpace*(self: Ref[AStar3D]; numNodes: int64) {.loadfrom("reserve_space", 1286410249).}
  proc clear*(self: Ref[AStar3D]) {.loadfrom("clear", 3218959716).}
  proc getClosestPoint*(self: Ref[AStar3D]; toPosition: Vector3; includeDisabled: Bool = false): int64 {.loadfrom("get_closest_point", 3241074317).}
  proc getClosestPositionInSegment*(self: Ref[AStar3D]; toPosition: Vector3): Vector3 {.loadfrom("get_closest_position_in_segment", 192990374).}
  proc getPointPath*(self: Ref[AStar3D]; fromId: int64; toId: int64): PackedVector3Array {.loadfrom("get_point_path", 880819742).}
  proc getIdPath*(self: Ref[AStar3D]; fromId: int64; toId: int64): PackedInt64Array {.loadfrom("get_id_path", 3404614526).}

# AStarGrid2D
define_godot_engine_class_essencials(AStarGrid2D, RefCounted)
method estimateCost*(self: Ref[AStarGrid2D]; fromId: Vector2i; toId: Vector2i): Float {.base.} = (discard)
method computeCost*(self: Ref[AStarGrid2D]; fromId: Vector2i; toId: Vector2i): Float {.base.} = (discard)
AStarGrid2D.memberProcs:
  proc `region=`*(self: Ref[AStarGrid2D]; region: Rect2i) {.loadfrom("set_region", 1763793166).}
  proc region*(self: Ref[AStarGrid2D]): Rect2i {.loadfrom("get_region", 410525958).}
  proc `size=`*(self: Ref[AStarGrid2D]; size: Vector2i) {.loadfrom("set_size", 1130785943).}
  proc size*(self: Ref[AStarGrid2D]): Vector2i {.loadfrom("get_size", 3690982128).}
  proc `offset=`*(self: Ref[AStarGrid2D]; offset: Vector2) {.loadfrom("set_offset", 743155724).}
  proc offset*(self: Ref[AStarGrid2D]): Vector2 {.loadfrom("get_offset", 3341600327).}
  proc `cellSize=`*(self: Ref[AStarGrid2D]; cellSize: Vector2) {.loadfrom("set_cell_size", 743155724).}
  proc cellSize*(self: Ref[AStarGrid2D]): Vector2 {.loadfrom("get_cell_size", 3341600327).}
  proc isInBounds*(self: Ref[AStarGrid2D]; x: int32; y: int32): Bool {.loadfrom("is_in_bounds", 2522259332).}
  proc isInBoundsv*(self: Ref[AStarGrid2D]; id: Vector2i): Bool {.loadfrom("is_in_boundsv", 3900751641).}
  proc isDirty*(self: Ref[AStarGrid2D]): Bool {.loadfrom("is_dirty", 36873697).}
  proc update*(self: Ref[AStarGrid2D]) {.loadfrom("update", 3218959716).}
  proc `jumpingEnabled=`*(self: Ref[AStarGrid2D]; enabled: Bool) {.loadfrom("set_jumping_enabled", 2586408642).}
  proc isJumpingEnabled*(self: Ref[AStarGrid2D]): Bool {.loadfrom("is_jumping_enabled", 36873697).}
  proc `diagonalMode=`*(self: Ref[AStarGrid2D]; mode: AStarGrid2D|>DiagonalMode) {.loadfrom("set_diagonal_mode", 1017829798).}
  proc diagonalMode*(self: Ref[AStarGrid2D]): AStarGrid2D|>DiagonalMode {.loadfrom("get_diagonal_mode", 3129282674).}
  proc `defaultComputeHeuristic=`*(self: Ref[AStarGrid2D]; heuristic: AStarGrid2D|>Heuristic) {.loadfrom("set_default_compute_heuristic", 1044375519).}
  proc defaultComputeHeuristic*(self: Ref[AStarGrid2D]): AStarGrid2D|>Heuristic {.loadfrom("get_default_compute_heuristic", 2074731422).}
  proc `defaultEstimateHeuristic=`*(self: Ref[AStarGrid2D]; heuristic: AStarGrid2D|>Heuristic) {.loadfrom("set_default_estimate_heuristic", 1044375519).}
  proc defaultEstimateHeuristic*(self: Ref[AStarGrid2D]): AStarGrid2D|>Heuristic {.loadfrom("get_default_estimate_heuristic", 2074731422).}
  proc setPointSolid*(self: Ref[AStarGrid2D]; id: Vector2i; solid: Bool = true) {.loadfrom("set_point_solid", 2825551965).}
  proc isPointSolid*(self: Ref[AStarGrid2D]; id: Vector2i): Bool {.loadfrom("is_point_solid", 3900751641).}
  proc setPointWeightScale*(self: Ref[AStarGrid2D]; id: Vector2i; weightScale: Float) {.loadfrom("set_point_weight_scale", 2262553149).}
  proc getPointWeightScale*(self: Ref[AStarGrid2D]; id: Vector2i): Float {.loadfrom("get_point_weight_scale", 719993801).}
  proc clear*(self: Ref[AStarGrid2D]) {.loadfrom("clear", 3218959716).}
  proc getPointPosition*(self: Ref[AStarGrid2D]; id: Vector2i): Vector2 {.loadfrom("get_point_position", 108438297).}
  proc getPointPath*(self: Ref[AStarGrid2D]; fromId: Vector2i; toId: Vector2i): PackedVector2Array {.loadfrom("get_point_path", 690373547).}
  proc getIdPath*(self: Ref[AStarGrid2D]; fromId: Vector2i; toId: Vector2i): TypedArray[Vector2i] {.loadfrom("get_id_path", 1989391000).}

# AudioEffectInstance
define_godot_engine_class_essencials(AudioEffectInstance, RefCounted)
method process*(self: Ref[AudioEffectInstance]; srcBuffer: pointer; dstBuffer: ptr AudioFrame; frameCount: int32) {.base.} = (discard)
method processSilence*(self: Ref[AudioEffectInstance]): Bool {.base.} = (discard)

# AudioStreamPlayback
define_godot_engine_class_essencials(AudioStreamPlayback, RefCounted)
method start*(self: Ref[AudioStreamPlayback]; fromPos: float64) {.base.} = (discard)
method stop*(self: Ref[AudioStreamPlayback]) {.base.} = (discard)
method isPlaying*(self: Ref[AudioStreamPlayback]): Bool {.base.} = (discard)
method getLoopCount*(self: Ref[AudioStreamPlayback]): int32 {.base.} = (discard)
method getPlaybackPosition*(self: Ref[AudioStreamPlayback]): float64 {.base.} = (discard)
method seek*(self: Ref[AudioStreamPlayback]; position: float64) {.base.} = (discard)
method mix*(self: Ref[AudioStreamPlayback]; buffer: ptr AudioFrame; rateScale: Float; frames: int32): int32 {.base.} = (discard)
method tagUsedStreams*(self: Ref[AudioStreamPlayback]) {.base.} = (discard)

# CameraFeed
define_godot_engine_class_essencials(CameraFeed, RefCounted)
CameraFeed.memberProcs:
  proc getId*(self: Ref[CameraFeed]): int32 {.loadfrom("get_id", 3905245786).}
  proc isActive*(self: Ref[CameraFeed]): Bool {.loadfrom("is_active", 36873697).}
  proc `active=`*(self: Ref[CameraFeed]; active: Bool) {.loadfrom("set_active", 2586408642).}
  proc getName*(self: Ref[CameraFeed]): String {.loadfrom("get_name", 201670096).}
  proc getPosition*(self: Ref[CameraFeed]): CameraFeed|>FeedPosition {.loadfrom("get_position", 2711679033).}
  proc transform*(self: Ref[CameraFeed]): Transform2D {.loadfrom("get_transform", 3814499831).}
  proc `transform=`*(self: Ref[CameraFeed]; transform: Transform2D) {.loadfrom("set_transform", 2761652528).}
  proc getDatatype*(self: Ref[CameraFeed]): CameraFeed|>FeedDataType {.loadfrom("get_datatype", 1477782850).}

# CharFXTransform
define_godot_engine_class_essencials(CharFXTransform, RefCounted)
CharFXTransform.memberProcs:
  proc range*(self: Ref[CharFXTransform]): Vector2i {.loadfrom("get_range", 2741790807).}
  proc `range=`*(self: Ref[CharFXTransform]; range: Vector2i) {.loadfrom("set_range", 1130785943).}
  proc elapsedTime*(self: Ref[CharFXTransform]): float64 {.loadfrom("get_elapsed_time", 191475506).}
  proc `elapsedTime=`*(self: Ref[CharFXTransform]; time: float64) {.loadfrom("set_elapsed_time", 373806689).}
  proc isVisible*(self: Ref[CharFXTransform]): Bool {.loadfrom("is_visible", 2240911060).}
  proc `visibility=`*(self: Ref[CharFXTransform]; visibility: Bool) {.loadfrom("set_visibility", 2586408642).}
  proc isOutline*(self: Ref[CharFXTransform]): Bool {.loadfrom("is_outline", 2240911060).}
  proc `outline=`*(self: Ref[CharFXTransform]; outline: Bool) {.loadfrom("set_outline", 2586408642).}
  proc offset*(self: Ref[CharFXTransform]): Vector2 {.loadfrom("get_offset", 1497962370).}
  proc `offset=`*(self: Ref[CharFXTransform]; offset: Vector2) {.loadfrom("set_offset", 743155724).}
  proc color*(self: Ref[CharFXTransform]): Color {.loadfrom("get_color", 3200896285).}
  proc `color=`*(self: Ref[CharFXTransform]; color: Color) {.loadfrom("set_color", 2920490490).}
  proc environment*(self: Ref[CharFXTransform]): Dictionary {.loadfrom("get_environment", 2382534195).}
  proc `environment=`*(self: Ref[CharFXTransform]; environment: Dictionary) {.loadfrom("set_environment", 4155329257).}
  proc glyphIndex*(self: Ref[CharFXTransform]): uint32 {.loadfrom("get_glyph_index", 3905245786).}
  proc `glyphIndex=`*(self: Ref[CharFXTransform]; glyphIndex: uint32) {.loadfrom("set_glyph_index", 1286410249).}
  proc relativeIndex*(self: Ref[CharFXTransform]): int32 {.loadfrom("get_relative_index", 3905245786).}
  proc `relativeIndex=`*(self: Ref[CharFXTransform]; relativeIndex: int32) {.loadfrom("set_relative_index", 1286410249).}
  proc glyphCount*(self: Ref[CharFXTransform]): uint8 {.loadfrom("get_glyph_count", 3905245786).}
  proc `glyphCount=`*(self: Ref[CharFXTransform]; glyphCount: uint8) {.loadfrom("set_glyph_count", 1286410249).}
  proc glyphFlags*(self: Ref[CharFXTransform]): uint16 {.loadfrom("get_glyph_flags", 3905245786).}
  proc `glyphFlags=`*(self: Ref[CharFXTransform]; glyphFlags: uint16) {.loadfrom("set_glyph_flags", 1286410249).}
  proc font*(self: Ref[CharFXTransform]): RID {.loadfrom("get_font", 2944877500).}
  proc `font=`*(self: Ref[CharFXTransform]; font: RID) {.loadfrom("set_font", 2722037293).}

# ConfigFile
define_godot_engine_class_essencials(ConfigFile, RefCounted)
ConfigFile.memberProcs:
  proc setValue*(self: Ref[ConfigFile]; section: String; key: String; value: ptr Variant) {.loadfrom("set_value", 2504492430).}
  proc getValue*(self: Ref[ConfigFile]; section: String; key: String; default: ptr Variant = nil): Variant {.loadfrom("get_value", 89809366).}
  proc hasSection*(self: Ref[ConfigFile]; section: String): Bool {.loadfrom("has_section", 3927539163).}
  proc hasSectionKey*(self: Ref[ConfigFile]; section: String; key: String): Bool {.loadfrom("has_section_key", 820780508).}
  proc getSections*(self: Ref[ConfigFile]): PackedStringArray {.loadfrom("get_sections", 1139954409).}
  proc getSectionKeys*(self: Ref[ConfigFile]; section: String): PackedStringArray {.loadfrom("get_section_keys", 4291131558).}
  proc eraseSection*(self: Ref[ConfigFile]; section: String) {.loadfrom("erase_section", 83702148).}
  proc eraseSectionKey*(self: Ref[ConfigFile]; section: String; key: String) {.loadfrom("erase_section_key", 3186203200).}
  proc load*(self: Ref[ConfigFile]; path: String): Error {.loadfrom("load", 166001499).}
  proc parse*(self: Ref[ConfigFile]; data: String): Error {.loadfrom("parse", 166001499).}
  proc save*(self: Ref[ConfigFile]; path: String): Error {.loadfrom("save", 166001499).}
  proc encodeToText*(self: Ref[ConfigFile]): String {.loadfrom("encode_to_text", 201670096).}
  proc loadEncrypted*(self: Ref[ConfigFile]; path: String; key: PackedByteArray): Error {.loadfrom("load_encrypted", 887037711).}
  proc loadEncryptedPass*(self: Ref[ConfigFile]; path: String; password: String): Error {.loadfrom("load_encrypted_pass", 852856452).}
  proc saveEncrypted*(self: Ref[ConfigFile]; path: String; key: PackedByteArray): Error {.loadfrom("save_encrypted", 887037711).}
  proc saveEncryptedPass*(self: Ref[ConfigFile]; path: String; password: String): Error {.loadfrom("save_encrypted_pass", 852856452).}
  proc clear*(self: Ref[ConfigFile]) {.loadfrom("clear", 3218959716).}

# Crypto
define_godot_engine_class_essencials(Crypto, RefCounted)
Crypto.memberProcs:
  proc generateRandomBytes*(self: Ref[Crypto]; size: int32): PackedByteArray {.loadfrom("generate_random_bytes", 47165747).}
  proc generateRsa*(self: Ref[Crypto]; size: int32): Ref[CryptoKey] {.loadfrom("generate_rsa", 1237515462).}
  proc generateSelfSignedCertificate*(self: Ref[Crypto]; key: Ref[CryptoKey]; issuerName: String = "CN=myserver,O=myorganisation,C=IT"; notBefore: String = "20140101000000"; notAfter: String = "20340101000000"): Ref[X509Certificate] {.loadfrom("generate_self_signed_certificate", 947314696).}
  proc sign*(self: Ref[Crypto]; hashType: HashingContext|>HashType; hash: PackedByteArray; key: Ref[CryptoKey]): PackedByteArray {.loadfrom("sign", 1673662703).}
  proc verify*(self: Ref[Crypto]; hashType: HashingContext|>HashType; hash: PackedByteArray; signature: PackedByteArray; key: Ref[CryptoKey]): Bool {.loadfrom("verify", 2805902225).}
  proc encrypt*(self: Ref[Crypto]; key: Ref[CryptoKey]; plaintext: PackedByteArray): PackedByteArray {.loadfrom("encrypt", 2361793670).}
  proc decrypt*(self: Ref[Crypto]; key: Ref[CryptoKey]; ciphertext: PackedByteArray): PackedByteArray {.loadfrom("decrypt", 2361793670).}
  proc hmacDigest*(self: Ref[Crypto]; hashType: HashingContext|>HashType; key: PackedByteArray; msg: PackedByteArray): PackedByteArray {.loadfrom("hmac_digest", 2368951203).}
  proc constantTimeCompare*(self: Ref[Crypto]; trusted: PackedByteArray; received: PackedByteArray): Bool {.loadfrom("constant_time_compare", 1024142237).}

# DTLSServer
define_godot_engine_class_essencials(DTLSServer, RefCounted)
DTLSServer.memberProcs:
  proc setup*(self: Ref[DTLSServer]; serverOptions: Ref[TLSOptions]): Error {.loadfrom("setup", 1262296096).}
  proc takeConnection*(self: Ref[DTLSServer]; udpPeer: Ref[PacketPeerUDP]): Ref[PacketPeerDTLS] {.loadfrom("take_connection", 3946580474).}

# DirAccess
define_godot_engine_class_essencials(DirAccess, RefCounted)
DirAccess.memberProcs:
  proc open*(path: String): Ref[DirAccess] {.staticOf: DirAccess, loadfrom("open", 1923528528).}
  proc getOpenError*: Error {.staticOf: DirAccess, loadfrom("get_open_error", 166280745).}
  proc listDirBegin*(self: Ref[DirAccess]): Error {.loadfrom("list_dir_begin", 2018049411).}
  proc getNext*(self: Ref[DirAccess]): String {.loadfrom("get_next", 2841200299).}
  proc currentIsDir*(self: Ref[DirAccess]): Bool {.loadfrom("current_is_dir", 36873697).}
  proc listDirEnd*(self: Ref[DirAccess]) {.loadfrom("list_dir_end", 3218959716).}
  proc getFiles*(self: Ref[DirAccess]): PackedStringArray {.loadfrom("get_files", 2981934095).}
  proc getFilesAt*(path: String): PackedStringArray {.staticOf: DirAccess, loadfrom("get_files_at", 3538744774).}
  proc getDirectories*(self: Ref[DirAccess]): PackedStringArray {.loadfrom("get_directories", 2981934095).}
  proc getDirectoriesAt*(path: String): PackedStringArray {.staticOf: DirAccess, loadfrom("get_directories_at", 3538744774).}
  proc getDriveCount*: int32 {.staticOf: DirAccess, loadfrom("get_drive_count", 2455072627).}
  proc getDriveName*(idx: int32): String {.staticOf: DirAccess, loadfrom("get_drive_name", 990163283).}
  proc getCurrentDrive*(self: Ref[DirAccess]): int32 {.loadfrom("get_current_drive", 2455072627).}
  proc changeDir*(self: Ref[DirAccess]; toDir: String): Error {.loadfrom("change_dir", 166001499).}
  proc getCurrentDir*(self: Ref[DirAccess]; includeDrive: Bool = true): String {.loadfrom("get_current_dir", 1287308131).}
  proc makeDir*(self: Ref[DirAccess]; path: String): Error {.loadfrom("make_dir", 166001499).}
  proc makeDirAbsolute*(path: String): Error {.staticOf: DirAccess, loadfrom("make_dir_absolute", 166001499).}
  proc makeDirRecursive*(self: Ref[DirAccess]; path: String): Error {.loadfrom("make_dir_recursive", 166001499).}
  proc makeDirRecursiveAbsolute*(path: String): Error {.staticOf: DirAccess, loadfrom("make_dir_recursive_absolute", 166001499).}
  proc fileExists*(self: Ref[DirAccess]; path: String): Bool {.loadfrom("file_exists", 2323990056).}
  proc dirExists*(self: Ref[DirAccess]; path: String): Bool {.loadfrom("dir_exists", 2323990056).}
  proc dirExistsAbsolute*(path: String): Bool {.staticOf: DirAccess, loadfrom("dir_exists_absolute", 2323990056).}
  proc getSpaceLeft*(self: Ref[DirAccess]): uint64 {.loadfrom("get_space_left", 2455072627).}
  proc copy*(self: Ref[DirAccess]; `from`: String; to: String; chmodFlags: int32 = -1): Error {.loadfrom("copy", 198434953).}
  proc copyAbsolute*(`from`: String; to: String; chmodFlags: int32 = -1): Error {.staticOf: DirAccess, loadfrom("copy_absolute", 198434953).}
  proc rename*(self: Ref[DirAccess]; `from`: String; to: String): Error {.loadfrom("rename", 852856452).}
  proc renameAbsolute*(`from`: String; to: String): Error {.staticOf: DirAccess, loadfrom("rename_absolute", 852856452).}
  proc remove*(self: Ref[DirAccess]; path: String): Error {.loadfrom("remove", 166001499).}
  proc removeAbsolute*(path: String): Error {.staticOf: DirAccess, loadfrom("remove_absolute", 166001499).}
  proc `includeNavigational=`*(self: Ref[DirAccess]; enable: Bool) {.loadfrom("set_include_navigational", 2586408642).}
  proc includeNavigational*(self: Ref[DirAccess]): Bool {.loadfrom("get_include_navigational", 36873697).}
  proc `includeHidden=`*(self: Ref[DirAccess]; enable: Bool) {.loadfrom("set_include_hidden", 2586408642).}
  proc includeHidden*(self: Ref[DirAccess]): Bool {.loadfrom("get_include_hidden", 36873697).}

# ENetConnection
define_godot_engine_class_essencials(ENetConnection, RefCounted)
ENetConnection.memberProcs:
  proc createHostBound*(self: Ref[ENetConnection]; bindAddress: String; bindPort: int32; maxPeers: int32 = 32; maxChannels: int32 = 0; inBandwidth: int32 = 0; outBandwidth: int32 = 0): Error {.loadfrom("create_host_bound", 866250949).}
  proc createHost*(self: Ref[ENetConnection]; maxPeers: int32 = 32; maxChannels: int32 = 0; inBandwidth: int32 = 0; outBandwidth: int32 = 0): Error {.loadfrom("create_host", 117198950).}
  proc destroy*(self: Ref[ENetConnection]) {.loadfrom("destroy", 3218959716).}
  proc connectToHost*(self: Ref[ENetConnection]; address: String; port: int32; channels: int32 = 0; data: int32 = 0): Ref[ENetPacketPeer] {.loadfrom("connect_to_host", 385984708).}
  proc service*(self: Ref[ENetConnection]; timeout: int32 = 0): Array {.loadfrom("service", 2402345344).}
  proc flush*(self: Ref[ENetConnection]) {.loadfrom("flush", 3218959716).}
  proc bandwidthLimit*(self: Ref[ENetConnection]; inBandwidth: int32 = 0; outBandwidth: int32 = 0) {.loadfrom("bandwidth_limit", 2302169788).}
  proc channelLimit*(self: Ref[ENetConnection]; limit: int32) {.loadfrom("channel_limit", 1286410249).}
  proc broadcast*(self: Ref[ENetConnection]; channel: int32; packet: PackedByteArray; flags: int32) {.loadfrom("broadcast", 2772371345).}
  proc compress*(self: Ref[ENetConnection]; mode: ENetConnection|>CompressionMode) {.loadfrom("compress", 2660215187).}
  proc dtlsServerSetup*(self: Ref[ENetConnection]; serverOptions: Ref[TLSOptions]): Error {.loadfrom("dtls_server_setup", 1262296096).}
  proc dtlsClientSetup*(self: Ref[ENetConnection]; hostname: String; clientOptions: Ref[TLSOptions] = default Ref[TLSOptions]): Error {.loadfrom("dtls_client_setup", 3097527179).}
  proc refuseNewConnections*(self: Ref[ENetConnection]; refuse: Bool) {.loadfrom("refuse_new_connections", 2586408642).}
  proc popStatistic*(self: Ref[ENetConnection]; statistic: ENetConnection|>HostStatistic): float64 {.loadfrom("pop_statistic", 2166904170).}
  proc getMaxChannels*(self: Ref[ENetConnection]): int32 {.loadfrom("get_max_channels", 3905245786).}
  proc getLocalPort*(self: Ref[ENetConnection]): int32 {.loadfrom("get_local_port", 3905245786).}
  proc getPeers*(self: Ref[ENetConnection]): TypedArray[ENetPacketPeer] {.loadfrom("get_peers", 2915620761).}
  proc socketSend*(self: Ref[ENetConnection]; destinationAddress: String; destinationPort: int32; packet: PackedByteArray) {.loadfrom("socket_send", 1100646812).}

# EditorDebuggerPlugin
define_godot_engine_class_essencials(EditorDebuggerPlugin, RefCounted)
method setupSession*(self: Ref[EditorDebuggerPlugin]; sessionId: int32) {.base.} = (discard)
method hasCapture*(self: Ref[EditorDebuggerPlugin]; capture: String): Bool {.base.} = (discard)
method capture*(self: Ref[EditorDebuggerPlugin]; message: String; data: Array; sessionId: int32): Bool {.base.} = (discard)
EditorDebuggerPlugin.memberProcs:
  proc getSession*(self: Ref[EditorDebuggerPlugin]; id: int32): Ref[EditorDebuggerSession] {.loadfrom("get_session", 3061968499).}
  proc getSessions*(self: Ref[EditorDebuggerPlugin]): Array {.loadfrom("get_sessions", 2915620761).}

# EditorDebuggerSession
define_godot_engine_class_essencials(EditorDebuggerSession, RefCounted)
EditorDebuggerSession.memberProcs:
  proc sendMessage*(self: Ref[EditorDebuggerSession]; message: String; data: Array = Array|>init()) {.loadfrom("send_message", 3780025912).}
  proc toggleProfiler*(self: Ref[EditorDebuggerSession]; profiler: String; enable: Bool; data: Array = Array|>init()) {.loadfrom("toggle_profiler", 35674246).}
  proc isBreaked*(self: Ref[EditorDebuggerSession]): Bool {.loadfrom("is_breaked", 2240911060).}
  proc isDebuggable*(self: Ref[EditorDebuggerSession]): Bool {.loadfrom("is_debuggable", 2240911060).}
  proc isActive*(self: Ref[EditorDebuggerSession]): Bool {.loadfrom("is_active", 2240911060).}
  proc addSessionTab*(self: Ref[EditorDebuggerSession]; control: Control) {.loadfrom("add_session_tab", 1496901182).}
  proc removeSessionTab*(self: Ref[EditorDebuggerSession]; control: Control) {.loadfrom("remove_session_tab", 1496901182).}

# EditorExportPlatform
define_godot_engine_class_essencials(EditorExportPlatform, RefCounted)

# EditorExportPlugin
define_godot_engine_class_essencials(EditorExportPlugin, RefCounted)
method exportFile*(self: Ref[EditorExportPlugin]; path: String; `type`: String; features: PackedStringArray) {.base.} = (discard)
method exportBegin*(self: Ref[EditorExportPlugin]; features: PackedStringArray; isDebug: Bool; path: String; flags: uint32) {.base.} = (discard)
method exportEnd*(self: Ref[EditorExportPlugin]) {.base.} = (discard)
method beginCustomizeResources*(self: Ref[EditorExportPlugin]; platform: Ref[EditorExportPlatform]; features: PackedStringArray): Bool {.base.} = (discard)
method customizeResource*(self: Ref[EditorExportPlugin]; resource: Ref[Resource]; path: String): Ref[Resource] {.base.} = (discard)
method beginCustomizeScenes*(self: Ref[EditorExportPlugin]; platform: Ref[EditorExportPlatform]; features: PackedStringArray): Bool {.base.} = (discard)
method customizeScene*(self: Ref[EditorExportPlugin]; scene: ptr Node; path: String): Node {.base.} = (discard)
method getCustomizationConfigurationHash*(self: Ref[EditorExportPlugin]): uint64 {.base.} = (discard)
method endCustomizeScenes*(self: Ref[EditorExportPlugin]) {.base.} = (discard)
method endCustomizeResources*(self: Ref[EditorExportPlugin]) {.base.} = (discard)
method getExportOptions*(self: Ref[EditorExportPlugin]; platform: Ref[EditorExportPlatform]): TypedArray[Dictionary] {.base.} = (discard)
method shouldUpdateExportOptions*(self: Ref[EditorExportPlugin]; platform: Ref[EditorExportPlatform]): Bool {.base.} = (discard)
method getExportFeatures*(self: Ref[EditorExportPlugin]; platform: Ref[EditorExportPlatform]; debug: Bool): PackedStringArray {.base.} = (discard)
method getName*(self: Ref[EditorExportPlugin]): String {.base.} = (discard)
EditorExportPlugin.memberProcs:
  proc addSharedObject*(self: Ref[EditorExportPlugin]; path: String; tags: PackedStringArray; target: String) {.loadfrom("add_shared_object", 3098291045).}
  proc addIosProjectStaticLib*(self: Ref[EditorExportPlugin]; path: String) {.loadfrom("add_ios_project_static_lib", 83702148).}
  proc addFile*(self: Ref[EditorExportPlugin]; path: String; file: PackedByteArray; remap: Bool) {.loadfrom("add_file", 527928637).}
  proc addIosFramework*(self: Ref[EditorExportPlugin]; path: String) {.loadfrom("add_ios_framework", 83702148).}
  proc addIosEmbeddedFramework*(self: Ref[EditorExportPlugin]; path: String) {.loadfrom("add_ios_embedded_framework", 83702148).}
  proc addIosPlistContent*(self: Ref[EditorExportPlugin]; plistContent: String) {.loadfrom("add_ios_plist_content", 83702148).}
  proc addIosLinkerFlags*(self: Ref[EditorExportPlugin]; flags: String) {.loadfrom("add_ios_linker_flags", 83702148).}
  proc addIosBundleFile*(self: Ref[EditorExportPlugin]; path: String) {.loadfrom("add_ios_bundle_file", 83702148).}
  proc addIosCppCode*(self: Ref[EditorExportPlugin]; code: String) {.loadfrom("add_ios_cpp_code", 83702148).}
  proc addMacosPluginFile*(self: Ref[EditorExportPlugin]; path: String) {.loadfrom("add_macos_plugin_file", 83702148).}
  proc skip*(self: Ref[EditorExportPlugin]) {.loadfrom("skip", 3218959716).}
  proc getOption*(self: Ref[EditorExportPlugin]; name: StringName): Variant {.loadfrom("get_option", 2760726917).}

# EditorFeatureProfile
define_godot_engine_class_essencials(EditorFeatureProfile, RefCounted)
EditorFeatureProfile.memberProcs:
  proc setDisableClass*(self: Ref[EditorFeatureProfile]; className: StringName; disable: Bool) {.loadfrom("set_disable_class", 2524380260).}
  proc isClassDisabled*(self: Ref[EditorFeatureProfile]; className: StringName): Bool {.loadfrom("is_class_disabled", 2619796661).}
  proc setDisableClassEditor*(self: Ref[EditorFeatureProfile]; className: StringName; disable: Bool) {.loadfrom("set_disable_class_editor", 2524380260).}
  proc isClassEditorDisabled*(self: Ref[EditorFeatureProfile]; className: StringName): Bool {.loadfrom("is_class_editor_disabled", 2619796661).}
  proc setDisableClassProperty*(self: Ref[EditorFeatureProfile]; className: StringName; property: StringName; disable: Bool) {.loadfrom("set_disable_class_property", 865197084).}
  proc isClassPropertyDisabled*(self: Ref[EditorFeatureProfile]; className: StringName; property: StringName): Bool {.loadfrom("is_class_property_disabled", 471820014).}
  proc setDisableFeature*(self: Ref[EditorFeatureProfile]; feature: EditorFeatureProfile|>Feature; disable: Bool) {.loadfrom("set_disable_feature", 1884871044).}
  proc isFeatureDisabled*(self: Ref[EditorFeatureProfile]; feature: EditorFeatureProfile|>Feature): Bool {.loadfrom("is_feature_disabled", 2974403161).}
  proc getFeatureName*(self: Ref[EditorFeatureProfile]; feature: EditorFeatureProfile|>Feature): String {.loadfrom("get_feature_name", 3401335809).}
  proc saveToFile*(self: Ref[EditorFeatureProfile]; path: String): Error {.loadfrom("save_to_file", 166001499).}
  proc loadFromFile*(self: Ref[EditorFeatureProfile]; path: String): Error {.loadfrom("load_from_file", 166001499).}

# EditorFileSystemImportFormatSupportQuery
define_godot_engine_class_essencials(EditorFileSystemImportFormatSupportQuery, RefCounted)
method isActive*(self: Ref[EditorFileSystemImportFormatSupportQuery]): Bool {.base.} = (discard)
method getFileExtensions*(self: Ref[EditorFileSystemImportFormatSupportQuery]): PackedStringArray {.base.} = (discard)
method query*(self: Ref[EditorFileSystemImportFormatSupportQuery]): Bool {.base.} = (discard)

# EditorInspectorPlugin
define_godot_engine_class_essencials(EditorInspectorPlugin, RefCounted)
method canHandle*(self: Ref[EditorInspectorPlugin]; `object`: ptr Object): Bool {.base.} = (discard)
method parseBegin*(self: Ref[EditorInspectorPlugin]; `object`: ptr Object) {.base.} = (discard)
method parseCategory*(self: Ref[EditorInspectorPlugin]; `object`: ptr Object; category: String) {.base.} = (discard)
method parseGroup*(self: Ref[EditorInspectorPlugin]; `object`: ptr Object; group: String) {.base.} = (discard)
method parseProperty*(self: Ref[EditorInspectorPlugin]; `object`: ptr Object; `type`: Variant|>Type; name: String; hintType: PropertyHint; hintString: String; usageFlags: set[PropertyUsageFlags]; wide: Bool): Bool {.base.} = (discard)
method parseEnd*(self: Ref[EditorInspectorPlugin]; `object`: ptr Object) {.base.} = (discard)
EditorInspectorPlugin.memberProcs:
  proc addCustomControl*(self: Ref[EditorInspectorPlugin]; control: Control) {.loadfrom("add_custom_control", 1496901182).}
  proc addPropertyEditor*(self: Ref[EditorInspectorPlugin]; property: String; editor: Control; addToEnd: Bool = false) {.loadfrom("add_property_editor", 3406284123).}
  proc addPropertyEditorForMultipleProperties*(self: Ref[EditorInspectorPlugin]; label: String; properties: PackedStringArray; editor: Control) {.loadfrom("add_property_editor_for_multiple_properties", 788598683).}

# EditorResourceConversionPlugin
define_godot_engine_class_essencials(EditorResourceConversionPlugin, RefCounted)
method convertsTo*(self: Ref[EditorResourceConversionPlugin]): String {.base.} = (discard)
method handles*(self: Ref[EditorResourceConversionPlugin]; resource: Ref[Resource]): Bool {.base.} = (discard)
method convert*(self: Ref[EditorResourceConversionPlugin]; resource: Ref[Resource]): Ref[Resource] {.base.} = (discard)

# EditorResourcePreviewGenerator
define_godot_engine_class_essencials(EditorResourcePreviewGenerator, RefCounted)
method handles*(self: Ref[EditorResourcePreviewGenerator]; `type`: String): Bool {.base.} = (discard)
method generate*(self: Ref[EditorResourcePreviewGenerator]; resource: Ref[Resource]; size: Vector2i; metadata: Dictionary): Ref[Texture2D] {.base.} = (discard)
method generateFromPath*(self: Ref[EditorResourcePreviewGenerator]; path: String; size: Vector2i; metadata: Dictionary): Ref[Texture2D] {.base.} = (discard)
method generateSmallPreviewAutomatically*(self: Ref[EditorResourcePreviewGenerator]): Bool {.base.} = (discard)
method canGenerateSmallPreview*(self: Ref[EditorResourcePreviewGenerator]): Bool {.base.} = (discard)

# EditorResourceTooltipPlugin
define_godot_engine_class_essencials(EditorResourceTooltipPlugin, RefCounted)
method handles*(self: Ref[EditorResourceTooltipPlugin]; `type`: String): Bool {.base.} = (discard)
method makeTooltipForPath*(self: Ref[EditorResourceTooltipPlugin]; path: String; metadata: Dictionary; base: Control): Control {.base.} = (discard)
EditorResourceTooltipPlugin.memberProcs:
  proc requestThumbnail*(self: Ref[EditorResourceTooltipPlugin]; path: String; control: TextureRect) {.loadfrom("request_thumbnail", 3245519720).}

# EditorSceneFormatImporter
define_godot_engine_class_essencials(EditorSceneFormatImporter, RefCounted)
method getImportFlags*(self: Ref[EditorSceneFormatImporter]): uint32 {.base.} = (discard)
method getExtensions*(self: Ref[EditorSceneFormatImporter]): PackedStringArray {.base.} = (discard)
method importScene*(self: Ref[EditorSceneFormatImporter]; path: String; flags: uint32; options: Dictionary): Object {.base.} = (discard)
method getImportOptions*(self: Ref[EditorSceneFormatImporter]; path: String) {.base.} = (discard)
method getOptionVisibility*(self: Ref[EditorSceneFormatImporter]; path: String; forAnimation: Bool; option: String): Variant {.base.} = (discard)

# EditorScenePostImport
define_godot_engine_class_essencials(EditorScenePostImport, RefCounted)
method postImport*(self: Ref[EditorScenePostImport]; scene: ptr Node): Object {.base.} = (discard)
EditorScenePostImport.memberProcs:
  proc getSourceFile*(self: Ref[EditorScenePostImport]): String {.loadfrom("get_source_file", 201670096).}

# EditorScenePostImportPlugin
define_godot_engine_class_essencials(EditorScenePostImportPlugin, RefCounted)
method getInternalImportOptions*(self: Ref[EditorScenePostImportPlugin]; category: int32) {.base.} = (discard)
method getInternalOptionVisibility*(self: Ref[EditorScenePostImportPlugin]; category: int32; forAnimation: Bool; option: String): Variant {.base.} = (discard)
method getInternalOptionUpdateViewRequired*(self: Ref[EditorScenePostImportPlugin]; category: int32; option: String): Variant {.base.} = (discard)
method internalProcess*(self: Ref[EditorScenePostImportPlugin]; category: int32; baseNode: ptr Node; node: ptr Node; resource: Ref[Resource]) {.base.} = (discard)
method getImportOptions*(self: Ref[EditorScenePostImportPlugin]; path: String) {.base.} = (discard)
method getOptionVisibility*(self: Ref[EditorScenePostImportPlugin]; path: String; forAnimation: Bool; option: String): Variant {.base.} = (discard)
method preProcess*(self: Ref[EditorScenePostImportPlugin]; scene: ptr Node) {.base.} = (discard)
method postProcess*(self: Ref[EditorScenePostImportPlugin]; scene: ptr Node) {.base.} = (discard)
EditorScenePostImportPlugin.memberProcs:
  proc getOptionValue*(self: Ref[EditorScenePostImportPlugin]; name: StringName): Variant {.loadfrom("get_option_value", 2760726917).}
  proc addImportOption*(self: Ref[EditorScenePostImportPlugin]; name: String; value: ptr Variant) {.loadfrom("add_import_option", 402577236).}
  proc addImportOptionAdvanced*(self: Ref[EditorScenePostImportPlugin]; `type`: Variant|>Type; name: String; defaultValue: ptr Variant; hint: PropertyHint = propertyHintNone; hintString: String = ""; usageFlags: int32 = 6) {.loadfrom("add_import_option_advanced", 3774155785).}

# EditorScript
define_godot_engine_class_essencials(EditorScript, RefCounted)
method run*(self: Ref[EditorScript]) {.base.} = (discard)
EditorScript.memberProcs:
  proc addRootNode*(self: Ref[EditorScript]; node: ptr Node) {.loadfrom("add_root_node", 1078189570).}
  proc getScene*(self: Ref[EditorScript]): Node {.loadfrom("get_scene", 3160264692).}
  proc getEditorInterface*(self: Ref[EditorScript]): EditorInterface {.loadfrom("get_editor_interface", 1976662476).}

# EditorTranslationParserPlugin
define_godot_engine_class_essencials(EditorTranslationParserPlugin, RefCounted)
method parseFile*(self: Ref[EditorTranslationParserPlugin]; path: String; msgids: TypedArray[String]; msgidsContextPlural: TypedArray[Array]) {.base.} = (discard)
method getRecognizedExtensions*(self: Ref[EditorTranslationParserPlugin]): PackedStringArray {.base.} = (discard)

# EncodedObjectAsID
define_godot_engine_class_essencials(EncodedObjectAsID, RefCounted)
EncodedObjectAsID.memberProcs:
  proc `objectId=`*(self: Ref[EncodedObjectAsID]; id: uint64) {.loadfrom("set_object_id", 1286410249).}
  proc objectId*(self: Ref[EncodedObjectAsID]): uint64 {.loadfrom("get_object_id", 3905245786).}

# EngineProfiler
define_godot_engine_class_essencials(EngineProfiler, RefCounted)
method toggle*(self: Ref[EngineProfiler]; enable: Bool; options: Array) {.base.} = (discard)
method addFrame*(self: Ref[EngineProfiler]; data: Array) {.base.} = (discard)
method tick*(self: Ref[EngineProfiler]; frameTime: float64; processTime: float64; physicsTime: float64; physicsFrameTime: float64) {.base.} = (discard)

# Expression
define_godot_engine_class_essencials(Expression, RefCounted)
Expression.memberProcs:
  proc parse*(self: Ref[Expression]; expression: String; inputNames: PackedStringArray = PackedStringArray()): Error {.loadfrom("parse", 3658149758).}
  proc execute*(self: Ref[Expression]; inputs: Array = Array|>init(); baseInstance: ptr Object = nil; showError: Bool = true; constCallsOnly: Bool = false): Variant {.loadfrom("execute", 3712471238).}
  proc hasExecuteFailed*(self: Ref[Expression]): Bool {.loadfrom("has_execute_failed", 36873697).}
  proc getErrorText*(self: Ref[Expression]): String {.loadfrom("get_error_text", 201670096).}

# FileAccess
define_godot_engine_class_essencials(FileAccess, RefCounted)
FileAccess.memberProcs:
  proc open*(path: String; flags: FileAccess|>ModeFlags): Ref[FileAccess] {.staticOf: FileAccess, loadfrom("open", 1247358404).}
  proc openEncrypted*(path: String; modeFlags: FileAccess|>ModeFlags; key: PackedByteArray): Ref[FileAccess] {.staticOf: FileAccess, loadfrom("open_encrypted", 1482131466).}
  proc openEncryptedWithPass*(path: String; modeFlags: FileAccess|>ModeFlags; pass: String): Ref[FileAccess] {.staticOf: FileAccess, loadfrom("open_encrypted_with_pass", 790283377).}
  proc openCompressed*(path: String; modeFlags: FileAccess|>ModeFlags; compressionMode: FileAccess|>CompressionMode = compressionFastlz): Ref[FileAccess] {.staticOf: FileAccess, loadfrom("open_compressed", 2874458257).}
  proc getOpenError*: Error {.staticOf: FileAccess, loadfrom("get_open_error", 166280745).}
  proc getFileAsBytes*(path: String): PackedByteArray {.staticOf: FileAccess, loadfrom("get_file_as_bytes", 659035735).}
  proc getFileAsString*(path: String): String {.staticOf: FileAccess, loadfrom("get_file_as_string", 1703090593).}
  proc flush*(self: Ref[FileAccess]) {.loadfrom("flush", 3218959716).}
  proc getPath*(self: Ref[FileAccess]): String {.loadfrom("get_path", 201670096).}
  proc getPathAbsolute*(self: Ref[FileAccess]): String {.loadfrom("get_path_absolute", 201670096).}
  proc isOpen*(self: Ref[FileAccess]): Bool {.loadfrom("is_open", 36873697).}
  proc seek*(self: Ref[FileAccess]; position: uint64) {.loadfrom("seek", 1286410249).}
  proc seekEnd*(self: Ref[FileAccess]; position: int64 = 0) {.loadfrom("seek_end", 1995695955).}
  proc getPosition*(self: Ref[FileAccess]): uint64 {.loadfrom("get_position", 3905245786).}
  proc getLength*(self: Ref[FileAccess]): uint64 {.loadfrom("get_length", 3905245786).}
  proc eofReached*(self: Ref[FileAccess]): Bool {.loadfrom("eof_reached", 36873697).}
  proc get8*(self: Ref[FileAccess]): uint8 {.loadfrom("get_8", 3905245786).}
  proc get16*(self: Ref[FileAccess]): uint16 {.loadfrom("get_16", 3905245786).}
  proc get32*(self: Ref[FileAccess]): uint32 {.loadfrom("get_32", 3905245786).}
  proc get64*(self: Ref[FileAccess]): uint64 {.loadfrom("get_64", 3905245786).}
  proc getFloat*(self: Ref[FileAccess]): Float {.loadfrom("get_float", 1740695150).}
  proc getDouble*(self: Ref[FileAccess]): float64 {.loadfrom("get_double", 1740695150).}
  proc getReal*(self: Ref[FileAccess]): Float {.loadfrom("get_real", 1740695150).}
  proc getBuffer*(self: Ref[FileAccess]; length: int64): PackedByteArray {.loadfrom("get_buffer", 4131300905).}
  proc getLine*(self: Ref[FileAccess]): String {.loadfrom("get_line", 201670096).}
  proc getCsvLine*(self: Ref[FileAccess]; delim: String = ","): PackedStringArray {.loadfrom("get_csv_line", 2358116058).}
  proc getAsText*(self: Ref[FileAccess]; skipCr: Bool = false): String {.loadfrom("get_as_text", 1162154673).}
  proc getMd5*(path: String): String {.staticOf: FileAccess, loadfrom("get_md5", 1703090593).}
  proc getSha256*(path: String): String {.staticOf: FileAccess, loadfrom("get_sha256", 1703090593).}
  proc isBigEndian*(self: Ref[FileAccess]): Bool {.loadfrom("is_big_endian", 36873697).}
  proc `bigEndian=`*(self: Ref[FileAccess]; bigEndian: Bool) {.loadfrom("set_big_endian", 2586408642).}
  proc getError*(self: Ref[FileAccess]): Error {.loadfrom("get_error", 3185525595).}
  proc getVar*(self: Ref[FileAccess]; allowObjects: Bool = false): Variant {.loadfrom("get_var", 189129690).}
  proc store8*(self: Ref[FileAccess]; value: uint8) {.loadfrom("store_8", 1286410249).}
  proc store16*(self: Ref[FileAccess]; value: uint16) {.loadfrom("store_16", 1286410249).}
  proc store32*(self: Ref[FileAccess]; value: uint32) {.loadfrom("store_32", 1286410249).}
  proc store64*(self: Ref[FileAccess]; value: uint64) {.loadfrom("store_64", 1286410249).}
  proc storeFloat*(self: Ref[FileAccess]; value: Float) {.loadfrom("store_float", 373806689).}
  proc storeDouble*(self: Ref[FileAccess]; value: float64) {.loadfrom("store_double", 373806689).}
  proc storeReal*(self: Ref[FileAccess]; value: Float) {.loadfrom("store_real", 373806689).}
  proc storeBuffer*(self: Ref[FileAccess]; buffer: PackedByteArray) {.loadfrom("store_buffer", 2971499966).}
  proc storeLine*(self: Ref[FileAccess]; line: String) {.loadfrom("store_line", 83702148).}
  proc storeCsvLine*(self: Ref[FileAccess]; values: PackedStringArray; delim: String = ",") {.loadfrom("store_csv_line", 2217842308).}
  proc storeString*(self: Ref[FileAccess]; string: String) {.loadfrom("store_string", 83702148).}
  proc storeVar*(self: Ref[FileAccess]; value: ptr Variant; fullObjects: Bool = false) {.loadfrom("store_var", 738511890).}
  proc storePascalString*(self: Ref[FileAccess]; string: String) {.loadfrom("store_pascal_string", 83702148).}
  proc getPascalString*(self: Ref[FileAccess]): String {.loadfrom("get_pascal_string", 2841200299).}
  proc close*(self: Ref[FileAccess]) {.loadfrom("close", 3218959716).}
  proc fileExists*(path: String): Bool {.staticOf: FileAccess, loadfrom("file_exists", 2323990056).}
  proc getModifiedTime*(file: String): uint64 {.staticOf: FileAccess, loadfrom("get_modified_time", 1597066294).}

# GDScriptNativeClass
define_godot_engine_class_essencials(GDScriptNativeClass, RefCounted)
GDScriptNativeClass.memberProcs:
  proc new*(self: Ref[GDScriptNativeClass]): Variant {.loadfrom("new", 1460262497).}

# HMACContext
define_godot_engine_class_essencials(HMACContext, RefCounted)
HMACContext.memberProcs:
  proc start*(self: Ref[HMACContext]; hashType: HashingContext|>HashType; key: PackedByteArray): Error {.loadfrom("start", 3537364598).}
  proc update*(self: Ref[HMACContext]; data: PackedByteArray): Error {.loadfrom("update", 680677267).}
  proc finish*(self: Ref[HMACContext]): PackedByteArray {.loadfrom("finish", 2115431945).}

# HTTPClient
define_godot_engine_class_essencials(HTTPClient, RefCounted)
HTTPClient.memberProcs:
  proc connectToHost*(self: Ref[HTTPClient]; host: String; port: int32 = -1; tlsOptions: Ref[TLSOptions] = default Ref[TLSOptions]): Error {.loadfrom("connect_to_host", 1970282951).}
  proc `connection=`*(self: Ref[HTTPClient]; connection: Ref[StreamPeer]) {.loadfrom("set_connection", 3281897016).}
  proc connection*(self: Ref[HTTPClient]): Ref[StreamPeer] {.loadfrom("get_connection", 2741655269).}
  proc requestRaw*(self: Ref[HTTPClient]; `method`: HTTPClient|>Method; url: String; headers: PackedStringArray; body: PackedByteArray): Error {.loadfrom("request_raw", 540161961).}
  proc request*(self: Ref[HTTPClient]; `method`: HTTPClient|>Method; url: String; headers: PackedStringArray; body: String = ""): Error {.loadfrom("request", 3249905507).}
  proc close*(self: Ref[HTTPClient]) {.loadfrom("close", 3218959716).}
  proc hasResponse*(self: Ref[HTTPClient]): Bool {.loadfrom("has_response", 36873697).}
  proc isResponseChunked*(self: Ref[HTTPClient]): Bool {.loadfrom("is_response_chunked", 36873697).}
  proc getResponseCode*(self: Ref[HTTPClient]): int32 {.loadfrom("get_response_code", 3905245786).}
  proc getResponseHeaders*(self: Ref[HTTPClient]): PackedStringArray {.loadfrom("get_response_headers", 2981934095).}
  proc getResponseHeadersAsDictionary*(self: Ref[HTTPClient]): Dictionary {.loadfrom("get_response_headers_as_dictionary", 2382534195).}
  proc getResponseBodyLength*(self: Ref[HTTPClient]): int64 {.loadfrom("get_response_body_length", 3905245786).}
  proc readResponseBodyChunk*(self: Ref[HTTPClient]): PackedByteArray {.loadfrom("read_response_body_chunk", 2115431945).}
  proc `readChunkSize=`*(self: Ref[HTTPClient]; bytes: int32) {.loadfrom("set_read_chunk_size", 1286410249).}
  proc readChunkSize*(self: Ref[HTTPClient]): int32 {.loadfrom("get_read_chunk_size", 3905245786).}
  proc `blockingMode=`*(self: Ref[HTTPClient]; enabled: Bool) {.loadfrom("set_blocking_mode", 2586408642).}
  proc isBlockingModeEnabled*(self: Ref[HTTPClient]): Bool {.loadfrom("is_blocking_mode_enabled", 36873697).}
  proc getStatus*(self: Ref[HTTPClient]): HTTPClient|>Status {.loadfrom("get_status", 1426656811).}
  proc poll*(self: Ref[HTTPClient]): Error {.loadfrom("poll", 166280745).}
  proc setHttpProxy*(self: Ref[HTTPClient]; host: String; port: int32) {.loadfrom("set_http_proxy", 2956805083).}
  proc setHttpsProxy*(self: Ref[HTTPClient]; host: String; port: int32) {.loadfrom("set_https_proxy", 2956805083).}
  proc queryStringFromDict*(self: Ref[HTTPClient]; fields: Dictionary): String {.loadfrom("query_string_from_dict", 2538086567).}

# HashingContext
define_godot_engine_class_essencials(HashingContext, RefCounted)
HashingContext.memberProcs:
  proc start*(self: Ref[HashingContext]; `type`: HashingContext|>HashType): Error {.loadfrom("start", 3940338335).}
  proc update*(self: Ref[HashingContext]; chunk: PackedByteArray): Error {.loadfrom("update", 680677267).}
  proc finish*(self: Ref[HashingContext]): PackedByteArray {.loadfrom("finish", 2115431945).}

# ImageFormatLoader
define_godot_engine_class_essencials(ImageFormatLoader, RefCounted)

# JavaClass
define_godot_engine_class_essencials(JavaClass, RefCounted)

# JavaScriptObject
define_godot_engine_class_essencials(JavaScriptObject, RefCounted)

# KinematicCollision2D
define_godot_engine_class_essencials(KinematicCollision2D, RefCounted)
KinematicCollision2D.memberProcs:
  proc getPosition*(self: Ref[KinematicCollision2D]): Vector2 {.loadfrom("get_position", 3341600327).}
  proc getNormal*(self: Ref[KinematicCollision2D]): Vector2 {.loadfrom("get_normal", 3341600327).}
  proc getTravel*(self: Ref[KinematicCollision2D]): Vector2 {.loadfrom("get_travel", 3341600327).}
  proc getRemainder*(self: Ref[KinematicCollision2D]): Vector2 {.loadfrom("get_remainder", 3341600327).}
  proc getAngle*(self: Ref[KinematicCollision2D]; upDirection: Vector2 = gdvec(0, -1)): Float {.loadfrom("get_angle", 2841063350).}
  proc getDepth*(self: Ref[KinematicCollision2D]): Float {.loadfrom("get_depth", 1740695150).}
  proc getLocalShape*(self: Ref[KinematicCollision2D]): Object {.loadfrom("get_local_shape", 1981248198).}
  proc getCollider*(self: Ref[KinematicCollision2D]): Object {.loadfrom("get_collider", 1981248198).}
  proc getColliderId*(self: Ref[KinematicCollision2D]): uint64 {.loadfrom("get_collider_id", 3905245786).}
  proc getColliderRid*(self: Ref[KinematicCollision2D]): RID {.loadfrom("get_collider_rid", 2944877500).}
  proc getColliderShape*(self: Ref[KinematicCollision2D]): Object {.loadfrom("get_collider_shape", 1981248198).}
  proc getColliderShapeIndex*(self: Ref[KinematicCollision2D]): int32 {.loadfrom("get_collider_shape_index", 3905245786).}
  proc getColliderVelocity*(self: Ref[KinematicCollision2D]): Vector2 {.loadfrom("get_collider_velocity", 3341600327).}

# KinematicCollision3D
define_godot_engine_class_essencials(KinematicCollision3D, RefCounted)
KinematicCollision3D.memberProcs:
  proc getTravel*(self: Ref[KinematicCollision3D]): Vector3 {.loadfrom("get_travel", 3360562783).}
  proc getRemainder*(self: Ref[KinematicCollision3D]): Vector3 {.loadfrom("get_remainder", 3360562783).}
  proc getDepth*(self: Ref[KinematicCollision3D]): Float {.loadfrom("get_depth", 1740695150).}
  proc getCollisionCount*(self: Ref[KinematicCollision3D]): int32 {.loadfrom("get_collision_count", 3905245786).}
  proc getPosition*(self: Ref[KinematicCollision3D]; collisionIndex: int32 = 0): Vector3 {.loadfrom("get_position", 1914908202).}
  proc getNormal*(self: Ref[KinematicCollision3D]; collisionIndex: int32 = 0): Vector3 {.loadfrom("get_normal", 1914908202).}
  proc getAngle*(self: Ref[KinematicCollision3D]; collisionIndex: int32 = 0; upDirection: Vector3 = gdvec(0, 1, 0)): Float {.loadfrom("get_angle", 1242741860).}
  proc getLocalShape*(self: Ref[KinematicCollision3D]; collisionIndex: int32 = 0): Object {.loadfrom("get_local_shape", 2639523548).}
  proc getCollider*(self: Ref[KinematicCollision3D]; collisionIndex: int32 = 0): Object {.loadfrom("get_collider", 2639523548).}
  proc getColliderId*(self: Ref[KinematicCollision3D]; collisionIndex: int32 = 0): uint64 {.loadfrom("get_collider_id", 1591665591).}
  proc getColliderRid*(self: Ref[KinematicCollision3D]; collisionIndex: int32 = 0): RID {.loadfrom("get_collider_rid", 1231817359).}
  proc getColliderShape*(self: Ref[KinematicCollision3D]; collisionIndex: int32 = 0): Object {.loadfrom("get_collider_shape", 2639523548).}
  proc getColliderShapeIndex*(self: Ref[KinematicCollision3D]; collisionIndex: int32 = 0): int32 {.loadfrom("get_collider_shape_index", 1591665591).}
  proc getColliderVelocity*(self: Ref[KinematicCollision3D]; collisionIndex: int32 = 0): Vector3 {.loadfrom("get_collider_velocity", 1914908202).}

# Lightmapper
define_godot_engine_class_essencials(Lightmapper, RefCounted)

# MeshConvexDecompositionSettings
define_godot_engine_class_essencials(MeshConvexDecompositionSettings, RefCounted)
MeshConvexDecompositionSettings.memberProcs:
  proc `maxConcavity=`*(self: Ref[MeshConvexDecompositionSettings]; maxConcavity: Float) {.loadfrom("set_max_concavity", 373806689).}
  proc maxConcavity*(self: Ref[MeshConvexDecompositionSettings]): Float {.loadfrom("get_max_concavity", 1740695150).}
  proc `symmetryPlanesClippingBias=`*(self: Ref[MeshConvexDecompositionSettings]; symmetryPlanesClippingBias: Float) {.loadfrom("set_symmetry_planes_clipping_bias", 373806689).}
  proc symmetryPlanesClippingBias*(self: Ref[MeshConvexDecompositionSettings]): Float {.loadfrom("get_symmetry_planes_clipping_bias", 1740695150).}
  proc `revolutionAxesClippingBias=`*(self: Ref[MeshConvexDecompositionSettings]; revolutionAxesClippingBias: Float) {.loadfrom("set_revolution_axes_clipping_bias", 373806689).}
  proc revolutionAxesClippingBias*(self: Ref[MeshConvexDecompositionSettings]): Float {.loadfrom("get_revolution_axes_clipping_bias", 1740695150).}
  proc `minVolumePerConvexHull=`*(self: Ref[MeshConvexDecompositionSettings]; minVolumePerConvexHull: Float) {.loadfrom("set_min_volume_per_convex_hull", 373806689).}
  proc minVolumePerConvexHull*(self: Ref[MeshConvexDecompositionSettings]): Float {.loadfrom("get_min_volume_per_convex_hull", 1740695150).}
  proc `resolution=`*(self: Ref[MeshConvexDecompositionSettings]; minVolumePerConvexHull: uint32) {.loadfrom("set_resolution", 1286410249).}
  proc resolution*(self: Ref[MeshConvexDecompositionSettings]): uint32 {.loadfrom("get_resolution", 3905245786).}
  proc `maxNumVerticesPerConvexHull=`*(self: Ref[MeshConvexDecompositionSettings]; maxNumVerticesPerConvexHull: uint32) {.loadfrom("set_max_num_vertices_per_convex_hull", 1286410249).}
  proc maxNumVerticesPerConvexHull*(self: Ref[MeshConvexDecompositionSettings]): uint32 {.loadfrom("get_max_num_vertices_per_convex_hull", 3905245786).}
  proc `planeDownsampling=`*(self: Ref[MeshConvexDecompositionSettings]; planeDownsampling: uint32) {.loadfrom("set_plane_downsampling", 1286410249).}
  proc planeDownsampling*(self: Ref[MeshConvexDecompositionSettings]): uint32 {.loadfrom("get_plane_downsampling", 3905245786).}
  proc `convexHullDownsampling=`*(self: Ref[MeshConvexDecompositionSettings]; convexHullDownsampling: uint32) {.loadfrom("set_convex_hull_downsampling", 1286410249).}
  proc convexHullDownsampling*(self: Ref[MeshConvexDecompositionSettings]): uint32 {.loadfrom("get_convex_hull_downsampling", 3905245786).}
  proc `normalizeMesh=`*(self: Ref[MeshConvexDecompositionSettings]; normalizeMesh: Bool) {.loadfrom("set_normalize_mesh", 2586408642).}
  proc normalizeMesh*(self: Ref[MeshConvexDecompositionSettings]): Bool {.loadfrom("get_normalize_mesh", 36873697).}
  proc `mode=`*(self: Ref[MeshConvexDecompositionSettings]; mode: MeshConvexDecompositionSettings|>Mode) {.loadfrom("set_mode", 1668072869).}
  proc mode*(self: Ref[MeshConvexDecompositionSettings]): MeshConvexDecompositionSettings|>Mode {.loadfrom("get_mode", 23479454).}
  proc `convexHullApproximation=`*(self: Ref[MeshConvexDecompositionSettings]; convexHullApproximation: Bool) {.loadfrom("set_convex_hull_approximation", 2586408642).}
  proc convexHullApproximation*(self: Ref[MeshConvexDecompositionSettings]): Bool {.loadfrom("get_convex_hull_approximation", 36873697).}
  proc `maxConvexHulls=`*(self: Ref[MeshConvexDecompositionSettings]; maxConvexHulls: uint32) {.loadfrom("set_max_convex_hulls", 1286410249).}
  proc maxConvexHulls*(self: Ref[MeshConvexDecompositionSettings]): uint32 {.loadfrom("get_max_convex_hulls", 3905245786).}
  proc `projectHullVertices=`*(self: Ref[MeshConvexDecompositionSettings]; projectHullVertices: Bool) {.loadfrom("set_project_hull_vertices", 2586408642).}
  proc projectHullVertices*(self: Ref[MeshConvexDecompositionSettings]): Bool {.loadfrom("get_project_hull_vertices", 36873697).}

# MeshDataTool
define_godot_engine_class_essencials(MeshDataTool, RefCounted)
MeshDataTool.memberProcs:
  proc clear*(self: Ref[MeshDataTool]) {.loadfrom("clear", 3218959716).}
  proc createFromSurface*(self: Ref[MeshDataTool]; mesh: Ref[ArrayMesh]; surface: int32): Error {.loadfrom("create_from_surface", 2727020678).}
  proc commitToSurface*(self: Ref[MeshDataTool]; mesh: Ref[ArrayMesh]): Error {.loadfrom("commit_to_surface", 3521099812).}
  proc getFormat*(self: Ref[MeshDataTool]): int32 {.loadfrom("get_format", 3905245786).}
  proc getVertexCount*(self: Ref[MeshDataTool]): int32 {.loadfrom("get_vertex_count", 3905245786).}
  proc getEdgeCount*(self: Ref[MeshDataTool]): int32 {.loadfrom("get_edge_count", 3905245786).}
  proc getFaceCount*(self: Ref[MeshDataTool]): int32 {.loadfrom("get_face_count", 3905245786).}
  proc setVertex*(self: Ref[MeshDataTool]; idx: int32; vertex: Vector3) {.loadfrom("set_vertex", 1530502735).}
  proc getVertex*(self: Ref[MeshDataTool]; idx: int32): Vector3 {.loadfrom("get_vertex", 711720468).}
  proc setVertexNormal*(self: Ref[MeshDataTool]; idx: int32; normal: Vector3) {.loadfrom("set_vertex_normal", 1530502735).}
  proc getVertexNormal*(self: Ref[MeshDataTool]; idx: int32): Vector3 {.loadfrom("get_vertex_normal", 711720468).}
  proc setVertexTangent*(self: Ref[MeshDataTool]; idx: int32; tangent: Plane) {.loadfrom("set_vertex_tangent", 1104099133).}
  proc getVertexTangent*(self: Ref[MeshDataTool]; idx: int32): Plane {.loadfrom("get_vertex_tangent", 1372055458).}
  proc setVertexUv*(self: Ref[MeshDataTool]; idx: int32; uv: Vector2) {.loadfrom("set_vertex_uv", 163021252).}
  proc getVertexUv*(self: Ref[MeshDataTool]; idx: int32): Vector2 {.loadfrom("get_vertex_uv", 2299179447).}
  proc setVertexUv2*(self: Ref[MeshDataTool]; idx: int32; uv2: Vector2) {.loadfrom("set_vertex_uv2", 163021252).}
  proc getVertexUv2*(self: Ref[MeshDataTool]; idx: int32): Vector2 {.loadfrom("get_vertex_uv2", 2299179447).}
  proc setVertexColor*(self: Ref[MeshDataTool]; idx: int32; color: Color) {.loadfrom("set_vertex_color", 2878471219).}
  proc getVertexColor*(self: Ref[MeshDataTool]; idx: int32): Color {.loadfrom("get_vertex_color", 3457211756).}
  proc setVertexBones*(self: Ref[MeshDataTool]; idx: int32; bones: PackedInt32Array) {.loadfrom("set_vertex_bones", 3500328261).}
  proc getVertexBones*(self: Ref[MeshDataTool]; idx: int32): PackedInt32Array {.loadfrom("get_vertex_bones", 1706082319).}
  proc setVertexWeights*(self: Ref[MeshDataTool]; idx: int32; weights: PackedFloat32Array) {.loadfrom("set_vertex_weights", 1345852415).}
  proc getVertexWeights*(self: Ref[MeshDataTool]; idx: int32): PackedFloat32Array {.loadfrom("get_vertex_weights", 1542882410).}
  proc setVertexMeta*(self: Ref[MeshDataTool]; idx: int32; meta: ptr Variant) {.loadfrom("set_vertex_meta", 2152698145).}
  proc getVertexMeta*(self: Ref[MeshDataTool]; idx: int32): Variant {.loadfrom("get_vertex_meta", 4227898402).}
  proc getVertexEdges*(self: Ref[MeshDataTool]; idx: int32): PackedInt32Array {.loadfrom("get_vertex_edges", 1706082319).}
  proc getVertexFaces*(self: Ref[MeshDataTool]; idx: int32): PackedInt32Array {.loadfrom("get_vertex_faces", 1706082319).}
  proc getEdgeVertex*(self: Ref[MeshDataTool]; idx: int32; vertex: int32): int32 {.loadfrom("get_edge_vertex", 3175239445).}
  proc getEdgeFaces*(self: Ref[MeshDataTool]; idx: int32): PackedInt32Array {.loadfrom("get_edge_faces", 1706082319).}
  proc setEdgeMeta*(self: Ref[MeshDataTool]; idx: int32; meta: ptr Variant) {.loadfrom("set_edge_meta", 2152698145).}
  proc getEdgeMeta*(self: Ref[MeshDataTool]; idx: int32): Variant {.loadfrom("get_edge_meta", 4227898402).}
  proc getFaceVertex*(self: Ref[MeshDataTool]; idx: int32; vertex: int32): int32 {.loadfrom("get_face_vertex", 3175239445).}
  proc getFaceEdge*(self: Ref[MeshDataTool]; idx: int32; edge: int32): int32 {.loadfrom("get_face_edge", 3175239445).}
  proc setFaceMeta*(self: Ref[MeshDataTool]; idx: int32; meta: ptr Variant) {.loadfrom("set_face_meta", 2152698145).}
  proc getFaceMeta*(self: Ref[MeshDataTool]; idx: int32): Variant {.loadfrom("get_face_meta", 4227898402).}
  proc getFaceNormal*(self: Ref[MeshDataTool]; idx: int32): Vector3 {.loadfrom("get_face_normal", 711720468).}
  proc setMaterial*(self: Ref[MeshDataTool]; material: Ref[Material]) {.loadfrom("set_material", 2757459619).}
  proc getMaterial*(self: Ref[MeshDataTool]): Ref[Material] {.loadfrom("get_material", 5934680).}

# MultiplayerAPI
define_godot_engine_class_essencials(MultiplayerAPI, RefCounted)
MultiplayerAPI.memberProcs:
  proc hasMultiplayerPeer*(self: Ref[MultiplayerAPI]): Bool {.loadfrom("has_multiplayer_peer", 2240911060).}
  proc multiplayerPeer*(self: Ref[MultiplayerAPI]): Ref[MultiplayerPeer] {.loadfrom("get_multiplayer_peer", 3223692825).}
  proc `multiplayerPeer=`*(self: Ref[MultiplayerAPI]; peer: Ref[MultiplayerPeer]) {.loadfrom("set_multiplayer_peer", 3694835298).}
  proc getUniqueId*(self: Ref[MultiplayerAPI]): int32 {.loadfrom("get_unique_id", 2455072627).}
  proc isServer*(self: Ref[MultiplayerAPI]): Bool {.loadfrom("is_server", 2240911060).}
  proc getRemoteSenderId*(self: Ref[MultiplayerAPI]): int32 {.loadfrom("get_remote_sender_id", 2455072627).}
  proc poll*(self: Ref[MultiplayerAPI]): Error {.loadfrom("poll", 166280745).}
  proc rpc*(self: Ref[MultiplayerAPI]; peer: int32; `object`: ptr Object; `method`: StringName; arguments: Array = Array|>init()): Error {.loadfrom("rpc", 1833408346).}
  proc objectConfigurationAdd*(self: Ref[MultiplayerAPI]; `object`: ptr Object; configuration: ptr Variant): Error {.loadfrom("object_configuration_add", 1171879464).}
  proc objectConfigurationRemove*(self: Ref[MultiplayerAPI]; `object`: ptr Object; configuration: ptr Variant): Error {.loadfrom("object_configuration_remove", 1171879464).}
  proc getPeers*(self: Ref[MultiplayerAPI]): PackedInt32Array {.loadfrom("get_peers", 969006518).}
  proc setDefaultInterface*(interfaceName: StringName) {.staticOf: MultiplayerAPI, loadfrom("set_default_interface", 3304788590).}
  proc getDefaultInterface*: StringName {.staticOf: MultiplayerAPI, loadfrom("get_default_interface", 2737447660).}
  proc createDefaultInterface*: Ref[MultiplayerAPI] {.staticOf: MultiplayerAPI, loadfrom("create_default_interface", 3294156723).}

# Mutex
define_godot_engine_class_essencials(Mutex, RefCounted)
Mutex.memberProcs:
  proc lock*(self: Ref[Mutex]) {.loadfrom("lock", 3218959716).}
  proc tryLock*(self: Ref[Mutex]): Bool {.loadfrom("try_lock", 2240911060).}
  proc unlock*(self: Ref[Mutex]) {.loadfrom("unlock", 3218959716).}

# NavigationPathQueryParameters2D
define_godot_engine_class_essencials(NavigationPathQueryParameters2D, RefCounted)
NavigationPathQueryParameters2D.memberProcs:
  proc `pathfindingAlgorithm=`*(self: Ref[NavigationPathQueryParameters2D]; pathfindingAlgorithm: NavigationPathQueryParameters2D|>PathfindingAlgorithm) {.loadfrom("set_pathfinding_algorithm", 2783519915).}
  proc pathfindingAlgorithm*(self: Ref[NavigationPathQueryParameters2D]): NavigationPathQueryParameters2D|>PathfindingAlgorithm {.loadfrom("get_pathfinding_algorithm", 3000421146).}
  proc `pathPostprocessing=`*(self: Ref[NavigationPathQueryParameters2D]; pathPostprocessing: NavigationPathQueryParameters2D|>PathPostProcessing) {.loadfrom("set_path_postprocessing", 2864409082).}
  proc pathPostprocessing*(self: Ref[NavigationPathQueryParameters2D]): NavigationPathQueryParameters2D|>PathPostProcessing {.loadfrom("get_path_postprocessing", 3798118993).}
  proc `map=`*(self: Ref[NavigationPathQueryParameters2D]; map: RID) {.loadfrom("set_map", 2722037293).}
  proc map*(self: Ref[NavigationPathQueryParameters2D]): RID {.loadfrom("get_map", 2944877500).}
  proc `startPosition=`*(self: Ref[NavigationPathQueryParameters2D]; startPosition: Vector2) {.loadfrom("set_start_position", 743155724).}
  proc startPosition*(self: Ref[NavigationPathQueryParameters2D]): Vector2 {.loadfrom("get_start_position", 3341600327).}
  proc `targetPosition=`*(self: Ref[NavigationPathQueryParameters2D]; targetPosition: Vector2) {.loadfrom("set_target_position", 743155724).}
  proc tarposition*(self: Ref[NavigationPathQueryParameters2D]): Vector2 {.loadfrom("get_target_position", 3341600327).}
  proc `navigationLayers=`*(self: Ref[NavigationPathQueryParameters2D]; navigationLayers: uint32) {.loadfrom("set_navigation_layers", 1286410249).}
  proc navigationLayers*(self: Ref[NavigationPathQueryParameters2D]): uint32 {.loadfrom("get_navigation_layers", 3905245786).}
  proc `metadataFlags=`*(self: Ref[NavigationPathQueryParameters2D]; flags: set[NavigationPathQueryParameters2D|>PathMetadataFlags]) {.loadfrom("set_metadata_flags", 24274129).}
  proc metadataFlags*(self: Ref[NavigationPathQueryParameters2D]): set[NavigationPathQueryParameters2D|>PathMetadataFlags] {.loadfrom("get_metadata_flags", 488152976).}

# NavigationPathQueryParameters3D
define_godot_engine_class_essencials(NavigationPathQueryParameters3D, RefCounted)
NavigationPathQueryParameters3D.memberProcs:
  proc `pathfindingAlgorithm=`*(self: Ref[NavigationPathQueryParameters3D]; pathfindingAlgorithm: NavigationPathQueryParameters3D|>PathfindingAlgorithm) {.loadfrom("set_pathfinding_algorithm", 394560454).}
  proc pathfindingAlgorithm*(self: Ref[NavigationPathQueryParameters3D]): NavigationPathQueryParameters3D|>PathfindingAlgorithm {.loadfrom("get_pathfinding_algorithm", 3398491350).}
  proc `pathPostprocessing=`*(self: Ref[NavigationPathQueryParameters3D]; pathPostprocessing: NavigationPathQueryParameters3D|>PathPostProcessing) {.loadfrom("set_path_postprocessing", 2267362344).}
  proc pathPostprocessing*(self: Ref[NavigationPathQueryParameters3D]): NavigationPathQueryParameters3D|>PathPostProcessing {.loadfrom("get_path_postprocessing", 3883858360).}
  proc `map=`*(self: Ref[NavigationPathQueryParameters3D]; map: RID) {.loadfrom("set_map", 2722037293).}
  proc map*(self: Ref[NavigationPathQueryParameters3D]): RID {.loadfrom("get_map", 2944877500).}
  proc `startPosition=`*(self: Ref[NavigationPathQueryParameters3D]; startPosition: Vector3) {.loadfrom("set_start_position", 3460891852).}
  proc startPosition*(self: Ref[NavigationPathQueryParameters3D]): Vector3 {.loadfrom("get_start_position", 3360562783).}
  proc `targetPosition=`*(self: Ref[NavigationPathQueryParameters3D]; targetPosition: Vector3) {.loadfrom("set_target_position", 3460891852).}
  proc tarposition*(self: Ref[NavigationPathQueryParameters3D]): Vector3 {.loadfrom("get_target_position", 3360562783).}
  proc `navigationLayers=`*(self: Ref[NavigationPathQueryParameters3D]; navigationLayers: uint32) {.loadfrom("set_navigation_layers", 1286410249).}
  proc navigationLayers*(self: Ref[NavigationPathQueryParameters3D]): uint32 {.loadfrom("get_navigation_layers", 3905245786).}
  proc `metadataFlags=`*(self: Ref[NavigationPathQueryParameters3D]; flags: set[NavigationPathQueryParameters3D|>PathMetadataFlags]) {.loadfrom("set_metadata_flags", 2713846708).}
  proc metadataFlags*(self: Ref[NavigationPathQueryParameters3D]): set[NavigationPathQueryParameters3D|>PathMetadataFlags] {.loadfrom("get_metadata_flags", 1582332802).}

# NavigationPathQueryResult2D
define_godot_engine_class_essencials(NavigationPathQueryResult2D, RefCounted)
NavigationPathQueryResult2D.memberProcs:
  proc `path=`*(self: Ref[NavigationPathQueryResult2D]; path: PackedVector2Array) {.loadfrom("set_path", 1509147220).}
  proc path*(self: Ref[NavigationPathQueryResult2D]): PackedVector2Array {.loadfrom("get_path", 2961356807).}
  proc `pathTypes=`*(self: Ref[NavigationPathQueryResult2D]; pathTypes: PackedInt32Array) {.loadfrom("set_path_types", 3614634198).}
  proc pathTypes*(self: Ref[NavigationPathQueryResult2D]): PackedInt32Array {.loadfrom("get_path_types", 1930428628).}
  proc `pathRids=`*(self: Ref[NavigationPathQueryResult2D]; pathRids: TypedArray[RID]) {.loadfrom("set_path_rids", 381264803).}
  proc pathRids*(self: Ref[NavigationPathQueryResult2D]): TypedArray[RID] {.loadfrom("get_path_rids", 3995934104).}
  proc `pathOwnerIds=`*(self: Ref[NavigationPathQueryResult2D]; pathOwnerIds: PackedInt64Array) {.loadfrom("set_path_owner_ids", 3709968205).}
  proc pathOwnerIds*(self: Ref[NavigationPathQueryResult2D]): PackedInt64Array {.loadfrom("get_path_owner_ids", 235988956).}
  proc reset*(self: Ref[NavigationPathQueryResult2D]) {.loadfrom("reset", 3218959716).}

# NavigationPathQueryResult3D
define_godot_engine_class_essencials(NavigationPathQueryResult3D, RefCounted)
NavigationPathQueryResult3D.memberProcs:
  proc `path=`*(self: Ref[NavigationPathQueryResult3D]; path: PackedVector3Array) {.loadfrom("set_path", 334873810).}
  proc path*(self: Ref[NavigationPathQueryResult3D]): PackedVector3Array {.loadfrom("get_path", 497664490).}
  proc `pathTypes=`*(self: Ref[NavigationPathQueryResult3D]; pathTypes: PackedInt32Array) {.loadfrom("set_path_types", 3614634198).}
  proc pathTypes*(self: Ref[NavigationPathQueryResult3D]): PackedInt32Array {.loadfrom("get_path_types", 1930428628).}
  proc `pathRids=`*(self: Ref[NavigationPathQueryResult3D]; pathRids: TypedArray[RID]) {.loadfrom("set_path_rids", 381264803).}
  proc pathRids*(self: Ref[NavigationPathQueryResult3D]): TypedArray[RID] {.loadfrom("get_path_rids", 3995934104).}
  proc `pathOwnerIds=`*(self: Ref[NavigationPathQueryResult3D]; pathOwnerIds: PackedInt64Array) {.loadfrom("set_path_owner_ids", 3709968205).}
  proc pathOwnerIds*(self: Ref[NavigationPathQueryResult3D]): PackedInt64Array {.loadfrom("get_path_owner_ids", 235988956).}
  proc reset*(self: Ref[NavigationPathQueryResult3D]) {.loadfrom("reset", 3218959716).}

# Node3DGizmo
define_godot_engine_class_essencials(Node3DGizmo, RefCounted)

# OggPacketSequencePlayback
define_godot_engine_class_essencials(OggPacketSequencePlayback, RefCounted)

# PCKPacker
define_godot_engine_class_essencials(PCKPacker, RefCounted)
PCKPacker.memberProcs:
  proc pckStart*(self: Ref[PCKPacker]; pckName: String; alignment: int32 = 32; key: String = "0000000000000000000000000000000000000000000000000000000000000000"; encryptDirectory: Bool = false): Error {.loadfrom("pck_start", 3232891339).}
  proc addFile*(self: Ref[PCKPacker]; pckPath: String; sourcePath: String; encrypt: Bool = false): Error {.loadfrom("add_file", 2215643711).}
  proc flush*(self: Ref[PCKPacker]; verbose: Bool = false): Error {.loadfrom("flush", 1633102583).}

# PackedDataContainerRef
define_godot_engine_class_essencials(PackedDataContainerRef, RefCounted)
PackedDataContainerRef.memberProcs:
  proc size*(self: Ref[PackedDataContainerRef]): int32 {.loadfrom("size", 3905245786).}

# PacketPeer
define_godot_engine_class_essencials(PacketPeer, RefCounted)
PacketPeer.memberProcs:
  proc getVar*(self: Ref[PacketPeer]; allowObjects: Bool = false): Variant {.loadfrom("get_var", 3442865206).}
  proc putVar*(self: Ref[PacketPeer]; `var`: ptr Variant; fullObjects: Bool = false): Error {.loadfrom("put_var", 2436251611).}
  proc getPacket*(self: Ref[PacketPeer]): PackedByteArray {.loadfrom("get_packet", 2115431945).}
  proc putPacket*(self: Ref[PacketPeer]; buffer: PackedByteArray): Error {.loadfrom("put_packet", 680677267).}
  proc getPacketError*(self: Ref[PacketPeer]): Error {.loadfrom("get_packet_error", 3185525595).}
  proc getAvailablePacketCount*(self: Ref[PacketPeer]): int32 {.loadfrom("get_available_packet_count", 3905245786).}
  proc encodeBufferMaxSize*(self: Ref[PacketPeer]): int32 {.loadfrom("get_encode_buffer_max_size", 3905245786).}
  proc `encodeBufferMaxSize=`*(self: Ref[PacketPeer]; maxSize: int32) {.loadfrom("set_encode_buffer_max_size", 1286410249).}

# PhysicsPointQueryParameters2D
define_godot_engine_class_essencials(PhysicsPointQueryParameters2D, RefCounted)
PhysicsPointQueryParameters2D.memberProcs:
  proc `position=`*(self: Ref[PhysicsPointQueryParameters2D]; position: Vector2) {.loadfrom("set_position", 743155724).}
  proc position*(self: Ref[PhysicsPointQueryParameters2D]): Vector2 {.loadfrom("get_position", 3341600327).}
  proc `canvasInstanceId=`*(self: Ref[PhysicsPointQueryParameters2D]; canvasInstanceId: uint64) {.loadfrom("set_canvas_instance_id", 1286410249).}
  proc canvasInstanceId*(self: Ref[PhysicsPointQueryParameters2D]): uint64 {.loadfrom("get_canvas_instance_id", 3905245786).}
  proc `collisionMask=`*(self: Ref[PhysicsPointQueryParameters2D]; collisionMask: uint32) {.loadfrom("set_collision_mask", 1286410249).}
  proc collisionMask*(self: Ref[PhysicsPointQueryParameters2D]): uint32 {.loadfrom("get_collision_mask", 3905245786).}
  proc `exclude=`*(self: Ref[PhysicsPointQueryParameters2D]; exclude: TypedArray[RID]) {.loadfrom("set_exclude", 381264803).}
  proc exclude*(self: Ref[PhysicsPointQueryParameters2D]): TypedArray[RID] {.loadfrom("get_exclude", 3995934104).}
  proc `collideWithBodies=`*(self: Ref[PhysicsPointQueryParameters2D]; enable: Bool) {.loadfrom("set_collide_with_bodies", 2586408642).}
  proc isCollideWithBodiesEnabled*(self: Ref[PhysicsPointQueryParameters2D]): Bool {.loadfrom("is_collide_with_bodies_enabled", 36873697).}
  proc `collideWithAreas=`*(self: Ref[PhysicsPointQueryParameters2D]; enable: Bool) {.loadfrom("set_collide_with_areas", 2586408642).}
  proc isCollideWithAreasEnabled*(self: Ref[PhysicsPointQueryParameters2D]): Bool {.loadfrom("is_collide_with_areas_enabled", 36873697).}

# PhysicsPointQueryParameters3D
define_godot_engine_class_essencials(PhysicsPointQueryParameters3D, RefCounted)
PhysicsPointQueryParameters3D.memberProcs:
  proc `position=`*(self: Ref[PhysicsPointQueryParameters3D]; position: Vector3) {.loadfrom("set_position", 3460891852).}
  proc position*(self: Ref[PhysicsPointQueryParameters3D]): Vector3 {.loadfrom("get_position", 3360562783).}
  proc `collisionMask=`*(self: Ref[PhysicsPointQueryParameters3D]; collisionMask: uint32) {.loadfrom("set_collision_mask", 1286410249).}
  proc collisionMask*(self: Ref[PhysicsPointQueryParameters3D]): uint32 {.loadfrom("get_collision_mask", 3905245786).}
  proc `exclude=`*(self: Ref[PhysicsPointQueryParameters3D]; exclude: TypedArray[RID]) {.loadfrom("set_exclude", 381264803).}
  proc exclude*(self: Ref[PhysicsPointQueryParameters3D]): TypedArray[RID] {.loadfrom("get_exclude", 3995934104).}
  proc `collideWithBodies=`*(self: Ref[PhysicsPointQueryParameters3D]; enable: Bool) {.loadfrom("set_collide_with_bodies", 2586408642).}
  proc isCollideWithBodiesEnabled*(self: Ref[PhysicsPointQueryParameters3D]): Bool {.loadfrom("is_collide_with_bodies_enabled", 36873697).}
  proc `collideWithAreas=`*(self: Ref[PhysicsPointQueryParameters3D]; enable: Bool) {.loadfrom("set_collide_with_areas", 2586408642).}
  proc isCollideWithAreasEnabled*(self: Ref[PhysicsPointQueryParameters3D]): Bool {.loadfrom("is_collide_with_areas_enabled", 36873697).}

# PhysicsRayQueryParameters2D
define_godot_engine_class_essencials(PhysicsRayQueryParameters2D, RefCounted)
PhysicsRayQueryParameters2D.memberProcs:
  proc create*(`from`: Vector2; to: Vector2; collisionMask: uint32 = 4294967295'u32; exclude: TypedArray[RID] = TypedArray|>init[RID]()): Ref[PhysicsRayQueryParameters2D] {.staticOf: PhysicsRayQueryParameters2D, loadfrom("create", 1118143851).}
  proc `from=`*(self: Ref[PhysicsRayQueryParameters2D]; `from`: Vector2) {.loadfrom("set_from", 743155724).}
  proc `from`*(self: Ref[PhysicsRayQueryParameters2D]): Vector2 {.loadfrom("get_from", 3341600327).}
  proc `to=`*(self: Ref[PhysicsRayQueryParameters2D]; to: Vector2) {.loadfrom("set_to", 743155724).}
  proc to*(self: Ref[PhysicsRayQueryParameters2D]): Vector2 {.loadfrom("get_to", 3341600327).}
  proc `collisionMask=`*(self: Ref[PhysicsRayQueryParameters2D]; collisionMask: uint32) {.loadfrom("set_collision_mask", 1286410249).}
  proc collisionMask*(self: Ref[PhysicsRayQueryParameters2D]): uint32 {.loadfrom("get_collision_mask", 3905245786).}
  proc `exclude=`*(self: Ref[PhysicsRayQueryParameters2D]; exclude: TypedArray[RID]) {.loadfrom("set_exclude", 381264803).}
  proc exclude*(self: Ref[PhysicsRayQueryParameters2D]): TypedArray[RID] {.loadfrom("get_exclude", 3995934104).}
  proc `collideWithBodies=`*(self: Ref[PhysicsRayQueryParameters2D]; enable: Bool) {.loadfrom("set_collide_with_bodies", 2586408642).}
  proc isCollideWithBodiesEnabled*(self: Ref[PhysicsRayQueryParameters2D]): Bool {.loadfrom("is_collide_with_bodies_enabled", 36873697).}
  proc `collideWithAreas=`*(self: Ref[PhysicsRayQueryParameters2D]; enable: Bool) {.loadfrom("set_collide_with_areas", 2586408642).}
  proc isCollideWithAreasEnabled*(self: Ref[PhysicsRayQueryParameters2D]): Bool {.loadfrom("is_collide_with_areas_enabled", 36873697).}
  proc `hitFromInside=`*(self: Ref[PhysicsRayQueryParameters2D]; enable: Bool) {.loadfrom("set_hit_from_inside", 2586408642).}
  proc isHitFromInsideEnabled*(self: Ref[PhysicsRayQueryParameters2D]): Bool {.loadfrom("is_hit_from_inside_enabled", 36873697).}

# PhysicsRayQueryParameters3D
define_godot_engine_class_essencials(PhysicsRayQueryParameters3D, RefCounted)
PhysicsRayQueryParameters3D.memberProcs:
  proc create*(`from`: Vector3; to: Vector3; collisionMask: uint32 = 4294967295'u32; exclude: TypedArray[RID] = TypedArray|>init[RID]()): Ref[PhysicsRayQueryParameters3D] {.staticOf: PhysicsRayQueryParameters3D, loadfrom("create", 680321959).}
  proc `from=`*(self: Ref[PhysicsRayQueryParameters3D]; `from`: Vector3) {.loadfrom("set_from", 3460891852).}
  proc `from`*(self: Ref[PhysicsRayQueryParameters3D]): Vector3 {.loadfrom("get_from", 3360562783).}
  proc `to=`*(self: Ref[PhysicsRayQueryParameters3D]; to: Vector3) {.loadfrom("set_to", 3460891852).}
  proc to*(self: Ref[PhysicsRayQueryParameters3D]): Vector3 {.loadfrom("get_to", 3360562783).}
  proc `collisionMask=`*(self: Ref[PhysicsRayQueryParameters3D]; collisionMask: uint32) {.loadfrom("set_collision_mask", 1286410249).}
  proc collisionMask*(self: Ref[PhysicsRayQueryParameters3D]): uint32 {.loadfrom("get_collision_mask", 3905245786).}
  proc `exclude=`*(self: Ref[PhysicsRayQueryParameters3D]; exclude: TypedArray[RID]) {.loadfrom("set_exclude", 381264803).}
  proc exclude*(self: Ref[PhysicsRayQueryParameters3D]): TypedArray[RID] {.loadfrom("get_exclude", 3995934104).}
  proc `collideWithBodies=`*(self: Ref[PhysicsRayQueryParameters3D]; enable: Bool) {.loadfrom("set_collide_with_bodies", 2586408642).}
  proc isCollideWithBodiesEnabled*(self: Ref[PhysicsRayQueryParameters3D]): Bool {.loadfrom("is_collide_with_bodies_enabled", 36873697).}
  proc `collideWithAreas=`*(self: Ref[PhysicsRayQueryParameters3D]; enable: Bool) {.loadfrom("set_collide_with_areas", 2586408642).}
  proc isCollideWithAreasEnabled*(self: Ref[PhysicsRayQueryParameters3D]): Bool {.loadfrom("is_collide_with_areas_enabled", 36873697).}
  proc `hitFromInside=`*(self: Ref[PhysicsRayQueryParameters3D]; enable: Bool) {.loadfrom("set_hit_from_inside", 2586408642).}
  proc isHitFromInsideEnabled*(self: Ref[PhysicsRayQueryParameters3D]): Bool {.loadfrom("is_hit_from_inside_enabled", 36873697).}
  proc `hitBackFaces=`*(self: Ref[PhysicsRayQueryParameters3D]; enable: Bool) {.loadfrom("set_hit_back_faces", 2586408642).}
  proc isHitBackFacesEnabled*(self: Ref[PhysicsRayQueryParameters3D]): Bool {.loadfrom("is_hit_back_faces_enabled", 36873697).}

# PhysicsShapeQueryParameters2D
define_godot_engine_class_essencials(PhysicsShapeQueryParameters2D, RefCounted)
PhysicsShapeQueryParameters2D.memberProcs:
  proc `shape=`*(self: Ref[PhysicsShapeQueryParameters2D]; shape: Ref[Resource]) {.loadfrom("set_shape", 968641751).}
  proc shape*(self: Ref[PhysicsShapeQueryParameters2D]): Ref[Resource] {.loadfrom("get_shape", 121922552).}
  proc `shapeRid=`*(self: Ref[PhysicsShapeQueryParameters2D]; shape: RID) {.loadfrom("set_shape_rid", 2722037293).}
  proc shapeRid*(self: Ref[PhysicsShapeQueryParameters2D]): RID {.loadfrom("get_shape_rid", 2944877500).}
  proc `transform=`*(self: Ref[PhysicsShapeQueryParameters2D]; transform: Transform2D) {.loadfrom("set_transform", 2761652528).}
  proc transform*(self: Ref[PhysicsShapeQueryParameters2D]): Transform2D {.loadfrom("get_transform", 3814499831).}
  proc `motion=`*(self: Ref[PhysicsShapeQueryParameters2D]; motion: Vector2) {.loadfrom("set_motion", 743155724).}
  proc motion*(self: Ref[PhysicsShapeQueryParameters2D]): Vector2 {.loadfrom("get_motion", 3341600327).}
  proc `margin=`*(self: Ref[PhysicsShapeQueryParameters2D]; margin: Float) {.loadfrom("set_margin", 373806689).}
  proc margin*(self: Ref[PhysicsShapeQueryParameters2D]): Float {.loadfrom("get_margin", 1740695150).}
  proc `collisionMask=`*(self: Ref[PhysicsShapeQueryParameters2D]; collisionMask: uint32) {.loadfrom("set_collision_mask", 1286410249).}
  proc collisionMask*(self: Ref[PhysicsShapeQueryParameters2D]): uint32 {.loadfrom("get_collision_mask", 3905245786).}
  proc `exclude=`*(self: Ref[PhysicsShapeQueryParameters2D]; exclude: TypedArray[RID]) {.loadfrom("set_exclude", 381264803).}
  proc exclude*(self: Ref[PhysicsShapeQueryParameters2D]): TypedArray[RID] {.loadfrom("get_exclude", 3995934104).}
  proc `collideWithBodies=`*(self: Ref[PhysicsShapeQueryParameters2D]; enable: Bool) {.loadfrom("set_collide_with_bodies", 2586408642).}
  proc isCollideWithBodiesEnabled*(self: Ref[PhysicsShapeQueryParameters2D]): Bool {.loadfrom("is_collide_with_bodies_enabled", 36873697).}
  proc `collideWithAreas=`*(self: Ref[PhysicsShapeQueryParameters2D]; enable: Bool) {.loadfrom("set_collide_with_areas", 2586408642).}
  proc isCollideWithAreasEnabled*(self: Ref[PhysicsShapeQueryParameters2D]): Bool {.loadfrom("is_collide_with_areas_enabled", 36873697).}

# PhysicsShapeQueryParameters3D
define_godot_engine_class_essencials(PhysicsShapeQueryParameters3D, RefCounted)
PhysicsShapeQueryParameters3D.memberProcs:
  proc `shape=`*(self: Ref[PhysicsShapeQueryParameters3D]; shape: Ref[Resource]) {.loadfrom("set_shape", 968641751).}
  proc shape*(self: Ref[PhysicsShapeQueryParameters3D]): Ref[Resource] {.loadfrom("get_shape", 121922552).}
  proc `shapeRid=`*(self: Ref[PhysicsShapeQueryParameters3D]; shape: RID) {.loadfrom("set_shape_rid", 2722037293).}
  proc shapeRid*(self: Ref[PhysicsShapeQueryParameters3D]): RID {.loadfrom("get_shape_rid", 2944877500).}
  proc `transform=`*(self: Ref[PhysicsShapeQueryParameters3D]; transform: Transform3D) {.loadfrom("set_transform", 2952846383).}
  proc transform*(self: Ref[PhysicsShapeQueryParameters3D]): Transform3D {.loadfrom("get_transform", 3229777777).}
  proc `motion=`*(self: Ref[PhysicsShapeQueryParameters3D]; motion: Vector3) {.loadfrom("set_motion", 3460891852).}
  proc motion*(self: Ref[PhysicsShapeQueryParameters3D]): Vector3 {.loadfrom("get_motion", 3360562783).}
  proc `margin=`*(self: Ref[PhysicsShapeQueryParameters3D]; margin: Float) {.loadfrom("set_margin", 373806689).}
  proc margin*(self: Ref[PhysicsShapeQueryParameters3D]): Float {.loadfrom("get_margin", 1740695150).}
  proc `collisionMask=`*(self: Ref[PhysicsShapeQueryParameters3D]; collisionMask: uint32) {.loadfrom("set_collision_mask", 1286410249).}
  proc collisionMask*(self: Ref[PhysicsShapeQueryParameters3D]): uint32 {.loadfrom("get_collision_mask", 3905245786).}
  proc `exclude=`*(self: Ref[PhysicsShapeQueryParameters3D]; exclude: TypedArray[RID]) {.loadfrom("set_exclude", 381264803).}
  proc exclude*(self: Ref[PhysicsShapeQueryParameters3D]): TypedArray[RID] {.loadfrom("get_exclude", 3995934104).}
  proc `collideWithBodies=`*(self: Ref[PhysicsShapeQueryParameters3D]; enable: Bool) {.loadfrom("set_collide_with_bodies", 2586408642).}
  proc isCollideWithBodiesEnabled*(self: Ref[PhysicsShapeQueryParameters3D]): Bool {.loadfrom("is_collide_with_bodies_enabled", 36873697).}
  proc `collideWithAreas=`*(self: Ref[PhysicsShapeQueryParameters3D]; enable: Bool) {.loadfrom("set_collide_with_areas", 2586408642).}
  proc isCollideWithAreasEnabled*(self: Ref[PhysicsShapeQueryParameters3D]): Bool {.loadfrom("is_collide_with_areas_enabled", 36873697).}

# PhysicsTestMotionParameters2D
define_godot_engine_class_essencials(PhysicsTestMotionParameters2D, RefCounted)
PhysicsTestMotionParameters2D.memberProcs:
  proc `from`*(self: Ref[PhysicsTestMotionParameters2D]): Transform2D {.loadfrom("get_from", 3814499831).}
  proc `from=`*(self: Ref[PhysicsTestMotionParameters2D]; `from`: Transform2D) {.loadfrom("set_from", 2761652528).}
  proc motion*(self: Ref[PhysicsTestMotionParameters2D]): Vector2 {.loadfrom("get_motion", 3341600327).}
  proc `motion=`*(self: Ref[PhysicsTestMotionParameters2D]; motion: Vector2) {.loadfrom("set_motion", 743155724).}
  proc margin*(self: Ref[PhysicsTestMotionParameters2D]): Float {.loadfrom("get_margin", 1740695150).}
  proc `margin=`*(self: Ref[PhysicsTestMotionParameters2D]; margin: Float) {.loadfrom("set_margin", 373806689).}
  proc isCollideSeparationRayEnabled*(self: Ref[PhysicsTestMotionParameters2D]): Bool {.loadfrom("is_collide_separation_ray_enabled", 36873697).}
  proc `collideSeparationRayEnabled=`*(self: Ref[PhysicsTestMotionParameters2D]; enabled: Bool) {.loadfrom("set_collide_separation_ray_enabled", 2586408642).}
  proc excludeBodies*(self: Ref[PhysicsTestMotionParameters2D]): TypedArray[RID] {.loadfrom("get_exclude_bodies", 3995934104).}
  proc `excludeBodies=`*(self: Ref[PhysicsTestMotionParameters2D]; excludeList: TypedArray[RID]) {.loadfrom("set_exclude_bodies", 381264803).}
  proc excludeObjects*(self: Ref[PhysicsTestMotionParameters2D]): TypedArray[Int] {.loadfrom("get_exclude_objects", 3995934104).}
  proc `excludeObjects=`*(self: Ref[PhysicsTestMotionParameters2D]; excludeList: TypedArray[Int]) {.loadfrom("set_exclude_objects", 381264803).}
  proc isRecoveryAsCollisionEnabled*(self: Ref[PhysicsTestMotionParameters2D]): Bool {.loadfrom("is_recovery_as_collision_enabled", 36873697).}
  proc `recoveryAsCollisionEnabled=`*(self: Ref[PhysicsTestMotionParameters2D]; enabled: Bool) {.loadfrom("set_recovery_as_collision_enabled", 2586408642).}

# PhysicsTestMotionParameters3D
define_godot_engine_class_essencials(PhysicsTestMotionParameters3D, RefCounted)
PhysicsTestMotionParameters3D.memberProcs:
  proc `from`*(self: Ref[PhysicsTestMotionParameters3D]): Transform3D {.loadfrom("get_from", 3229777777).}
  proc `from=`*(self: Ref[PhysicsTestMotionParameters3D]; `from`: Transform3D) {.loadfrom("set_from", 2952846383).}
  proc motion*(self: Ref[PhysicsTestMotionParameters3D]): Vector3 {.loadfrom("get_motion", 3360562783).}
  proc `motion=`*(self: Ref[PhysicsTestMotionParameters3D]; motion: Vector3) {.loadfrom("set_motion", 3460891852).}
  proc margin*(self: Ref[PhysicsTestMotionParameters3D]): Float {.loadfrom("get_margin", 1740695150).}
  proc `margin=`*(self: Ref[PhysicsTestMotionParameters3D]; margin: Float) {.loadfrom("set_margin", 373806689).}
  proc maxCollisions*(self: Ref[PhysicsTestMotionParameters3D]): int32 {.loadfrom("get_max_collisions", 3905245786).}
  proc `maxCollisions=`*(self: Ref[PhysicsTestMotionParameters3D]; maxCollisions: int32) {.loadfrom("set_max_collisions", 1286410249).}
  proc isCollideSeparationRayEnabled*(self: Ref[PhysicsTestMotionParameters3D]): Bool {.loadfrom("is_collide_separation_ray_enabled", 36873697).}
  proc `collideSeparationRayEnabled=`*(self: Ref[PhysicsTestMotionParameters3D]; enabled: Bool) {.loadfrom("set_collide_separation_ray_enabled", 2586408642).}
  proc excludeBodies*(self: Ref[PhysicsTestMotionParameters3D]): TypedArray[RID] {.loadfrom("get_exclude_bodies", 3995934104).}
  proc `excludeBodies=`*(self: Ref[PhysicsTestMotionParameters3D]; excludeList: TypedArray[RID]) {.loadfrom("set_exclude_bodies", 381264803).}
  proc excludeObjects*(self: Ref[PhysicsTestMotionParameters3D]): TypedArray[Int] {.loadfrom("get_exclude_objects", 3995934104).}
  proc `excludeObjects=`*(self: Ref[PhysicsTestMotionParameters3D]; excludeList: TypedArray[Int]) {.loadfrom("set_exclude_objects", 381264803).}
  proc isRecoveryAsCollisionEnabled*(self: Ref[PhysicsTestMotionParameters3D]): Bool {.loadfrom("is_recovery_as_collision_enabled", 36873697).}
  proc `recoveryAsCollisionEnabled=`*(self: Ref[PhysicsTestMotionParameters3D]; enabled: Bool) {.loadfrom("set_recovery_as_collision_enabled", 2586408642).}

# PhysicsTestMotionResult2D
define_godot_engine_class_essencials(PhysicsTestMotionResult2D, RefCounted)
PhysicsTestMotionResult2D.memberProcs:
  proc getTravel*(self: Ref[PhysicsTestMotionResult2D]): Vector2 {.loadfrom("get_travel", 3341600327).}
  proc getRemainder*(self: Ref[PhysicsTestMotionResult2D]): Vector2 {.loadfrom("get_remainder", 3341600327).}
  proc getCollisionPoint*(self: Ref[PhysicsTestMotionResult2D]): Vector2 {.loadfrom("get_collision_point", 3341600327).}
  proc getCollisionNormal*(self: Ref[PhysicsTestMotionResult2D]): Vector2 {.loadfrom("get_collision_normal", 3341600327).}
  proc getColliderVelocity*(self: Ref[PhysicsTestMotionResult2D]): Vector2 {.loadfrom("get_collider_velocity", 3341600327).}
  proc getColliderId*(self: Ref[PhysicsTestMotionResult2D]): uint64 {.loadfrom("get_collider_id", 3905245786).}
  proc getColliderRid*(self: Ref[PhysicsTestMotionResult2D]): RID {.loadfrom("get_collider_rid", 2944877500).}
  proc getCollider*(self: Ref[PhysicsTestMotionResult2D]): Object {.loadfrom("get_collider", 1981248198).}
  proc getColliderShape*(self: Ref[PhysicsTestMotionResult2D]): int32 {.loadfrom("get_collider_shape", 3905245786).}
  proc getCollisionLocalShape*(self: Ref[PhysicsTestMotionResult2D]): int32 {.loadfrom("get_collision_local_shape", 3905245786).}
  proc getCollisionDepth*(self: Ref[PhysicsTestMotionResult2D]): Float {.loadfrom("get_collision_depth", 1740695150).}
  proc getCollisionSafeFraction*(self: Ref[PhysicsTestMotionResult2D]): Float {.loadfrom("get_collision_safe_fraction", 1740695150).}
  proc getCollisionUnsafeFraction*(self: Ref[PhysicsTestMotionResult2D]): Float {.loadfrom("get_collision_unsafe_fraction", 1740695150).}

# PhysicsTestMotionResult3D
define_godot_engine_class_essencials(PhysicsTestMotionResult3D, RefCounted)
PhysicsTestMotionResult3D.memberProcs:
  proc getTravel*(self: Ref[PhysicsTestMotionResult3D]): Vector3 {.loadfrom("get_travel", 3360562783).}
  proc getRemainder*(self: Ref[PhysicsTestMotionResult3D]): Vector3 {.loadfrom("get_remainder", 3360562783).}
  proc getCollisionSafeFraction*(self: Ref[PhysicsTestMotionResult3D]): Float {.loadfrom("get_collision_safe_fraction", 1740695150).}
  proc getCollisionUnsafeFraction*(self: Ref[PhysicsTestMotionResult3D]): Float {.loadfrom("get_collision_unsafe_fraction", 1740695150).}
  proc getCollisionCount*(self: Ref[PhysicsTestMotionResult3D]): int32 {.loadfrom("get_collision_count", 3905245786).}
  proc getCollisionPoint*(self: Ref[PhysicsTestMotionResult3D]; collisionIndex: int32 = 0): Vector3 {.loadfrom("get_collision_point", 1914908202).}
  proc getCollisionNormal*(self: Ref[PhysicsTestMotionResult3D]; collisionIndex: int32 = 0): Vector3 {.loadfrom("get_collision_normal", 1914908202).}
  proc getColliderVelocity*(self: Ref[PhysicsTestMotionResult3D]; collisionIndex: int32 = 0): Vector3 {.loadfrom("get_collider_velocity", 1914908202).}
  proc getColliderId*(self: Ref[PhysicsTestMotionResult3D]; collisionIndex: int32 = 0): uint64 {.loadfrom("get_collider_id", 1591665591).}
  proc getColliderRid*(self: Ref[PhysicsTestMotionResult3D]; collisionIndex: int32 = 0): RID {.loadfrom("get_collider_rid", 1231817359).}
  proc getCollider*(self: Ref[PhysicsTestMotionResult3D]; collisionIndex: int32 = 0): Object {.loadfrom("get_collider", 2639523548).}
  proc getColliderShape*(self: Ref[PhysicsTestMotionResult3D]; collisionIndex: int32 = 0): int32 {.loadfrom("get_collider_shape", 1591665591).}
  proc getCollisionLocalShape*(self: Ref[PhysicsTestMotionResult3D]; collisionIndex: int32 = 0): int32 {.loadfrom("get_collision_local_shape", 1591665591).}
  proc getCollisionDepth*(self: Ref[PhysicsTestMotionResult3D]; collisionIndex: int32 = 0): Float {.loadfrom("get_collision_depth", 218038398).}

# RDAttachmentFormat
define_godot_engine_class_essencials(RDAttachmentFormat, RefCounted)
RDAttachmentFormat.memberProcs:
  proc `format=`*(self: Ref[RDAttachmentFormat]; pMember: RenderingDevice|>DataFormat) {.loadfrom("set_format", 565531219).}
  proc format*(self: Ref[RDAttachmentFormat]): RenderingDevice|>DataFormat {.loadfrom("get_format", 2235804183).}
  proc `samples=`*(self: Ref[RDAttachmentFormat]; pMember: RenderingDevice|>TextureSamples) {.loadfrom("set_samples", 3774171498).}
  proc samples*(self: Ref[RDAttachmentFormat]): RenderingDevice|>TextureSamples {.loadfrom("get_samples", 407791724).}
  proc `usageFlags=`*(self: Ref[RDAttachmentFormat]; pMember: uint32) {.loadfrom("set_usage_flags", 1286410249).}
  proc usageFlags*(self: Ref[RDAttachmentFormat]): uint32 {.loadfrom("get_usage_flags", 3905245786).}

# RDFramebufferPass
define_godot_engine_class_essencials(RDFramebufferPass, RefCounted)
RDFramebufferPass.memberProcs:
  proc `colorAttachments=`*(self: Ref[RDFramebufferPass]; pMember: PackedInt32Array) {.loadfrom("set_color_attachments", 3614634198).}
  proc colorAttachments*(self: Ref[RDFramebufferPass]): PackedInt32Array {.loadfrom("get_color_attachments", 1930428628).}
  proc `inputAttachments=`*(self: Ref[RDFramebufferPass]; pMember: PackedInt32Array) {.loadfrom("set_input_attachments", 3614634198).}
  proc inputAttachments*(self: Ref[RDFramebufferPass]): PackedInt32Array {.loadfrom("get_input_attachments", 1930428628).}
  proc `resolveAttachments=`*(self: Ref[RDFramebufferPass]; pMember: PackedInt32Array) {.loadfrom("set_resolve_attachments", 3614634198).}
  proc resolveAttachments*(self: Ref[RDFramebufferPass]): PackedInt32Array {.loadfrom("get_resolve_attachments", 1930428628).}
  proc `preserveAttachments=`*(self: Ref[RDFramebufferPass]; pMember: PackedInt32Array) {.loadfrom("set_preserve_attachments", 3614634198).}
  proc preserveAttachments*(self: Ref[RDFramebufferPass]): PackedInt32Array {.loadfrom("get_preserve_attachments", 1930428628).}
  proc `depthAttachment=`*(self: Ref[RDFramebufferPass]; pMember: int32) {.loadfrom("set_depth_attachment", 1286410249).}
  proc depthAttachment*(self: Ref[RDFramebufferPass]): int32 {.loadfrom("get_depth_attachment", 3905245786).}

# RDPipelineColorBlendState
define_godot_engine_class_essencials(RDPipelineColorBlendState, RefCounted)
RDPipelineColorBlendState.memberProcs:
  proc `enableLogicOp=`*(self: Ref[RDPipelineColorBlendState]; pMember: Bool) {.loadfrom("set_enable_logic_op", 2586408642).}
  proc enableLogicOp*(self: Ref[RDPipelineColorBlendState]): Bool {.loadfrom("get_enable_logic_op", 36873697).}
  proc `logicOp=`*(self: Ref[RDPipelineColorBlendState]; pMember: RenderingDevice|>LogicOperation) {.loadfrom("set_logic_op", 3610841058).}
  proc logicOp*(self: Ref[RDPipelineColorBlendState]): RenderingDevice|>LogicOperation {.loadfrom("get_logic_op", 988254690).}
  proc `blendConstant=`*(self: Ref[RDPipelineColorBlendState]; pMember: Color) {.loadfrom("set_blend_constant", 2920490490).}
  proc blendConstant*(self: Ref[RDPipelineColorBlendState]): Color {.loadfrom("get_blend_constant", 3444240500).}
  proc `attachments=`*(self: Ref[RDPipelineColorBlendState]; attachments: TypedArray[RDPipelineColorBlendStateAttachment]) {.loadfrom("set_attachments", 381264803).}
  proc attachments*(self: Ref[RDPipelineColorBlendState]): TypedArray[RDPipelineColorBlendStateAttachment] {.loadfrom("get_attachments", 3995934104).}

# RDPipelineColorBlendStateAttachment
define_godot_engine_class_essencials(RDPipelineColorBlendStateAttachment, RefCounted)
RDPipelineColorBlendStateAttachment.memberProcs:
  proc setAsMix*(self: Ref[RDPipelineColorBlendStateAttachment]) {.loadfrom("set_as_mix", 3218959716).}
  proc `enableBlend=`*(self: Ref[RDPipelineColorBlendStateAttachment]; pMember: Bool) {.loadfrom("set_enable_blend", 2586408642).}
  proc enableBlend*(self: Ref[RDPipelineColorBlendStateAttachment]): Bool {.loadfrom("get_enable_blend", 36873697).}
  proc `srcColorBlendFactor=`*(self: Ref[RDPipelineColorBlendStateAttachment]; pMember: RenderingDevice|>BlendFactor) {.loadfrom("set_src_color_blend_factor", 2251019273).}
  proc srcColorBlendFactor*(self: Ref[RDPipelineColorBlendStateAttachment]): RenderingDevice|>BlendFactor {.loadfrom("get_src_color_blend_factor", 3691288359).}
  proc `dstColorBlendFactor=`*(self: Ref[RDPipelineColorBlendStateAttachment]; pMember: RenderingDevice|>BlendFactor) {.loadfrom("set_dst_color_blend_factor", 2251019273).}
  proc dstColorBlendFactor*(self: Ref[RDPipelineColorBlendStateAttachment]): RenderingDevice|>BlendFactor {.loadfrom("get_dst_color_blend_factor", 3691288359).}
  proc `colorBlendOp=`*(self: Ref[RDPipelineColorBlendStateAttachment]; pMember: RenderingDevice|>BlendOperation) {.loadfrom("set_color_blend_op", 3073022720).}
  proc colorBlendOp*(self: Ref[RDPipelineColorBlendStateAttachment]): RenderingDevice|>BlendOperation {.loadfrom("get_color_blend_op", 1385093561).}
  proc `srcAlphaBlendFactor=`*(self: Ref[RDPipelineColorBlendStateAttachment]; pMember: RenderingDevice|>BlendFactor) {.loadfrom("set_src_alpha_blend_factor", 2251019273).}
  proc srcAlphaBlendFactor*(self: Ref[RDPipelineColorBlendStateAttachment]): RenderingDevice|>BlendFactor {.loadfrom("get_src_alpha_blend_factor", 3691288359).}
  proc `dstAlphaBlendFactor=`*(self: Ref[RDPipelineColorBlendStateAttachment]; pMember: RenderingDevice|>BlendFactor) {.loadfrom("set_dst_alpha_blend_factor", 2251019273).}
  proc dstAlphaBlendFactor*(self: Ref[RDPipelineColorBlendStateAttachment]): RenderingDevice|>BlendFactor {.loadfrom("get_dst_alpha_blend_factor", 3691288359).}
  proc `alphaBlendOp=`*(self: Ref[RDPipelineColorBlendStateAttachment]; pMember: RenderingDevice|>BlendOperation) {.loadfrom("set_alpha_blend_op", 3073022720).}
  proc alphaBlendOp*(self: Ref[RDPipelineColorBlendStateAttachment]): RenderingDevice|>BlendOperation {.loadfrom("get_alpha_blend_op", 1385093561).}
  proc `writeR=`*(self: Ref[RDPipelineColorBlendStateAttachment]; pMember: Bool) {.loadfrom("set_write_r", 2586408642).}
  proc writeR*(self: Ref[RDPipelineColorBlendStateAttachment]): Bool {.loadfrom("get_write_r", 36873697).}
  proc `writeG=`*(self: Ref[RDPipelineColorBlendStateAttachment]; pMember: Bool) {.loadfrom("set_write_g", 2586408642).}
  proc writeG*(self: Ref[RDPipelineColorBlendStateAttachment]): Bool {.loadfrom("get_write_g", 36873697).}
  proc `writeB=`*(self: Ref[RDPipelineColorBlendStateAttachment]; pMember: Bool) {.loadfrom("set_write_b", 2586408642).}
  proc writeB*(self: Ref[RDPipelineColorBlendStateAttachment]): Bool {.loadfrom("get_write_b", 36873697).}
  proc `writeA=`*(self: Ref[RDPipelineColorBlendStateAttachment]; pMember: Bool) {.loadfrom("set_write_a", 2586408642).}
  proc writeA*(self: Ref[RDPipelineColorBlendStateAttachment]): Bool {.loadfrom("get_write_a", 36873697).}

# RDPipelineDepthStencilState
define_godot_engine_class_essencials(RDPipelineDepthStencilState, RefCounted)
RDPipelineDepthStencilState.memberProcs:
  proc `enableDepthTest=`*(self: Ref[RDPipelineDepthStencilState]; pMember: Bool) {.loadfrom("set_enable_depth_test", 2586408642).}
  proc enableDepthTest*(self: Ref[RDPipelineDepthStencilState]): Bool {.loadfrom("get_enable_depth_test", 36873697).}
  proc `enableDepthWrite=`*(self: Ref[RDPipelineDepthStencilState]; pMember: Bool) {.loadfrom("set_enable_depth_write", 2586408642).}
  proc enableDepthWrite*(self: Ref[RDPipelineDepthStencilState]): Bool {.loadfrom("get_enable_depth_write", 36873697).}
  proc `depthCompareOperator=`*(self: Ref[RDPipelineDepthStencilState]; pMember: RenderingDevice|>CompareOperator) {.loadfrom("set_depth_compare_operator", 2573711505).}
  proc depthCompareOperator*(self: Ref[RDPipelineDepthStencilState]): RenderingDevice|>CompareOperator {.loadfrom("get_depth_compare_operator", 269730778).}
  proc `enableDepthRange=`*(self: Ref[RDPipelineDepthStencilState]; pMember: Bool) {.loadfrom("set_enable_depth_range", 2586408642).}
  proc enableDepthRange*(self: Ref[RDPipelineDepthStencilState]): Bool {.loadfrom("get_enable_depth_range", 36873697).}
  proc `depthRangeMin=`*(self: Ref[RDPipelineDepthStencilState]; pMember: Float) {.loadfrom("set_depth_range_min", 373806689).}
  proc depthRangeMin*(self: Ref[RDPipelineDepthStencilState]): Float {.loadfrom("get_depth_range_min", 1740695150).}
  proc `depthRangeMax=`*(self: Ref[RDPipelineDepthStencilState]; pMember: Float) {.loadfrom("set_depth_range_max", 373806689).}
  proc depthRangeMax*(self: Ref[RDPipelineDepthStencilState]): Float {.loadfrom("get_depth_range_max", 1740695150).}
  proc `enableStencil=`*(self: Ref[RDPipelineDepthStencilState]; pMember: Bool) {.loadfrom("set_enable_stencil", 2586408642).}
  proc enableStencil*(self: Ref[RDPipelineDepthStencilState]): Bool {.loadfrom("get_enable_stencil", 36873697).}
  proc `frontOpFail=`*(self: Ref[RDPipelineDepthStencilState]; pMember: RenderingDevice|>StencilOperation) {.loadfrom("set_front_op_fail", 2092799566).}
  proc frontOpFail*(self: Ref[RDPipelineDepthStencilState]): RenderingDevice|>StencilOperation {.loadfrom("get_front_op_fail", 1714732389).}
  proc `frontOpPass=`*(self: Ref[RDPipelineDepthStencilState]; pMember: RenderingDevice|>StencilOperation) {.loadfrom("set_front_op_pass", 2092799566).}
  proc frontOpPass*(self: Ref[RDPipelineDepthStencilState]): RenderingDevice|>StencilOperation {.loadfrom("get_front_op_pass", 1714732389).}
  proc `frontOpDepthFail=`*(self: Ref[RDPipelineDepthStencilState]; pMember: RenderingDevice|>StencilOperation) {.loadfrom("set_front_op_depth_fail", 2092799566).}
  proc frontOpDepthFail*(self: Ref[RDPipelineDepthStencilState]): RenderingDevice|>StencilOperation {.loadfrom("get_front_op_depth_fail", 1714732389).}
  proc `frontOpCompare=`*(self: Ref[RDPipelineDepthStencilState]; pMember: RenderingDevice|>CompareOperator) {.loadfrom("set_front_op_compare", 2573711505).}
  proc frontOpCompare*(self: Ref[RDPipelineDepthStencilState]): RenderingDevice|>CompareOperator {.loadfrom("get_front_op_compare", 269730778).}
  proc `frontOpCompareMask=`*(self: Ref[RDPipelineDepthStencilState]; pMember: uint32) {.loadfrom("set_front_op_compare_mask", 1286410249).}
  proc frontOpCompareMask*(self: Ref[RDPipelineDepthStencilState]): uint32 {.loadfrom("get_front_op_compare_mask", 3905245786).}
  proc `frontOpWriteMask=`*(self: Ref[RDPipelineDepthStencilState]; pMember: uint32) {.loadfrom("set_front_op_write_mask", 1286410249).}
  proc frontOpWriteMask*(self: Ref[RDPipelineDepthStencilState]): uint32 {.loadfrom("get_front_op_write_mask", 3905245786).}
  proc `frontOpReference=`*(self: Ref[RDPipelineDepthStencilState]; pMember: uint32) {.loadfrom("set_front_op_reference", 1286410249).}
  proc frontOpReference*(self: Ref[RDPipelineDepthStencilState]): uint32 {.loadfrom("get_front_op_reference", 3905245786).}
  proc `backOpFail=`*(self: Ref[RDPipelineDepthStencilState]; pMember: RenderingDevice|>StencilOperation) {.loadfrom("set_back_op_fail", 2092799566).}
  proc backOpFail*(self: Ref[RDPipelineDepthStencilState]): RenderingDevice|>StencilOperation {.loadfrom("get_back_op_fail", 1714732389).}
  proc `backOpPass=`*(self: Ref[RDPipelineDepthStencilState]; pMember: RenderingDevice|>StencilOperation) {.loadfrom("set_back_op_pass", 2092799566).}
  proc backOpPass*(self: Ref[RDPipelineDepthStencilState]): RenderingDevice|>StencilOperation {.loadfrom("get_back_op_pass", 1714732389).}
  proc `backOpDepthFail=`*(self: Ref[RDPipelineDepthStencilState]; pMember: RenderingDevice|>StencilOperation) {.loadfrom("set_back_op_depth_fail", 2092799566).}
  proc backOpDepthFail*(self: Ref[RDPipelineDepthStencilState]): RenderingDevice|>StencilOperation {.loadfrom("get_back_op_depth_fail", 1714732389).}
  proc `backOpCompare=`*(self: Ref[RDPipelineDepthStencilState]; pMember: RenderingDevice|>CompareOperator) {.loadfrom("set_back_op_compare", 2573711505).}
  proc backOpCompare*(self: Ref[RDPipelineDepthStencilState]): RenderingDevice|>CompareOperator {.loadfrom("get_back_op_compare", 269730778).}
  proc `backOpCompareMask=`*(self: Ref[RDPipelineDepthStencilState]; pMember: uint32) {.loadfrom("set_back_op_compare_mask", 1286410249).}
  proc backOpCompareMask*(self: Ref[RDPipelineDepthStencilState]): uint32 {.loadfrom("get_back_op_compare_mask", 3905245786).}
  proc `backOpWriteMask=`*(self: Ref[RDPipelineDepthStencilState]; pMember: uint32) {.loadfrom("set_back_op_write_mask", 1286410249).}
  proc backOpWriteMask*(self: Ref[RDPipelineDepthStencilState]): uint32 {.loadfrom("get_back_op_write_mask", 3905245786).}
  proc `backOpReference=`*(self: Ref[RDPipelineDepthStencilState]; pMember: uint32) {.loadfrom("set_back_op_reference", 1286410249).}
  proc backOpReference*(self: Ref[RDPipelineDepthStencilState]): uint32 {.loadfrom("get_back_op_reference", 3905245786).}

# RDPipelineMultisampleState
define_godot_engine_class_essencials(RDPipelineMultisampleState, RefCounted)
RDPipelineMultisampleState.memberProcs:
  proc `sampleCount=`*(self: Ref[RDPipelineMultisampleState]; pMember: RenderingDevice|>TextureSamples) {.loadfrom("set_sample_count", 3774171498).}
  proc sampleCount*(self: Ref[RDPipelineMultisampleState]): RenderingDevice|>TextureSamples {.loadfrom("get_sample_count", 407791724).}
  proc `enableSampleShading=`*(self: Ref[RDPipelineMultisampleState]; pMember: Bool) {.loadfrom("set_enable_sample_shading", 2586408642).}
  proc enableSampleShading*(self: Ref[RDPipelineMultisampleState]): Bool {.loadfrom("get_enable_sample_shading", 36873697).}
  proc `minSampleShading=`*(self: Ref[RDPipelineMultisampleState]; pMember: Float) {.loadfrom("set_min_sample_shading", 373806689).}
  proc minSampleShading*(self: Ref[RDPipelineMultisampleState]): Float {.loadfrom("get_min_sample_shading", 1740695150).}
  proc `enableAlphaToCoverage=`*(self: Ref[RDPipelineMultisampleState]; pMember: Bool) {.loadfrom("set_enable_alpha_to_coverage", 2586408642).}
  proc enableAlphaToCoverage*(self: Ref[RDPipelineMultisampleState]): Bool {.loadfrom("get_enable_alpha_to_coverage", 36873697).}
  proc `enableAlphaToOne=`*(self: Ref[RDPipelineMultisampleState]; pMember: Bool) {.loadfrom("set_enable_alpha_to_one", 2586408642).}
  proc enableAlphaToOne*(self: Ref[RDPipelineMultisampleState]): Bool {.loadfrom("get_enable_alpha_to_one", 36873697).}
  proc `sampleMasks=`*(self: Ref[RDPipelineMultisampleState]; masks: TypedArray[Int]) {.loadfrom("set_sample_masks", 381264803).}
  proc sampleMasks*(self: Ref[RDPipelineMultisampleState]): TypedArray[Int] {.loadfrom("get_sample_masks", 3995934104).}

# RDPipelineRasterizationState
define_godot_engine_class_essencials(RDPipelineRasterizationState, RefCounted)
RDPipelineRasterizationState.memberProcs:
  proc `enableDepthClamp=`*(self: Ref[RDPipelineRasterizationState]; pMember: Bool) {.loadfrom("set_enable_depth_clamp", 2586408642).}
  proc enableDepthClamp*(self: Ref[RDPipelineRasterizationState]): Bool {.loadfrom("get_enable_depth_clamp", 36873697).}
  proc `discardPrimitives=`*(self: Ref[RDPipelineRasterizationState]; pMember: Bool) {.loadfrom("set_discard_primitives", 2586408642).}
  proc discardPrimitives*(self: Ref[RDPipelineRasterizationState]): Bool {.loadfrom("get_discard_primitives", 36873697).}
  proc `wireframe=`*(self: Ref[RDPipelineRasterizationState]; pMember: Bool) {.loadfrom("set_wireframe", 2586408642).}
  proc wireframe*(self: Ref[RDPipelineRasterizationState]): Bool {.loadfrom("get_wireframe", 36873697).}
  proc `cullMode=`*(self: Ref[RDPipelineRasterizationState]; pMember: RenderingDevice|>PolygonCullMode) {.loadfrom("set_cull_mode", 2662586502).}
  proc cullMode*(self: Ref[RDPipelineRasterizationState]): RenderingDevice|>PolygonCullMode {.loadfrom("get_cull_mode", 2192484313).}
  proc `frontFace=`*(self: Ref[RDPipelineRasterizationState]; pMember: RenderingDevice|>PolygonFrontFace) {.loadfrom("set_front_face", 2637251213).}
  proc frontFace*(self: Ref[RDPipelineRasterizationState]): RenderingDevice|>PolygonFrontFace {.loadfrom("get_front_face", 708793786).}
  proc `depthBiasEnabled=`*(self: Ref[RDPipelineRasterizationState]; pMember: Bool) {.loadfrom("set_depth_bias_enabled", 2586408642).}
  proc depthBiasEnabled*(self: Ref[RDPipelineRasterizationState]): Bool {.loadfrom("get_depth_bias_enabled", 36873697).}
  proc `depthBiasConstantFactor=`*(self: Ref[RDPipelineRasterizationState]; pMember: Float) {.loadfrom("set_depth_bias_constant_factor", 373806689).}
  proc depthBiasConstantFactor*(self: Ref[RDPipelineRasterizationState]): Float {.loadfrom("get_depth_bias_constant_factor", 1740695150).}
  proc `depthBiasClamp=`*(self: Ref[RDPipelineRasterizationState]; pMember: Float) {.loadfrom("set_depth_bias_clamp", 373806689).}
  proc depthBiasClamp*(self: Ref[RDPipelineRasterizationState]): Float {.loadfrom("get_depth_bias_clamp", 1740695150).}
  proc `depthBiasSlopeFactor=`*(self: Ref[RDPipelineRasterizationState]; pMember: Float) {.loadfrom("set_depth_bias_slope_factor", 373806689).}
  proc depthBiasSlopeFactor*(self: Ref[RDPipelineRasterizationState]): Float {.loadfrom("get_depth_bias_slope_factor", 1740695150).}
  proc `lineWidth=`*(self: Ref[RDPipelineRasterizationState]; pMember: Float) {.loadfrom("set_line_width", 373806689).}
  proc lineWidth*(self: Ref[RDPipelineRasterizationState]): Float {.loadfrom("get_line_width", 1740695150).}
  proc `patchControlPoints=`*(self: Ref[RDPipelineRasterizationState]; pMember: uint32) {.loadfrom("set_patch_control_points", 1286410249).}
  proc patchControlPoints*(self: Ref[RDPipelineRasterizationState]): uint32 {.loadfrom("get_patch_control_points", 3905245786).}

# RDPipelineSpecializationConstant
define_godot_engine_class_essencials(RDPipelineSpecializationConstant, RefCounted)
RDPipelineSpecializationConstant.memberProcs:
  proc `value=`*(self: Ref[RDPipelineSpecializationConstant]; value: ptr Variant) {.loadfrom("set_value", 1114965689).}
  proc value*(self: Ref[RDPipelineSpecializationConstant]): Variant {.loadfrom("get_value", 1214101251).}
  proc `constantId=`*(self: Ref[RDPipelineSpecializationConstant]; constantId: uint32) {.loadfrom("set_constant_id", 1286410249).}
  proc constantId*(self: Ref[RDPipelineSpecializationConstant]): uint32 {.loadfrom("get_constant_id", 3905245786).}

# RDSamplerState
define_godot_engine_class_essencials(RDSamplerState, RefCounted)
RDSamplerState.memberProcs:
  proc `magFilter=`*(self: Ref[RDSamplerState]; pMember: RenderingDevice|>SamplerFilter) {.loadfrom("set_mag_filter", 1493420382).}
  proc magFilter*(self: Ref[RDSamplerState]): RenderingDevice|>SamplerFilter {.loadfrom("get_mag_filter", 2209202801).}
  proc `minFilter=`*(self: Ref[RDSamplerState]; pMember: RenderingDevice|>SamplerFilter) {.loadfrom("set_min_filter", 1493420382).}
  proc minFilter*(self: Ref[RDSamplerState]): RenderingDevice|>SamplerFilter {.loadfrom("get_min_filter", 2209202801).}
  proc `mipFilter=`*(self: Ref[RDSamplerState]; pMember: RenderingDevice|>SamplerFilter) {.loadfrom("set_mip_filter", 1493420382).}
  proc mipFilter*(self: Ref[RDSamplerState]): RenderingDevice|>SamplerFilter {.loadfrom("get_mip_filter", 2209202801).}
  proc `repeatU=`*(self: Ref[RDSamplerState]; pMember: RenderingDevice|>SamplerRepeatMode) {.loadfrom("set_repeat_u", 246127626).}
  proc repeatU*(self: Ref[RDSamplerState]): RenderingDevice|>SamplerRepeatMode {.loadfrom("get_repeat_u", 3227895872).}
  proc `repeatV=`*(self: Ref[RDSamplerState]; pMember: RenderingDevice|>SamplerRepeatMode) {.loadfrom("set_repeat_v", 246127626).}
  proc repeatV*(self: Ref[RDSamplerState]): RenderingDevice|>SamplerRepeatMode {.loadfrom("get_repeat_v", 3227895872).}
  proc `repeatW=`*(self: Ref[RDSamplerState]; pMember: RenderingDevice|>SamplerRepeatMode) {.loadfrom("set_repeat_w", 246127626).}
  proc repeatW*(self: Ref[RDSamplerState]): RenderingDevice|>SamplerRepeatMode {.loadfrom("get_repeat_w", 3227895872).}
  proc `lodBias=`*(self: Ref[RDSamplerState]; pMember: Float) {.loadfrom("set_lod_bias", 373806689).}
  proc lodBias*(self: Ref[RDSamplerState]): Float {.loadfrom("get_lod_bias", 1740695150).}
  proc `useAnisotropy=`*(self: Ref[RDSamplerState]; pMember: Bool) {.loadfrom("set_use_anisotropy", 2586408642).}
  proc useAnisotropy*(self: Ref[RDSamplerState]): Bool {.loadfrom("get_use_anisotropy", 36873697).}
  proc `anisotropyMax=`*(self: Ref[RDSamplerState]; pMember: Float) {.loadfrom("set_anisotropy_max", 373806689).}
  proc anisotropyMax*(self: Ref[RDSamplerState]): Float {.loadfrom("get_anisotropy_max", 1740695150).}
  proc `enableCompare=`*(self: Ref[RDSamplerState]; pMember: Bool) {.loadfrom("set_enable_compare", 2586408642).}
  proc enableCompare*(self: Ref[RDSamplerState]): Bool {.loadfrom("get_enable_compare", 36873697).}
  proc `compareOp=`*(self: Ref[RDSamplerState]; pMember: RenderingDevice|>CompareOperator) {.loadfrom("set_compare_op", 2573711505).}
  proc compareOp*(self: Ref[RDSamplerState]): RenderingDevice|>CompareOperator {.loadfrom("get_compare_op", 269730778).}
  proc `minLod=`*(self: Ref[RDSamplerState]; pMember: Float) {.loadfrom("set_min_lod", 373806689).}
  proc minLod*(self: Ref[RDSamplerState]): Float {.loadfrom("get_min_lod", 1740695150).}
  proc `maxLod=`*(self: Ref[RDSamplerState]; pMember: Float) {.loadfrom("set_max_lod", 373806689).}
  proc maxLod*(self: Ref[RDSamplerState]): Float {.loadfrom("get_max_lod", 1740695150).}
  proc `borderColor=`*(self: Ref[RDSamplerState]; pMember: RenderingDevice|>SamplerBorderColor) {.loadfrom("set_border_color", 1115869595).}
  proc borderColor*(self: Ref[RDSamplerState]): RenderingDevice|>SamplerBorderColor {.loadfrom("get_border_color", 3514246478).}
  proc `unnormalizedUvw=`*(self: Ref[RDSamplerState]; pMember: Bool) {.loadfrom("set_unnormalized_uvw", 2586408642).}
  proc unnormalizedUvw*(self: Ref[RDSamplerState]): Bool {.loadfrom("get_unnormalized_uvw", 36873697).}

# RDShaderSource
define_godot_engine_class_essencials(RDShaderSource, RefCounted)
RDShaderSource.memberProcs:
  proc `stageSource=`*(self: Ref[RDShaderSource]; stage: RenderingDevice|>ShaderStage; source: String) {.loadfrom("set_stage_source", 620821314).}
  proc stageSource*(self: Ref[RDShaderSource]; stage: RenderingDevice|>ShaderStage): String {.loadfrom("get_stage_source", 3354920045).}
  proc `language=`*(self: Ref[RDShaderSource]; language: RenderingDevice|>ShaderLanguage) {.loadfrom("set_language", 3422186742).}
  proc language*(self: Ref[RDShaderSource]): RenderingDevice|>ShaderLanguage {.loadfrom("get_language", 1063538261).}

# RDTextureFormat
define_godot_engine_class_essencials(RDTextureFormat, RefCounted)
RDTextureFormat.memberProcs:
  proc `format=`*(self: Ref[RDTextureFormat]; pMember: RenderingDevice|>DataFormat) {.loadfrom("set_format", 565531219).}
  proc format*(self: Ref[RDTextureFormat]): RenderingDevice|>DataFormat {.loadfrom("get_format", 2235804183).}
  proc `width=`*(self: Ref[RDTextureFormat]; pMember: uint32) {.loadfrom("set_width", 1286410249).}
  proc width*(self: Ref[RDTextureFormat]): uint32 {.loadfrom("get_width", 3905245786).}
  proc `height=`*(self: Ref[RDTextureFormat]; pMember: uint32) {.loadfrom("set_height", 1286410249).}
  proc height*(self: Ref[RDTextureFormat]): uint32 {.loadfrom("get_height", 3905245786).}
  proc `depth=`*(self: Ref[RDTextureFormat]; pMember: uint32) {.loadfrom("set_depth", 1286410249).}
  proc depth*(self: Ref[RDTextureFormat]): uint32 {.loadfrom("get_depth", 3905245786).}
  proc `arrayLayers=`*(self: Ref[RDTextureFormat]; pMember: uint32) {.loadfrom("set_array_layers", 1286410249).}
  proc arrayLayers*(self: Ref[RDTextureFormat]): uint32 {.loadfrom("get_array_layers", 3905245786).}
  proc `mipmaps=`*(self: Ref[RDTextureFormat]; pMember: uint32) {.loadfrom("set_mipmaps", 1286410249).}
  proc mipmaps*(self: Ref[RDTextureFormat]): uint32 {.loadfrom("get_mipmaps", 3905245786).}
  proc `textureType=`*(self: Ref[RDTextureFormat]; pMember: RenderingDevice|>TextureType) {.loadfrom("set_texture_type", 652343381).}
  proc textureType*(self: Ref[RDTextureFormat]): RenderingDevice|>TextureType {.loadfrom("get_texture_type", 4036357416).}
  proc `samples=`*(self: Ref[RDTextureFormat]; pMember: RenderingDevice|>TextureSamples) {.loadfrom("set_samples", 3774171498).}
  proc samples*(self: Ref[RDTextureFormat]): RenderingDevice|>TextureSamples {.loadfrom("get_samples", 407791724).}
  proc `usageBits=`*(self: Ref[RDTextureFormat]; pMember: set[RenderingDevice|>TextureUsageBits]) {.loadfrom("set_usage_bits", 245642367).}
  proc usageBits*(self: Ref[RDTextureFormat]): set[RenderingDevice|>TextureUsageBits] {.loadfrom("get_usage_bits", 1313398998).}
  proc addShareableFormat*(self: Ref[RDTextureFormat]; format: RenderingDevice|>DataFormat) {.loadfrom("add_shareable_format", 565531219).}
  proc removeShareableFormat*(self: Ref[RDTextureFormat]; format: RenderingDevice|>DataFormat) {.loadfrom("remove_shareable_format", 565531219).}

# RDTextureView
define_godot_engine_class_essencials(RDTextureView, RefCounted)
RDTextureView.memberProcs:
  proc `formatOverride=`*(self: Ref[RDTextureView]; pMember: RenderingDevice|>DataFormat) {.loadfrom("set_format_override", 565531219).}
  proc formatOverride*(self: Ref[RDTextureView]): RenderingDevice|>DataFormat {.loadfrom("get_format_override", 2235804183).}
  proc `swizzleR=`*(self: Ref[RDTextureView]; pMember: RenderingDevice|>TextureSwizzle) {.loadfrom("set_swizzle_r", 3833362581).}
  proc swizzleR*(self: Ref[RDTextureView]): RenderingDevice|>TextureSwizzle {.loadfrom("get_swizzle_r", 4150792614).}
  proc `swizzleG=`*(self: Ref[RDTextureView]; pMember: RenderingDevice|>TextureSwizzle) {.loadfrom("set_swizzle_g", 3833362581).}
  proc swizzleG*(self: Ref[RDTextureView]): RenderingDevice|>TextureSwizzle {.loadfrom("get_swizzle_g", 4150792614).}
  proc `swizzleB=`*(self: Ref[RDTextureView]; pMember: RenderingDevice|>TextureSwizzle) {.loadfrom("set_swizzle_b", 3833362581).}
  proc swizzleB*(self: Ref[RDTextureView]): RenderingDevice|>TextureSwizzle {.loadfrom("get_swizzle_b", 4150792614).}
  proc `swizzleA=`*(self: Ref[RDTextureView]; pMember: RenderingDevice|>TextureSwizzle) {.loadfrom("set_swizzle_a", 3833362581).}
  proc swizzleA*(self: Ref[RDTextureView]): RenderingDevice|>TextureSwizzle {.loadfrom("get_swizzle_a", 4150792614).}

# RDUniform
define_godot_engine_class_essencials(RDUniform, RefCounted)
RDUniform.memberProcs:
  proc `uniformType=`*(self: Ref[RDUniform]; pMember: RenderingDevice|>UniformType) {.loadfrom("set_uniform_type", 1664894931).}
  proc uniformType*(self: Ref[RDUniform]): RenderingDevice|>UniformType {.loadfrom("get_uniform_type", 475470040).}
  proc `binding=`*(self: Ref[RDUniform]; pMember: int32) {.loadfrom("set_binding", 1286410249).}
  proc binding*(self: Ref[RDUniform]): int32 {.loadfrom("get_binding", 3905245786).}
  proc addId*(self: Ref[RDUniform]; id: RID) {.loadfrom("add_id", 2722037293).}
  proc clearIds*(self: Ref[RDUniform]) {.loadfrom("clear_ids", 3218959716).}
  proc getIds*(self: Ref[RDUniform]): TypedArray[RID] {.loadfrom("get_ids", 3995934104).}

# RDVertexAttribute
define_godot_engine_class_essencials(RDVertexAttribute, RefCounted)
RDVertexAttribute.memberProcs:
  proc `location=`*(self: Ref[RDVertexAttribute]; pMember: uint32) {.loadfrom("set_location", 1286410249).}
  proc location*(self: Ref[RDVertexAttribute]): uint32 {.loadfrom("get_location", 3905245786).}
  proc `offset=`*(self: Ref[RDVertexAttribute]; pMember: uint32) {.loadfrom("set_offset", 1286410249).}
  proc offset*(self: Ref[RDVertexAttribute]): uint32 {.loadfrom("get_offset", 3905245786).}
  proc `format=`*(self: Ref[RDVertexAttribute]; pMember: RenderingDevice|>DataFormat) {.loadfrom("set_format", 565531219).}
  proc format*(self: Ref[RDVertexAttribute]): RenderingDevice|>DataFormat {.loadfrom("get_format", 2235804183).}
  proc `stride=`*(self: Ref[RDVertexAttribute]; pMember: uint32) {.loadfrom("set_stride", 1286410249).}
  proc stride*(self: Ref[RDVertexAttribute]): uint32 {.loadfrom("get_stride", 3905245786).}
  proc `frequency=`*(self: Ref[RDVertexAttribute]; pMember: RenderingDevice|>VertexFrequency) {.loadfrom("set_frequency", 522141836).}
  proc frequency*(self: Ref[RDVertexAttribute]): RenderingDevice|>VertexFrequency {.loadfrom("get_frequency", 4154106413).}

# RandomNumberGenerator
define_godot_engine_class_essencials(RandomNumberGenerator, RefCounted)
RandomNumberGenerator.memberProcs:
  proc `seed=`*(self: Ref[RandomNumberGenerator]; seed: uint64) {.loadfrom("set_seed", 1286410249).}
  proc seed*(self: Ref[RandomNumberGenerator]): uint64 {.loadfrom("get_seed", 2455072627).}
  proc `state=`*(self: Ref[RandomNumberGenerator]; state: uint64) {.loadfrom("set_state", 1286410249).}
  proc state*(self: Ref[RandomNumberGenerator]): uint64 {.loadfrom("get_state", 3905245786).}
  proc randi*(self: Ref[RandomNumberGenerator]): uint32 {.loadfrom("randi", 2455072627).}
  proc randf*(self: Ref[RandomNumberGenerator]): Float {.loadfrom("randf", 191475506).}
  proc randfn*(self: Ref[RandomNumberGenerator]; mean: Float = 0.0; deviation: Float = 1.0): Float {.loadfrom("randfn", 837325100).}
  proc randfRange*(self: Ref[RandomNumberGenerator]; `from`: Float; to: Float): Float {.loadfrom("randf_range", 4269894367).}
  proc randiRange*(self: Ref[RandomNumberGenerator]; `from`: int32; to: int32): int32 {.loadfrom("randi_range", 50157827).}
  proc randomize*(self: Ref[RandomNumberGenerator]) {.loadfrom("randomize", 3218959716).}

# RegEx
define_godot_engine_class_essencials(RegEx, RefCounted)
RegEx.memberProcs:
  proc createFromString*(pattern: String): Ref[RegEx] {.staticOf: RegEx, loadfrom("create_from_string", 2150300909).}
  proc clear*(self: Ref[RegEx]) {.loadfrom("clear", 3218959716).}
  proc compile*(self: Ref[RegEx]; pattern: String): Error {.loadfrom("compile", 166001499).}
  proc search*(self: Ref[RegEx]; subject: String; offset: int32 = 0; `end`: int32 = -1): Ref[RegExMatch] {.loadfrom("search", 4087180739).}
  proc searchAll*(self: Ref[RegEx]; subject: String; offset: int32 = 0; `end`: int32 = -1): TypedArray[RegExMatch] {.loadfrom("search_all", 3354100289).}
  proc sub*(self: Ref[RegEx]; subject: String; replacement: String; all: Bool = false; offset: int32 = 0; `end`: int32 = -1): String {.loadfrom("sub", 758293621).}
  proc isValid*(self: Ref[RegEx]): Bool {.loadfrom("is_valid", 36873697).}
  proc getPattern*(self: Ref[RegEx]): String {.loadfrom("get_pattern", 201670096).}
  proc getGroupCount*(self: Ref[RegEx]): int32 {.loadfrom("get_group_count", 3905245786).}
  proc getNames*(self: Ref[RegEx]): PackedStringArray {.loadfrom("get_names", 1139954409).}

# RegExMatch
define_godot_engine_class_essencials(RegExMatch, RefCounted)
RegExMatch.memberProcs:
  proc subject*(self: Ref[RegExMatch]): String {.loadfrom("get_subject", 201670096).}
  proc getGroupCount*(self: Ref[RegExMatch]): int32 {.loadfrom("get_group_count", 3905245786).}
  proc names*(self: Ref[RegExMatch]): Dictionary {.loadfrom("get_names", 3102165223).}
  proc strings*(self: Ref[RegExMatch]): PackedStringArray {.loadfrom("get_strings", 1139954409).}
  proc getString*(self: Ref[RegExMatch]; name: ptr Variant = nil): String {.loadfrom("get_string", 687115856).}
  proc getStart*(self: Ref[RegExMatch]; name: ptr Variant = nil): int32 {.loadfrom("get_start", 490464691).}
  proc getEnd*(self: Ref[RegExMatch]; name: ptr Variant = nil): int32 {.loadfrom("get_end", 490464691).}

# Resource
define_godot_engine_class_essencials(Resource, RefCounted)
Resource.memberProcs:
  proc `path=`*(self: Ref[Resource]; path: String) {.loadfrom("set_path", 83702148).}
  proc takeOverPath*(self: Ref[Resource]; path: String) {.loadfrom("take_over_path", 83702148).}
  proc path*(self: Ref[Resource]): String {.loadfrom("get_path", 201670096).}
  proc `name=`*(self: Ref[Resource]; name: String) {.loadfrom("set_name", 83702148).}
  proc name*(self: Ref[Resource]): String {.loadfrom("get_name", 201670096).}
  proc getRid*(self: Ref[Resource]): RID {.loadfrom("get_rid", 2944877500).}
  proc `localToScene=`*(self: Ref[Resource]; enable: Bool) {.loadfrom("set_local_to_scene", 2586408642).}
  proc isLocalToScene*(self: Ref[Resource]): Bool {.loadfrom("is_local_to_scene", 36873697).}
  proc getLocalScene*(self: Ref[Resource]): Node {.loadfrom("get_local_scene", 3160264692).}
  proc setupLocalToScene*(self: Ref[Resource]) {.loadfrom("setup_local_to_scene", 3218959716).}
  proc emitChanged*(self: Ref[Resource]) {.loadfrom("emit_changed", 3218959716).}
  proc duplicate*(self: Ref[Resource]; subresources: Bool = false): Ref[Resource] {.loadfrom("duplicate", 482882304).}

# ResourceFormatLoader
define_godot_engine_class_essencials(ResourceFormatLoader, RefCounted)
method getRecognizedExtensions*(self: Ref[ResourceFormatLoader]): PackedStringArray {.base.} = (discard)
method recognizePath*(self: Ref[ResourceFormatLoader]; path: String; `type`: StringName): Bool {.base.} = (discard)
method handlesType*(self: Ref[ResourceFormatLoader]; `type`: StringName): Bool {.base.} = (discard)
method getResourceType*(self: Ref[ResourceFormatLoader]; path: String): String {.base.} = (discard)
method getResourceScriptClass*(self: Ref[ResourceFormatLoader]; path: String): String {.base.} = (discard)
method getResourceUid*(self: Ref[ResourceFormatLoader]; path: String): int64 {.base.} = (discard)
method getDependencies*(self: Ref[ResourceFormatLoader]; path: String; addTypes: Bool): PackedStringArray {.base.} = (discard)
method renameDependencies*(self: Ref[ResourceFormatLoader]; path: String; renames: Dictionary): Error {.base.} = (discard)
method exists*(self: Ref[ResourceFormatLoader]; path: String): Bool {.base.} = (discard)
method getClassesUsed*(self: Ref[ResourceFormatLoader]; path: String): PackedStringArray {.base.} = (discard)
method load*(self: Ref[ResourceFormatLoader]; path: String; originalPath: String; useSubThreads: Bool; cacheMode: int32): Variant {.base.} = (discard)

# ResourceFormatSaver
define_godot_engine_class_essencials(ResourceFormatSaver, RefCounted)
method save*(self: Ref[ResourceFormatSaver]; resource: Ref[Resource]; path: String; flags: uint32): Error {.base.} = (discard)
method setUid*(self: Ref[ResourceFormatSaver]; path: String; uid: int64): Error {.base.} = (discard)
method recognize*(self: Ref[ResourceFormatSaver]; resource: Ref[Resource]): Bool {.base.} = (discard)
method getRecognizedExtensions*(self: Ref[ResourceFormatSaver]; resource: Ref[Resource]): PackedStringArray {.base.} = (discard)
method recognizePath*(self: Ref[ResourceFormatSaver]; resource: Ref[Resource]; path: String): Bool {.base.} = (discard)

# ResourceImporter
define_godot_engine_class_essencials(ResourceImporter, RefCounted)

# SceneState
define_godot_engine_class_essencials(SceneState, RefCounted)
SceneState.memberProcs:
  proc getNodeCount*(self: Ref[SceneState]): int32 {.loadfrom("get_node_count", 3905245786).}
  proc getNodeType*(self: Ref[SceneState]; idx: int32): StringName {.loadfrom("get_node_type", 659327637).}
  proc getNodeName*(self: Ref[SceneState]; idx: int32): StringName {.loadfrom("get_node_name", 659327637).}
  proc getNodePath*(self: Ref[SceneState]; idx: int32; forParent: Bool = false): NodePath {.loadfrom("get_node_path", 2272487792).}
  proc getNodeOwnerPath*(self: Ref[SceneState]; idx: int32): NodePath {.loadfrom("get_node_owner_path", 408788394).}
  proc isNodeInstancePlaceholder*(self: Ref[SceneState]; idx: int32): Bool {.loadfrom("is_node_instance_placeholder", 1116898809).}
  proc getNodeInstancePlaceholder*(self: Ref[SceneState]; idx: int32): String {.loadfrom("get_node_instance_placeholder", 844755477).}
  proc getNodeInstance*(self: Ref[SceneState]; idx: int32): Ref[PackedScene] {.loadfrom("get_node_instance", 511017218).}
  proc getNodeGroups*(self: Ref[SceneState]; idx: int32): PackedStringArray {.loadfrom("get_node_groups", 647634434).}
  proc getNodeIndex*(self: Ref[SceneState]; idx: int32): int32 {.loadfrom("get_node_index", 923996154).}
  proc getNodePropertyCount*(self: Ref[SceneState]; idx: int32): int32 {.loadfrom("get_node_property_count", 923996154).}
  proc getNodePropertyName*(self: Ref[SceneState]; idx: int32; propIdx: int32): StringName {.loadfrom("get_node_property_name", 351665558).}
  proc getNodePropertyValue*(self: Ref[SceneState]; idx: int32; propIdx: int32): Variant {.loadfrom("get_node_property_value", 678354945).}
  proc getConnectionCount*(self: Ref[SceneState]): int32 {.loadfrom("get_connection_count", 3905245786).}
  proc getConnectionSource*(self: Ref[SceneState]; idx: int32): NodePath {.loadfrom("get_connection_source", 408788394).}
  proc getConnectionSignal*(self: Ref[SceneState]; idx: int32): StringName {.loadfrom("get_connection_signal", 659327637).}
  proc getConnectionTarget*(self: Ref[SceneState]; idx: int32): NodePath {.loadfrom("get_connection_target", 408788394).}
  proc getConnectionMethod*(self: Ref[SceneState]; idx: int32): StringName {.loadfrom("get_connection_method", 659327637).}
  proc getConnectionFlags*(self: Ref[SceneState]; idx: int32): int32 {.loadfrom("get_connection_flags", 923996154).}
  proc getConnectionBinds*(self: Ref[SceneState]; idx: int32): Array {.loadfrom("get_connection_binds", 663333327).}
  proc getConnectionUnbinds*(self: Ref[SceneState]; idx: int32): int32 {.loadfrom("get_connection_unbinds", 923996154).}

# SceneTreeTimer
define_godot_engine_class_essencials(SceneTreeTimer, RefCounted)
SceneTreeTimer.memberProcs:
  proc `timeLeft=`*(self: Ref[SceneTreeTimer]; time: float64) {.loadfrom("set_time_left", 373806689).}
  proc timeLeft*(self: Ref[SceneTreeTimer]): float64 {.loadfrom("get_time_left", 1740695150).}

# Semaphore
define_godot_engine_class_essencials(Semaphore, RefCounted)
Semaphore.memberProcs:
  proc wait*(self: Ref[Semaphore]) {.loadfrom("wait", 3218959716).}
  proc tryWait*(self: Ref[Semaphore]): Bool {.loadfrom("try_wait", 2240911060).}
  proc post*(self: Ref[Semaphore]) {.loadfrom("post", 3218959716).}

# SkinReference
define_godot_engine_class_essencials(SkinReference, RefCounted)
SkinReference.memberProcs:
  proc getSkeleton*(self: Ref[SkinReference]): RID {.loadfrom("get_skeleton", 2944877500).}
  proc getSkin*(self: Ref[SkinReference]): Ref[Skin] {.loadfrom("get_skin", 2074563878).}

# StreamPeer
define_godot_engine_class_essencials(StreamPeer, RefCounted)
StreamPeer.memberProcs:
  proc putData*(self: Ref[StreamPeer]; data: PackedByteArray): Error {.loadfrom("put_data", 680677267).}
  proc putPartialData*(self: Ref[StreamPeer]; data: PackedByteArray): Array {.loadfrom("put_partial_data", 2934048347).}
  proc getData*(self: Ref[StreamPeer]; bytes: int32): Array {.loadfrom("get_data", 1171824711).}
  proc getPartialData*(self: Ref[StreamPeer]; bytes: int32): Array {.loadfrom("get_partial_data", 1171824711).}
  proc getAvailableBytes*(self: Ref[StreamPeer]): int32 {.loadfrom("get_available_bytes", 3905245786).}
  proc `bigEndian=`*(self: Ref[StreamPeer]; enable: Bool) {.loadfrom("set_big_endian", 2586408642).}
  proc isBigEndianEnabled*(self: Ref[StreamPeer]): Bool {.loadfrom("is_big_endian_enabled", 36873697).}
  proc put8*(self: Ref[StreamPeer]; value: int8) {.loadfrom("put_8", 1286410249).}
  proc putU8*(self: Ref[StreamPeer]; value: uint8) {.loadfrom("put_u8", 1286410249).}
  proc put16*(self: Ref[StreamPeer]; value: int16) {.loadfrom("put_16", 1286410249).}
  proc putU16*(self: Ref[StreamPeer]; value: uint16) {.loadfrom("put_u16", 1286410249).}
  proc put32*(self: Ref[StreamPeer]; value: int32) {.loadfrom("put_32", 1286410249).}
  proc putU32*(self: Ref[StreamPeer]; value: uint32) {.loadfrom("put_u32", 1286410249).}
  proc put64*(self: Ref[StreamPeer]; value: int64) {.loadfrom("put_64", 1286410249).}
  proc putU64*(self: Ref[StreamPeer]; value: uint64) {.loadfrom("put_u64", 1286410249).}
  proc putFloat*(self: Ref[StreamPeer]; value: Float) {.loadfrom("put_float", 373806689).}
  proc putDouble*(self: Ref[StreamPeer]; value: float64) {.loadfrom("put_double", 373806689).}
  proc putString*(self: Ref[StreamPeer]; value: String) {.loadfrom("put_string", 83702148).}
  proc putUtf8String*(self: Ref[StreamPeer]; value: String) {.loadfrom("put_utf8_string", 83702148).}
  proc putVar*(self: Ref[StreamPeer]; value: ptr Variant; fullObjects: Bool = false) {.loadfrom("put_var", 738511890).}
  proc get8*(self: Ref[StreamPeer]): int8 {.loadfrom("get_8", 2455072627).}
  proc getU8*(self: Ref[StreamPeer]): uint8 {.loadfrom("get_u8", 2455072627).}
  proc get16*(self: Ref[StreamPeer]): int16 {.loadfrom("get_16", 2455072627).}
  proc getU16*(self: Ref[StreamPeer]): uint16 {.loadfrom("get_u16", 2455072627).}
  proc get32*(self: Ref[StreamPeer]): int32 {.loadfrom("get_32", 2455072627).}
  proc getU32*(self: Ref[StreamPeer]): uint32 {.loadfrom("get_u32", 2455072627).}
  proc get64*(self: Ref[StreamPeer]): int64 {.loadfrom("get_64", 2455072627).}
  proc getU64*(self: Ref[StreamPeer]): uint64 {.loadfrom("get_u64", 2455072627).}
  proc getFloat*(self: Ref[StreamPeer]): Float {.loadfrom("get_float", 191475506).}
  proc getDouble*(self: Ref[StreamPeer]): float64 {.loadfrom("get_double", 191475506).}
  proc getString*(self: Ref[StreamPeer]; bytes: int32 = -1): String {.loadfrom("get_string", 2309358862).}
  proc getUtf8String*(self: Ref[StreamPeer]; bytes: int32 = -1): String {.loadfrom("get_utf8_string", 2309358862).}
  proc getVar*(self: Ref[StreamPeer]; allowObjects: Bool = false): Variant {.loadfrom("get_var", 3442865206).}

# SurfaceTool
define_godot_engine_class_essencials(SurfaceTool, RefCounted)
SurfaceTool.memberProcs:
  proc setSkinWeightCount*(self: Ref[SurfaceTool]; count: SurfaceTool|>SkinWeightCount) {.loadfrom("set_skin_weight_count", 618679515).}
  proc getSkinWeightCount*(self: Ref[SurfaceTool]): SurfaceTool|>SkinWeightCount {.loadfrom("get_skin_weight_count", 1072401130).}
  proc setCustomFormat*(self: Ref[SurfaceTool]; channelIndex: int32; format: SurfaceTool|>CustomFormat) {.loadfrom("set_custom_format", 4087759856).}
  proc getCustomFormat*(self: Ref[SurfaceTool]; channelIndex: int32): SurfaceTool|>CustomFormat {.loadfrom("get_custom_format", 839863283).}
  proc begin*(self: Ref[SurfaceTool]; primitive: Mesh|>PrimitiveType) {.loadfrom("begin", 2230304113).}
  proc addVertex*(self: Ref[SurfaceTool]; vertex: Vector3) {.loadfrom("add_vertex", 3460891852).}
  proc setColor*(self: Ref[SurfaceTool]; color: Color) {.loadfrom("set_color", 2920490490).}
  proc setNormal*(self: Ref[SurfaceTool]; normal: Vector3) {.loadfrom("set_normal", 3460891852).}
  proc setTangent*(self: Ref[SurfaceTool]; tangent: Plane) {.loadfrom("set_tangent", 3505987427).}
  proc setUv*(self: Ref[SurfaceTool]; uv: Vector2) {.loadfrom("set_uv", 743155724).}
  proc setUv2*(self: Ref[SurfaceTool]; uv2: Vector2) {.loadfrom("set_uv2", 743155724).}
  proc setBones*(self: Ref[SurfaceTool]; bones: PackedInt32Array) {.loadfrom("set_bones", 3614634198).}
  proc setWeights*(self: Ref[SurfaceTool]; weights: PackedFloat32Array) {.loadfrom("set_weights", 2899603908).}
  proc setCustom*(self: Ref[SurfaceTool]; channelIndex: int32; customColor: Color) {.loadfrom("set_custom", 2878471219).}
  proc setSmoothGroup*(self: Ref[SurfaceTool]; index: uint32) {.loadfrom("set_smooth_group", 1286410249).}
  proc addTriangleFan*(self: Ref[SurfaceTool]; vertices: PackedVector3Array; uvs: PackedVector2Array = PackedVector2Array(); colors: PackedColorArray = PackedColorArray(); uv2s: PackedVector2Array = PackedVector2Array(); normals: PackedVector3Array = PackedVector3Array(); tangents: TypedArray[Plane] = TypedArray|>init[Plane]()) {.loadfrom("add_triangle_fan", 297960074).}
  proc addIndex*(self: Ref[SurfaceTool]; index: int32) {.loadfrom("add_index", 1286410249).}
  proc index*(self: Ref[SurfaceTool]) {.loadfrom("index", 3218959716).}
  proc deindex*(self: Ref[SurfaceTool]) {.loadfrom("deindex", 3218959716).}
  proc generateNormals*(self: Ref[SurfaceTool]; flip: Bool = false) {.loadfrom("generate_normals", 107499316).}
  proc generateTangents*(self: Ref[SurfaceTool]) {.loadfrom("generate_tangents", 3218959716).}
  proc optimizeIndicesForCache*(self: Ref[SurfaceTool]) {.loadfrom("optimize_indices_for_cache", 3218959716).}
  proc getAabb*(self: Ref[SurfaceTool]): AABB {.loadfrom("get_aabb", 1068685055).}
  proc generateLod*(self: Ref[SurfaceTool]; ndThreshold: Float; targetIndexCount: int32 = 3): PackedInt32Array {.loadfrom("generate_lod", 1894448909).}
  proc setMaterial*(self: Ref[SurfaceTool]; material: Ref[Material]) {.loadfrom("set_material", 2757459619).}
  proc getPrimitiveType*(self: Ref[SurfaceTool]): Mesh|>PrimitiveType {.loadfrom("get_primitive_type", 768822145).}
  proc clear*(self: Ref[SurfaceTool]) {.loadfrom("clear", 3218959716).}
  proc createFrom*(self: Ref[SurfaceTool]; existing: Ref[Mesh]; surface: int32) {.loadfrom("create_from", 1767024570).}
  proc createFromBlendShape*(self: Ref[SurfaceTool]; existing: Ref[Mesh]; surface: int32; blendShape: String) {.loadfrom("create_from_blend_shape", 1306185582).}
  proc appendFrom*(self: Ref[SurfaceTool]; existing: Ref[Mesh]; surface: int32; transform: Transform3D) {.loadfrom("append_from", 2217967155).}
  proc commit*(self: Ref[SurfaceTool]; existing: Ref[ArrayMesh] = default Ref[ArrayMesh]; flags: uint32 = 0'u32): Ref[ArrayMesh] {.loadfrom("commit", 4107864055).}
  proc commitToArrays*(self: Ref[SurfaceTool]): Array {.loadfrom("commit_to_arrays", 2915620761).}

# TCPServer
define_godot_engine_class_essencials(TCPServer, RefCounted)
TCPServer.memberProcs:
  proc listen*(self: Ref[TCPServer]; port: uint16; bindAddress: String = "*"): Error {.loadfrom("listen", 4025329869).}
  proc isConnectionAvailable*(self: Ref[TCPServer]): Bool {.loadfrom("is_connection_available", 36873697).}
  proc isListening*(self: Ref[TCPServer]): Bool {.loadfrom("is_listening", 36873697).}
  proc getLocalPort*(self: Ref[TCPServer]): int32 {.loadfrom("get_local_port", 3905245786).}
  proc takeConnection*(self: Ref[TCPServer]): Ref[StreamPeerTCP] {.loadfrom("take_connection", 30545006).}
  proc stop*(self: Ref[TCPServer]) {.loadfrom("stop", 3218959716).}

# TLSOptions
define_godot_engine_class_essencials(TLSOptions, RefCounted)
TLSOptions.memberProcs:
  proc client*(trustedChain: Ref[X509Certificate] = default Ref[X509Certificate]; commonNameOverride: String = ""): Ref[TLSOptions] {.staticOf: TLSOptions, loadfrom("client", 3565000357).}
  proc clientUnsafe*(trustedChain: Ref[X509Certificate] = default Ref[X509Certificate]): Ref[TLSOptions] {.staticOf: TLSOptions, loadfrom("client_unsafe", 2090251749).}
  proc server*(key: Ref[CryptoKey]; certificate: Ref[X509Certificate]): Ref[TLSOptions] {.staticOf: TLSOptions, loadfrom("server", 36969539).}

# TextLine
define_godot_engine_class_essencials(TextLine, RefCounted)
TextLine.memberProcs:
  proc clear*(self: Ref[TextLine]) {.loadfrom("clear", 3218959716).}
  proc `direction=`*(self: Ref[TextLine]; direction: TextServer|>Direction) {.loadfrom("set_direction", 1418190634).}
  proc direction*(self: Ref[TextLine]): TextServer|>Direction {.loadfrom("get_direction", 2516697328).}
  proc `orientation=`*(self: Ref[TextLine]; orientation: TextServer|>Orientation) {.loadfrom("set_orientation", 42823726).}
  proc orientation*(self: Ref[TextLine]): TextServer|>Orientation {.loadfrom("get_orientation", 175768116).}
  proc `preserveInvalid=`*(self: Ref[TextLine]; enabled: Bool) {.loadfrom("set_preserve_invalid", 2586408642).}
  proc preserveInvalid*(self: Ref[TextLine]): Bool {.loadfrom("get_preserve_invalid", 36873697).}
  proc `preserveControl=`*(self: Ref[TextLine]; enabled: Bool) {.loadfrom("set_preserve_control", 2586408642).}
  proc preserveControl*(self: Ref[TextLine]): Bool {.loadfrom("get_preserve_control", 36873697).}
  proc setBidiOverride*(self: Ref[TextLine]; override: Array) {.loadfrom("set_bidi_override", 381264803).}
  proc addString*(self: Ref[TextLine]; text: String; font: Ref[Font]; fontSize: int32; language: String = ""; meta: ptr Variant = nil): Bool {.loadfrom("add_string", 867188035).}
  proc addObject*(self: Ref[TextLine]; key: ptr Variant; size: Vector2; inlineAlign: InlineAlignment = inlineAlignmentCenter; length: int32 = 1; baseline: Float = 0.0): Bool {.loadfrom("add_object", 735420116).}
  proc resizeObject*(self: Ref[TextLine]; key: ptr Variant; size: Vector2; inlineAlign: InlineAlignment = inlineAlignmentCenter; baseline: Float = 0.0): Bool {.loadfrom("resize_object", 960819067).}
  proc `width=`*(self: Ref[TextLine]; width: Float) {.loadfrom("set_width", 373806689).}
  proc width*(self: Ref[TextLine]): Float {.loadfrom("get_width", 1740695150).}
  proc `horizontalAlignment=`*(self: Ref[TextLine]; alignment: HorizontalAlignment) {.loadfrom("set_horizontal_alignment", 2312603777).}
  proc horizontalAlignment*(self: Ref[TextLine]): HorizontalAlignment {.loadfrom("get_horizontal_alignment", 341400642).}
  proc tabAlign*(self: Ref[TextLine]; tabStops: PackedFloat32Array) {.loadfrom("tab_align", 2899603908).}
  proc `flags=`*(self: Ref[TextLine]; flags: set[TextServer|>JustificationFlag]) {.loadfrom("set_flags", 2877345813).}
  proc flags*(self: Ref[TextLine]): set[TextServer|>JustificationFlag] {.loadfrom("get_flags", 1583363614).}
  proc `textOverrunBehavior=`*(self: Ref[TextLine]; overrunBehavior: TextServer|>OverrunBehavior) {.loadfrom("set_text_overrun_behavior", 1008890932).}
  proc textOverrunBehavior*(self: Ref[TextLine]): TextServer|>OverrunBehavior {.loadfrom("get_text_overrun_behavior", 3779142101).}
  proc getObjects*(self: Ref[TextLine]): Array {.loadfrom("get_objects", 3995934104).}
  proc getObjectRect*(self: Ref[TextLine]; key: ptr Variant): Rect2 {.loadfrom("get_object_rect", 1742700391).}
  proc getSize*(self: Ref[TextLine]): Vector2 {.loadfrom("get_size", 3341600327).}
  proc getRid*(self: Ref[TextLine]): RID {.loadfrom("get_rid", 2944877500).}
  proc getLineAscent*(self: Ref[TextLine]): Float {.loadfrom("get_line_ascent", 1740695150).}
  proc getLineDescent*(self: Ref[TextLine]): Float {.loadfrom("get_line_descent", 1740695150).}
  proc getLineWidth*(self: Ref[TextLine]): Float {.loadfrom("get_line_width", 1740695150).}
  proc getLineUnderlinePosition*(self: Ref[TextLine]): Float {.loadfrom("get_line_underline_position", 1740695150).}
  proc getLineUnderlineThickness*(self: Ref[TextLine]): Float {.loadfrom("get_line_underline_thickness", 1740695150).}
  proc draw*(self: Ref[TextLine]; canvas: RID; pos: Vector2; color: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("draw", 1164457837).}
  proc drawOutline*(self: Ref[TextLine]; canvas: RID; pos: Vector2; outlineSize: int32 = 1; color: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("draw_outline", 1364491366).}
  proc hitTest*(self: Ref[TextLine]; coords: Float): int32 {.loadfrom("hit_test", 2401831903).}

# TextParagraph
define_godot_engine_class_essencials(TextParagraph, RefCounted)
TextParagraph.memberProcs:
  proc clear*(self: Ref[TextParagraph]) {.loadfrom("clear", 3218959716).}
  proc `direction=`*(self: Ref[TextParagraph]; direction: TextServer|>Direction) {.loadfrom("set_direction", 1418190634).}
  proc direction*(self: Ref[TextParagraph]): TextServer|>Direction {.loadfrom("get_direction", 2516697328).}
  proc `customPunctuation=`*(self: Ref[TextParagraph]; customPunctuation: String) {.loadfrom("set_custom_punctuation", 83702148).}
  proc customPunctuation*(self: Ref[TextParagraph]): String {.loadfrom("get_custom_punctuation", 201670096).}
  proc `orientation=`*(self: Ref[TextParagraph]; orientation: TextServer|>Orientation) {.loadfrom("set_orientation", 42823726).}
  proc orientation*(self: Ref[TextParagraph]): TextServer|>Orientation {.loadfrom("get_orientation", 175768116).}
  proc `preserveInvalid=`*(self: Ref[TextParagraph]; enabled: Bool) {.loadfrom("set_preserve_invalid", 2586408642).}
  proc preserveInvalid*(self: Ref[TextParagraph]): Bool {.loadfrom("get_preserve_invalid", 36873697).}
  proc `preserveControl=`*(self: Ref[TextParagraph]; enabled: Bool) {.loadfrom("set_preserve_control", 2586408642).}
  proc preserveControl*(self: Ref[TextParagraph]): Bool {.loadfrom("get_preserve_control", 36873697).}
  proc setBidiOverride*(self: Ref[TextParagraph]; override: Array) {.loadfrom("set_bidi_override", 381264803).}
  proc setDropcap*(self: Ref[TextParagraph]; text: String; font: Ref[Font]; fontSize: int32; dropcapMargins: Rect2 = Rect2|>init(0, 0, 0, 0); language: String = ""): Bool {.loadfrom("set_dropcap", 2613124475).}
  proc clearDropcap*(self: Ref[TextParagraph]) {.loadfrom("clear_dropcap", 3218959716).}
  proc addString*(self: Ref[TextParagraph]; text: String; font: Ref[Font]; fontSize: int32; language: String = ""; meta: ptr Variant = nil): Bool {.loadfrom("add_string", 867188035).}
  proc addObject*(self: Ref[TextParagraph]; key: ptr Variant; size: Vector2; inlineAlign: InlineAlignment = inlineAlignmentCenter; length: int32 = 1; baseline: Float = 0.0): Bool {.loadfrom("add_object", 735420116).}
  proc resizeObject*(self: Ref[TextParagraph]; key: ptr Variant; size: Vector2; inlineAlign: InlineAlignment = inlineAlignmentCenter; baseline: Float = 0.0): Bool {.loadfrom("resize_object", 960819067).}
  proc `alignment=`*(self: Ref[TextParagraph]; alignment: HorizontalAlignment) {.loadfrom("set_alignment", 2312603777).}
  proc alignment*(self: Ref[TextParagraph]): HorizontalAlignment {.loadfrom("get_alignment", 341400642).}
  proc tabAlign*(self: Ref[TextParagraph]; tabStops: PackedFloat32Array) {.loadfrom("tab_align", 2899603908).}
  proc `breakFlags=`*(self: Ref[TextParagraph]; flags: set[TextServer|>LineBreakFlag]) {.loadfrom("set_break_flags", 2809697122).}
  proc breakFlags*(self: Ref[TextParagraph]): set[TextServer|>LineBreakFlag] {.loadfrom("get_break_flags", 2340632602).}
  proc `justificationFlags=`*(self: Ref[TextParagraph]; flags: set[TextServer|>JustificationFlag]) {.loadfrom("set_justification_flags", 2877345813).}
  proc justificationFlags*(self: Ref[TextParagraph]): set[TextServer|>JustificationFlag] {.loadfrom("get_justification_flags", 1583363614).}
  proc `textOverrunBehavior=`*(self: Ref[TextParagraph]; overrunBehavior: TextServer|>OverrunBehavior) {.loadfrom("set_text_overrun_behavior", 1008890932).}
  proc textOverrunBehavior*(self: Ref[TextParagraph]): TextServer|>OverrunBehavior {.loadfrom("get_text_overrun_behavior", 3779142101).}
  proc `width=`*(self: Ref[TextParagraph]; width: Float) {.loadfrom("set_width", 373806689).}
  proc width*(self: Ref[TextParagraph]): Float {.loadfrom("get_width", 1740695150).}
  proc getNonWrappedSize*(self: Ref[TextParagraph]): Vector2 {.loadfrom("get_non_wrapped_size", 3341600327).}
  proc getSize*(self: Ref[TextParagraph]): Vector2 {.loadfrom("get_size", 3341600327).}
  proc getRid*(self: Ref[TextParagraph]): RID {.loadfrom("get_rid", 2944877500).}
  proc getLineRid*(self: Ref[TextParagraph]; line: int32): RID {.loadfrom("get_line_rid", 495598643).}
  proc getDropcapRid*(self: Ref[TextParagraph]): RID {.loadfrom("get_dropcap_rid", 2944877500).}
  proc getLineCount*(self: Ref[TextParagraph]): int32 {.loadfrom("get_line_count", 3905245786).}
  proc `maxLinesVisible=`*(self: Ref[TextParagraph]; maxLinesVisible: int32) {.loadfrom("set_max_lines_visible", 1286410249).}
  proc maxLinesVisible*(self: Ref[TextParagraph]): int32 {.loadfrom("get_max_lines_visible", 3905245786).}
  proc getLineObjects*(self: Ref[TextParagraph]; line: int32): Array {.loadfrom("get_line_objects", 663333327).}
  proc getLineObjectRect*(self: Ref[TextParagraph]; line: int32; key: ptr Variant): Rect2 {.loadfrom("get_line_object_rect", 204315017).}
  proc getLineSize*(self: Ref[TextParagraph]; line: int32): Vector2 {.loadfrom("get_line_size", 2299179447).}
  proc getLineRange*(self: Ref[TextParagraph]; line: int32): Vector2i {.loadfrom("get_line_range", 880721226).}
  proc getLineAscent*(self: Ref[TextParagraph]; line: int32): Float {.loadfrom("get_line_ascent", 2339986948).}
  proc getLineDescent*(self: Ref[TextParagraph]; line: int32): Float {.loadfrom("get_line_descent", 2339986948).}
  proc getLineWidth*(self: Ref[TextParagraph]; line: int32): Float {.loadfrom("get_line_width", 2339986948).}
  proc getLineUnderlinePosition*(self: Ref[TextParagraph]; line: int32): Float {.loadfrom("get_line_underline_position", 2339986948).}
  proc getLineUnderlineThickness*(self: Ref[TextParagraph]; line: int32): Float {.loadfrom("get_line_underline_thickness", 2339986948).}
  proc getDropcapSize*(self: Ref[TextParagraph]): Vector2 {.loadfrom("get_dropcap_size", 3341600327).}
  proc getDropcapLines*(self: Ref[TextParagraph]): int32 {.loadfrom("get_dropcap_lines", 3905245786).}
  proc draw*(self: Ref[TextParagraph]; canvas: RID; pos: Vector2; color: Color = Color|>init(1, 1, 1, 1); dcColor: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("draw", 367324453).}
  proc drawOutline*(self: Ref[TextParagraph]; canvas: RID; pos: Vector2; outlineSize: int32 = 1; color: Color = Color|>init(1, 1, 1, 1); dcColor: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("draw_outline", 2159523405).}
  proc drawLine*(self: Ref[TextParagraph]; canvas: RID; pos: Vector2; line: int32; color: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("draw_line", 3963848920).}
  proc drawLineOutline*(self: Ref[TextParagraph]; canvas: RID; pos: Vector2; line: int32; outlineSize: int32 = 1; color: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("draw_line_outline", 1814903311).}
  proc drawDropcap*(self: Ref[TextParagraph]; canvas: RID; pos: Vector2; color: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("draw_dropcap", 1164457837).}
  proc drawDropcapOutline*(self: Ref[TextParagraph]; canvas: RID; pos: Vector2; outlineSize: int32 = 1; color: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("draw_dropcap_outline", 1364491366).}
  proc hitTest*(self: Ref[TextParagraph]; coords: Vector2): int32 {.loadfrom("hit_test", 3820158470).}

# TextServer
define_godot_engine_class_essencials(TextServer, RefCounted)
TextServer.memberProcs:
  proc hasFeature*(self: Ref[TextServer]; feature: TextServer|>Feature): Bool {.loadfrom("has_feature", 3967367083).}
  proc getName*(self: Ref[TextServer]): String {.loadfrom("get_name", 201670096).}
  proc getFeatures*(self: Ref[TextServer]): int64 {.loadfrom("get_features", 3905245786).}
  proc loadSupportData*(self: Ref[TextServer]; filename: String): Bool {.loadfrom("load_support_data", 2323990056).}
  proc getSupportDataFilename*(self: Ref[TextServer]): String {.loadfrom("get_support_data_filename", 201670096).}
  proc getSupportDataInfo*(self: Ref[TextServer]): String {.loadfrom("get_support_data_info", 201670096).}
  proc saveSupportData*(self: Ref[TextServer]; filename: String): Bool {.loadfrom("save_support_data", 3927539163).}
  proc isLocaleRightToLeft*(self: Ref[TextServer]; locale: String): Bool {.loadfrom("is_locale_right_to_left", 3927539163).}
  proc nameToTag*(self: Ref[TextServer]; name: String): int64 {.loadfrom("name_to_tag", 1321353865).}
  proc tagToName*(self: Ref[TextServer]; tag: int64): String {.loadfrom("tag_to_name", 844755477).}
  proc has*(self: Ref[TextServer]; rid: RID): Bool {.loadfrom("has", 3521089500).}
  proc freeRid*(self: Ref[TextServer]; rid: RID) {.loadfrom("free_rid", 2722037293).}
  proc createFont*(self: Ref[TextServer]): RID {.loadfrom("create_font", 529393457).}
  proc fontSetData*(self: Ref[TextServer]; fontRid: RID; data: PackedByteArray) {.loadfrom("font_set_data", 1355495400).}
  proc fontSetFaceIndex*(self: Ref[TextServer]; fontRid: RID; faceIndex: int64) {.loadfrom("font_set_face_index", 3411492887).}
  proc fontGetFaceIndex*(self: Ref[TextServer]; fontRid: RID): int64 {.loadfrom("font_get_face_index", 2198884583).}
  proc fontGetFaceCount*(self: Ref[TextServer]; fontRid: RID): int64 {.loadfrom("font_get_face_count", 2198884583).}
  proc fontSetStyle*(self: Ref[TextServer]; fontRid: RID; style: set[TextServer|>FontStyle]) {.loadfrom("font_set_style", 898466325).}
  proc fontGetStyle*(self: Ref[TextServer]; fontRid: RID): set[TextServer|>FontStyle] {.loadfrom("font_get_style", 3082502592).}
  proc fontSetName*(self: Ref[TextServer]; fontRid: RID; name: String) {.loadfrom("font_set_name", 2726140452).}
  proc fontGetName*(self: Ref[TextServer]; fontRid: RID): String {.loadfrom("font_get_name", 642473191).}
  proc fontGetOtNameStrings*(self: Ref[TextServer]; fontRid: RID): Dictionary {.loadfrom("font_get_ot_name_strings", 1882737106).}
  proc fontSetStyleName*(self: Ref[TextServer]; fontRid: RID; name: String) {.loadfrom("font_set_style_name", 2726140452).}
  proc fontGetStyleName*(self: Ref[TextServer]; fontRid: RID): String {.loadfrom("font_get_style_name", 642473191).}
  proc fontSetWeight*(self: Ref[TextServer]; fontRid: RID; weight: int64) {.loadfrom("font_set_weight", 3411492887).}
  proc fontGetWeight*(self: Ref[TextServer]; fontRid: RID): int64 {.loadfrom("font_get_weight", 2198884583).}
  proc fontSetStretch*(self: Ref[TextServer]; fontRid: RID; weight: int64) {.loadfrom("font_set_stretch", 3411492887).}
  proc fontGetStretch*(self: Ref[TextServer]; fontRid: RID): int64 {.loadfrom("font_get_stretch", 2198884583).}
  proc fontSetAntialiasing*(self: Ref[TextServer]; fontRid: RID; antialiasing: TextServer|>FontAntialiasing) {.loadfrom("font_set_antialiasing", 958337235).}
  proc fontGetAntialiasing*(self: Ref[TextServer]; fontRid: RID): TextServer|>FontAntialiasing {.loadfrom("font_get_antialiasing", 3389420495).}
  proc fontSetGenerateMipmaps*(self: Ref[TextServer]; fontRid: RID; generateMipmaps: Bool) {.loadfrom("font_set_generate_mipmaps", 1265174801).}
  proc fontGetGenerateMipmaps*(self: Ref[TextServer]; fontRid: RID): Bool {.loadfrom("font_get_generate_mipmaps", 4155700596).}
  proc fontSetMultichannelSignedDistanceField*(self: Ref[TextServer]; fontRid: RID; msdf: Bool) {.loadfrom("font_set_multichannel_signed_distance_field", 1265174801).}
  proc fontIsMultichannelSignedDistanceField*(self: Ref[TextServer]; fontRid: RID): Bool {.loadfrom("font_is_multichannel_signed_distance_field", 4155700596).}
  proc fontSetMsdfPixelRange*(self: Ref[TextServer]; fontRid: RID; msdfPixelRange: int64) {.loadfrom("font_set_msdf_pixel_range", 3411492887).}
  proc fontGetMsdfPixelRange*(self: Ref[TextServer]; fontRid: RID): int64 {.loadfrom("font_get_msdf_pixel_range", 2198884583).}
  proc fontSetMsdfSize*(self: Ref[TextServer]; fontRid: RID; msdfSize: int64) {.loadfrom("font_set_msdf_size", 3411492887).}
  proc fontGetMsdfSize*(self: Ref[TextServer]; fontRid: RID): int64 {.loadfrom("font_get_msdf_size", 2198884583).}
  proc fontSetFixedSize*(self: Ref[TextServer]; fontRid: RID; fixedSize: int64) {.loadfrom("font_set_fixed_size", 3411492887).}
  proc fontGetFixedSize*(self: Ref[TextServer]; fontRid: RID): int64 {.loadfrom("font_get_fixed_size", 2198884583).}
  proc fontSetAllowSystemFallback*(self: Ref[TextServer]; fontRid: RID; allowSystemFallback: Bool) {.loadfrom("font_set_allow_system_fallback", 1265174801).}
  proc fontIsAllowSystemFallback*(self: Ref[TextServer]; fontRid: RID): Bool {.loadfrom("font_is_allow_system_fallback", 4155700596).}
  proc fontSetForceAutohinter*(self: Ref[TextServer]; fontRid: RID; forceAutohinter: Bool) {.loadfrom("font_set_force_autohinter", 1265174801).}
  proc fontIsForceAutohinter*(self: Ref[TextServer]; fontRid: RID): Bool {.loadfrom("font_is_force_autohinter", 4155700596).}
  proc fontSetHinting*(self: Ref[TextServer]; fontRid: RID; hinting: TextServer|>Hinting) {.loadfrom("font_set_hinting", 1520010864).}
  proc fontGetHinting*(self: Ref[TextServer]; fontRid: RID): TextServer|>Hinting {.loadfrom("font_get_hinting", 3971592737).}
  proc fontSetSubpixelPositioning*(self: Ref[TextServer]; fontRid: RID; subpixelPositioning: TextServer|>SubpixelPositioning) {.loadfrom("font_set_subpixel_positioning", 3830459669).}
  proc fontGetSubpixelPositioning*(self: Ref[TextServer]; fontRid: RID): TextServer|>SubpixelPositioning {.loadfrom("font_get_subpixel_positioning", 2752233671).}
  proc fontSetEmbolden*(self: Ref[TextServer]; fontRid: RID; strength: float64) {.loadfrom("font_set_embolden", 1794382983).}
  proc fontGetEmbolden*(self: Ref[TextServer]; fontRid: RID): float64 {.loadfrom("font_get_embolden", 866169185).}
  proc fontSetTransform*(self: Ref[TextServer]; fontRid: RID; transform: Transform2D) {.loadfrom("font_set_transform", 1246044741).}
  proc fontGetTransform*(self: Ref[TextServer]; fontRid: RID): Transform2D {.loadfrom("font_get_transform", 213527486).}
  proc fontSetVariationCoordinates*(self: Ref[TextServer]; fontRid: RID; variationCoordinates: Dictionary) {.loadfrom("font_set_variation_coordinates", 1217542888).}
  proc fontGetVariationCoordinates*(self: Ref[TextServer]; fontRid: RID): Dictionary {.loadfrom("font_get_variation_coordinates", 1882737106).}
  proc fontSetOversampling*(self: Ref[TextServer]; fontRid: RID; oversampling: float64) {.loadfrom("font_set_oversampling", 1794382983).}
  proc fontGetOversampling*(self: Ref[TextServer]; fontRid: RID): float64 {.loadfrom("font_get_oversampling", 866169185).}
  proc fontGetSizeCacheList*(self: Ref[TextServer]; fontRid: RID): TypedArray[Vector2i] {.loadfrom("font_get_size_cache_list", 2684255073).}
  proc fontClearSizeCache*(self: Ref[TextServer]; fontRid: RID) {.loadfrom("font_clear_size_cache", 2722037293).}
  proc fontRemoveSizeCache*(self: Ref[TextServer]; fontRid: RID; size: Vector2i) {.loadfrom("font_remove_size_cache", 2450610377).}
  proc fontSetAscent*(self: Ref[TextServer]; fontRid: RID; size: int64; ascent: float64) {.loadfrom("font_set_ascent", 1892459533).}
  proc fontGetAscent*(self: Ref[TextServer]; fontRid: RID; size: int64): float64 {.loadfrom("font_get_ascent", 755457166).}
  proc fontSetDescent*(self: Ref[TextServer]; fontRid: RID; size: int64; descent: float64) {.loadfrom("font_set_descent", 1892459533).}
  proc fontGetDescent*(self: Ref[TextServer]; fontRid: RID; size: int64): float64 {.loadfrom("font_get_descent", 755457166).}
  proc fontSetUnderlinePosition*(self: Ref[TextServer]; fontRid: RID; size: int64; underlinePosition: float64) {.loadfrom("font_set_underline_position", 1892459533).}
  proc fontGetUnderlinePosition*(self: Ref[TextServer]; fontRid: RID; size: int64): float64 {.loadfrom("font_get_underline_position", 755457166).}
  proc fontSetUnderlineThickness*(self: Ref[TextServer]; fontRid: RID; size: int64; underlineThickness: float64) {.loadfrom("font_set_underline_thickness", 1892459533).}
  proc fontGetUnderlineThickness*(self: Ref[TextServer]; fontRid: RID; size: int64): float64 {.loadfrom("font_get_underline_thickness", 755457166).}
  proc fontSetScale*(self: Ref[TextServer]; fontRid: RID; size: int64; scale: float64) {.loadfrom("font_set_scale", 1892459533).}
  proc fontGetScale*(self: Ref[TextServer]; fontRid: RID; size: int64): float64 {.loadfrom("font_get_scale", 755457166).}
  proc fontGetTextureCount*(self: Ref[TextServer]; fontRid: RID; size: Vector2i): int64 {.loadfrom("font_get_texture_count", 1311001310).}
  proc fontClearTextures*(self: Ref[TextServer]; fontRid: RID; size: Vector2i) {.loadfrom("font_clear_textures", 2450610377).}
  proc fontRemoveTexture*(self: Ref[TextServer]; fontRid: RID; size: Vector2i; textureIndex: int64) {.loadfrom("font_remove_texture", 3810512262).}
  proc fontSetTextureImage*(self: Ref[TextServer]; fontRid: RID; size: Vector2i; textureIndex: int64; image: Ref[Image]) {.loadfrom("font_set_texture_image", 2354485091).}
  proc fontGetTextureImage*(self: Ref[TextServer]; fontRid: RID; size: Vector2i; textureIndex: int64): Ref[Image] {.loadfrom("font_get_texture_image", 2451761155).}
  proc fontSetTextureOffsets*(self: Ref[TextServer]; fontRid: RID; size: Vector2i; textureIndex: int64; offset: PackedInt32Array) {.loadfrom("font_set_texture_offsets", 3005398047).}
  proc fontGetTextureOffsets*(self: Ref[TextServer]; fontRid: RID; size: Vector2i; textureIndex: int64): PackedInt32Array {.loadfrom("font_get_texture_offsets", 3420028887).}
  proc fontGetGlyphList*(self: Ref[TextServer]; fontRid: RID; size: Vector2i): PackedInt32Array {.loadfrom("font_get_glyph_list", 46086620).}
  proc fontClearGlyphs*(self: Ref[TextServer]; fontRid: RID; size: Vector2i) {.loadfrom("font_clear_glyphs", 2450610377).}
  proc fontRemoveGlyph*(self: Ref[TextServer]; fontRid: RID; size: Vector2i; glyph: int64) {.loadfrom("font_remove_glyph", 3810512262).}
  proc fontGetGlyphAdvance*(self: Ref[TextServer]; fontRid: RID; size: int64; glyph: int64): Vector2 {.loadfrom("font_get_glyph_advance", 2555689501).}
  proc fontSetGlyphAdvance*(self: Ref[TextServer]; fontRid: RID; size: int64; glyph: int64; advance: Vector2) {.loadfrom("font_set_glyph_advance", 3219397315).}
  proc fontGetGlyphOffset*(self: Ref[TextServer]; fontRid: RID; size: Vector2i; glyph: int64): Vector2 {.loadfrom("font_get_glyph_offset", 513728628).}
  proc fontSetGlyphOffset*(self: Ref[TextServer]; fontRid: RID; size: Vector2i; glyph: int64; offset: Vector2) {.loadfrom("font_set_glyph_offset", 1812632090).}
  proc fontGetGlyphSize*(self: Ref[TextServer]; fontRid: RID; size: Vector2i; glyph: int64): Vector2 {.loadfrom("font_get_glyph_size", 513728628).}
  proc fontSetGlyphSize*(self: Ref[TextServer]; fontRid: RID; size: Vector2i; glyph: int64; glSize: Vector2) {.loadfrom("font_set_glyph_size", 1812632090).}
  proc fontGetGlyphUvRect*(self: Ref[TextServer]; fontRid: RID; size: Vector2i; glyph: int64): Rect2 {.loadfrom("font_get_glyph_uv_rect", 2274268786).}
  proc fontSetGlyphUvRect*(self: Ref[TextServer]; fontRid: RID; size: Vector2i; glyph: int64; uvRect: Rect2) {.loadfrom("font_set_glyph_uv_rect", 1973324081).}
  proc fontGetGlyphTextureIdx*(self: Ref[TextServer]; fontRid: RID; size: Vector2i; glyph: int64): int64 {.loadfrom("font_get_glyph_texture_idx", 4292800474).}
  proc fontSetGlyphTextureIdx*(self: Ref[TextServer]; fontRid: RID; size: Vector2i; glyph: int64; textureIdx: int64) {.loadfrom("font_set_glyph_texture_idx", 4254580980).}
  proc fontGetGlyphTextureRid*(self: Ref[TextServer]; fontRid: RID; size: Vector2i; glyph: int64): RID {.loadfrom("font_get_glyph_texture_rid", 1451696141).}
  proc fontGetGlyphTextureSize*(self: Ref[TextServer]; fontRid: RID; size: Vector2i; glyph: int64): Vector2 {.loadfrom("font_get_glyph_texture_size", 513728628).}
  proc fontGetGlyphContours*(self: Ref[TextServer]; font: RID; size: int64; index: int64): Dictionary {.loadfrom("font_get_glyph_contours", 2903964473).}
  proc fontGetKerningList*(self: Ref[TextServer]; fontRid: RID; size: int64): TypedArray[Vector2i] {.loadfrom("font_get_kerning_list", 1778388067).}
  proc fontClearKerningMap*(self: Ref[TextServer]; fontRid: RID; size: int64) {.loadfrom("font_clear_kerning_map", 3411492887).}
  proc fontRemoveKerning*(self: Ref[TextServer]; fontRid: RID; size: int64; glyphPair: Vector2i) {.loadfrom("font_remove_kerning", 2141860016).}
  proc fontSetKerning*(self: Ref[TextServer]; fontRid: RID; size: int64; glyphPair: Vector2i; kerning: Vector2) {.loadfrom("font_set_kerning", 3630965883).}
  proc fontGetKerning*(self: Ref[TextServer]; fontRid: RID; size: int64; glyphPair: Vector2i): Vector2 {.loadfrom("font_get_kerning", 1019980169).}
  proc fontGetGlyphIndex*(self: Ref[TextServer]; fontRid: RID; size: int64; char: int64; variationSelector: int64): int64 {.loadfrom("font_get_glyph_index", 1765635060).}
  proc fontGetCharFromGlyphIndex*(self: Ref[TextServer]; fontRid: RID; size: int64; glyphIndex: int64): int64 {.loadfrom("font_get_char_from_glyph_index", 2156738276).}
  proc fontHasChar*(self: Ref[TextServer]; fontRid: RID; char: int64): Bool {.loadfrom("font_has_char", 3120086654).}
  proc fontGetSupportedChars*(self: Ref[TextServer]; fontRid: RID): String {.loadfrom("font_get_supported_chars", 642473191).}
  proc fontRenderRange*(self: Ref[TextServer]; fontRid: RID; size: Vector2i; start: int64; `end`: int64) {.loadfrom("font_render_range", 4254580980).}
  proc fontRenderGlyph*(self: Ref[TextServer]; fontRid: RID; size: Vector2i; index: int64) {.loadfrom("font_render_glyph", 3810512262).}
  proc fontDrawGlyph*(self: Ref[TextServer]; fontRid: RID; canvas: RID; size: int64; pos: Vector2; index: int64; color: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("font_draw_glyph", 1821196351).}
  proc fontDrawGlyphOutline*(self: Ref[TextServer]; fontRid: RID; canvas: RID; size: int64; outlineSize: int64; pos: Vector2; index: int64; color: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("font_draw_glyph_outline", 1124898203).}
  proc fontIsLanguageSupported*(self: Ref[TextServer]; fontRid: RID; language: String): Bool {.loadfrom("font_is_language_supported", 3199320846).}
  proc fontSetLanguageSupportOverride*(self: Ref[TextServer]; fontRid: RID; language: String; supported: Bool) {.loadfrom("font_set_language_support_override", 2313957094).}
  proc fontGetLanguageSupportOverride*(self: Ref[TextServer]; fontRid: RID; language: String): Bool {.loadfrom("font_get_language_support_override", 2829184646).}
  proc fontRemoveLanguageSupportOverride*(self: Ref[TextServer]; fontRid: RID; language: String) {.loadfrom("font_remove_language_support_override", 2726140452).}
  proc fontGetLanguageSupportOverrides*(self: Ref[TextServer]; fontRid: RID): PackedStringArray {.loadfrom("font_get_language_support_overrides", 2801473409).}
  proc fontIsScriptSupported*(self: Ref[TextServer]; fontRid: RID; script: String): Bool {.loadfrom("font_is_script_supported", 3199320846).}
  proc fontSetScriptSupportOverride*(self: Ref[TextServer]; fontRid: RID; script: String; supported: Bool) {.loadfrom("font_set_script_support_override", 2313957094).}
  proc fontGetScriptSupportOverride*(self: Ref[TextServer]; fontRid: RID; script: String): Bool {.loadfrom("font_get_script_support_override", 2829184646).}
  proc fontRemoveScriptSupportOverride*(self: Ref[TextServer]; fontRid: RID; script: String) {.loadfrom("font_remove_script_support_override", 2726140452).}
  proc fontGetScriptSupportOverrides*(self: Ref[TextServer]; fontRid: RID): PackedStringArray {.loadfrom("font_get_script_support_overrides", 2801473409).}
  proc fontSetOpentypeFeatureOverrides*(self: Ref[TextServer]; fontRid: RID; overrides: Dictionary) {.loadfrom("font_set_opentype_feature_overrides", 1217542888).}
  proc fontGetOpentypeFeatureOverrides*(self: Ref[TextServer]; fontRid: RID): Dictionary {.loadfrom("font_get_opentype_feature_overrides", 1882737106).}
  proc fontSupportedFeatureList*(self: Ref[TextServer]; fontRid: RID): Dictionary {.loadfrom("font_supported_feature_list", 1882737106).}
  proc fontSupportedVariationList*(self: Ref[TextServer]; fontRid: RID): Dictionary {.loadfrom("font_supported_variation_list", 1882737106).}
  proc fontGetGlobalOversampling*(self: Ref[TextServer]): float64 {.loadfrom("font_get_global_oversampling", 1740695150).}
  proc fontSetGlobalOversampling*(self: Ref[TextServer]; oversampling: float64) {.loadfrom("font_set_global_oversampling", 373806689).}
  proc getHexCodeBoxSize*(self: Ref[TextServer]; size: int64; index: int64): Vector2 {.loadfrom("get_hex_code_box_size", 3016396712).}
  proc drawHexCodeBox*(self: Ref[TextServer]; canvas: RID; size: int64; pos: Vector2; index: int64; color: Color) {.loadfrom("draw_hex_code_box", 1602046441).}
  proc createShapedText*(self: Ref[TextServer]; direction: TextServer|>Direction = directionAuto; orientation: TextServer|>Orientation = orientationHorizontal): RID {.loadfrom("create_shaped_text", 1231398698).}
  proc shapedTextClear*(self: Ref[TextServer]; rid: RID) {.loadfrom("shaped_text_clear", 2722037293).}
  proc shapedTextSetDirection*(self: Ref[TextServer]; shaped: RID; direction: TextServer|>Direction = directionAuto) {.loadfrom("shaped_text_set_direction", 2616949700).}
  proc shapedTextGetDirection*(self: Ref[TextServer]; shaped: RID): TextServer|>Direction {.loadfrom("shaped_text_get_direction", 3065904362).}
  proc shapedTextGetInferredDirection*(self: Ref[TextServer]; shaped: RID): TextServer|>Direction {.loadfrom("shaped_text_get_inferred_direction", 3065904362).}
  proc shapedTextSetBidiOverride*(self: Ref[TextServer]; shaped: RID; override: Array) {.loadfrom("shaped_text_set_bidi_override", 684822712).}
  proc shapedTextSetCustomPunctuation*(self: Ref[TextServer]; shaped: RID; punct: String) {.loadfrom("shaped_text_set_custom_punctuation", 2726140452).}
  proc shapedTextGetCustomPunctuation*(self: Ref[TextServer]; shaped: RID): String {.loadfrom("shaped_text_get_custom_punctuation", 642473191).}
  proc shapedTextSetOrientation*(self: Ref[TextServer]; shaped: RID; orientation: TextServer|>Orientation = orientationHorizontal) {.loadfrom("shaped_text_set_orientation", 104095128).}
  proc shapedTextGetOrientation*(self: Ref[TextServer]; shaped: RID): TextServer|>Orientation {.loadfrom("shaped_text_get_orientation", 3142708106).}
  proc shapedTextSetPreserveInvalid*(self: Ref[TextServer]; shaped: RID; enabled: Bool) {.loadfrom("shaped_text_set_preserve_invalid", 1265174801).}
  proc shapedTextGetPreserveInvalid*(self: Ref[TextServer]; shaped: RID): Bool {.loadfrom("shaped_text_get_preserve_invalid", 4155700596).}
  proc shapedTextSetPreserveControl*(self: Ref[TextServer]; shaped: RID; enabled: Bool) {.loadfrom("shaped_text_set_preserve_control", 1265174801).}
  proc shapedTextGetPreserveControl*(self: Ref[TextServer]; shaped: RID): Bool {.loadfrom("shaped_text_get_preserve_control", 4155700596).}
  proc shapedTextSetSpacing*(self: Ref[TextServer]; shaped: RID; spacing: TextServer|>SpacingType; value: int64) {.loadfrom("shaped_text_set_spacing", 1307259930).}
  proc shapedTextGetSpacing*(self: Ref[TextServer]; shaped: RID; spacing: TextServer|>SpacingType): int64 {.loadfrom("shaped_text_get_spacing", 1213653558).}
  proc shapedTextAddString*(self: Ref[TextServer]; shaped: RID; text: String; fonts: TypedArray[RID]; size: int64; opentypeFeatures: Dictionary = Dictionary|>init(); language: String = ""; meta: ptr Variant = nil): Bool {.loadfrom("shaped_text_add_string", 2621279422).}
  proc shapedTextAddObject*(self: Ref[TextServer]; shaped: RID; key: ptr Variant; size: Vector2; inlineAlign: InlineAlignment = inlineAlignmentCenter; length: int64 = 1; baseline: float64 = 0.0): Bool {.loadfrom("shaped_text_add_object", 2838446185).}
  proc shapedTextResizeObject*(self: Ref[TextServer]; shaped: RID; key: ptr Variant; size: Vector2; inlineAlign: InlineAlignment = inlineAlignmentCenter; baseline: float64 = 0.0): Bool {.loadfrom("shaped_text_resize_object", 2353789835).}
  proc shapedGetSpanCount*(self: Ref[TextServer]; shaped: RID): int64 {.loadfrom("shaped_get_span_count", 2198884583).}
  proc shapedGetSpanMeta*(self: Ref[TextServer]; shaped: RID; index: int64): Variant {.loadfrom("shaped_get_span_meta", 4069510997).}
  proc shapedSetSpanUpdateFont*(self: Ref[TextServer]; shaped: RID; index: int64; fonts: TypedArray[RID]; size: int64; opentypeFeatures: Dictionary = Dictionary|>init()) {.loadfrom("shaped_set_span_update_font", 1578983057).}
  proc shapedTextSubstr*(self: Ref[TextServer]; shaped: RID; start: int64; length: int64): RID {.loadfrom("shaped_text_substr", 1937682086).}
  proc shapedTextGetParent*(self: Ref[TextServer]; shaped: RID): RID {.loadfrom("shaped_text_get_parent", 3814569979).}
  proc shapedTextFitToWidth*(self: Ref[TextServer]; shaped: RID; width: float64; justificationFlags: set[TextServer|>JustificationFlag] = {}): float64 {.loadfrom("shaped_text_fit_to_width", 603718830).}
  proc shapedTextTabAlign*(self: Ref[TextServer]; shaped: RID; tabStops: PackedFloat32Array): float64 {.loadfrom("shaped_text_tab_align", 1283669550).}
  proc shapedTextShape*(self: Ref[TextServer]; shaped: RID): Bool {.loadfrom("shaped_text_shape", 3521089500).}
  proc shapedTextIsReady*(self: Ref[TextServer]; shaped: RID): Bool {.loadfrom("shaped_text_is_ready", 4155700596).}
  proc shapedTextHasVisibleChars*(self: Ref[TextServer]; shaped: RID): Bool {.loadfrom("shaped_text_has_visible_chars", 4155700596).}
  proc shapedTextGetGlyphs*(self: Ref[TextServer]; shaped: RID): TypedArray[Dictionary] {.loadfrom("shaped_text_get_glyphs", 2684255073).}
  proc shapedTextSortLogical*(self: Ref[TextServer]; shaped: RID): TypedArray[Dictionary] {.loadfrom("shaped_text_sort_logical", 2670461153).}
  proc shapedTextGetGlyphCount*(self: Ref[TextServer]; shaped: RID): int64 {.loadfrom("shaped_text_get_glyph_count", 2198884583).}
  proc shapedTextGetRange*(self: Ref[TextServer]; shaped: RID): Vector2i {.loadfrom("shaped_text_get_range", 733700038).}
  proc shapedTextGetLineBreaksAdv*(self: Ref[TextServer]; shaped: RID; width: PackedFloat32Array; start: int64 = 0; once: Bool = true; breakFlags: set[TextServer|>LineBreakFlag] = {}): PackedInt32Array {.loadfrom("shaped_text_get_line_breaks_adv", 4206849830).}
  proc shapedTextGetLineBreaks*(self: Ref[TextServer]; shaped: RID; width: float64; start: int64 = 0; breakFlags: set[TextServer|>LineBreakFlag] = {}): PackedInt32Array {.loadfrom("shaped_text_get_line_breaks", 303410369).}
  proc shapedTextGetWordBreaks*(self: Ref[TextServer]; shaped: RID; graphemeFlags: set[TextServer|>GraphemeFlag] = {}): PackedInt32Array {.loadfrom("shaped_text_get_word_breaks", 3299477123).}
  proc shapedTextGetTrimPos*(self: Ref[TextServer]; shaped: RID): int64 {.loadfrom("shaped_text_get_trim_pos", 2198884583).}
  proc shapedTextGetEllipsisPos*(self: Ref[TextServer]; shaped: RID): int64 {.loadfrom("shaped_text_get_ellipsis_pos", 2198884583).}
  proc shapedTextGetEllipsisGlyphs*(self: Ref[TextServer]; shaped: RID): TypedArray[Dictionary] {.loadfrom("shaped_text_get_ellipsis_glyphs", 2684255073).}
  proc shapedTextGetEllipsisGlyphCount*(self: Ref[TextServer]; shaped: RID): int64 {.loadfrom("shaped_text_get_ellipsis_glyph_count", 2198884583).}
  proc shapedTextOverrunTrimToWidth*(self: Ref[TextServer]; shaped: RID; width: float64 = 0; overrunTrimFlags: set[TextServer|>TextOverrunFlag] = {}) {.loadfrom("shaped_text_overrun_trim_to_width", 1572579718).}
  proc shapedTextGetObjects*(self: Ref[TextServer]; shaped: RID): Array {.loadfrom("shaped_text_get_objects", 2684255073).}
  proc shapedTextGetObjectRect*(self: Ref[TextServer]; shaped: RID; key: ptr Variant): Rect2 {.loadfrom("shaped_text_get_object_rect", 447978354).}
  proc shapedTextGetSize*(self: Ref[TextServer]; shaped: RID): Vector2 {.loadfrom("shaped_text_get_size", 2440833711).}
  proc shapedTextGetAscent*(self: Ref[TextServer]; shaped: RID): float64 {.loadfrom("shaped_text_get_ascent", 866169185).}
  proc shapedTextGetDescent*(self: Ref[TextServer]; shaped: RID): float64 {.loadfrom("shaped_text_get_descent", 866169185).}
  proc shapedTextGetWidth*(self: Ref[TextServer]; shaped: RID): float64 {.loadfrom("shaped_text_get_width", 866169185).}
  proc shapedTextGetUnderlinePosition*(self: Ref[TextServer]; shaped: RID): float64 {.loadfrom("shaped_text_get_underline_position", 866169185).}
  proc shapedTextGetUnderlineThickness*(self: Ref[TextServer]; shaped: RID): float64 {.loadfrom("shaped_text_get_underline_thickness", 866169185).}
  proc shapedTextGetCarets*(self: Ref[TextServer]; shaped: RID; position: int64): Dictionary {.loadfrom("shaped_text_get_carets", 1574219346).}
  proc shapedTextGetSelection*(self: Ref[TextServer]; shaped: RID; start: int64; `end`: int64): PackedVector2Array {.loadfrom("shaped_text_get_selection", 3714187733).}
  proc shapedTextHitTestGrapheme*(self: Ref[TextServer]; shaped: RID; coords: float64): int64 {.loadfrom("shaped_text_hit_test_grapheme", 3149310417).}
  proc shapedTextHitTestPosition*(self: Ref[TextServer]; shaped: RID; coords: float64): int64 {.loadfrom("shaped_text_hit_test_position", 3149310417).}
  proc shapedTextGetGraphemeBounds*(self: Ref[TextServer]; shaped: RID; pos: int64): Vector2 {.loadfrom("shaped_text_get_grapheme_bounds", 2546185844).}
  proc shapedTextNextGraphemePos*(self: Ref[TextServer]; shaped: RID; pos: int64): int64 {.loadfrom("shaped_text_next_grapheme_pos", 1120910005).}
  proc shapedTextPrevGraphemePos*(self: Ref[TextServer]; shaped: RID; pos: int64): int64 {.loadfrom("shaped_text_prev_grapheme_pos", 1120910005).}
  proc shapedTextDraw*(self: Ref[TextServer]; shaped: RID; canvas: RID; pos: Vector2; clipL: float64 = -1; clipR: float64 = -1; color: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("shaped_text_draw", 70679950).}
  proc shapedTextDrawOutline*(self: Ref[TextServer]; shaped: RID; canvas: RID; pos: Vector2; clipL: float64 = -1; clipR: float64 = -1; outlineSize: int64 = 1; color: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("shaped_text_draw_outline", 2673671346).}
  proc shapedTextGetDominantDirectionInRange*(self: Ref[TextServer]; shaped: RID; start: int64; `end`: int64): TextServer|>Direction {.loadfrom("shaped_text_get_dominant_direction_in_range", 3326907668).}
  proc formatNumber*(self: Ref[TextServer]; number: String; language: String = ""): String {.loadfrom("format_number", 2305636099).}
  proc parseNumber*(self: Ref[TextServer]; number: String; language: String = ""): String {.loadfrom("parse_number", 2305636099).}
  proc percentSign*(self: Ref[TextServer]; language: String = ""): String {.loadfrom("percent_sign", 993269549).}
  proc stringGetWordBreaks*(self: Ref[TextServer]; string: String; language: String = ""; charsPerLine: int64 = 0): PackedInt32Array {.loadfrom("string_get_word_breaks", 1398910359).}
  proc isConfusable*(self: Ref[TextServer]; string: String; dict: PackedStringArray): int64 {.loadfrom("is_confusable", 1433197768).}
  proc spoofCheck*(self: Ref[TextServer]; string: String): Bool {.loadfrom("spoof_check", 3927539163).}
  proc stripDiacritics*(self: Ref[TextServer]; string: String): String {.loadfrom("strip_diacritics", 3135753539).}
  proc isValidIdentifier*(self: Ref[TextServer]; string: String): Bool {.loadfrom("is_valid_identifier", 3927539163).}
  proc stringToUpper*(self: Ref[TextServer]; string: String; language: String = ""): String {.loadfrom("string_to_upper", 2305636099).}
  proc stringToLower*(self: Ref[TextServer]; string: String; language: String = ""): String {.loadfrom("string_to_lower", 2305636099).}
  proc parseStructuredText*(self: Ref[TextServer]; parserType: TextServer|>StructuredTextParser; args: Array; text: String): TypedArray[Vector3i] {.loadfrom("parse_structured_text", 3310685015).}

# GodotThread
define_godot_engine_class_essencials(GodotThread, RefCounted)
GodotThread.memberProcs:
  proc start*(self: Ref[GodotThread]; callable: Callable; priority: GodotThread|>Priority = priorityNormal): Error {.loadfrom("start", 2779832528).}
  proc getId*(self: Ref[GodotThread]): String {.loadfrom("get_id", 201670096).}
  proc isStarted*(self: Ref[GodotThread]): Bool {.loadfrom("is_started", 36873697).}
  proc isAlive*(self: Ref[GodotThread]): Bool {.loadfrom("is_alive", 36873697).}
  proc waitToFinish*(self: Ref[GodotThread]): Variant {.loadfrom("wait_to_finish", 1460262497).}
  proc setThreadSafetyChecksEnabled*(enabled: Bool) {.staticOf: GodotThread, loadfrom("set_thread_safety_checks_enabled", 2586408642).}

# TriangleMesh
define_godot_engine_class_essencials(TriangleMesh, RefCounted)

# Tween
define_godot_engine_class_essencials(Tween, RefCounted)
Tween.memberProcs:
  proc tweenProperty*(self: Ref[Tween]; `object`: ptr Object; property: NodePath; finalVal: ptr Variant; duration: float64): Ref[PropertyTweener] {.loadfrom("tween_property", 4049770449).}
  proc tweenInterval*(self: Ref[Tween]; time: float64): Ref[IntervalTweener] {.loadfrom("tween_interval", 413360199).}
  proc tweenCallback*(self: Ref[Tween]; callback: Callable): Ref[CallbackTweener] {.loadfrom("tween_callback", 1540176488).}
  proc tweenMethod*(self: Ref[Tween]; `method`: Callable; `from`: ptr Variant; to: ptr Variant; duration: float64): Ref[MethodTweener] {.loadfrom("tween_method", 2337877153).}
  proc customStep*(self: Ref[Tween]; delta: float64): Bool {.loadfrom("custom_step", 330693286).}
  proc stop*(self: Ref[Tween]) {.loadfrom("stop", 3218959716).}
  proc pause*(self: Ref[Tween]) {.loadfrom("pause", 3218959716).}
  proc play*(self: Ref[Tween]) {.loadfrom("play", 3218959716).}
  proc kill*(self: Ref[Tween]) {.loadfrom("kill", 3218959716).}
  proc getTotalElapsedTime*(self: Ref[Tween]): float64 {.loadfrom("get_total_elapsed_time", 1740695150).}
  proc isRunning*(self: Ref[Tween]): Bool {.loadfrom("is_running", 2240911060).}
  proc isValid*(self: Ref[Tween]): Bool {.loadfrom("is_valid", 2240911060).}
  proc bindNode*(self: Ref[Tween]; node: ptr Node): Ref[Tween] {.loadfrom("bind_node", 2946786331).}
  proc setProcessMode*(self: Ref[Tween]; mode: Tween|>TweenProcessMode): Ref[Tween] {.loadfrom("set_process_mode", 855258840).}
  proc setPauseMode*(self: Ref[Tween]; mode: Tween|>TweenPauseMode): Ref[Tween] {.loadfrom("set_pause_mode", 3363368837).}
  proc setParallel*(self: Ref[Tween]; parallel: Bool = true): Ref[Tween] {.loadfrom("set_parallel", 1942052223).}
  proc setLoops*(self: Ref[Tween]; loops: int32 = 0): Ref[Tween] {.loadfrom("set_loops", 2670836414).}
  proc getLoopsLeft*(self: Ref[Tween]): int32 {.loadfrom("get_loops_left", 3905245786).}
  proc setSpeedScale*(self: Ref[Tween]; speed: Float): Ref[Tween] {.loadfrom("set_speed_scale", 3961971106).}
  proc setTrans*(self: Ref[Tween]; trans: Tween|>TransitionType): Ref[Tween] {.loadfrom("set_trans", 3965963875).}
  proc setEase*(self: Ref[Tween]; ease: Tween|>EaseType): Ref[Tween] {.loadfrom("set_ease", 1208117252).}
  proc parallel*(self: Ref[Tween]): Ref[Tween] {.loadfrom("parallel", 3426978995).}
  proc chain*(self: Ref[Tween]): Ref[Tween] {.loadfrom("chain", 3426978995).}
  proc interpolateValue*(initialValue: ptr Variant; deltaValue: ptr Variant; elapsedTime: float64; duration: float64; transType: Tween|>TransitionType; easeType: Tween|>EaseType): Variant {.staticOf: Tween, loadfrom("interpolate_value", 3452526450).}

# Tweener
define_godot_engine_class_essencials(Tweener, RefCounted)

# UDPServer
define_godot_engine_class_essencials(UDPServer, RefCounted)
UDPServer.memberProcs:
  proc listen*(self: Ref[UDPServer]; port: uint16; bindAddress: String = "*"): Error {.loadfrom("listen", 4025329869).}
  proc poll*(self: Ref[UDPServer]): Error {.loadfrom("poll", 166280745).}
  proc isConnectionAvailable*(self: Ref[UDPServer]): Bool {.loadfrom("is_connection_available", 36873697).}
  proc getLocalPort*(self: Ref[UDPServer]): int32 {.loadfrom("get_local_port", 3905245786).}
  proc isListening*(self: Ref[UDPServer]): Bool {.loadfrom("is_listening", 36873697).}
  proc takeConnection*(self: Ref[UDPServer]): Ref[PacketPeerUDP] {.loadfrom("take_connection", 808734560).}
  proc stop*(self: Ref[UDPServer]) {.loadfrom("stop", 3218959716).}
  proc `maxPendingConnections=`*(self: Ref[UDPServer]; maxPendingConnections: int32) {.loadfrom("set_max_pending_connections", 1286410249).}
  proc maxPendingConnections*(self: Ref[UDPServer]): int32 {.loadfrom("get_max_pending_connections", 3905245786).}

# UPNP
define_godot_engine_class_essencials(UPNP, RefCounted)
UPNP.memberProcs:
  proc getDeviceCount*(self: Ref[UPNP]): int32 {.loadfrom("get_device_count", 3905245786).}
  proc getDevice*(self: Ref[UPNP]; index: int32): Ref[UPNPDevice] {.loadfrom("get_device", 2193290270).}
  proc addDevice*(self: Ref[UPNP]; device: Ref[UPNPDevice]) {.loadfrom("add_device", 986715920).}
  proc setDevice*(self: Ref[UPNP]; index: int32; device: Ref[UPNPDevice]) {.loadfrom("set_device", 3015133723).}
  proc removeDevice*(self: Ref[UPNP]; index: int32) {.loadfrom("remove_device", 1286410249).}
  proc clearDevices*(self: Ref[UPNP]) {.loadfrom("clear_devices", 3218959716).}
  proc getGateway*(self: Ref[UPNP]): Ref[UPNPDevice] {.loadfrom("get_gateway", 2276800779).}
  proc discover*(self: Ref[UPNP]; timeout: int32 = 2000; ttl: int32 = 2; deviceFilter: String = "InternetGatewayDevice"): int32 {.loadfrom("discover", 1575334765).}
  proc queryExternalAddress*(self: Ref[UPNP]): String {.loadfrom("query_external_address", 201670096).}
  proc addPortMapping*(self: Ref[UPNP]; port: int32; portInternal: int32 = 0; desc: String = ""; proto: String = "UDP"; duration: int32 = 0): int32 {.loadfrom("add_port_mapping", 3358934458).}
  proc deletePortMapping*(self: Ref[UPNP]; port: int32; proto: String = "UDP"): int32 {.loadfrom("delete_port_mapping", 760296170).}
  proc `discoverMulticastIf=`*(self: Ref[UPNP]; mIf: String) {.loadfrom("set_discover_multicast_if", 83702148).}
  proc discoverMulticastIf*(self: Ref[UPNP]): String {.loadfrom("get_discover_multicast_if", 201670096).}
  proc `discoverLocalPort=`*(self: Ref[UPNP]; port: int32) {.loadfrom("set_discover_local_port", 1286410249).}
  proc discoverLocalPort*(self: Ref[UPNP]): int32 {.loadfrom("get_discover_local_port", 3905245786).}
  proc `discoverIpv6=`*(self: Ref[UPNP]; ipv6: Bool) {.loadfrom("set_discover_ipv6", 2586408642).}
  proc isDiscoverIpv6*(self: Ref[UPNP]): Bool {.loadfrom("is_discover_ipv6", 36873697).}

# UPNPDevice
define_godot_engine_class_essencials(UPNPDevice, RefCounted)
UPNPDevice.memberProcs:
  proc isValidGateway*(self: Ref[UPNPDevice]): Bool {.loadfrom("is_valid_gateway", 36873697).}
  proc queryExternalAddress*(self: Ref[UPNPDevice]): String {.loadfrom("query_external_address", 201670096).}
  proc addPortMapping*(self: Ref[UPNPDevice]; port: int32; portInternal: int32 = 0; desc: String = ""; proto: String = "UDP"; duration: int32 = 0): int32 {.loadfrom("add_port_mapping", 3358934458).}
  proc deletePortMapping*(self: Ref[UPNPDevice]; port: int32; proto: String = "UDP"): int32 {.loadfrom("delete_port_mapping", 760296170).}
  proc `descriptionUrl=`*(self: Ref[UPNPDevice]; url: String) {.loadfrom("set_description_url", 83702148).}
  proc descriptionUrl*(self: Ref[UPNPDevice]): String {.loadfrom("get_description_url", 201670096).}
  proc `serviceType=`*(self: Ref[UPNPDevice]; `type`: String) {.loadfrom("set_service_type", 83702148).}
  proc serviceType*(self: Ref[UPNPDevice]): String {.loadfrom("get_service_type", 201670096).}
  proc `igdControlUrl=`*(self: Ref[UPNPDevice]; url: String) {.loadfrom("set_igd_control_url", 83702148).}
  proc igdControlUrl*(self: Ref[UPNPDevice]): String {.loadfrom("get_igd_control_url", 201670096).}
  proc `igdServiceType=`*(self: Ref[UPNPDevice]; `type`: String) {.loadfrom("set_igd_service_type", 83702148).}
  proc igdServiceType*(self: Ref[UPNPDevice]): String {.loadfrom("get_igd_service_type", 201670096).}
  proc `igdOurAddr=`*(self: Ref[UPNPDevice]; `addr`: String) {.loadfrom("set_igd_our_addr", 83702148).}
  proc igdOurAddr*(self: Ref[UPNPDevice]): String {.loadfrom("get_igd_our_addr", 201670096).}
  proc `igdStatus=`*(self: Ref[UPNPDevice]; status: UPNPDevice|>IGDStatus) {.loadfrom("set_igd_status", 519504122).}
  proc igdStatus*(self: Ref[UPNPDevice]): UPNPDevice|>IGDStatus {.loadfrom("get_igd_status", 180887011).}

# WeakRef
define_godot_engine_class_essencials(WeakRef, RefCounted)
WeakRef.memberProcs:
  proc getRef*(self: Ref[WeakRef]): Variant {.loadfrom("get_ref", 1214101251).}

# WebRTCPeerConnection
define_godot_engine_class_essencials(WebRTCPeerConnection, RefCounted)
WebRTCPeerConnection.memberProcs:
  proc setDefaultExtension*(extensionClass: StringName) {.staticOf: WebRTCPeerConnection, loadfrom("set_default_extension", 3304788590).}
  proc initialize*(self: Ref[WebRTCPeerConnection]; configuration: Dictionary = Dictionary|>init()): Error {.loadfrom("initialize", 2625064318).}
  proc createDataChannel*(self: Ref[WebRTCPeerConnection]; label: String; options: Dictionary = Dictionary|>init()): Ref[WebRTCDataChannel] {.loadfrom("create_data_channel", 3997447457).}
  proc createOffer*(self: Ref[WebRTCPeerConnection]): Error {.loadfrom("create_offer", 166280745).}
  proc setLocalDescription*(self: Ref[WebRTCPeerConnection]; `type`: String; sdp: String): Error {.loadfrom("set_local_description", 852856452).}
  proc setRemoteDescription*(self: Ref[WebRTCPeerConnection]; `type`: String; sdp: String): Error {.loadfrom("set_remote_description", 852856452).}
  proc addIceCandidate*(self: Ref[WebRTCPeerConnection]; media: String; index: int32; name: String): Error {.loadfrom("add_ice_candidate", 3958950400).}
  proc poll*(self: Ref[WebRTCPeerConnection]): Error {.loadfrom("poll", 166280745).}
  proc close*(self: Ref[WebRTCPeerConnection]) {.loadfrom("close", 3218959716).}
  proc getConnectionState*(self: Ref[WebRTCPeerConnection]): WebRTCPeerConnection|>ConnectionState {.loadfrom("get_connection_state", 2275710506).}
  proc getGatheringState*(self: Ref[WebRTCPeerConnection]): WebRTCPeerConnection|>GatheringState {.loadfrom("get_gathering_state", 4262591401).}
  proc getSignalingState*(self: Ref[WebRTCPeerConnection]): WebRTCPeerConnection|>SignalingState {.loadfrom("get_signaling_state", 3342956226).}

# XMLParser
define_godot_engine_class_essencials(XMLParser, RefCounted)
XMLParser.memberProcs:
  proc read*(self: Ref[XMLParser]): Error {.loadfrom("read", 166280745).}
  proc getNodeType*(self: Ref[XMLParser]): XMLParser|>NodeType {.loadfrom("get_node_type", 2984359541).}
  proc getNodeName*(self: Ref[XMLParser]): String {.loadfrom("get_node_name", 201670096).}
  proc getNodeData*(self: Ref[XMLParser]): String {.loadfrom("get_node_data", 201670096).}
  proc getNodeOffset*(self: Ref[XMLParser]): uint64 {.loadfrom("get_node_offset", 3905245786).}
  proc getAttributeCount*(self: Ref[XMLParser]): int32 {.loadfrom("get_attribute_count", 3905245786).}
  proc getAttributeName*(self: Ref[XMLParser]; idx: int32): String {.loadfrom("get_attribute_name", 844755477).}
  proc getAttributeValue*(self: Ref[XMLParser]; idx: int32): String {.loadfrom("get_attribute_value", 844755477).}
  proc hasAttribute*(self: Ref[XMLParser]; name: String): Bool {.loadfrom("has_attribute", 3927539163).}
  proc getNamedAttributeValue*(self: Ref[XMLParser]; name: String): String {.loadfrom("get_named_attribute_value", 3135753539).}
  proc getNamedAttributeValueSafe*(self: Ref[XMLParser]; name: String): String {.loadfrom("get_named_attribute_value_safe", 3135753539).}
  proc isEmpty*(self: Ref[XMLParser]): Bool {.loadfrom("is_empty", 36873697).}
  proc getCurrentLine*(self: Ref[XMLParser]): int32 {.loadfrom("get_current_line", 3905245786).}
  proc skipSection*(self: Ref[XMLParser]) {.loadfrom("skip_section", 3218959716).}
  proc seek*(self: Ref[XMLParser]; position: uint64): Error {.loadfrom("seek", 844576869).}
  proc open*(self: Ref[XMLParser]; file: String): Error {.loadfrom("open", 166001499).}
  proc openBuffer*(self: Ref[XMLParser]; buffer: PackedByteArray): Error {.loadfrom("open_buffer", 680677267).}

# XRInterface
define_godot_engine_class_essencials(XRInterface, RefCounted)
XRInterface.memberProcs:
  proc getName*(self: Ref[XRInterface]): StringName {.loadfrom("get_name", 2002593661).}
  proc getCapabilities*(self: Ref[XRInterface]): uint32 {.loadfrom("get_capabilities", 3905245786).}
  proc isPrimary*(self: Ref[XRInterface]): Bool {.loadfrom("is_primary", 2240911060).}
  proc `primary=`*(self: Ref[XRInterface]; primary: Bool) {.loadfrom("set_primary", 2586408642).}
  proc isInitialized*(self: Ref[XRInterface]): Bool {.loadfrom("is_initialized", 36873697).}
  proc initialize*(self: Ref[XRInterface]): Bool {.loadfrom("initialize", 2240911060).}
  proc uninitialize*(self: Ref[XRInterface]) {.loadfrom("uninitialize", 3218959716).}
  proc getSystemInfo*(self: Ref[XRInterface]): Dictionary {.loadfrom("get_system_info", 2382534195).}
  proc getTrackingStatus*(self: Ref[XRInterface]): XRInterface|>TrackingStatus {.loadfrom("get_tracking_status", 167423259).}
  proc getRenderTargetSize*(self: Ref[XRInterface]): Vector2 {.loadfrom("get_render_target_size", 1497962370).}
  proc getViewCount*(self: Ref[XRInterface]): uint32 {.loadfrom("get_view_count", 2455072627).}
  proc triggerHapticPulse*(self: Ref[XRInterface]; actionName: String; trackerName: StringName; frequency: float64; amplitude: float64; durationSec: float64; delaySec: float64) {.loadfrom("trigger_haptic_pulse", 3752640163).}
  proc supportsPlayAreaMode*(self: Ref[XRInterface]; mode: XRInterface|>PlayAreaMode): Bool {.loadfrom("supports_play_area_mode", 3429955281).}
  proc playAreaMode*(self: Ref[XRInterface]): XRInterface|>PlayAreaMode {.loadfrom("get_play_area_mode", 1615132885).}
  proc `playAreaMode=`*(self: Ref[XRInterface]; mode: XRInterface|>PlayAreaMode): Bool {.loadfrom("set_play_area_mode", 3429955281).}
  proc getPlayArea*(self: Ref[XRInterface]): PackedVector3Array {.loadfrom("get_play_area", 497664490).}
  proc anchorDetectionIsEnabled*(self: Ref[XRInterface]): Bool {.loadfrom("get_anchor_detection_is_enabled", 36873697).}
  proc `anchorDetectionIsEnabled=`*(self: Ref[XRInterface]; enable: Bool) {.loadfrom("set_anchor_detection_is_enabled", 2586408642).}
  proc getCameraFeedId*(self: Ref[XRInterface]): int32 {.loadfrom("get_camera_feed_id", 2455072627).}
  proc isPassthroughSupported*(self: Ref[XRInterface]): Bool {.loadfrom("is_passthrough_supported", 2240911060).}
  proc isPassthroughEnabled*(self: Ref[XRInterface]): Bool {.loadfrom("is_passthrough_enabled", 2240911060).}
  proc startPassthrough*(self: Ref[XRInterface]): Bool {.loadfrom("start_passthrough", 2240911060).}
  proc stopPassthrough*(self: Ref[XRInterface]) {.loadfrom("stop_passthrough", 3218959716).}
  proc getTransformForView*(self: Ref[XRInterface]; view: uint32; camTransform: Transform3D): Transform3D {.loadfrom("get_transform_for_view", 518934792).}
  proc getProjectionForView*(self: Ref[XRInterface]; view: uint32; aspect: float64; near: float64; far: float64): Projection {.loadfrom("get_projection_for_view", 3766090294).}
  proc getSupportedEnvironmentBlendModes*(self: Ref[XRInterface]): Array {.loadfrom("get_supported_environment_blend_modes", 2915620761).}
  proc setEnvironmentBlendMode*(self: Ref[XRInterface]; mode: XRInterface|>EnvironmentBlendMode): Bool {.loadfrom("set_environment_blend_mode", 551152418).}

# XRPose
define_godot_engine_class_essencials(XRPose, RefCounted)
XRPose.memberProcs:
  proc `hasTrackingData=`*(self: Ref[XRPose]; hasTrackingData: Bool) {.loadfrom("set_has_tracking_data", 2586408642).}
  proc hasTrackingData*(self: Ref[XRPose]): Bool {.loadfrom("get_has_tracking_data", 36873697).}
  proc `name=`*(self: Ref[XRPose]; name: StringName) {.loadfrom("set_name", 3304788590).}
  proc name*(self: Ref[XRPose]): StringName {.loadfrom("get_name", 2002593661).}
  proc `transform=`*(self: Ref[XRPose]; transform: Transform3D) {.loadfrom("set_transform", 2952846383).}
  proc transform*(self: Ref[XRPose]): Transform3D {.loadfrom("get_transform", 3229777777).}
  proc getAdjustedTransform*(self: Ref[XRPose]): Transform3D {.loadfrom("get_adjusted_transform", 3229777777).}
  proc `linearVelocity=`*(self: Ref[XRPose]; velocity: Vector3) {.loadfrom("set_linear_velocity", 3460891852).}
  proc linearVelocity*(self: Ref[XRPose]): Vector3 {.loadfrom("get_linear_velocity", 3360562783).}
  proc `angularVelocity=`*(self: Ref[XRPose]; velocity: Vector3) {.loadfrom("set_angular_velocity", 3460891852).}
  proc angularVelocity*(self: Ref[XRPose]): Vector3 {.loadfrom("get_angular_velocity", 3360562783).}
  proc `trackingConfidence=`*(self: Ref[XRPose]; trackingConfidence: XRPose|>TrackingConfidence) {.loadfrom("set_tracking_confidence", 4171656666).}
  proc trackingConfidence*(self: Ref[XRPose]): XRPose|>TrackingConfidence {.loadfrom("get_tracking_confidence", 2064923680).}

# XRPositionalTracker
define_godot_engine_class_essencials(XRPositionalTracker, RefCounted)
XRPositionalTracker.memberProcs:
  proc trackerType*(self: Ref[XRPositionalTracker]): XRServer|>TrackerType {.loadfrom("get_tracker_type", 2784508102).}
  proc `trackerType=`*(self: Ref[XRPositionalTracker]; `type`: XRServer|>TrackerType) {.loadfrom("set_tracker_type", 3055763575).}
  proc trackerName*(self: Ref[XRPositionalTracker]): StringName {.loadfrom("get_tracker_name", 2002593661).}
  proc `trackerName=`*(self: Ref[XRPositionalTracker]; name: StringName) {.loadfrom("set_tracker_name", 3304788590).}
  proc trackerDesc*(self: Ref[XRPositionalTracker]): String {.loadfrom("get_tracker_desc", 201670096).}
  proc `trackerDesc=`*(self: Ref[XRPositionalTracker]; description: String) {.loadfrom("set_tracker_desc", 83702148).}
  proc trackerProfile*(self: Ref[XRPositionalTracker]): String {.loadfrom("get_tracker_profile", 201670096).}
  proc `trackerProfile=`*(self: Ref[XRPositionalTracker]; profile: String) {.loadfrom("set_tracker_profile", 83702148).}
  proc trackerHand*(self: Ref[XRPositionalTracker]): XRPositionalTracker|>TrackerHand {.loadfrom("get_tracker_hand", 4181770860).}
  proc `trackerHand=`*(self: Ref[XRPositionalTracker]; hand: XRPositionalTracker|>TrackerHand) {.loadfrom("set_tracker_hand", 3904108980).}
  proc hasPose*(self: Ref[XRPositionalTracker]; name: StringName): Bool {.loadfrom("has_pose", 2619796661).}
  proc getPose*(self: Ref[XRPositionalTracker]; name: StringName): Ref[XRPose] {.loadfrom("get_pose", 4099720006).}
  proc invalidatePose*(self: Ref[XRPositionalTracker]; name: StringName) {.loadfrom("invalidate_pose", 3304788590).}
  proc setPose*(self: Ref[XRPositionalTracker]; name: StringName; transform: Transform3D; linearVelocity: Vector3; angularVelocity: Vector3; trackingConfidence: XRPose|>TrackingConfidence) {.loadfrom("set_pose", 3451230163).}
  proc getInput*(self: Ref[XRPositionalTracker]; name: StringName): Variant {.loadfrom("get_input", 2760726917).}
  proc setInput*(self: Ref[XRPositionalTracker]; name: StringName; value: ptr Variant) {.loadfrom("set_input", 3776071444).}

# ZIPPacker
define_godot_engine_class_essencials(ZIPPacker, RefCounted)
ZIPPacker.memberProcs:
  proc open*(self: Ref[ZIPPacker]; path: String; append: ZIPPacker|>ZipAppend = appendCreate): Error {.loadfrom("open", 3715508516).}
  proc startFile*(self: Ref[ZIPPacker]; path: String): Error {.loadfrom("start_file", 166001499).}
  proc writeFile*(self: Ref[ZIPPacker]; data: PackedByteArray): Error {.loadfrom("write_file", 680677267).}
  proc closeFile*(self: Ref[ZIPPacker]): Error {.loadfrom("close_file", 166280745).}
  proc close*(self: Ref[ZIPPacker]): Error {.loadfrom("close", 166280745).}

# ZIPReader
define_godot_engine_class_essencials(ZIPReader, RefCounted)
ZIPReader.memberProcs:
  proc open*(self: Ref[ZIPReader]; path: String): Error {.loadfrom("open", 166001499).}
  proc close*(self: Ref[ZIPReader]): Error {.loadfrom("close", 166280745).}
  proc getFiles*(self: Ref[ZIPReader]): PackedStringArray {.loadfrom("get_files", 2981934095).}
  proc readFile*(self: Ref[ZIPReader]; path: String; caseSensitive: Bool = true): PackedByteArray {.loadfrom("read_file", 156385007).}

# ScriptLanguageExtension
define_godot_engine_class_essencials(ScriptLanguageExtension, ScriptLanguage)
method getName*(self: ScriptLanguageExtension): String {.base.} = (discard)
method init*(self: ScriptLanguageExtension) {.base.} = (discard)
method getType*(self: ScriptLanguageExtension): String {.base.} = (discard)
method getExtension*(self: ScriptLanguageExtension): String {.base.} = (discard)
method finish*(self: ScriptLanguageExtension) {.base.} = (discard)
method getReservedWords*(self: ScriptLanguageExtension): PackedStringArray {.base.} = (discard)
method isControlFlowKeyword*(self: ScriptLanguageExtension; keyword: String): Bool {.base.} = (discard)
method getCommentDelimiters*(self: ScriptLanguageExtension): PackedStringArray {.base.} = (discard)
method getStringDelimiters*(self: ScriptLanguageExtension): PackedStringArray {.base.} = (discard)
method makeTemplate*(self: ScriptLanguageExtension; `template`: String; className: String; baseClassName: String): Ref[Script] {.base.} = (discard)
method getBuiltInTemplates*(self: ScriptLanguageExtension; `object`: StringName): TypedArray[Dictionary] {.base.} = (discard)
method isUsingTemplates*(self: ScriptLanguageExtension): Bool {.base.} = (discard)
method validate*(self: ScriptLanguageExtension; script: String; path: String; validateFunctions: Bool; validateErrors: Bool; validateWarnings: Bool; validateSafeLines: Bool): Dictionary {.base.} = (discard)
method validatePath*(self: ScriptLanguageExtension; path: String): String {.base.} = (discard)
method createScript*(self: ScriptLanguageExtension): Object {.base.} = (discard)
method hasNamedClasses*(self: ScriptLanguageExtension): Bool {.base.} = (discard)
method supportsBuiltinMode*(self: ScriptLanguageExtension): Bool {.base.} = (discard)
method supportsDocumentation*(self: ScriptLanguageExtension): Bool {.base.} = (discard)
method canInheritFromFile*(self: ScriptLanguageExtension): Bool {.base.} = (discard)
method findFunction*(self: ScriptLanguageExtension; className: String; functionName: String): int32 {.base.} = (discard)
method makeFunction*(self: ScriptLanguageExtension; className: String; functionName: String; functionArgs: PackedStringArray): String {.base.} = (discard)
method openInExternalEditor*(self: ScriptLanguageExtension; script: Ref[Script]; line: int32; column: int32): Error {.base.} = (discard)
method overridesExternalEditor*(self: ScriptLanguageExtension): Bool {.base.} = (discard)
method completeCode*(self: ScriptLanguageExtension; code: String; path: String; owner: ptr Object): Dictionary {.base.} = (discard)
method lookupCode*(self: ScriptLanguageExtension; code: String; symbol: String; path: String; owner: ptr Object): Dictionary {.base.} = (discard)
method autoIndentCode*(self: ScriptLanguageExtension; code: String; fromLine: int32; toLine: int32): String {.base.} = (discard)
method addGlobalConstant*(self: ScriptLanguageExtension; name: StringName; value: ptr Variant) {.base.} = (discard)
method addNamedGlobalConstant*(self: ScriptLanguageExtension; name: StringName; value: ptr Variant) {.base.} = (discard)
method removeNamedGlobalConstant*(self: ScriptLanguageExtension; name: StringName) {.base.} = (discard)
method threadEnter*(self: ScriptLanguageExtension) {.base.} = (discard)
method threadExit*(self: ScriptLanguageExtension) {.base.} = (discard)
method debugGetError*(self: ScriptLanguageExtension): String {.base.} = (discard)
method debugGetStackLevelCount*(self: ScriptLanguageExtension): int32 {.base.} = (discard)
method debugGetStackLevelLine*(self: ScriptLanguageExtension; level: int32): int32 {.base.} = (discard)
method debugGetStackLevelFunction*(self: ScriptLanguageExtension; level: int32): String {.base.} = (discard)
method debugGetStackLevelLocals*(self: ScriptLanguageExtension; level: int32; maxSubitems: int32; maxDepth: int32): Dictionary {.base.} = (discard)
method debugGetStackLevelMembers*(self: ScriptLanguageExtension; level: int32; maxSubitems: int32; maxDepth: int32): Dictionary {.base.} = (discard)
method debugGetStackLevelInstance*(self: ScriptLanguageExtension; level: int32): pointer {.base.} = (discard)
method debugGetGlobals*(self: ScriptLanguageExtension; maxSubitems: int32; maxDepth: int32): Dictionary {.base.} = (discard)
method debugParseStackLevelExpression*(self: ScriptLanguageExtension; level: int32; expression: String; maxSubitems: int32; maxDepth: int32): String {.base.} = (discard)
method debugGetCurrentStackInfo*(self: ScriptLanguageExtension): TypedArray[Dictionary] {.base.} = (discard)
method reloadAllScripts*(self: ScriptLanguageExtension) {.base.} = (discard)
method reloadToolScript*(self: ScriptLanguageExtension; script: Ref[Script]; softReload: Bool) {.base.} = (discard)
method getRecognizedExtensions*(self: ScriptLanguageExtension): PackedStringArray {.base.} = (discard)
method getPublicFunctions*(self: ScriptLanguageExtension): TypedArray[Dictionary] {.base.} = (discard)
method getPublicConstants*(self: ScriptLanguageExtension): Dictionary {.base.} = (discard)
method getPublicAnnotations*(self: ScriptLanguageExtension): TypedArray[Dictionary] {.base.} = (discard)
method profilingStart*(self: ScriptLanguageExtension) {.base.} = (discard)
method profilingStop*(self: ScriptLanguageExtension) {.base.} = (discard)
method profilingGetAccumulatedData*(self: ScriptLanguageExtension; infoArray: ptr ScriptLanguageExtensionProfilingInfo; infoMax: int32): int32 {.base.} = (discard)
method profilingGetFrameData*(self: ScriptLanguageExtension; infoArray: ptr ScriptLanguageExtensionProfilingInfo; infoMax: int32): int32 {.base.} = (discard)
method frame*(self: ScriptLanguageExtension) {.base.} = (discard)
method handlesGlobalClassType*(self: ScriptLanguageExtension; `type`: String): Bool {.base.} = (discard)
method getGlobalClassName*(self: ScriptLanguageExtension; path: String): Dictionary {.base.} = (discard)

# Control
define_godot_engine_class_essencials(Control, CanvasItem)
method hasPoint*(self: Control; point: Vector2): Bool {.base.} = (discard)
method structuredTextParser*(self: Control; args: Array; text: String): TypedArray[Vector3i] {.base.} = (discard)
method getMinimumSize*(self: Control): Vector2 {.base.} = (discard)
method getTooltip*(self: Control; atPosition: Vector2): String {.base.} = (discard)
method getDragData*(self: Control; atPosition: Vector2): Variant {.base.} = (discard)
method canDropData*(self: Control; atPosition: Vector2; data: ptr Variant): Bool {.base.} = (discard)
method dropData*(self: Control; atPosition: Vector2; data: ptr Variant) {.base.} = (discard)
method makeCustomTooltip*(self: Control; forText: String): Object {.base.} = (discard)
method guiInput*(self: Control; event: Ref[InputEvent]) {.base.} = (discard)
Control.memberProcs:
  proc acceptEvent*(self: Control) {.loadfrom("accept_event", 3218959716).}
  proc getMinimumSize*(self: Control): Vector2 {.loadfrom("get_minimum_size", 3341600327).}
  proc getCombinedMinimumSize*(self: Control): Vector2 {.loadfrom("get_combined_minimum_size", 3341600327).}
  proc setAnchorsPreset*(self: Control; preset: Control|>LayoutPreset; keepOffsets: Bool = false) {.loadfrom("set_anchors_preset", 509135270).}
  proc setOffsetsPreset*(self: Control; preset: Control|>LayoutPreset; resizeMode: Control|>LayoutPresetMode = presetModeMinsize; margin: int32 = 0) {.loadfrom("set_offsets_preset", 3651818904).}
  proc setAnchorsAndOffsetsPreset*(self: Control; preset: Control|>LayoutPreset; resizeMode: Control|>LayoutPresetMode = presetModeMinsize; margin: int32 = 0) {.loadfrom("set_anchors_and_offsets_preset", 3651818904).}
  proc setAnchor*(self: Control; side: Side; anchor: Float; keepOffset: Bool = false; pushOppositeAnchor: Bool = true) {.loadfrom("set_anchor", 2589937826).}
  proc anchor*(self: Control; side: Side): Float {.loadfrom("get_anchor", 2869120046).}
  proc `offset=`*(self: Control; side: Side; offset: Float) {.loadfrom("set_offset", 4290182280).}
  proc offset*(self: Control; offset: Side): Float {.loadfrom("get_offset", 2869120046).}
  proc setAnchorAndOffset*(self: Control; side: Side; anchor: Float; offset: Float; pushOppositeAnchor: Bool = false) {.loadfrom("set_anchor_and_offset", 4031722181).}
  proc setBegin*(self: Control; position: Vector2) {.loadfrom("set_begin", 743155724).}
  proc setEnd*(self: Control; position: Vector2) {.loadfrom("set_end", 743155724).}
  proc setPosition*(self: Control; position: Vector2; keepOffsets: Bool = false) {.loadfrom("set_position", 2436320129).}
  proc setSize*(self: Control; size: Vector2; keepOffsets: Bool = false) {.loadfrom("set_size", 2436320129).}
  proc resetSize*(self: Control) {.loadfrom("reset_size", 3218959716).}
  proc `customMinimumSize=`*(self: Control; size: Vector2) {.loadfrom("set_custom_minimum_size", 743155724).}
  proc setGlobalPosition*(self: Control; position: Vector2; keepOffsets: Bool = false) {.loadfrom("set_global_position", 2436320129).}
  proc `rotation=`*(self: Control; radians: Float) {.loadfrom("set_rotation", 373806689).}
  proc `rotationDegrees=`*(self: Control; degrees: Float) {.loadfrom("set_rotation_degrees", 373806689).}
  proc `scale=`*(self: Control; scale: Vector2) {.loadfrom("set_scale", 743155724).}
  proc `pivotOffset=`*(self: Control; pivotOffset: Vector2) {.loadfrom("set_pivot_offset", 743155724).}
  proc getBegin*(self: Control): Vector2 {.loadfrom("get_begin", 3341600327).}
  proc getEnd*(self: Control): Vector2 {.loadfrom("get_end", 3341600327).}
  proc position*(self: Control): Vector2 {.loadfrom("get_position", 3341600327).}
  proc size*(self: Control): Vector2 {.loadfrom("get_size", 3341600327).}
  proc rotation*(self: Control): Float {.loadfrom("get_rotation", 1740695150).}
  proc rotationDegrees*(self: Control): Float {.loadfrom("get_rotation_degrees", 1740695150).}
  proc scale*(self: Control): Vector2 {.loadfrom("get_scale", 3341600327).}
  proc pivotOffset*(self: Control): Vector2 {.loadfrom("get_pivot_offset", 3341600327).}
  proc customMinimumSize*(self: Control): Vector2 {.loadfrom("get_custom_minimum_size", 3341600327).}
  proc getParentAreaSize*(self: Control): Vector2 {.loadfrom("get_parent_area_size", 3341600327).}
  proc globalPosition*(self: Control): Vector2 {.loadfrom("get_global_position", 3341600327).}
  proc getScreenPosition*(self: Control): Vector2 {.loadfrom("get_screen_position", 3341600327).}
  proc getRect*(self: Control): Rect2 {.loadfrom("get_rect", 1639390495).}
  proc getGlobalRect*(self: Control): Rect2 {.loadfrom("get_global_rect", 1639390495).}
  proc `focusMode=`*(self: Control; mode: Control|>FocusMode) {.loadfrom("set_focus_mode", 3232914922).}
  proc focusMode*(self: Control): Control|>FocusMode {.loadfrom("get_focus_mode", 2132829277).}
  proc hasFocus*(self: Control): Bool {.loadfrom("has_focus", 36873697).}
  proc grabFocus*(self: Control) {.loadfrom("grab_focus", 3218959716).}
  proc releaseFocus*(self: Control) {.loadfrom("release_focus", 3218959716).}
  proc findPrevValidFocus*(self: Control): Control {.loadfrom("find_prev_valid_focus", 2783021301).}
  proc findNextValidFocus*(self: Control): Control {.loadfrom("find_next_valid_focus", 2783021301).}
  proc `hSizeFlags=`*(self: Control; flags: set[Control|>SizeFlags]) {.loadfrom("set_h_size_flags", 394851643).}
  proc hSizeFlags*(self: Control): set[Control|>SizeFlags] {.loadfrom("get_h_size_flags", 3781367401).}
  proc `stretchRatio=`*(self: Control; ratio: Float) {.loadfrom("set_stretch_ratio", 373806689).}
  proc stretchRatio*(self: Control): Float {.loadfrom("get_stretch_ratio", 1740695150).}
  proc `vSizeFlags=`*(self: Control; flags: set[Control|>SizeFlags]) {.loadfrom("set_v_size_flags", 394851643).}
  proc vSizeFlags*(self: Control): set[Control|>SizeFlags] {.loadfrom("get_v_size_flags", 3781367401).}
  proc `theme=`*(self: Control; theme: Ref[Theme]) {.loadfrom("set_theme", 2326690814).}
  proc theme*(self: Control): Ref[Theme] {.loadfrom("get_theme", 3846893731).}
  proc `themeTypeVariation=`*(self: Control; themeType: StringName) {.loadfrom("set_theme_type_variation", 3304788590).}
  proc themeTypeVariation*(self: Control): StringName {.loadfrom("get_theme_type_variation", 2002593661).}
  proc beginBulkThemeOverride*(self: Control) {.loadfrom("begin_bulk_theme_override", 3218959716).}
  proc endBulkThemeOverride*(self: Control) {.loadfrom("end_bulk_theme_override", 3218959716).}
  proc addThemeIconOverride*(self: Control; name: StringName; texture: Ref[Texture2D]) {.loadfrom("add_theme_icon_override", 1373065600).}
  proc addThemeStyleboxOverride*(self: Control; name: StringName; stylebox: Ref[StyleBox]) {.loadfrom("add_theme_stylebox_override", 4188838905).}
  proc addThemeFontOverride*(self: Control; name: StringName; font: Ref[Font]) {.loadfrom("add_theme_font_override", 3518018674).}
  proc addThemeFontSizeOverride*(self: Control; name: StringName; fontSize: int32) {.loadfrom("add_theme_font_size_override", 2415702435).}
  proc addThemeColorOverride*(self: Control; name: StringName; color: Color) {.loadfrom("add_theme_color_override", 4260178595).}
  proc addThemeConstantOverride*(self: Control; name: StringName; constant: int32) {.loadfrom("add_theme_constant_override", 2415702435).}
  proc removeThemeIconOverride*(self: Control; name: StringName) {.loadfrom("remove_theme_icon_override", 3304788590).}
  proc removeThemeStyleboxOverride*(self: Control; name: StringName) {.loadfrom("remove_theme_stylebox_override", 3304788590).}
  proc removeThemeFontOverride*(self: Control; name: StringName) {.loadfrom("remove_theme_font_override", 3304788590).}
  proc removeThemeFontSizeOverride*(self: Control; name: StringName) {.loadfrom("remove_theme_font_size_override", 3304788590).}
  proc removeThemeColorOverride*(self: Control; name: StringName) {.loadfrom("remove_theme_color_override", 3304788590).}
  proc removeThemeConstantOverride*(self: Control; name: StringName) {.loadfrom("remove_theme_constant_override", 3304788590).}
  proc getThemeIcon*(self: Control; name: StringName; themeType: StringName = ""): Ref[Texture2D] {.loadfrom("get_theme_icon", 2336455395).}
  proc getThemeStylebox*(self: Control; name: StringName; themeType: StringName = ""): Ref[StyleBox] {.loadfrom("get_theme_stylebox", 2759935355).}
  proc getThemeFont*(self: Control; name: StringName; themeType: StringName = ""): Ref[Font] {.loadfrom("get_theme_font", 387378635).}
  proc getThemeFontSize*(self: Control; name: StringName; themeType: StringName = ""): int32 {.loadfrom("get_theme_font_size", 229578101).}
  proc getThemeColor*(self: Control; name: StringName; themeType: StringName = ""): Color {.loadfrom("get_theme_color", 2377051548).}
  proc getThemeConstant*(self: Control; name: StringName; themeType: StringName = ""): int32 {.loadfrom("get_theme_constant", 229578101).}
  proc hasThemeIconOverride*(self: Control; name: StringName): Bool {.loadfrom("has_theme_icon_override", 2619796661).}
  proc hasThemeStyleboxOverride*(self: Control; name: StringName): Bool {.loadfrom("has_theme_stylebox_override", 2619796661).}
  proc hasThemeFontOverride*(self: Control; name: StringName): Bool {.loadfrom("has_theme_font_override", 2619796661).}
  proc hasThemeFontSizeOverride*(self: Control; name: StringName): Bool {.loadfrom("has_theme_font_size_override", 2619796661).}
  proc hasThemeColorOverride*(self: Control; name: StringName): Bool {.loadfrom("has_theme_color_override", 2619796661).}
  proc hasThemeConstantOverride*(self: Control; name: StringName): Bool {.loadfrom("has_theme_constant_override", 2619796661).}
  proc hasThemeIcon*(self: Control; name: StringName; themeType: StringName = ""): Bool {.loadfrom("has_theme_icon", 1187511791).}
  proc hasThemeStylebox*(self: Control; name: StringName; themeType: StringName = ""): Bool {.loadfrom("has_theme_stylebox", 1187511791).}
  proc hasThemeFont*(self: Control; name: StringName; themeType: StringName = ""): Bool {.loadfrom("has_theme_font", 1187511791).}
  proc hasThemeFontSize*(self: Control; name: StringName; themeType: StringName = ""): Bool {.loadfrom("has_theme_font_size", 1187511791).}
  proc hasThemeColor*(self: Control; name: StringName; themeType: StringName = ""): Bool {.loadfrom("has_theme_color", 1187511791).}
  proc hasThemeConstant*(self: Control; name: StringName; themeType: StringName = ""): Bool {.loadfrom("has_theme_constant", 1187511791).}
  proc getThemeDefaultBaseScale*(self: Control): Float {.loadfrom("get_theme_default_base_scale", 1740695150).}
  proc getThemeDefaultFont*(self: Control): Ref[Font] {.loadfrom("get_theme_default_font", 3229501585).}
  proc getThemeDefaultFontSize*(self: Control): int32 {.loadfrom("get_theme_default_font_size", 3905245786).}
  proc getParentControl*(self: Control): Control {.loadfrom("get_parent_control", 2783021301).}
  proc `hGrowDirection=`*(self: Control; direction: Control|>GrowDirection) {.loadfrom("set_h_grow_direction", 2022385301).}
  proc hGrowDirection*(self: Control): Control|>GrowDirection {.loadfrom("get_h_grow_direction", 3635610155).}
  proc `vGrowDirection=`*(self: Control; direction: Control|>GrowDirection) {.loadfrom("set_v_grow_direction", 2022385301).}
  proc vGrowDirection*(self: Control): Control|>GrowDirection {.loadfrom("get_v_grow_direction", 3635610155).}
  proc `tooltipText=`*(self: Control; hint: String) {.loadfrom("set_tooltip_text", 83702148).}
  proc tooltipText*(self: Control): String {.loadfrom("get_tooltip_text", 201670096).}
  proc getTooltip*(self: Control; atPosition: Vector2 = gdvec(0, 0)): String {.loadfrom("get_tooltip", 2895288280).}
  proc `defaultCursorShape=`*(self: Control; shape: Control|>CursorShape) {.loadfrom("set_default_cursor_shape", 217062046).}
  proc defaultCursorShape*(self: Control): Control|>CursorShape {.loadfrom("get_default_cursor_shape", 2359535750).}
  proc getCursorShape*(self: Control; position: Vector2 = gdvec(0, 0)): Control|>CursorShape {.loadfrom("get_cursor_shape", 1395773853).}
  proc `focusNeighbor=`*(self: Control; side: Side; neighbor: NodePath) {.loadfrom("set_focus_neighbor", 2024461774).}
  proc focusNeighbor*(self: Control; side: Side): NodePath {.loadfrom("get_focus_neighbor", 2757935761).}
  proc `focusNext=`*(self: Control; next: NodePath) {.loadfrom("set_focus_next", 1348162250).}
  proc focusNext*(self: Control): NodePath {.loadfrom("get_focus_next", 4075236667).}
  proc `focusPrevious=`*(self: Control; previous: NodePath) {.loadfrom("set_focus_previous", 1348162250).}
  proc focusPrevious*(self: Control): NodePath {.loadfrom("get_focus_previous", 4075236667).}
  proc forceDrag*(self: Control; data: ptr Variant; preview: Control) {.loadfrom("force_drag", 3191844692).}
  proc `mouseFilter=`*(self: Control; filter: Control|>MouseFilter) {.loadfrom("set_mouse_filter", 3891156122).}
  proc mouseFilter*(self: Control): Control|>MouseFilter {.loadfrom("get_mouse_filter", 1572545674).}
  proc `forcePassScrollEvents=`*(self: Control; forcePassScrollEvents: Bool) {.loadfrom("set_force_pass_scroll_events", 2586408642).}
  proc isForcePassScrollEvents*(self: Control): Bool {.loadfrom("is_force_pass_scroll_events", 36873697).}
  proc `clipContents=`*(self: Control; enable: Bool) {.loadfrom("set_clip_contents", 2586408642).}
  proc isClippingContents*(self: Control): Bool {.loadfrom("is_clipping_contents", 2240911060).}
  proc grabClickFocus*(self: Control) {.loadfrom("grab_click_focus", 3218959716).}
  proc setDragForwarding*(self: Control; dragFunc: Callable; canDropFunc: Callable; dropFunc: Callable) {.loadfrom("set_drag_forwarding", 1076571380).}
  proc setDragPreview*(self: Control; control: Control) {.loadfrom("set_drag_preview", 1496901182).}
  proc isDragSuccessful*(self: Control): Bool {.loadfrom("is_drag_successful", 36873697).}
  proc warpMouse*(self: Control; position: Vector2) {.loadfrom("warp_mouse", 743155724).}
  proc `shortcutContext=`*(self: Control; node: ptr Node) {.loadfrom("set_shortcut_context", 1078189570).}
  proc shortcutContext*(self: Control): Node {.loadfrom("get_shortcut_context", 3160264692).}
  proc updateMinimumSize*(self: Control) {.loadfrom("update_minimum_size", 3218959716).}
  proc `layoutDirection=`*(self: Control; direction: Control|>LayoutDirection) {.loadfrom("set_layout_direction", 3310692370).}
  proc layoutDirection*(self: Control): Control|>LayoutDirection {.loadfrom("get_layout_direction", 1546772008).}
  proc isLayoutRtl*(self: Control): Bool {.loadfrom("is_layout_rtl", 36873697).}
  proc `autoTranslate=`*(self: Control; enable: Bool) {.loadfrom("set_auto_translate", 2586408642).}
  proc isAutoTranslating*(self: Control): Bool {.loadfrom("is_auto_translating", 36873697).}
  proc `localizeNumeralSystem=`*(self: Control; enable: Bool) {.loadfrom("set_localize_numeral_system", 2586408642).}
  proc isLocalizingNumeralSystem*(self: Control): Bool {.loadfrom("is_localizing_numeral_system", 36873697).}

# Node2D
define_godot_engine_class_essencials(Node2D, CanvasItem)
Node2D.memberProcs:
  proc `position=`*(self: Node2D; position: Vector2) {.loadfrom("set_position", 743155724).}
  proc `rotation=`*(self: Node2D; radians: Float) {.loadfrom("set_rotation", 373806689).}
  proc `rotationDegrees=`*(self: Node2D; degrees: Float) {.loadfrom("set_rotation_degrees", 373806689).}
  proc `skew=`*(self: Node2D; radians: Float) {.loadfrom("set_skew", 373806689).}
  proc `scale=`*(self: Node2D; scale: Vector2) {.loadfrom("set_scale", 743155724).}
  proc position*(self: Node2D): Vector2 {.loadfrom("get_position", 3341600327).}
  proc rotation*(self: Node2D): Float {.loadfrom("get_rotation", 1740695150).}
  proc rotationDegrees*(self: Node2D): Float {.loadfrom("get_rotation_degrees", 1740695150).}
  proc skew*(self: Node2D): Float {.loadfrom("get_skew", 1740695150).}
  proc scale*(self: Node2D): Vector2 {.loadfrom("get_scale", 3341600327).}
  proc rotate*(self: Node2D; radians: Float) {.loadfrom("rotate", 373806689).}
  proc moveLocalX*(self: Node2D; delta: Float; scaled: Bool = false) {.loadfrom("move_local_x", 2087892650).}
  proc moveLocalY*(self: Node2D; delta: Float; scaled: Bool = false) {.loadfrom("move_local_y", 2087892650).}
  proc translate*(self: Node2D; offset: Vector2) {.loadfrom("translate", 743155724).}
  proc globalTranslate*(self: Node2D; offset: Vector2) {.loadfrom("global_translate", 743155724).}
  proc applyScale*(self: Node2D; ratio: Vector2) {.loadfrom("apply_scale", 743155724).}
  proc `globalPosition=`*(self: Node2D; position: Vector2) {.loadfrom("set_global_position", 743155724).}
  proc globalPosition*(self: Node2D): Vector2 {.loadfrom("get_global_position", 3341600327).}
  proc `globalRotation=`*(self: Node2D; radians: Float) {.loadfrom("set_global_rotation", 373806689).}
  proc `globalRotationDegrees=`*(self: Node2D; degrees: Float) {.loadfrom("set_global_rotation_degrees", 373806689).}
  proc globalRotation*(self: Node2D): Float {.loadfrom("get_global_rotation", 1740695150).}
  proc globalRotationDegrees*(self: Node2D): Float {.loadfrom("get_global_rotation_degrees", 1740695150).}
  proc `globalSkew=`*(self: Node2D; radians: Float) {.loadfrom("set_global_skew", 373806689).}
  proc globalSkew*(self: Node2D): Float {.loadfrom("get_global_skew", 1740695150).}
  proc `globalScale=`*(self: Node2D; scale: Vector2) {.loadfrom("set_global_scale", 743155724).}
  proc globalScale*(self: Node2D): Vector2 {.loadfrom("get_global_scale", 3341600327).}
  proc `transform=`*(self: Node2D; xform: Transform2D) {.loadfrom("set_transform", 2761652528).}
  proc `globalTransform=`*(self: Node2D; xform: Transform2D) {.loadfrom("set_global_transform", 2761652528).}
  proc lookAt*(self: Node2D; point: Vector2) {.loadfrom("look_at", 743155724).}
  proc getAngleTo*(self: Node2D; point: Vector2): Float {.loadfrom("get_angle_to", 2276447920).}
  proc toLocal*(self: Node2D; globalPoint: Vector2): Vector2 {.loadfrom("to_local", 2656412154).}
  proc toGlobal*(self: Node2D; localPoint: Vector2): Vector2 {.loadfrom("to_global", 2656412154).}
  proc getRelativeTransformToParent*(self: Node2D; parent: ptr Node): Transform2D {.loadfrom("get_relative_transform_to_parent", 904556875).}

# ParallaxBackground
define_godot_engine_class_essencials(ParallaxBackground, CanvasLayer)
ParallaxBackground.memberProcs:
  proc `scrollOffset=`*(self: ParallaxBackground; offset: Vector2) {.loadfrom("set_scroll_offset", 743155724).}
  proc scrollOffset*(self: ParallaxBackground): Vector2 {.loadfrom("get_scroll_offset", 3341600327).}
  proc `scrollBaseOffset=`*(self: ParallaxBackground; offset: Vector2) {.loadfrom("set_scroll_base_offset", 743155724).}
  proc scrollBaseOffset*(self: ParallaxBackground): Vector2 {.loadfrom("get_scroll_base_offset", 3341600327).}
  proc `scrollBaseScale=`*(self: ParallaxBackground; scale: Vector2) {.loadfrom("set_scroll_base_scale", 743155724).}
  proc scrollBaseScale*(self: ParallaxBackground): Vector2 {.loadfrom("get_scroll_base_scale", 3341600327).}
  proc `limitBegin=`*(self: ParallaxBackground; offset: Vector2) {.loadfrom("set_limit_begin", 743155724).}
  proc limitBegin*(self: ParallaxBackground): Vector2 {.loadfrom("get_limit_begin", 3341600327).}
  proc `limitEnd=`*(self: ParallaxBackground; offset: Vector2) {.loadfrom("set_limit_end", 743155724).}
  proc limitEnd*(self: ParallaxBackground): Vector2 {.loadfrom("get_limit_end", 3341600327).}
  proc `ignoreCameraZoom=`*(self: ParallaxBackground; ignore: Bool) {.loadfrom("set_ignore_camera_zoom", 2586408642).}
  proc isIgnoreCameraZoom*(self: ParallaxBackground): Bool {.loadfrom("is_ignore_camera_zoom", 2240911060).}

# AudioListener3D
define_godot_engine_class_essencials(AudioListener3D, Node3D)
AudioListener3D.memberProcs:
  proc makeCurrent*(self: AudioListener3D) {.loadfrom("make_current", 3218959716).}
  proc clearCurrent*(self: AudioListener3D) {.loadfrom("clear_current", 3218959716).}
  proc isCurrent*(self: AudioListener3D): Bool {.loadfrom("is_current", 36873697).}
  proc getListenerTransform*(self: AudioListener3D): Transform3D {.loadfrom("get_listener_transform", 3229777777).}

# AudioStreamPlayer3D
define_godot_engine_class_essencials(AudioStreamPlayer3D, Node3D)
AudioStreamPlayer3D.memberProcs:
  proc `stream=`*(self: AudioStreamPlayer3D; stream: Ref[AudioStream]) {.loadfrom("set_stream", 2210767741).}
  proc stream*(self: AudioStreamPlayer3D): Ref[AudioStream] {.loadfrom("get_stream", 160907539).}
  proc `volumeDb=`*(self: AudioStreamPlayer3D; volumeDb: Float) {.loadfrom("set_volume_db", 373806689).}
  proc volumeDb*(self: AudioStreamPlayer3D): Float {.loadfrom("get_volume_db", 1740695150).}
  proc `unitSize=`*(self: AudioStreamPlayer3D; unitSize: Float) {.loadfrom("set_unit_size", 373806689).}
  proc unitSize*(self: AudioStreamPlayer3D): Float {.loadfrom("get_unit_size", 1740695150).}
  proc `maxDb=`*(self: AudioStreamPlayer3D; maxDb: Float) {.loadfrom("set_max_db", 373806689).}
  proc maxDb*(self: AudioStreamPlayer3D): Float {.loadfrom("get_max_db", 1740695150).}
  proc `pitchScale=`*(self: AudioStreamPlayer3D; pitchScale: Float) {.loadfrom("set_pitch_scale", 373806689).}
  proc pitchScale*(self: AudioStreamPlayer3D): Float {.loadfrom("get_pitch_scale", 1740695150).}
  proc play*(self: AudioStreamPlayer3D; fromPosition: Float = 0.0) {.loadfrom("play", 1958160172).}
  proc seek*(self: AudioStreamPlayer3D; toPosition: Float) {.loadfrom("seek", 373806689).}
  proc stop*(self: AudioStreamPlayer3D) {.loadfrom("stop", 3218959716).}
  proc isPlaying*(self: AudioStreamPlayer3D): Bool {.loadfrom("is_playing", 36873697).}
  proc getPlaybackPosition*(self: AudioStreamPlayer3D): Float {.loadfrom("get_playback_position", 191475506).}
  proc `bus=`*(self: AudioStreamPlayer3D; bus: StringName) {.loadfrom("set_bus", 3304788590).}
  proc bus*(self: AudioStreamPlayer3D): StringName {.loadfrom("get_bus", 2002593661).}
  proc `autoplay=`*(self: AudioStreamPlayer3D; enable: Bool) {.loadfrom("set_autoplay", 2586408642).}
  proc isAutoplayEnabled*(self: AudioStreamPlayer3D): Bool {.loadfrom("is_autoplay_enabled", 2240911060).}
  proc `maxDistance=`*(self: AudioStreamPlayer3D; meters: Float) {.loadfrom("set_max_distance", 373806689).}
  proc maxDistance*(self: AudioStreamPlayer3D): Float {.loadfrom("get_max_distance", 1740695150).}
  proc `areaMask=`*(self: AudioStreamPlayer3D; mask: uint32) {.loadfrom("set_area_mask", 1286410249).}
  proc areaMask*(self: AudioStreamPlayer3D): uint32 {.loadfrom("get_area_mask", 3905245786).}
  proc `emissionAngle=`*(self: AudioStreamPlayer3D; degrees: Float) {.loadfrom("set_emission_angle", 373806689).}
  proc emissionAngle*(self: AudioStreamPlayer3D): Float {.loadfrom("get_emission_angle", 1740695150).}
  proc `emissionAngleEnabled=`*(self: AudioStreamPlayer3D; enabled: Bool) {.loadfrom("set_emission_angle_enabled", 2586408642).}
  proc isEmissionAngleEnabled*(self: AudioStreamPlayer3D): Bool {.loadfrom("is_emission_angle_enabled", 36873697).}
  proc `emissionAngleFilterAttenuationDb=`*(self: AudioStreamPlayer3D; db: Float) {.loadfrom("set_emission_angle_filter_attenuation_db", 373806689).}
  proc emissionAngleFilterAttenuationDb*(self: AudioStreamPlayer3D): Float {.loadfrom("get_emission_angle_filter_attenuation_db", 1740695150).}
  proc `attenuationFilterCutoffHz=`*(self: AudioStreamPlayer3D; degrees: Float) {.loadfrom("set_attenuation_filter_cutoff_hz", 373806689).}
  proc attenuationFilterCutoffHz*(self: AudioStreamPlayer3D): Float {.loadfrom("get_attenuation_filter_cutoff_hz", 1740695150).}
  proc `attenuationFilterDb=`*(self: AudioStreamPlayer3D; db: Float) {.loadfrom("set_attenuation_filter_db", 373806689).}
  proc attenuationFilterDb*(self: AudioStreamPlayer3D): Float {.loadfrom("get_attenuation_filter_db", 1740695150).}
  proc `attenuationModel=`*(self: AudioStreamPlayer3D; model: AudioStreamPlayer3D|>AttenuationModel) {.loadfrom("set_attenuation_model", 2988086229).}
  proc attenuationModel*(self: AudioStreamPlayer3D): AudioStreamPlayer3D|>AttenuationModel {.loadfrom("get_attenuation_model", 3035106060).}
  proc `dopplerTracking=`*(self: AudioStreamPlayer3D; mode: AudioStreamPlayer3D|>DopplerTracking) {.loadfrom("set_doppler_tracking", 3968161450).}
  proc dopplerTracking*(self: AudioStreamPlayer3D): AudioStreamPlayer3D|>DopplerTracking {.loadfrom("get_doppler_tracking", 1702418664).}
  proc `streamPaused=`*(self: AudioStreamPlayer3D; pause: Bool) {.loadfrom("set_stream_paused", 2586408642).}
  proc streamPaused*(self: AudioStreamPlayer3D): Bool {.loadfrom("get_stream_paused", 36873697).}
  proc `maxPolyphony=`*(self: AudioStreamPlayer3D; maxPolyphony: int32) {.loadfrom("set_max_polyphony", 1286410249).}
  proc maxPolyphony*(self: AudioStreamPlayer3D): int32 {.loadfrom("get_max_polyphony", 3905245786).}
  proc `panningStrength=`*(self: AudioStreamPlayer3D; panningStrength: Float) {.loadfrom("set_panning_strength", 373806689).}
  proc panningStrength*(self: AudioStreamPlayer3D): Float {.loadfrom("get_panning_strength", 1740695150).}
  proc hasStreamPlayback*(self: AudioStreamPlayer3D): Bool {.loadfrom("has_stream_playback", 2240911060).}
  proc getStreamPlayback*(self: AudioStreamPlayer3D): Ref[AudioStreamPlayback] {.loadfrom("get_stream_playback", 210135309).}

# BoneAttachment3D
define_godot_engine_class_essencials(BoneAttachment3D, Node3D)
BoneAttachment3D.memberProcs:
  proc `boneName=`*(self: BoneAttachment3D; boneName: String) {.loadfrom("set_bone_name", 83702148).}
  proc boneName*(self: BoneAttachment3D): String {.loadfrom("get_bone_name", 201670096).}
  proc `boneIdx=`*(self: BoneAttachment3D; boneIdx: int32) {.loadfrom("set_bone_idx", 1286410249).}
  proc boneIdx*(self: BoneAttachment3D): int32 {.loadfrom("get_bone_idx", 3905245786).}
  proc onBonePoseUpdate*(self: BoneAttachment3D; boneIndex: int32) {.loadfrom("on_bone_pose_update", 1286410249).}
  proc `overridePose=`*(self: BoneAttachment3D; overridePose: Bool) {.loadfrom("set_override_pose", 2586408642).}
  proc overridePose*(self: BoneAttachment3D): Bool {.loadfrom("get_override_pose", 36873697).}
  proc setUseExternalSkeleton*(self: BoneAttachment3D; useExternalSkeleton: Bool) {.loadfrom("set_use_external_skeleton", 2586408642).}
  proc getUseExternalSkeleton*(self: BoneAttachment3D): Bool {.loadfrom("get_use_external_skeleton", 36873697).}
  proc setExternalSkeleton*(self: BoneAttachment3D; externalSkeleton: NodePath) {.loadfrom("set_external_skeleton", 1348162250).}
  proc getExternalSkeleton*(self: BoneAttachment3D): NodePath {.loadfrom("get_external_skeleton", 4075236667).}

# Camera3D
define_godot_engine_class_essencials(Camera3D, Node3D)
Camera3D.memberProcs:
  proc projectRayNormal*(self: Camera3D; screenPoint: Vector2): Vector3 {.loadfrom("project_ray_normal", 1718073306).}
  proc projectLocalRayNormal*(self: Camera3D; screenPoint: Vector2): Vector3 {.loadfrom("project_local_ray_normal", 1718073306).}
  proc projectRayOrigin*(self: Camera3D; screenPoint: Vector2): Vector3 {.loadfrom("project_ray_origin", 1718073306).}
  proc unprojectPosition*(self: Camera3D; worldPoint: Vector3): Vector2 {.loadfrom("unproject_position", 3758901831).}
  proc isPositionBehind*(self: Camera3D; worldPoint: Vector3): Bool {.loadfrom("is_position_behind", 3108956480).}
  proc projectPosition*(self: Camera3D; screenPoint: Vector2; zDepth: Float): Vector3 {.loadfrom("project_position", 2171975744).}
  proc setPerspective*(self: Camera3D; fov: Float; zNear: Float; zFar: Float) {.loadfrom("set_perspective", 2385087082).}
  proc setOrthogonal*(self: Camera3D; size: Float; zNear: Float; zFar: Float) {.loadfrom("set_orthogonal", 2385087082).}
  proc setFrustum*(self: Camera3D; size: Float; offset: Vector2; zNear: Float; zFar: Float) {.loadfrom("set_frustum", 354890663).}
  proc makeCurrent*(self: Camera3D) {.loadfrom("make_current", 3218959716).}
  proc clearCurrent*(self: Camera3D; enableNext: Bool = true) {.loadfrom("clear_current", 3216645846).}
  proc `current=`*(self: Camera3D; enabled: Bool) {.loadfrom("set_current", 2586408642).}
  proc isCurrent*(self: Camera3D): Bool {.loadfrom("is_current", 36873697).}
  proc getCameraTransform*(self: Camera3D): Transform3D {.loadfrom("get_camera_transform", 3229777777).}
  proc fov*(self: Camera3D): Float {.loadfrom("get_fov", 1740695150).}
  proc frustumOffset*(self: Camera3D): Vector2 {.loadfrom("get_frustum_offset", 3341600327).}
  proc size*(self: Camera3D): Float {.loadfrom("get_size", 1740695150).}
  proc far*(self: Camera3D): Float {.loadfrom("get_far", 1740695150).}
  proc near*(self: Camera3D): Float {.loadfrom("get_near", 1740695150).}
  proc `fov=`*(self: Camera3D; fov: Float) {.loadfrom("set_fov", 373806689).}
  proc `frustumOffset=`*(self: Camera3D; offset: Vector2) {.loadfrom("set_frustum_offset", 743155724).}
  proc `size=`*(self: Camera3D; size: Float) {.loadfrom("set_size", 373806689).}
  proc `far=`*(self: Camera3D; far: Float) {.loadfrom("set_far", 373806689).}
  proc `near=`*(self: Camera3D; near: Float) {.loadfrom("set_near", 373806689).}
  proc projection*(self: Camera3D): Camera3D|>ProjectionType {.loadfrom("get_projection", 2624185235).}
  proc `projection=`*(self: Camera3D; mode: Camera3D|>ProjectionType) {.loadfrom("set_projection", 4218540108).}
  proc `hOffset=`*(self: Camera3D; offset: Float) {.loadfrom("set_h_offset", 373806689).}
  proc hOffset*(self: Camera3D): Float {.loadfrom("get_h_offset", 1740695150).}
  proc `vOffset=`*(self: Camera3D; offset: Float) {.loadfrom("set_v_offset", 373806689).}
  proc vOffset*(self: Camera3D): Float {.loadfrom("get_v_offset", 1740695150).}
  proc `cullMask=`*(self: Camera3D; mask: uint32) {.loadfrom("set_cull_mask", 1286410249).}
  proc cullMask*(self: Camera3D): uint32 {.loadfrom("get_cull_mask", 3905245786).}
  proc `environment=`*(self: Camera3D; env: Ref[Environment]) {.loadfrom("set_environment", 4143518816).}
  proc environment*(self: Camera3D): Ref[Environment] {.loadfrom("get_environment", 3082064660).}
  proc `attributes=`*(self: Camera3D; env: Ref[CameraAttributes]) {.loadfrom("set_attributes", 2817810567).}
  proc attributes*(self: Camera3D): Ref[CameraAttributes] {.loadfrom("get_attributes", 3921283215).}
  proc `keepAspectMode=`*(self: Camera3D; mode: Camera3D|>KeepAspect) {.loadfrom("set_keep_aspect_mode", 1740651252).}
  proc keepAspectMode*(self: Camera3D): Camera3D|>KeepAspect {.loadfrom("get_keep_aspect_mode", 2790278316).}
  proc `dopplerTracking=`*(self: Camera3D; mode: Camera3D|>DopplerTracking) {.loadfrom("set_doppler_tracking", 3109431270).}
  proc dopplerTracking*(self: Camera3D): Camera3D|>DopplerTracking {.loadfrom("get_doppler_tracking", 1584483649).}
  proc getFrustum*(self: Camera3D): TypedArray[Plane] {.loadfrom("get_frustum", 3995934104).}
  proc isPositionInFrustum*(self: Camera3D; worldPoint: Vector3): Bool {.loadfrom("is_position_in_frustum", 3108956480).}
  proc getCameraRid*(self: Camera3D): RID {.loadfrom("get_camera_rid", 2944877500).}
  proc getPyramidShapeRid*(self: Camera3D): RID {.loadfrom("get_pyramid_shape_rid", 529393457).}
  proc setCullMaskValue*(self: Camera3D; layerNumber: int32; value: Bool) {.loadfrom("set_cull_mask_value", 300928843).}
  proc getCullMaskValue*(self: Camera3D; layerNumber: int32): Bool {.loadfrom("get_cull_mask_value", 1116898809).}

# CollisionObject3D
define_godot_engine_class_essencials(CollisionObject3D, Node3D)
method inputEvent*(self: CollisionObject3D; camera: Camera3D; event: Ref[InputEvent]; position: Vector3; normal: Vector3; shapeIdx: int32) {.base.} = (discard)
method mouseEnter*(self: CollisionObject3D) {.base.} = (discard)
method mouseExit*(self: CollisionObject3D) {.base.} = (discard)
CollisionObject3D.memberProcs:
  proc `collisionLayer=`*(self: CollisionObject3D; layer: uint32) {.loadfrom("set_collision_layer", 1286410249).}
  proc collisionLayer*(self: CollisionObject3D): uint32 {.loadfrom("get_collision_layer", 3905245786).}
  proc `collisionMask=`*(self: CollisionObject3D; mask: uint32) {.loadfrom("set_collision_mask", 1286410249).}
  proc collisionMask*(self: CollisionObject3D): uint32 {.loadfrom("get_collision_mask", 3905245786).}
  proc setCollisionLayerValue*(self: CollisionObject3D; layerNumber: int32; value: Bool) {.loadfrom("set_collision_layer_value", 300928843).}
  proc getCollisionLayerValue*(self: CollisionObject3D; layerNumber: int32): Bool {.loadfrom("get_collision_layer_value", 1116898809).}
  proc setCollisionMaskValue*(self: CollisionObject3D; layerNumber: int32; value: Bool) {.loadfrom("set_collision_mask_value", 300928843).}
  proc getCollisionMaskValue*(self: CollisionObject3D; layerNumber: int32): Bool {.loadfrom("get_collision_mask_value", 1116898809).}
  proc `collisionPriority=`*(self: CollisionObject3D; priority: Float) {.loadfrom("set_collision_priority", 373806689).}
  proc collisionPriority*(self: CollisionObject3D): Float {.loadfrom("get_collision_priority", 1740695150).}
  proc `disableMode=`*(self: CollisionObject3D; mode: CollisionObject3D|>DisableMode) {.loadfrom("set_disable_mode", 1623620376).}
  proc disableMode*(self: CollisionObject3D): CollisionObject3D|>DisableMode {.loadfrom("get_disable_mode", 410164780).}
  proc `rayPickable=`*(self: CollisionObject3D; rayPickable: Bool) {.loadfrom("set_ray_pickable", 2586408642).}
  proc isRayPickable*(self: CollisionObject3D): Bool {.loadfrom("is_ray_pickable", 36873697).}
  proc `captureInputOnDrag=`*(self: CollisionObject3D; enable: Bool) {.loadfrom("set_capture_input_on_drag", 2586408642).}
  proc captureInputOnDrag*(self: CollisionObject3D): Bool {.loadfrom("get_capture_input_on_drag", 36873697).}
  proc getRid*(self: CollisionObject3D): RID {.loadfrom("get_rid", 2944877500).}
  proc createShapeOwner*(self: CollisionObject3D; owner: ptr Object): uint32 {.loadfrom("create_shape_owner", 3429307534).}
  proc removeShapeOwner*(self: CollisionObject3D; ownerId: uint32) {.loadfrom("remove_shape_owner", 1286410249).}
  proc getShapeOwners*(self: CollisionObject3D): PackedInt32Array {.loadfrom("get_shape_owners", 969006518).}
  proc shapeOwnerSetTransform*(self: CollisionObject3D; ownerId: uint32; transform: Transform3D) {.loadfrom("shape_owner_set_transform", 3616898986).}
  proc shapeOwnerGetTransform*(self: CollisionObject3D; ownerId: uint32): Transform3D {.loadfrom("shape_owner_get_transform", 1965739696).}
  proc shapeOwnerGetOwner*(self: CollisionObject3D; ownerId: uint32): Object {.loadfrom("shape_owner_get_owner", 3332903315).}
  proc shapeOwnerSetDisabled*(self: CollisionObject3D; ownerId: uint32; disabled: Bool) {.loadfrom("shape_owner_set_disabled", 300928843).}
  proc isShapeOwnerDisabled*(self: CollisionObject3D; ownerId: uint32): Bool {.loadfrom("is_shape_owner_disabled", 1116898809).}
  proc shapeOwnerAddShape*(self: CollisionObject3D; ownerId: uint32; shape: Ref[Shape3D]) {.loadfrom("shape_owner_add_shape", 2566676345).}
  proc shapeOwnerGetShapeCount*(self: CollisionObject3D; ownerId: uint32): int32 {.loadfrom("shape_owner_get_shape_count", 923996154).}
  proc shapeOwnerGetShape*(self: CollisionObject3D; ownerId: uint32; shapeId: int32): Ref[Shape3D] {.loadfrom("shape_owner_get_shape", 4015519174).}
  proc shapeOwnerGetShapeIndex*(self: CollisionObject3D; ownerId: uint32; shapeId: int32): int32 {.loadfrom("shape_owner_get_shape_index", 3175239445).}
  proc shapeOwnerRemoveShape*(self: CollisionObject3D; ownerId: uint32; shapeId: int32) {.loadfrom("shape_owner_remove_shape", 3937882851).}
  proc shapeOwnerClearShapes*(self: CollisionObject3D; ownerId: uint32) {.loadfrom("shape_owner_clear_shapes", 1286410249).}
  proc shapeFindOwner*(self: CollisionObject3D; shapeIndex: int32): uint32 {.loadfrom("shape_find_owner", 923996154).}

# CollisionPolygon3D
define_godot_engine_class_essencials(CollisionPolygon3D, Node3D)
CollisionPolygon3D.memberProcs:
  proc `depth=`*(self: CollisionPolygon3D; depth: Float) {.loadfrom("set_depth", 373806689).}
  proc depth*(self: CollisionPolygon3D): Float {.loadfrom("get_depth", 1740695150).}
  proc `polygon=`*(self: CollisionPolygon3D; polygon: PackedVector2Array) {.loadfrom("set_polygon", 1509147220).}
  proc polygon*(self: CollisionPolygon3D): PackedVector2Array {.loadfrom("get_polygon", 2961356807).}
  proc `disabled=`*(self: CollisionPolygon3D; disabled: Bool) {.loadfrom("set_disabled", 2586408642).}
  proc isDisabled*(self: CollisionPolygon3D): Bool {.loadfrom("is_disabled", 36873697).}
  proc `margin=`*(self: CollisionPolygon3D; margin: Float) {.loadfrom("set_margin", 373806689).}
  proc margin*(self: CollisionPolygon3D): Float {.loadfrom("get_margin", 1740695150).}

# CollisionShape3D
define_godot_engine_class_essencials(CollisionShape3D, Node3D)
CollisionShape3D.memberProcs:
  proc resourceChanged*(self: CollisionShape3D; resource: Ref[Resource]) {.loadfrom("resource_changed", 968641751).}
  proc `shape=`*(self: CollisionShape3D; shape: Ref[Shape3D]) {.loadfrom("set_shape", 1549710052).}
  proc shape*(self: CollisionShape3D): Ref[Shape3D] {.loadfrom("get_shape", 3214262478).}
  proc `disabled=`*(self: CollisionShape3D; enable: Bool) {.loadfrom("set_disabled", 2586408642).}
  proc isDisabled*(self: CollisionShape3D): Bool {.loadfrom("is_disabled", 36873697).}
  proc makeConvexFromSiblings*(self: CollisionShape3D) {.loadfrom("make_convex_from_siblings", 3218959716).}

# GridMap
define_godot_engine_class_essencials(GridMap, Node3D)
GridMap.memberProcs:
  proc `collisionLayer=`*(self: GridMap; layer: uint32) {.loadfrom("set_collision_layer", 1286410249).}
  proc collisionLayer*(self: GridMap): uint32 {.loadfrom("get_collision_layer", 3905245786).}
  proc `collisionMask=`*(self: GridMap; mask: uint32) {.loadfrom("set_collision_mask", 1286410249).}
  proc collisionMask*(self: GridMap): uint32 {.loadfrom("get_collision_mask", 3905245786).}
  proc setCollisionMaskValue*(self: GridMap; layerNumber: int32; value: Bool) {.loadfrom("set_collision_mask_value", 300928843).}
  proc getCollisionMaskValue*(self: GridMap; layerNumber: int32): Bool {.loadfrom("get_collision_mask_value", 1116898809).}
  proc setCollisionLayerValue*(self: GridMap; layerNumber: int32; value: Bool) {.loadfrom("set_collision_layer_value", 300928843).}
  proc getCollisionLayerValue*(self: GridMap; layerNumber: int32): Bool {.loadfrom("get_collision_layer_value", 1116898809).}
  proc `collisionPriority=`*(self: GridMap; priority: Float) {.loadfrom("set_collision_priority", 373806689).}
  proc collisionPriority*(self: GridMap): Float {.loadfrom("get_collision_priority", 1740695150).}
  proc `physicsMaterial=`*(self: GridMap; material: Ref[PhysicsMaterial]) {.loadfrom("set_physics_material", 1784508650).}
  proc physicsMaterial*(self: GridMap): Ref[PhysicsMaterial] {.loadfrom("get_physics_material", 2521850424).}
  proc `bakeNavigation=`*(self: GridMap; bakeNavigation: Bool) {.loadfrom("set_bake_navigation", 2586408642).}
  proc isBakingNavigation*(self: GridMap): Bool {.loadfrom("is_baking_navigation", 2240911060).}
  proc setNavigationMap*(self: GridMap; navigationMap: RID) {.loadfrom("set_navigation_map", 2722037293).}
  proc getNavigationMap*(self: GridMap): RID {.loadfrom("get_navigation_map", 2944877500).}
  proc `meshLibrary=`*(self: GridMap; meshLibrary: Ref[MeshLibrary]) {.loadfrom("set_mesh_library", 1488083439).}
  proc meshLibrary*(self: GridMap): Ref[MeshLibrary] {.loadfrom("get_mesh_library", 3350993772).}
  proc `cellSize=`*(self: GridMap; size: Vector3) {.loadfrom("set_cell_size", 3460891852).}
  proc cellSize*(self: GridMap): Vector3 {.loadfrom("get_cell_size", 3360562783).}
  proc `cellScale=`*(self: GridMap; scale: Float) {.loadfrom("set_cell_scale", 373806689).}
  proc cellScale*(self: GridMap): Float {.loadfrom("get_cell_scale", 1740695150).}
  proc `octantSize=`*(self: GridMap; size: int32) {.loadfrom("set_octant_size", 1286410249).}
  proc octantSize*(self: GridMap): int32 {.loadfrom("get_octant_size", 3905245786).}
  proc setCellItem*(self: GridMap; position: Vector3i; item: int32; orientation: int32 = 0) {.loadfrom("set_cell_item", 4177201334).}
  proc getCellItem*(self: GridMap; position: Vector3i): int32 {.loadfrom("get_cell_item", 3724960147).}
  proc getCellItemOrientation*(self: GridMap; position: Vector3i): int32 {.loadfrom("get_cell_item_orientation", 3724960147).}
  proc getCellItemBasis*(self: GridMap; position: Vector3i): Basis {.loadfrom("get_cell_item_basis", 3493604918).}
  proc getBasisWithOrthogonalIndex*(self: GridMap; index: int32): Basis {.loadfrom("get_basis_with_orthogonal_index", 2816196998).}
  proc getOrthogonalIndexFromBasis*(self: GridMap; basis: Basis): int32 {.loadfrom("get_orthogonal_index_from_basis", 4210359952).}
  proc localToMap*(self: GridMap; localPosition: Vector3): Vector3i {.loadfrom("local_to_map", 1257687843).}
  proc mapToLocal*(self: GridMap; mapPosition: Vector3i): Vector3 {.loadfrom("map_to_local", 1088329196).}
  proc resourceChanged*(self: GridMap; resource: Ref[Resource]) {.loadfrom("resource_changed", 968641751).}
  proc `centerX=`*(self: GridMap; enable: Bool) {.loadfrom("set_center_x", 2586408642).}
  proc centerX*(self: GridMap): Bool {.loadfrom("get_center_x", 36873697).}
  proc `centerY=`*(self: GridMap; enable: Bool) {.loadfrom("set_center_y", 2586408642).}
  proc centerY*(self: GridMap): Bool {.loadfrom("get_center_y", 36873697).}
  proc `centerZ=`*(self: GridMap; enable: Bool) {.loadfrom("set_center_z", 2586408642).}
  proc centerZ*(self: GridMap): Bool {.loadfrom("get_center_z", 36873697).}
  proc clear*(self: GridMap) {.loadfrom("clear", 3218959716).}
  proc getUsedCells*(self: GridMap): TypedArray[Vector3i] {.loadfrom("get_used_cells", 3995934104).}
  proc getUsedCellsByItem*(self: GridMap; item: int32): TypedArray[Vector3i] {.loadfrom("get_used_cells_by_item", 663333327).}
  proc getMeshes*(self: GridMap): Array {.loadfrom("get_meshes", 3995934104).}
  proc getBakeMeshes*(self: GridMap): Array {.loadfrom("get_bake_meshes", 2915620761).}
  proc getBakeMeshInstance*(self: GridMap; idx: int32): RID {.loadfrom("get_bake_mesh_instance", 937000113).}
  proc clearBakedMeshes*(self: GridMap) {.loadfrom("clear_baked_meshes", 3218959716).}
  proc makeBakedMeshes*(self: GridMap; genLightmapUv: Bool = false; lightmapUvTexelSize: Float = 0.1) {.loadfrom("make_baked_meshes", 3609286057).}

# ImporterMeshInstance3D
define_godot_engine_class_essencials(ImporterMeshInstance3D, Node3D)
ImporterMeshInstance3D.memberProcs:
  proc `mesh=`*(self: ImporterMeshInstance3D; mesh: Ref[ImporterMesh]) {.loadfrom("set_mesh", 2255166972).}
  proc mesh*(self: ImporterMeshInstance3D): Ref[ImporterMesh] {.loadfrom("get_mesh", 3161779525).}
  proc `skin=`*(self: ImporterMeshInstance3D; skin: Ref[Skin]) {.loadfrom("set_skin", 3971435618).}
  proc skin*(self: ImporterMeshInstance3D): Ref[Skin] {.loadfrom("get_skin", 2074563878).}
  proc `skeletonPath=`*(self: ImporterMeshInstance3D; skeletonPath: NodePath) {.loadfrom("set_skeleton_path", 1348162250).}
  proc skeletonPath*(self: ImporterMeshInstance3D): NodePath {.loadfrom("get_skeleton_path", 4075236667).}

# Joint3D
define_godot_engine_class_essencials(Joint3D, Node3D)
Joint3D.memberProcs:
  proc `nodeA=`*(self: Joint3D; node: NodePath) {.loadfrom("set_node_a", 1348162250).}
  proc nodeA*(self: Joint3D): NodePath {.loadfrom("get_node_a", 4075236667).}
  proc `nodeB=`*(self: Joint3D; node: NodePath) {.loadfrom("set_node_b", 1348162250).}
  proc nodeB*(self: Joint3D): NodePath {.loadfrom("get_node_b", 4075236667).}
  proc `solverPriority=`*(self: Joint3D; priority: int32) {.loadfrom("set_solver_priority", 1286410249).}
  proc solverPriority*(self: Joint3D): int32 {.loadfrom("get_solver_priority", 3905245786).}
  proc `excludeNodesFromCollision=`*(self: Joint3D; enable: Bool) {.loadfrom("set_exclude_nodes_from_collision", 2586408642).}
  proc excludeNodesFromCollision*(self: Joint3D): Bool {.loadfrom("get_exclude_nodes_from_collision", 36873697).}

# LightmapProbe
define_godot_engine_class_essencials(LightmapProbe, Node3D)

# Marker3D
define_godot_engine_class_essencials(Marker3D, Node3D)
Marker3D.memberProcs:
  proc `gizmoExtents=`*(self: Marker3D; extents: Float) {.loadfrom("set_gizmo_extents", 373806689).}
  proc gizmoExtents*(self: Marker3D): Float {.loadfrom("get_gizmo_extents", 1740695150).}

# NavigationLink3D
define_godot_engine_class_essencials(NavigationLink3D, Node3D)
NavigationLink3D.memberProcs:
  proc `enabled=`*(self: NavigationLink3D; enabled: Bool) {.loadfrom("set_enabled", 2586408642).}
  proc isEnabled*(self: NavigationLink3D): Bool {.loadfrom("is_enabled", 36873697).}
  proc `bidirectional=`*(self: NavigationLink3D; bidirectional: Bool) {.loadfrom("set_bidirectional", 2586408642).}
  proc isBidirectional*(self: NavigationLink3D): Bool {.loadfrom("is_bidirectional", 36873697).}
  proc `navigationLayers=`*(self: NavigationLink3D; navigationLayers: uint32) {.loadfrom("set_navigation_layers", 1286410249).}
  proc navigationLayers*(self: NavigationLink3D): uint32 {.loadfrom("get_navigation_layers", 3905245786).}
  proc setNavigationLayerValue*(self: NavigationLink3D; layerNumber: int32; value: Bool) {.loadfrom("set_navigation_layer_value", 300928843).}
  proc getNavigationLayerValue*(self: NavigationLink3D; layerNumber: int32): Bool {.loadfrom("get_navigation_layer_value", 1116898809).}
  proc `startPosition=`*(self: NavigationLink3D; position: Vector3) {.loadfrom("set_start_position", 3460891852).}
  proc startPosition*(self: NavigationLink3D): Vector3 {.loadfrom("get_start_position", 3360562783).}
  proc `endPosition=`*(self: NavigationLink3D; position: Vector3) {.loadfrom("set_end_position", 3460891852).}
  proc endPosition*(self: NavigationLink3D): Vector3 {.loadfrom("get_end_position", 3360562783).}
  proc setGlobalStartPosition*(self: NavigationLink3D; position: Vector3) {.loadfrom("set_global_start_position", 3460891852).}
  proc getGlobalStartPosition*(self: NavigationLink3D): Vector3 {.loadfrom("get_global_start_position", 3360562783).}
  proc setGlobalEndPosition*(self: NavigationLink3D; position: Vector3) {.loadfrom("set_global_end_position", 3460891852).}
  proc getGlobalEndPosition*(self: NavigationLink3D): Vector3 {.loadfrom("get_global_end_position", 3360562783).}
  proc `enterCost=`*(self: NavigationLink3D; enterCost: Float) {.loadfrom("set_enter_cost", 373806689).}
  proc enterCost*(self: NavigationLink3D): Float {.loadfrom("get_enter_cost", 1740695150).}
  proc `travelCost=`*(self: NavigationLink3D; travelCost: Float) {.loadfrom("set_travel_cost", 373806689).}
  proc travelCost*(self: NavigationLink3D): Float {.loadfrom("get_travel_cost", 1740695150).}

# NavigationObstacle3D
define_godot_engine_class_essencials(NavigationObstacle3D, Node3D)
NavigationObstacle3D.memberProcs:
  proc getRid*(self: NavigationObstacle3D): RID {.loadfrom("get_rid", 2944877500).}
  proc `avoidanceEnabled=`*(self: NavigationObstacle3D; enabled: Bool) {.loadfrom("set_avoidance_enabled", 2586408642).}
  proc avoidanceEnabled*(self: NavigationObstacle3D): Bool {.loadfrom("get_avoidance_enabled", 36873697).}
  proc setNavigationMap*(self: NavigationObstacle3D; navigationMap: RID) {.loadfrom("set_navigation_map", 2722037293).}
  proc getNavigationMap*(self: NavigationObstacle3D): RID {.loadfrom("get_navigation_map", 2944877500).}
  proc `radius=`*(self: NavigationObstacle3D; radius: Float) {.loadfrom("set_radius", 373806689).}
  proc radius*(self: NavigationObstacle3D): Float {.loadfrom("get_radius", 1740695150).}
  proc `height=`*(self: NavigationObstacle3D; height: Float) {.loadfrom("set_height", 373806689).}
  proc height*(self: NavigationObstacle3D): Float {.loadfrom("get_height", 1740695150).}
  proc `velocity=`*(self: NavigationObstacle3D; velocity: Vector3) {.loadfrom("set_velocity", 3460891852).}
  proc velocity*(self: NavigationObstacle3D): Vector3 {.loadfrom("get_velocity", 3360562783).}
  proc `vertices=`*(self: NavigationObstacle3D; vertices: PackedVector3Array) {.loadfrom("set_vertices", 334873810).}
  proc vertices*(self: NavigationObstacle3D): PackedVector3Array {.loadfrom("get_vertices", 497664490).}
  proc `avoidanceLayers=`*(self: NavigationObstacle3D; layers: uint32) {.loadfrom("set_avoidance_layers", 1286410249).}
  proc avoidanceLayers*(self: NavigationObstacle3D): uint32 {.loadfrom("get_avoidance_layers", 3905245786).}
  proc setAvoidanceLayerValue*(self: NavigationObstacle3D; layerNumber: int32; value: Bool) {.loadfrom("set_avoidance_layer_value", 300928843).}
  proc getAvoidanceLayerValue*(self: NavigationObstacle3D; layerNumber: int32): Bool {.loadfrom("get_avoidance_layer_value", 1116898809).}
  proc `use3dAvoidance=`*(self: NavigationObstacle3D; enabled: Bool) {.loadfrom("set_use_3d_avoidance", 2586408642).}
  proc use3dAvoidance*(self: NavigationObstacle3D): Bool {.loadfrom("get_use_3d_avoidance", 36873697).}

# NavigationRegion3D
define_godot_engine_class_essencials(NavigationRegion3D, Node3D)
NavigationRegion3D.memberProcs:
  proc `navigationMesh=`*(self: NavigationRegion3D; navigationMesh: Ref[NavigationMesh]) {.loadfrom("set_navigation_mesh", 2923361153).}
  proc navigationMesh*(self: NavigationRegion3D): Ref[NavigationMesh] {.loadfrom("get_navigation_mesh", 1468720886).}
  proc `enabled=`*(self: NavigationRegion3D; enabled: Bool) {.loadfrom("set_enabled", 2586408642).}
  proc isEnabled*(self: NavigationRegion3D): Bool {.loadfrom("is_enabled", 36873697).}
  proc `useEdgeConnections=`*(self: NavigationRegion3D; enabled: Bool) {.loadfrom("set_use_edge_connections", 2586408642).}
  proc useEdgeConnections*(self: NavigationRegion3D): Bool {.loadfrom("get_use_edge_connections", 36873697).}
  proc `navigationLayers=`*(self: NavigationRegion3D; navigationLayers: uint32) {.loadfrom("set_navigation_layers", 1286410249).}
  proc navigationLayers*(self: NavigationRegion3D): uint32 {.loadfrom("get_navigation_layers", 3905245786).}
  proc setNavigationLayerValue*(self: NavigationRegion3D; layerNumber: int32; value: Bool) {.loadfrom("set_navigation_layer_value", 300928843).}
  proc getNavigationLayerValue*(self: NavigationRegion3D; layerNumber: int32): Bool {.loadfrom("get_navigation_layer_value", 1116898809).}
  proc getRegionRid*(self: NavigationRegion3D): RID {.loadfrom("get_region_rid", 2944877500).}
  proc `enterCost=`*(self: NavigationRegion3D; enterCost: Float) {.loadfrom("set_enter_cost", 373806689).}
  proc enterCost*(self: NavigationRegion3D): Float {.loadfrom("get_enter_cost", 1740695150).}
  proc `travelCost=`*(self: NavigationRegion3D; travelCost: Float) {.loadfrom("set_travel_cost", 373806689).}
  proc travelCost*(self: NavigationRegion3D): Float {.loadfrom("get_travel_cost", 1740695150).}
  proc bakeNavigationMesh*(self: NavigationRegion3D; onThread: Bool = true) {.loadfrom("bake_navigation_mesh", 3216645846).}

# OccluderInstance3D
define_godot_engine_class_essencials(OccluderInstance3D, Node3D)
OccluderInstance3D.memberProcs:
  proc `bakeMask=`*(self: OccluderInstance3D; mask: uint32) {.loadfrom("set_bake_mask", 1286410249).}
  proc bakeMask*(self: OccluderInstance3D): uint32 {.loadfrom("get_bake_mask", 3905245786).}
  proc setBakeMaskValue*(self: OccluderInstance3D; layerNumber: int32; value: Bool) {.loadfrom("set_bake_mask_value", 300928843).}
  proc getBakeMaskValue*(self: OccluderInstance3D; layerNumber: int32): Bool {.loadfrom("get_bake_mask_value", 1116898809).}
  proc `bakeSimplificationDistance=`*(self: OccluderInstance3D; simplificationDistance: Float) {.loadfrom("set_bake_simplification_distance", 373806689).}
  proc bakeSimplificationDistance*(self: OccluderInstance3D): Float {.loadfrom("get_bake_simplification_distance", 1740695150).}
  proc `occluder=`*(self: OccluderInstance3D; occluder: Ref[Occluder3D]) {.loadfrom("set_occluder", 1664878165).}
  proc occluder*(self: OccluderInstance3D): Ref[Occluder3D] {.loadfrom("get_occluder", 1696836198).}

# OpenXRHand
define_godot_engine_class_essencials(OpenXRHand, Node3D)
OpenXRHand.memberProcs:
  proc `hand=`*(self: OpenXRHand; hand: OpenXRHand|>Hands) {.loadfrom("set_hand", 1849328560).}
  proc hand*(self: OpenXRHand): OpenXRHand|>Hands {.loadfrom("get_hand", 2850644561).}
  proc `handSkeleton=`*(self: OpenXRHand; handSkeleton: NodePath) {.loadfrom("set_hand_skeleton", 1348162250).}
  proc handSkeleton*(self: OpenXRHand): NodePath {.loadfrom("get_hand_skeleton", 4075236667).}
  proc `motionRange=`*(self: OpenXRHand; motionRange: OpenXRHand|>MotionRange) {.loadfrom("set_motion_range", 3326516003).}
  proc motionRange*(self: OpenXRHand): OpenXRHand|>MotionRange {.loadfrom("get_motion_range", 2191822314).}

# Path3D
define_godot_engine_class_essencials(Path3D, Node3D)
Path3D.memberProcs:
  proc `curve=`*(self: Path3D; curve: Ref[Curve3D]) {.loadfrom("set_curve", 408955118).}
  proc curve*(self: Path3D): Ref[Curve3D] {.loadfrom("get_curve", 4244715212).}

# PathFollow3D
define_godot_engine_class_essencials(PathFollow3D, Node3D)
PathFollow3D.memberProcs:
  proc `progress=`*(self: PathFollow3D; progress: Float) {.loadfrom("set_progress", 373806689).}
  proc progress*(self: PathFollow3D): Float {.loadfrom("get_progress", 1740695150).}
  proc `hOffset=`*(self: PathFollow3D; hOffset: Float) {.loadfrom("set_h_offset", 373806689).}
  proc hOffset*(self: PathFollow3D): Float {.loadfrom("get_h_offset", 1740695150).}
  proc `vOffset=`*(self: PathFollow3D; vOffset: Float) {.loadfrom("set_v_offset", 373806689).}
  proc vOffset*(self: PathFollow3D): Float {.loadfrom("get_v_offset", 1740695150).}
  proc `progressRatio=`*(self: PathFollow3D; ratio: Float) {.loadfrom("set_progress_ratio", 373806689).}
  proc progressRatio*(self: PathFollow3D): Float {.loadfrom("get_progress_ratio", 1740695150).}
  proc `rotationMode=`*(self: PathFollow3D; rotationMode: PathFollow3D|>RotationMode) {.loadfrom("set_rotation_mode", 1640311967).}
  proc rotationMode*(self: PathFollow3D): PathFollow3D|>RotationMode {.loadfrom("get_rotation_mode", 3814010545).}
  proc `cubicInterpolation=`*(self: PathFollow3D; enabled: Bool) {.loadfrom("set_cubic_interpolation", 2586408642).}
  proc cubicInterpolation*(self: PathFollow3D): Bool {.loadfrom("get_cubic_interpolation", 36873697).}
  proc `useModelFront=`*(self: PathFollow3D; enabled: Bool) {.loadfrom("set_use_model_front", 2586408642).}
  proc isUsingModelFront*(self: PathFollow3D): Bool {.loadfrom("is_using_model_front", 36873697).}
  proc `loop=`*(self: PathFollow3D; loop: Bool) {.loadfrom("set_loop", 2586408642).}
  proc hasLoop*(self: PathFollow3D): Bool {.loadfrom("has_loop", 36873697).}
  proc `tiltEnabled=`*(self: PathFollow3D; enabled: Bool) {.loadfrom("set_tilt_enabled", 2586408642).}
  proc isTiltEnabled*(self: PathFollow3D): Bool {.loadfrom("is_tilt_enabled", 36873697).}
  proc correctPosture*(transform: Transform3D; rotationMode: PathFollow3D|>RotationMode): Transform3D {.staticOf: PathFollow3D, loadfrom("correct_posture", 2686588690).}

# RayCast3D
define_godot_engine_class_essencials(RayCast3D, Node3D)
RayCast3D.memberProcs:
  proc `enabled=`*(self: RayCast3D; enabled: Bool) {.loadfrom("set_enabled", 2586408642).}
  proc isEnabled*(self: RayCast3D): Bool {.loadfrom("is_enabled", 36873697).}
  proc `targetPosition=`*(self: RayCast3D; localPoint: Vector3) {.loadfrom("set_target_position", 3460891852).}
  proc tarposition*(self: RayCast3D): Vector3 {.loadfrom("get_target_position", 3360562783).}
  proc isColliding*(self: RayCast3D): Bool {.loadfrom("is_colliding", 36873697).}
  proc forceRaycastUpdate*(self: RayCast3D) {.loadfrom("force_raycast_update", 3218959716).}
  proc getCollider*(self: RayCast3D): Object {.loadfrom("get_collider", 1981248198).}
  proc getColliderRid*(self: RayCast3D): RID {.loadfrom("get_collider_rid", 2944877500).}
  proc getColliderShape*(self: RayCast3D): int32 {.loadfrom("get_collider_shape", 3905245786).}
  proc getCollisionPoint*(self: RayCast3D): Vector3 {.loadfrom("get_collision_point", 3360562783).}
  proc getCollisionNormal*(self: RayCast3D): Vector3 {.loadfrom("get_collision_normal", 3360562783).}
  proc addExceptionRid*(self: RayCast3D; rid: RID) {.loadfrom("add_exception_rid", 2722037293).}
  proc addException*(self: RayCast3D; node: CollisionObject3D) {.loadfrom("add_exception", 1976431078).}
  proc removeExceptionRid*(self: RayCast3D; rid: RID) {.loadfrom("remove_exception_rid", 2722037293).}
  proc removeException*(self: RayCast3D; node: CollisionObject3D) {.loadfrom("remove_exception", 1976431078).}
  proc clearExceptions*(self: RayCast3D) {.loadfrom("clear_exceptions", 3218959716).}
  proc `collisionMask=`*(self: RayCast3D; mask: uint32) {.loadfrom("set_collision_mask", 1286410249).}
  proc collisionMask*(self: RayCast3D): uint32 {.loadfrom("get_collision_mask", 3905245786).}
  proc setCollisionMaskValue*(self: RayCast3D; layerNumber: int32; value: Bool) {.loadfrom("set_collision_mask_value", 300928843).}
  proc getCollisionMaskValue*(self: RayCast3D; layerNumber: int32): Bool {.loadfrom("get_collision_mask_value", 1116898809).}
  proc `excludeParentBody=`*(self: RayCast3D; mask: Bool) {.loadfrom("set_exclude_parent_body", 2586408642).}
  proc excludeParentBody*(self: RayCast3D): Bool {.loadfrom("get_exclude_parent_body", 36873697).}
  proc `collideWithAreas=`*(self: RayCast3D; enable: Bool) {.loadfrom("set_collide_with_areas", 2586408642).}
  proc isCollideWithAreasEnabled*(self: RayCast3D): Bool {.loadfrom("is_collide_with_areas_enabled", 36873697).}
  proc `collideWithBodies=`*(self: RayCast3D; enable: Bool) {.loadfrom("set_collide_with_bodies", 2586408642).}
  proc isCollideWithBodiesEnabled*(self: RayCast3D): Bool {.loadfrom("is_collide_with_bodies_enabled", 36873697).}
  proc `hitFromInside=`*(self: RayCast3D; enable: Bool) {.loadfrom("set_hit_from_inside", 2586408642).}
  proc isHitFromInsideEnabled*(self: RayCast3D): Bool {.loadfrom("is_hit_from_inside_enabled", 36873697).}
  proc `debugShapeCustomColor=`*(self: RayCast3D; debugShapeCustomColor: Color) {.loadfrom("set_debug_shape_custom_color", 2920490490).}
  proc debugShapeCustomColor*(self: RayCast3D): Color {.loadfrom("get_debug_shape_custom_color", 3444240500).}
  proc `debugShapeThickness=`*(self: RayCast3D; debugShapeThickness: int32) {.loadfrom("set_debug_shape_thickness", 1286410249).}
  proc debugShapeThickness*(self: RayCast3D): int32 {.loadfrom("get_debug_shape_thickness", 3905245786).}

# RemoteTransform3D
define_godot_engine_class_essencials(RemoteTransform3D, Node3D)
RemoteTransform3D.memberProcs:
  proc `remoteNode=`*(self: RemoteTransform3D; path: NodePath) {.loadfrom("set_remote_node", 1348162250).}
  proc remoteNode*(self: RemoteTransform3D): NodePath {.loadfrom("get_remote_node", 4075236667).}
  proc forceUpdateCache*(self: RemoteTransform3D) {.loadfrom("force_update_cache", 3218959716).}
  proc `useGlobalCoordinates=`*(self: RemoteTransform3D; useGlobalCoordinates: Bool) {.loadfrom("set_use_global_coordinates", 2586408642).}
  proc useGlobalCoordinates*(self: RemoteTransform3D): Bool {.loadfrom("get_use_global_coordinates", 36873697).}
  proc `updatePosition=`*(self: RemoteTransform3D; updateRemotePosition: Bool) {.loadfrom("set_update_position", 2586408642).}
  proc updatePosition*(self: RemoteTransform3D): Bool {.loadfrom("get_update_position", 36873697).}
  proc `updateRotation=`*(self: RemoteTransform3D; updateRemoteRotation: Bool) {.loadfrom("set_update_rotation", 2586408642).}
  proc updateRotation*(self: RemoteTransform3D): Bool {.loadfrom("get_update_rotation", 36873697).}
  proc `updateScale=`*(self: RemoteTransform3D; updateRemoteScale: Bool) {.loadfrom("set_update_scale", 2586408642).}
  proc updateScale*(self: RemoteTransform3D): Bool {.loadfrom("get_update_scale", 36873697).}

# ShapeCast3D
define_godot_engine_class_essencials(ShapeCast3D, Node3D)
ShapeCast3D.memberProcs:
  proc resourceChanged*(self: ShapeCast3D; resource: Ref[Resource]) {.loadfrom("resource_changed", 968641751).}
  proc `enabled=`*(self: ShapeCast3D; enabled: Bool) {.loadfrom("set_enabled", 2586408642).}
  proc isEnabled*(self: ShapeCast3D): Bool {.loadfrom("is_enabled", 36873697).}
  proc `shape=`*(self: ShapeCast3D; shape: Ref[Shape3D]) {.loadfrom("set_shape", 1549710052).}
  proc shape*(self: ShapeCast3D): Ref[Shape3D] {.loadfrom("get_shape", 3214262478).}
  proc `targetPosition=`*(self: ShapeCast3D; localPoint: Vector3) {.loadfrom("set_target_position", 3460891852).}
  proc tarposition*(self: ShapeCast3D): Vector3 {.loadfrom("get_target_position", 3360562783).}
  proc `margin=`*(self: ShapeCast3D; margin: Float) {.loadfrom("set_margin", 373806689).}
  proc margin*(self: ShapeCast3D): Float {.loadfrom("get_margin", 1740695150).}
  proc `maxResults=`*(self: ShapeCast3D; maxRetvals: int32) {.loadfrom("set_max_results", 1286410249).}
  proc maxResults*(self: ShapeCast3D): int32 {.loadfrom("get_max_results", 3905245786).}
  proc isColliding*(self: ShapeCast3D): Bool {.loadfrom("is_colliding", 36873697).}
  proc getCollisionCount*(self: ShapeCast3D): int32 {.loadfrom("get_collision_count", 3905245786).}
  proc forceShapecastUpdate*(self: ShapeCast3D) {.loadfrom("force_shapecast_update", 3218959716).}
  proc getCollider*(self: ShapeCast3D; index: int32): Object {.loadfrom("get_collider", 3332903315).}
  proc getColliderRid*(self: ShapeCast3D; index: int32): RID {.loadfrom("get_collider_rid", 495598643).}
  proc getColliderShape*(self: ShapeCast3D; index: int32): int32 {.loadfrom("get_collider_shape", 923996154).}
  proc getCollisionPoint*(self: ShapeCast3D; index: int32): Vector3 {.loadfrom("get_collision_point", 711720468).}
  proc getCollisionNormal*(self: ShapeCast3D; index: int32): Vector3 {.loadfrom("get_collision_normal", 711720468).}
  proc getClosestCollisionSafeFraction*(self: ShapeCast3D): Float {.loadfrom("get_closest_collision_safe_fraction", 1740695150).}
  proc getClosestCollisionUnsafeFraction*(self: ShapeCast3D): Float {.loadfrom("get_closest_collision_unsafe_fraction", 1740695150).}
  proc addExceptionRid*(self: ShapeCast3D; rid: RID) {.loadfrom("add_exception_rid", 2722037293).}
  proc addException*(self: ShapeCast3D; node: CollisionObject3D) {.loadfrom("add_exception", 1976431078).}
  proc removeExceptionRid*(self: ShapeCast3D; rid: RID) {.loadfrom("remove_exception_rid", 2722037293).}
  proc removeException*(self: ShapeCast3D; node: CollisionObject3D) {.loadfrom("remove_exception", 1976431078).}
  proc clearExceptions*(self: ShapeCast3D) {.loadfrom("clear_exceptions", 3218959716).}
  proc `collisionMask=`*(self: ShapeCast3D; mask: uint32) {.loadfrom("set_collision_mask", 1286410249).}
  proc collisionMask*(self: ShapeCast3D): uint32 {.loadfrom("get_collision_mask", 3905245786).}
  proc setCollisionMaskValue*(self: ShapeCast3D; layerNumber: int32; value: Bool) {.loadfrom("set_collision_mask_value", 300928843).}
  proc getCollisionMaskValue*(self: ShapeCast3D; layerNumber: int32): Bool {.loadfrom("get_collision_mask_value", 1116898809).}
  proc `excludeParentBody=`*(self: ShapeCast3D; mask: Bool) {.loadfrom("set_exclude_parent_body", 2586408642).}
  proc excludeParentBody*(self: ShapeCast3D): Bool {.loadfrom("get_exclude_parent_body", 36873697).}
  proc `collideWithAreas=`*(self: ShapeCast3D; enable: Bool) {.loadfrom("set_collide_with_areas", 2586408642).}
  proc isCollideWithAreasEnabled*(self: ShapeCast3D): Bool {.loadfrom("is_collide_with_areas_enabled", 36873697).}
  proc `collideWithBodies=`*(self: ShapeCast3D; enable: Bool) {.loadfrom("set_collide_with_bodies", 2586408642).}
  proc isCollideWithBodiesEnabled*(self: ShapeCast3D): Bool {.loadfrom("is_collide_with_bodies_enabled", 36873697).}
  proc `debugShapeCustomColor=`*(self: ShapeCast3D; debugShapeCustomColor: Color) {.loadfrom("set_debug_shape_custom_color", 2920490490).}
  proc debugShapeCustomColor*(self: ShapeCast3D): Color {.loadfrom("get_debug_shape_custom_color", 3444240500).}

# Skeleton3D
define_godot_engine_class_essencials(Skeleton3D, Node3D)
Skeleton3D.memberProcs:
  proc addBone*(self: Skeleton3D; name: String) {.loadfrom("add_bone", 83702148).}
  proc findBone*(self: Skeleton3D; name: String): int32 {.loadfrom("find_bone", 1321353865).}
  proc getBoneName*(self: Skeleton3D; boneIdx: int32): String {.loadfrom("get_bone_name", 844755477).}
  proc setBoneName*(self: Skeleton3D; boneIdx: int32; name: String) {.loadfrom("set_bone_name", 501894301).}
  proc getBoneParent*(self: Skeleton3D; boneIdx: int32): int32 {.loadfrom("get_bone_parent", 923996154).}
  proc setBoneParent*(self: Skeleton3D; boneIdx: int32; parentIdx: int32) {.loadfrom("set_bone_parent", 3937882851).}
  proc getBoneCount*(self: Skeleton3D): int32 {.loadfrom("get_bone_count", 3905245786).}
  proc getVersion*(self: Skeleton3D): uint64 {.loadfrom("get_version", 3905245786).}
  proc unparentBoneAndRest*(self: Skeleton3D; boneIdx: int32) {.loadfrom("unparent_bone_and_rest", 1286410249).}
  proc getBoneChildren*(self: Skeleton3D; boneIdx: int32): PackedInt32Array {.loadfrom("get_bone_children", 1706082319).}
  proc getParentlessBones*(self: Skeleton3D): PackedInt32Array {.loadfrom("get_parentless_bones", 1930428628).}
  proc getBoneRest*(self: Skeleton3D; boneIdx: int32): Transform3D {.loadfrom("get_bone_rest", 1965739696).}
  proc setBoneRest*(self: Skeleton3D; boneIdx: int32; rest: Transform3D) {.loadfrom("set_bone_rest", 3616898986).}
  proc getBoneGlobalRest*(self: Skeleton3D; boneIdx: int32): Transform3D {.loadfrom("get_bone_global_rest", 1965739696).}
  proc createSkinFromRestTransforms*(self: Skeleton3D): Ref[Skin] {.loadfrom("create_skin_from_rest_transforms", 1032037385).}
  proc registerSkin*(self: Skeleton3D; skin: Ref[Skin]): Ref[SkinReference] {.loadfrom("register_skin", 3405789568).}
  proc localizeRests*(self: Skeleton3D) {.loadfrom("localize_rests", 3218959716).}
  proc clearBones*(self: Skeleton3D) {.loadfrom("clear_bones", 3218959716).}
  proc getBonePose*(self: Skeleton3D; boneIdx: int32): Transform3D {.loadfrom("get_bone_pose", 1965739696).}
  proc setBonePosePosition*(self: Skeleton3D; boneIdx: int32; position: Vector3) {.loadfrom("set_bone_pose_position", 1530502735).}
  proc setBonePoseRotation*(self: Skeleton3D; boneIdx: int32; rotation: Quaternion) {.loadfrom("set_bone_pose_rotation", 2823819782).}
  proc setBonePoseScale*(self: Skeleton3D; boneIdx: int32; scale: Vector3) {.loadfrom("set_bone_pose_scale", 1530502735).}
  proc getBonePosePosition*(self: Skeleton3D; boneIdx: int32): Vector3 {.loadfrom("get_bone_pose_position", 711720468).}
  proc getBonePoseRotation*(self: Skeleton3D; boneIdx: int32): Quaternion {.loadfrom("get_bone_pose_rotation", 476865136).}
  proc getBonePoseScale*(self: Skeleton3D; boneIdx: int32): Vector3 {.loadfrom("get_bone_pose_scale", 711720468).}
  proc resetBonePose*(self: Skeleton3D; boneIdx: int32) {.loadfrom("reset_bone_pose", 1286410249).}
  proc resetBonePoses*(self: Skeleton3D) {.loadfrom("reset_bone_poses", 3218959716).}
  proc isBoneEnabled*(self: Skeleton3D; boneIdx: int32): Bool {.loadfrom("is_bone_enabled", 1116898809).}
  proc setBoneEnabled*(self: Skeleton3D; boneIdx: int32; enabled: Bool = true) {.loadfrom("set_bone_enabled", 4023243586).}
  proc clearBonesGlobalPoseOverride*(self: Skeleton3D) {.loadfrom("clear_bones_global_pose_override", 3218959716).}
  proc setBoneGlobalPoseOverride*(self: Skeleton3D; boneIdx: int32; pose: Transform3D; amount: Float; persistent: Bool = false) {.loadfrom("set_bone_global_pose_override", 3483398371).}
  proc getBoneGlobalPoseOverride*(self: Skeleton3D; boneIdx: int32): Transform3D {.loadfrom("get_bone_global_pose_override", 1965739696).}
  proc getBoneGlobalPose*(self: Skeleton3D; boneIdx: int32): Transform3D {.loadfrom("get_bone_global_pose", 1965739696).}
  proc getBoneGlobalPoseNoOverride*(self: Skeleton3D; boneIdx: int32): Transform3D {.loadfrom("get_bone_global_pose_no_override", 1965739696).}
  proc forceUpdateAllBoneTransforms*(self: Skeleton3D) {.loadfrom("force_update_all_bone_transforms", 3218959716).}
  proc forceUpdateBoneChildTransform*(self: Skeleton3D; boneIdx: int32) {.loadfrom("force_update_bone_child_transform", 1286410249).}
  proc `motionScale=`*(self: Skeleton3D; motionScale: Float) {.loadfrom("set_motion_scale", 373806689).}
  proc motionScale*(self: Skeleton3D): Float {.loadfrom("get_motion_scale", 1740695150).}
  proc `showRestOnly=`*(self: Skeleton3D; enabled: Bool) {.loadfrom("set_show_rest_only", 2586408642).}
  proc isShowRestOnly*(self: Skeleton3D): Bool {.loadfrom("is_show_rest_only", 36873697).}
  proc `animatePhysicalBones=`*(self: Skeleton3D; enabled: Bool) {.loadfrom("set_animate_physical_bones", 2586408642).}
  proc animatePhysicalBones*(self: Skeleton3D): Bool {.loadfrom("get_animate_physical_bones", 36873697).}
  proc physicalBonesStopSimulation*(self: Skeleton3D) {.loadfrom("physical_bones_stop_simulation", 3218959716).}
  proc physicalBonesStartSimulation*(self: Skeleton3D; bones: TypedArray[StringName] = TypedArray|>init[StringName]()) {.loadfrom("physical_bones_start_simulation", 2787316981).}
  proc physicalBonesAddCollisionException*(self: Skeleton3D; exception: RID) {.loadfrom("physical_bones_add_collision_exception", 2722037293).}
  proc physicalBonesRemoveCollisionException*(self: Skeleton3D; exception: RID) {.loadfrom("physical_bones_remove_collision_exception", 2722037293).}

# SpringArm3D
define_godot_engine_class_essencials(SpringArm3D, Node3D)
SpringArm3D.memberProcs:
  proc getHitLength*(self: SpringArm3D): Float {.loadfrom("get_hit_length", 191475506).}
  proc `length=`*(self: SpringArm3D; length: Float) {.loadfrom("set_length", 373806689).}
  proc length*(self: SpringArm3D): Float {.loadfrom("get_length", 1740695150).}
  proc `shape=`*(self: SpringArm3D; shape: Ref[Shape3D]) {.loadfrom("set_shape", 1549710052).}
  proc shape*(self: SpringArm3D): Ref[Shape3D] {.loadfrom("get_shape", 3214262478).}
  proc addExcludedObject*(self: SpringArm3D; rid: RID) {.loadfrom("add_excluded_object", 2722037293).}
  proc removeExcludedObject*(self: SpringArm3D; rid: RID): Bool {.loadfrom("remove_excluded_object", 3521089500).}
  proc clearExcludedObjects*(self: SpringArm3D) {.loadfrom("clear_excluded_objects", 3218959716).}
  proc `collisionMask=`*(self: SpringArm3D; mask: uint32) {.loadfrom("set_collision_mask", 1286410249).}
  proc collisionMask*(self: SpringArm3D): uint32 {.loadfrom("get_collision_mask", 2455072627).}
  proc `margin=`*(self: SpringArm3D; margin: Float) {.loadfrom("set_margin", 373806689).}
  proc margin*(self: SpringArm3D): Float {.loadfrom("get_margin", 191475506).}

# VehicleWheel3D
define_godot_engine_class_essencials(VehicleWheel3D, Node3D)
VehicleWheel3D.memberProcs:
  proc `radius=`*(self: VehicleWheel3D; length: Float) {.loadfrom("set_radius", 373806689).}
  proc radius*(self: VehicleWheel3D): Float {.loadfrom("get_radius", 1740695150).}
  proc `suspensionRestLength=`*(self: VehicleWheel3D; length: Float) {.loadfrom("set_suspension_rest_length", 373806689).}
  proc suspensionRestLength*(self: VehicleWheel3D): Float {.loadfrom("get_suspension_rest_length", 1740695150).}
  proc `suspensionTravel=`*(self: VehicleWheel3D; length: Float) {.loadfrom("set_suspension_travel", 373806689).}
  proc suspensionTravel*(self: VehicleWheel3D): Float {.loadfrom("get_suspension_travel", 1740695150).}
  proc `suspensionStiffness=`*(self: VehicleWheel3D; length: Float) {.loadfrom("set_suspension_stiffness", 373806689).}
  proc suspensionStiffness*(self: VehicleWheel3D): Float {.loadfrom("get_suspension_stiffness", 1740695150).}
  proc `suspensionMaxForce=`*(self: VehicleWheel3D; length: Float) {.loadfrom("set_suspension_max_force", 373806689).}
  proc suspensionMaxForce*(self: VehicleWheel3D): Float {.loadfrom("get_suspension_max_force", 1740695150).}
  proc `dampingCompression=`*(self: VehicleWheel3D; length: Float) {.loadfrom("set_damping_compression", 373806689).}
  proc dampingCompression*(self: VehicleWheel3D): Float {.loadfrom("get_damping_compression", 1740695150).}
  proc `dampingRelaxation=`*(self: VehicleWheel3D; length: Float) {.loadfrom("set_damping_relaxation", 373806689).}
  proc dampingRelaxation*(self: VehicleWheel3D): Float {.loadfrom("get_damping_relaxation", 1740695150).}
  proc `useAsTraction=`*(self: VehicleWheel3D; enable: Bool) {.loadfrom("set_use_as_traction", 2586408642).}
  proc isUsedAsTraction*(self: VehicleWheel3D): Bool {.loadfrom("is_used_as_traction", 36873697).}
  proc `useAsSteering=`*(self: VehicleWheel3D; enable: Bool) {.loadfrom("set_use_as_steering", 2586408642).}
  proc isUsedAsSteering*(self: VehicleWheel3D): Bool {.loadfrom("is_used_as_steering", 36873697).}
  proc `frictionSlip=`*(self: VehicleWheel3D; length: Float) {.loadfrom("set_friction_slip", 373806689).}
  proc frictionSlip*(self: VehicleWheel3D): Float {.loadfrom("get_friction_slip", 1740695150).}
  proc isInContact*(self: VehicleWheel3D): Bool {.loadfrom("is_in_contact", 36873697).}
  proc getContactBody*(self: VehicleWheel3D): Node3D {.loadfrom("get_contact_body", 151077316).}
  proc `rollInfluence=`*(self: VehicleWheel3D; rollInfluence: Float) {.loadfrom("set_roll_influence", 373806689).}
  proc rollInfluence*(self: VehicleWheel3D): Float {.loadfrom("get_roll_influence", 1740695150).}
  proc getSkidinfo*(self: VehicleWheel3D): Float {.loadfrom("get_skidinfo", 1740695150).}
  proc getRpm*(self: VehicleWheel3D): Float {.loadfrom("get_rpm", 1740695150).}
  proc `engineForce=`*(self: VehicleWheel3D; engineForce: Float) {.loadfrom("set_engine_force", 373806689).}
  proc engineForce*(self: VehicleWheel3D): Float {.loadfrom("get_engine_force", 1740695150).}
  proc `brake=`*(self: VehicleWheel3D; brake: Float) {.loadfrom("set_brake", 373806689).}
  proc brake*(self: VehicleWheel3D): Float {.loadfrom("get_brake", 1740695150).}
  proc `steering=`*(self: VehicleWheel3D; steering: Float) {.loadfrom("set_steering", 373806689).}
  proc steering*(self: VehicleWheel3D): Float {.loadfrom("get_steering", 1740695150).}

# VisualInstance3D
define_godot_engine_class_essencials(VisualInstance3D, Node3D)
method getAabb*(self: VisualInstance3D): AABB {.base.} = (discard)
VisualInstance3D.memberProcs:
  proc setBase*(self: VisualInstance3D; base: RID) {.loadfrom("set_base", 2722037293).}
  proc getBase*(self: VisualInstance3D): RID {.loadfrom("get_base", 2944877500).}
  proc getInstance*(self: VisualInstance3D): RID {.loadfrom("get_instance", 2944877500).}
  proc `layerMask=`*(self: VisualInstance3D; mask: uint32) {.loadfrom("set_layer_mask", 1286410249).}
  proc layerMask*(self: VisualInstance3D): uint32 {.loadfrom("get_layer_mask", 3905245786).}
  proc setLayerMaskValue*(self: VisualInstance3D; layerNumber: int32; value: Bool) {.loadfrom("set_layer_mask_value", 300928843).}
  proc getLayerMaskValue*(self: VisualInstance3D; layerNumber: int32): Bool {.loadfrom("get_layer_mask_value", 1116898809).}
  proc `sortingOffset=`*(self: VisualInstance3D; offset: Float) {.loadfrom("set_sorting_offset", 373806689).}
  proc sortingOffset*(self: VisualInstance3D): Float {.loadfrom("get_sorting_offset", 1740695150).}
  proc `sortingUseAabbCenter=`*(self: VisualInstance3D; enabled: Bool) {.loadfrom("set_sorting_use_aabb_center", 2586408642).}
  proc isSortingUseAabbCenter*(self: VisualInstance3D): Bool {.loadfrom("is_sorting_use_aabb_center", 36873697).}
  proc getAabb*(self: VisualInstance3D): AABB {.loadfrom("get_aabb", 1068685055).}

# XRNode3D
define_godot_engine_class_essencials(XRNode3D, Node3D)
XRNode3D.memberProcs:
  proc `tracker=`*(self: XRNode3D; trackerName: StringName) {.loadfrom("set_tracker", 3304788590).}
  proc tracker*(self: XRNode3D): StringName {.loadfrom("get_tracker", 2002593661).}
  proc `poseName=`*(self: XRNode3D; pose: StringName) {.loadfrom("set_pose_name", 3304788590).}
  proc poseName*(self: XRNode3D): StringName {.loadfrom("get_pose_name", 2002593661).}
  proc getIsActive*(self: XRNode3D): Bool {.loadfrom("get_is_active", 36873697).}
  proc getHasTrackingData*(self: XRNode3D): Bool {.loadfrom("get_has_tracking_data", 36873697).}
  proc getPose*(self: XRNode3D): Ref[XRPose] {.loadfrom("get_pose", 2806551826).}
  proc triggerHapticPulse*(self: XRNode3D; actionName: String; frequency: float64; amplitude: float64; durationSec: float64; delaySec: float64) {.loadfrom("trigger_haptic_pulse", 508576839).}

# XROrigin3D
define_godot_engine_class_essencials(XROrigin3D, Node3D)
XROrigin3D.memberProcs:
  proc `worldScale=`*(self: XROrigin3D; worldScale: Float) {.loadfrom("set_world_scale", 373806689).}
  proc worldScale*(self: XROrigin3D): Float {.loadfrom("get_world_scale", 1740695150).}
  proc `current=`*(self: XROrigin3D; enabled: Bool) {.loadfrom("set_current", 2586408642).}
  proc isCurrent*(self: XROrigin3D): Bool {.loadfrom("is_current", 36873697).}

# SubViewport
define_godot_engine_class_essencials(SubViewport, Viewport)
SubViewport.memberProcs:
  proc `size=`*(self: SubViewport; size: Vector2i) {.loadfrom("set_size", 1130785943).}
  proc size*(self: SubViewport): Vector2i {.loadfrom("get_size", 3690982128).}
  proc `size2dOverride=`*(self: SubViewport; size: Vector2i) {.loadfrom("set_size_2d_override", 1130785943).}
  proc size2dOverride*(self: SubViewport): Vector2i {.loadfrom("get_size_2d_override", 3690982128).}
  proc `size2dOverrideStretch=`*(self: SubViewport; enable: Bool) {.loadfrom("set_size_2d_override_stretch", 2586408642).}
  proc isSize2dOverrideStretchEnabled*(self: SubViewport): Bool {.loadfrom("is_size_2d_override_stretch_enabled", 36873697).}
  proc `updateMode=`*(self: SubViewport; mode: SubViewport|>UpdateMode) {.loadfrom("set_update_mode", 1295690030).}
  proc updateMode*(self: SubViewport): SubViewport|>UpdateMode {.loadfrom("get_update_mode", 2980171553).}
  proc `clearMode=`*(self: SubViewport; mode: SubViewport|>ClearMode) {.loadfrom("set_clear_mode", 2834454712).}
  proc clearMode*(self: SubViewport): SubViewport|>ClearMode {.loadfrom("get_clear_mode", 331324495).}

# Window
define_godot_engine_class_essencials(Window, Viewport)
Window.memberProcs:
  proc `title=`*(self: Window; title: String) {.loadfrom("set_title", 83702148).}
  proc title*(self: Window): String {.loadfrom("get_title", 201670096).}
  proc getWindowId*(self: Window): int32 {.loadfrom("get_window_id", 3905245786).}
  proc `initialPosition=`*(self: Window; initialPosition: Window|>WindowInitialPosition) {.loadfrom("set_initial_position", 4084468099).}
  proc initialPosition*(self: Window): Window|>WindowInitialPosition {.loadfrom("get_initial_position", 4294066647).}
  proc `currentScreen=`*(self: Window; index: int32) {.loadfrom("set_current_screen", 1286410249).}
  proc currentScreen*(self: Window): int32 {.loadfrom("get_current_screen", 3905245786).}
  proc `position=`*(self: Window; position: Vector2i) {.loadfrom("set_position", 1130785943).}
  proc position*(self: Window): Vector2i {.loadfrom("get_position", 3690982128).}
  proc `size=`*(self: Window; size: Vector2i) {.loadfrom("set_size", 1130785943).}
  proc size*(self: Window): Vector2i {.loadfrom("get_size", 3690982128).}
  proc resetSize*(self: Window) {.loadfrom("reset_size", 3218959716).}
  proc getPositionWithDecorations*(self: Window): Vector2i {.loadfrom("get_position_with_decorations", 3690982128).}
  proc getSizeWithDecorations*(self: Window): Vector2i {.loadfrom("get_size_with_decorations", 3690982128).}
  proc `maxSize=`*(self: Window; maxSize: Vector2i) {.loadfrom("set_max_size", 1130785943).}
  proc maxSize*(self: Window): Vector2i {.loadfrom("get_max_size", 3690982128).}
  proc `minSize=`*(self: Window; minSize: Vector2i) {.loadfrom("set_min_size", 1130785943).}
  proc minSize*(self: Window): Vector2i {.loadfrom("get_min_size", 3690982128).}
  proc `mode=`*(self: Window; mode: Window|>Mode) {.loadfrom("set_mode", 3095236531).}
  proc mode*(self: Window): Window|>Mode {.loadfrom("get_mode", 2566346114).}
  proc `flag=`*(self: Window; flag: Window|>Flags; enabled: Bool) {.loadfrom("set_flag", 3426449779).}
  proc flag*(self: Window; flag: Window|>Flags): Bool {.loadfrom("get_flag", 3062752289).}
  proc isMaximizeAllowed*(self: Window): Bool {.loadfrom("is_maximize_allowed", 36873697).}
  proc requestAttention*(self: Window) {.loadfrom("request_attention", 3218959716).}
  proc moveToForeground*(self: Window) {.loadfrom("move_to_foreground", 3218959716).}
  proc `visible=`*(self: Window; visible: Bool) {.loadfrom("set_visible", 2586408642).}
  proc isVisible*(self: Window): Bool {.loadfrom("is_visible", 36873697).}
  proc hide*(self: Window) {.loadfrom("hide", 3218959716).}
  proc show*(self: Window) {.loadfrom("show", 3218959716).}
  proc `transient=`*(self: Window; transient: Bool) {.loadfrom("set_transient", 2586408642).}
  proc isTransient*(self: Window): Bool {.loadfrom("is_transient", 36873697).}
  proc `exclusive=`*(self: Window; exclusive: Bool) {.loadfrom("set_exclusive", 2586408642).}
  proc isExclusive*(self: Window): Bool {.loadfrom("is_exclusive", 36873697).}
  proc setUnparentWhenInvisible*(self: Window; unparent: Bool) {.loadfrom("set_unparent_when_invisible", 2586408642).}
  proc canDraw*(self: Window): Bool {.loadfrom("can_draw", 36873697).}
  proc hasFocus*(self: Window): Bool {.loadfrom("has_focus", 36873697).}
  proc grabFocus*(self: Window) {.loadfrom("grab_focus", 3218959716).}
  proc setImeActive*(self: Window; active: Bool) {.loadfrom("set_ime_active", 2586408642).}
  proc setImePosition*(self: Window; position: Vector2i) {.loadfrom("set_ime_position", 1130785943).}
  proc isEmbedded*(self: Window): Bool {.loadfrom("is_embedded", 36873697).}
  proc getContentsMinimumSize*(self: Window): Vector2 {.loadfrom("get_contents_minimum_size", 3341600327).}
  proc `contentScaleSize=`*(self: Window; size: Vector2i) {.loadfrom("set_content_scale_size", 1130785943).}
  proc contentScaleSize*(self: Window): Vector2i {.loadfrom("get_content_scale_size", 3690982128).}
  proc `contentScaleMode=`*(self: Window; mode: Window|>ContentScaleMode) {.loadfrom("set_content_scale_mode", 2937716473).}
  proc contentScaleMode*(self: Window): Window|>ContentScaleMode {.loadfrom("get_content_scale_mode", 161585230).}
  proc `contentScaleAspect=`*(self: Window; aspect: Window|>ContentScaleAspect) {.loadfrom("set_content_scale_aspect", 2370399418).}
  proc contentScaleAspect*(self: Window): Window|>ContentScaleAspect {.loadfrom("get_content_scale_aspect", 4158790715).}
  proc `contentScaleFactor=`*(self: Window; factor: Float) {.loadfrom("set_content_scale_factor", 373806689).}
  proc contentScaleFactor*(self: Window): Float {.loadfrom("get_content_scale_factor", 1740695150).}
  proc setUseFontOversampling*(self: Window; enable: Bool) {.loadfrom("set_use_font_oversampling", 2586408642).}
  proc isUsingFontOversampling*(self: Window): Bool {.loadfrom("is_using_font_oversampling", 36873697).}
  proc `mousePassthroughPolygon=`*(self: Window; polygon: PackedVector2Array) {.loadfrom("set_mouse_passthrough_polygon", 1509147220).}
  proc mousePassthroughPolygon*(self: Window): PackedVector2Array {.loadfrom("get_mouse_passthrough_polygon", 2961356807).}
  proc `wrapControls=`*(self: Window; enable: Bool) {.loadfrom("set_wrap_controls", 2586408642).}
  proc isWrappingControls*(self: Window): Bool {.loadfrom("is_wrapping_controls", 36873697).}
  proc childControlsChanged*(self: Window) {.loadfrom("child_controls_changed", 3218959716).}
  proc `theme=`*(self: Window; theme: Ref[Theme]) {.loadfrom("set_theme", 2326690814).}
  proc theme*(self: Window): Ref[Theme] {.loadfrom("get_theme", 3846893731).}
  proc `themeTypeVariation=`*(self: Window; themeType: StringName) {.loadfrom("set_theme_type_variation", 3304788590).}
  proc themeTypeVariation*(self: Window): StringName {.loadfrom("get_theme_type_variation", 2002593661).}
  proc beginBulkThemeOverride*(self: Window) {.loadfrom("begin_bulk_theme_override", 3218959716).}
  proc endBulkThemeOverride*(self: Window) {.loadfrom("end_bulk_theme_override", 3218959716).}
  proc addThemeIconOverride*(self: Window; name: StringName; texture: Ref[Texture2D]) {.loadfrom("add_theme_icon_override", 1373065600).}
  proc addThemeStyleboxOverride*(self: Window; name: StringName; stylebox: Ref[StyleBox]) {.loadfrom("add_theme_stylebox_override", 4188838905).}
  proc addThemeFontOverride*(self: Window; name: StringName; font: Ref[Font]) {.loadfrom("add_theme_font_override", 3518018674).}
  proc addThemeFontSizeOverride*(self: Window; name: StringName; fontSize: int32) {.loadfrom("add_theme_font_size_override", 2415702435).}
  proc addThemeColorOverride*(self: Window; name: StringName; color: Color) {.loadfrom("add_theme_color_override", 4260178595).}
  proc addThemeConstantOverride*(self: Window; name: StringName; constant: int32) {.loadfrom("add_theme_constant_override", 2415702435).}
  proc removeThemeIconOverride*(self: Window; name: StringName) {.loadfrom("remove_theme_icon_override", 3304788590).}
  proc removeThemeStyleboxOverride*(self: Window; name: StringName) {.loadfrom("remove_theme_stylebox_override", 3304788590).}
  proc removeThemeFontOverride*(self: Window; name: StringName) {.loadfrom("remove_theme_font_override", 3304788590).}
  proc removeThemeFontSizeOverride*(self: Window; name: StringName) {.loadfrom("remove_theme_font_size_override", 3304788590).}
  proc removeThemeColorOverride*(self: Window; name: StringName) {.loadfrom("remove_theme_color_override", 3304788590).}
  proc removeThemeConstantOverride*(self: Window; name: StringName) {.loadfrom("remove_theme_constant_override", 3304788590).}
  proc getThemeIcon*(self: Window; name: StringName; themeType: StringName = ""): Ref[Texture2D] {.loadfrom("get_theme_icon", 2336455395).}
  proc getThemeStylebox*(self: Window; name: StringName; themeType: StringName = ""): Ref[StyleBox] {.loadfrom("get_theme_stylebox", 2759935355).}
  proc getThemeFont*(self: Window; name: StringName; themeType: StringName = ""): Ref[Font] {.loadfrom("get_theme_font", 387378635).}
  proc getThemeFontSize*(self: Window; name: StringName; themeType: StringName = ""): int32 {.loadfrom("get_theme_font_size", 229578101).}
  proc getThemeColor*(self: Window; name: StringName; themeType: StringName = ""): Color {.loadfrom("get_theme_color", 2377051548).}
  proc getThemeConstant*(self: Window; name: StringName; themeType: StringName = ""): int32 {.loadfrom("get_theme_constant", 229578101).}
  proc hasThemeIconOverride*(self: Window; name: StringName): Bool {.loadfrom("has_theme_icon_override", 2619796661).}
  proc hasThemeStyleboxOverride*(self: Window; name: StringName): Bool {.loadfrom("has_theme_stylebox_override", 2619796661).}
  proc hasThemeFontOverride*(self: Window; name: StringName): Bool {.loadfrom("has_theme_font_override", 2619796661).}
  proc hasThemeFontSizeOverride*(self: Window; name: StringName): Bool {.loadfrom("has_theme_font_size_override", 2619796661).}
  proc hasThemeColorOverride*(self: Window; name: StringName): Bool {.loadfrom("has_theme_color_override", 2619796661).}
  proc hasThemeConstantOverride*(self: Window; name: StringName): Bool {.loadfrom("has_theme_constant_override", 2619796661).}
  proc hasThemeIcon*(self: Window; name: StringName; themeType: StringName = ""): Bool {.loadfrom("has_theme_icon", 1187511791).}
  proc hasThemeStylebox*(self: Window; name: StringName; themeType: StringName = ""): Bool {.loadfrom("has_theme_stylebox", 1187511791).}
  proc hasThemeFont*(self: Window; name: StringName; themeType: StringName = ""): Bool {.loadfrom("has_theme_font", 1187511791).}
  proc hasThemeFontSize*(self: Window; name: StringName; themeType: StringName = ""): Bool {.loadfrom("has_theme_font_size", 1187511791).}
  proc hasThemeColor*(self: Window; name: StringName; themeType: StringName = ""): Bool {.loadfrom("has_theme_color", 1187511791).}
  proc hasThemeConstant*(self: Window; name: StringName; themeType: StringName = ""): Bool {.loadfrom("has_theme_constant", 1187511791).}
  proc getThemeDefaultBaseScale*(self: Window): Float {.loadfrom("get_theme_default_base_scale", 1740695150).}
  proc getThemeDefaultFont*(self: Window): Ref[Font] {.loadfrom("get_theme_default_font", 3229501585).}
  proc getThemeDefaultFontSize*(self: Window): int32 {.loadfrom("get_theme_default_font_size", 3905245786).}
  proc setLayoutDirection*(self: Window; direction: Window|>LayoutDirection) {.loadfrom("set_layout_direction", 3094704184).}
  proc getLayoutDirection*(self: Window): Window|>LayoutDirection {.loadfrom("get_layout_direction", 3909617982).}
  proc isLayoutRtl*(self: Window): Bool {.loadfrom("is_layout_rtl", 36873697).}
  proc `autoTranslate=`*(self: Window; enable: Bool) {.loadfrom("set_auto_translate", 2586408642).}
  proc isAutoTranslating*(self: Window): Bool {.loadfrom("is_auto_translating", 36873697).}
  proc popup*(self: Window; rect: Rect2i = Rect2i|>init(0, 0, 0, 0)) {.loadfrom("popup", 1680304321).}
  proc popupOnParent*(self: Window; parentRect: Rect2i) {.loadfrom("popup_on_parent", 1763793166).}
  proc popupCentered*(self: Window; minsize: Vector2i = gdveci(0, 0)) {.loadfrom("popup_centered", 3447975422).}
  proc popupCenteredRatio*(self: Window; ratio: Float = 0.8) {.loadfrom("popup_centered_ratio", 1014814997).}
  proc popupCenteredClamped*(self: Window; minsize: Vector2i = gdveci(0, 0); fallbackRatio: Float = 0.75) {.loadfrom("popup_centered_clamped", 2613752477).}
  proc popupExclusive*(self: Window; fromNode: ptr Node; rect: Rect2i = Rect2i|>init(0, 0, 0, 0)) {.loadfrom("popup_exclusive", 1728044812).}
  proc popupExclusiveOnParent*(self: Window; fromNode: ptr Node; parentRect: Rect2i) {.loadfrom("popup_exclusive_on_parent", 2344671043).}
  proc popupExclusiveCentered*(self: Window; fromNode: ptr Node; minsize: Vector2i = gdveci(0, 0)) {.loadfrom("popup_exclusive_centered", 2561668109).}
  proc popupExclusiveCenteredRatio*(self: Window; fromNode: ptr Node; ratio: Float = 0.8) {.loadfrom("popup_exclusive_centered_ratio", 4257659513).}
  proc popupExclusiveCenteredClamped*(self: Window; fromNode: ptr Node; minsize: Vector2i = gdveci(0, 0); fallbackRatio: Float = 0.75) {.loadfrom("popup_exclusive_centered_clamped", 224798062).}

# AudioEffectSpectrumAnalyzerInstance
define_godot_engine_class_essencials(AudioEffectSpectrumAnalyzerInstance, AudioEffectInstance)
AudioEffectSpectrumAnalyzerInstance.memberProcs:
  proc getMagnitudeForFrequencyRange*(self: Ref[AudioEffectSpectrumAnalyzerInstance]; fromHz: Float; toHz: Float; mode: AudioEffectSpectrumAnalyzerInstance|>MagnitudeMode = magnitudeMax): Vector2 {.loadfrom("get_magnitude_for_frequency_range", 2693213071).}

# AudioStreamPlaybackPolyphonic
define_godot_engine_class_essencials(AudioStreamPlaybackPolyphonic, AudioStreamPlayback)
AudioStreamPlaybackPolyphonic.memberProcs:
  proc playStream*(self: Ref[AudioStreamPlaybackPolyphonic]; stream: Ref[AudioStream]; fromOffset: Float = 0; volumeDb: Float = 0; pitchScale: Float = 1.0): int64 {.loadfrom("play_stream", 3792189967).}
  proc setStreamVolume*(self: Ref[AudioStreamPlaybackPolyphonic]; stream: int64; volumeDb: Float) {.loadfrom("set_stream_volume", 1602489585).}
  proc setStreamPitchScale*(self: Ref[AudioStreamPlaybackPolyphonic]; stream: int64; pitchScale: Float) {.loadfrom("set_stream_pitch_scale", 1602489585).}
  proc isStreamPlaying*(self: Ref[AudioStreamPlaybackPolyphonic]; stream: int64): Bool {.loadfrom("is_stream_playing", 1116898809).}
  proc stopStream*(self: Ref[AudioStreamPlaybackPolyphonic]; stream: int64) {.loadfrom("stop_stream", 1286410249).}

# AudioStreamPlaybackResampled
define_godot_engine_class_essencials(AudioStreamPlaybackResampled, AudioStreamPlayback)
method mixResampled*(self: Ref[AudioStreamPlaybackResampled]; dstBuffer: ptr AudioFrame; frameCount: int32): int32 {.base.} = (discard)
method getStreamSamplingRate*(self: Ref[AudioStreamPlaybackResampled]): Float {.base.} = (discard)
AudioStreamPlaybackResampled.memberProcs:
  proc beginResample*(self: Ref[AudioStreamPlaybackResampled]) {.loadfrom("begin_resample", 3218959716).}

# EditorExportPlatformAndroid
define_godot_engine_class_essencials(EditorExportPlatformAndroid, EditorExportPlatform)

# EditorExportPlatformIOS
define_godot_engine_class_essencials(EditorExportPlatformIOS, EditorExportPlatform)

# EditorExportPlatformMacOS
define_godot_engine_class_essencials(EditorExportPlatformMacOS, EditorExportPlatform)

# EditorExportPlatformPC
define_godot_engine_class_essencials(EditorExportPlatformPC, EditorExportPlatform)

# EditorExportPlatformWeb
define_godot_engine_class_essencials(EditorExportPlatformWeb, EditorExportPlatform)

# EditorSceneFormatImporterBlend
define_godot_engine_class_essencials(EditorSceneFormatImporterBlend, EditorSceneFormatImporter)

# EditorSceneFormatImporterFBX
define_godot_engine_class_essencials(EditorSceneFormatImporterFBX, EditorSceneFormatImporter)

# EditorSceneFormatImporterGLTF
define_godot_engine_class_essencials(EditorSceneFormatImporterGLTF, EditorSceneFormatImporter)

# GDScriptEditorTranslationParserPlugin
define_godot_engine_class_essencials(GDScriptEditorTranslationParserPlugin, EditorTranslationParserPlugin)

# ImageFormatLoaderExtension
define_godot_engine_class_essencials(ImageFormatLoaderExtension, ImageFormatLoader)
method getRecognizedExtensions*(self: Ref[ImageFormatLoaderExtension]): PackedStringArray {.base.} = (discard)
method loadImage*(self: Ref[ImageFormatLoaderExtension]; image: Ref[Image]; fileaccess: Ref[FileAccess]; flags: set[ImageFormatLoader|>LoaderFlags]; scale: Float): Error {.base.} = (discard)
ImageFormatLoaderExtension.memberProcs:
  proc addFormatLoader*(self: Ref[ImageFormatLoaderExtension]) {.loadfrom("add_format_loader", 3218959716).}
  proc removeFormatLoader*(self: Ref[ImageFormatLoaderExtension]) {.loadfrom("remove_format_loader", 3218959716).}

# LightmapperRD
define_godot_engine_class_essencials(LightmapperRD, Lightmapper)

# MultiplayerAPIExtension
define_godot_engine_class_essencials(MultiplayerAPIExtension, MultiplayerAPI)
method poll*(self: Ref[MultiplayerAPIExtension]): Error {.base.} = (discard)
method setMultiplayerPeer*(self: Ref[MultiplayerAPIExtension]; multiplayerPeer: Ref[MultiplayerPeer]) {.base.} = (discard)
method getMultiplayerPeer*(self: Ref[MultiplayerAPIExtension]): Ref[MultiplayerPeer] {.base.} = (discard)
method getUniqueId*(self: Ref[MultiplayerAPIExtension]): int32 {.base.} = (discard)
method getPeerIds*(self: Ref[MultiplayerAPIExtension]): PackedInt32Array {.base.} = (discard)
method rpc*(self: Ref[MultiplayerAPIExtension]; peer: int32; `object`: ptr Object; `method`: StringName; args: Array): Error {.base.} = (discard)
method getRemoteSenderId*(self: Ref[MultiplayerAPIExtension]): int32 {.base.} = (discard)
method objectConfigurationAdd*(self: Ref[MultiplayerAPIExtension]; `object`: ptr Object; configuration: ptr Variant): Error {.base.} = (discard)
method objectConfigurationRemove*(self: Ref[MultiplayerAPIExtension]; `object`: ptr Object; configuration: ptr Variant): Error {.base.} = (discard)

# SceneMultiplayer
define_godot_engine_class_essencials(SceneMultiplayer, MultiplayerAPI)
SceneMultiplayer.memberProcs:
  proc `rootPath=`*(self: Ref[SceneMultiplayer]; path: NodePath) {.loadfrom("set_root_path", 1348162250).}
  proc rootPath*(self: Ref[SceneMultiplayer]): NodePath {.loadfrom("get_root_path", 4075236667).}
  proc clear*(self: Ref[SceneMultiplayer]) {.loadfrom("clear", 3218959716).}
  proc disconnectPeer*(self: Ref[SceneMultiplayer]; id: int32) {.loadfrom("disconnect_peer", 1286410249).}
  proc getAuthenticatingPeers*(self: Ref[SceneMultiplayer]): PackedInt32Array {.loadfrom("get_authenticating_peers", 969006518).}
  proc sendAuth*(self: Ref[SceneMultiplayer]; id: int32; data: PackedByteArray): Error {.loadfrom("send_auth", 506032537).}
  proc completeAuth*(self: Ref[SceneMultiplayer]; id: int32): Error {.loadfrom("complete_auth", 844576869).}
  proc `authCallback=`*(self: Ref[SceneMultiplayer]; callback: Callable) {.loadfrom("set_auth_callback", 1611583062).}
  proc authCallback*(self: Ref[SceneMultiplayer]): Callable {.loadfrom("get_auth_callback", 1307783378).}
  proc `authTimeout=`*(self: Ref[SceneMultiplayer]; timeout: float64) {.loadfrom("set_auth_timeout", 373806689).}
  proc authTimeout*(self: Ref[SceneMultiplayer]): float64 {.loadfrom("get_auth_timeout", 1740695150).}
  proc `refuseNewConnections=`*(self: Ref[SceneMultiplayer]; refuse: Bool) {.loadfrom("set_refuse_new_connections", 2586408642).}
  proc isRefusingNewConnections*(self: Ref[SceneMultiplayer]): Bool {.loadfrom("is_refusing_new_connections", 36873697).}
  proc `allowObjectDecoding=`*(self: Ref[SceneMultiplayer]; enable: Bool) {.loadfrom("set_allow_object_decoding", 2586408642).}
  proc isObjectDecodingAllowed*(self: Ref[SceneMultiplayer]): Bool {.loadfrom("is_object_decoding_allowed", 36873697).}
  proc `serverRelayEnabled=`*(self: Ref[SceneMultiplayer]; enabled: Bool) {.loadfrom("set_server_relay_enabled", 2586408642).}
  proc isServerRelayEnabled*(self: Ref[SceneMultiplayer]): Bool {.loadfrom("is_server_relay_enabled", 36873697).}
  proc sendBytes*(self: Ref[SceneMultiplayer]; bytes: PackedByteArray; id: int32 = 0; mode: MultiplayerPeer|>TransferMode = transferModeReliable; channel: int32 = 0): Error {.loadfrom("send_bytes", 2742700601).}
  proc maxSyncPacketSize*(self: Ref[SceneMultiplayer]): int32 {.loadfrom("get_max_sync_packet_size", 3905245786).}
  proc `maxSyncPacketSize=`*(self: Ref[SceneMultiplayer]; size: int32) {.loadfrom("set_max_sync_packet_size", 1286410249).}
  proc maxDeltaPacketSize*(self: Ref[SceneMultiplayer]): int32 {.loadfrom("get_max_delta_packet_size", 3905245786).}
  proc `maxDeltaPacketSize=`*(self: Ref[SceneMultiplayer]; size: int32) {.loadfrom("set_max_delta_packet_size", 1286410249).}

# EditorNode3DGizmo
define_godot_engine_class_essencials(EditorNode3DGizmo, Node3DGizmo)
method redraw*(self: Ref[EditorNode3DGizmo]) {.base.} = (discard)
method getHandleName*(self: Ref[EditorNode3DGizmo]; id: int32; secondary: Bool): String {.base.} = (discard)
method isHandleHighlighted*(self: Ref[EditorNode3DGizmo]; id: int32; secondary: Bool): Bool {.base.} = (discard)
method getHandleValue*(self: Ref[EditorNode3DGizmo]; id: int32; secondary: Bool): Variant {.base.} = (discard)
method setHandle*(self: Ref[EditorNode3DGizmo]; id: int32; secondary: Bool; camera: Camera3D; point: Vector2) {.base.} = (discard)
method commitHandle*(self: Ref[EditorNode3DGizmo]; id: int32; secondary: Bool; restore: ptr Variant; cancel: Bool) {.base.} = (discard)
method subgizmosIntersectRay*(self: Ref[EditorNode3DGizmo]; camera: Camera3D; point: Vector2): int32 {.base.} = (discard)
method subgizmosIntersectFrustum*(self: Ref[EditorNode3DGizmo]; camera: Camera3D; frustum: TypedArray[Plane]): PackedInt32Array {.base.} = (discard)
method setSubgizmoTransform*(self: Ref[EditorNode3DGizmo]; id: int32; transform: Transform3D) {.base.} = (discard)
method getSubgizmoTransform*(self: Ref[EditorNode3DGizmo]; id: int32): Transform3D {.base.} = (discard)
method commitSubgizmos*(self: Ref[EditorNode3DGizmo]; ids: PackedInt32Array; restores: TypedArray[Transform3D]; cancel: Bool) {.base.} = (discard)
EditorNode3DGizmo.memberProcs:
  proc addLines*(self: Ref[EditorNode3DGizmo]; lines: PackedVector3Array; material: Ref[Material]; billboard: Bool = false; modulate: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("add_lines", 302451090).}
  proc addMesh*(self: Ref[EditorNode3DGizmo]; mesh: Ref[Mesh]; material: Ref[Material] = default Ref[Material]; transform: Transform3D = Transform3D|>init(); skeleton: Ref[SkinReference] = default Ref[SkinReference]) {.loadfrom("add_mesh", 1868867708).}
  proc addCollisionSegments*(self: Ref[EditorNode3DGizmo]; segments: PackedVector3Array) {.loadfrom("add_collision_segments", 334873810).}
  proc addCollisionTriangles*(self: Ref[EditorNode3DGizmo]; triangles: Ref[TriangleMesh]) {.loadfrom("add_collision_triangles", 54901064).}
  proc addUnscaledBillboard*(self: Ref[EditorNode3DGizmo]; material: Ref[Material]; defaultScale: Float = 1; modulate: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("add_unscaled_billboard", 3719733075).}
  proc addHandles*(self: Ref[EditorNode3DGizmo]; handles: PackedVector3Array; material: Ref[Material]; ids: PackedInt32Array; billboard: Bool = false; secondary: Bool = false) {.loadfrom("add_handles", 2254560097).}
  proc setNode3d*(self: Ref[EditorNode3DGizmo]; node: ptr Node) {.loadfrom("set_node_3d", 1078189570).}
  proc getNode3d*(self: Ref[EditorNode3DGizmo]): Node3D {.loadfrom("get_node_3d", 151077316).}
  proc getPlugin*(self: Ref[EditorNode3DGizmo]): Ref[EditorNode3DGizmoPlugin] {.loadfrom("get_plugin", 4250544552).}
  proc clear*(self: Ref[EditorNode3DGizmo]) {.loadfrom("clear", 3218959716).}
  proc setHidden*(self: Ref[EditorNode3DGizmo]; hidden: Bool) {.loadfrom("set_hidden", 2586408642).}
  proc isSubgizmoSelected*(self: Ref[EditorNode3DGizmo]; id: int32): Bool {.loadfrom("is_subgizmo_selected", 1116898809).}
  proc getSubgizmoSelection*(self: Ref[EditorNode3DGizmo]): PackedInt32Array {.loadfrom("get_subgizmo_selection", 1930428628).}

# ENetPacketPeer
define_godot_engine_class_essencials(ENetPacketPeer, PacketPeer)
ENetPacketPeer.memberProcs:
  proc peerDisconnect*(self: Ref[ENetPacketPeer]; data: int32 = 0) {.loadfrom("peer_disconnect", 1995695955).}
  proc peerDisconnectLater*(self: Ref[ENetPacketPeer]; data: int32 = 0) {.loadfrom("peer_disconnect_later", 1995695955).}
  proc peerDisconnectNow*(self: Ref[ENetPacketPeer]; data: int32 = 0) {.loadfrom("peer_disconnect_now", 1995695955).}
  proc ping*(self: Ref[ENetPacketPeer]) {.loadfrom("ping", 3218959716).}
  proc pingInterval*(self: Ref[ENetPacketPeer]; pingInterval: int32) {.loadfrom("ping_interval", 1286410249).}
  proc reset*(self: Ref[ENetPacketPeer]) {.loadfrom("reset", 3218959716).}
  proc send*(self: Ref[ENetPacketPeer]; channel: int32; packet: PackedByteArray; flags: int32): Error {.loadfrom("send", 120522849).}
  proc throttleConfigure*(self: Ref[ENetPacketPeer]; interval: int32; acceleration: int32; deceleration: int32) {.loadfrom("throttle_configure", 1649997291).}
  proc setTimeout*(self: Ref[ENetPacketPeer]; timeout: int32; timeoutMin: int32; timeoutMax: int32) {.loadfrom("set_timeout", 1649997291).}
  proc getRemoteAddress*(self: Ref[ENetPacketPeer]): String {.loadfrom("get_remote_address", 201670096).}
  proc getRemotePort*(self: Ref[ENetPacketPeer]): int32 {.loadfrom("get_remote_port", 3905245786).}
  proc getStatistic*(self: Ref[ENetPacketPeer]; statistic: ENetPacketPeer|>PeerStatistic): float64 {.loadfrom("get_statistic", 1642578323).}
  proc getState*(self: Ref[ENetPacketPeer]): ENetPacketPeer|>PeerState {.loadfrom("get_state", 711068532).}
  proc getChannels*(self: Ref[ENetPacketPeer]): int32 {.loadfrom("get_channels", 3905245786).}
  proc isActive*(self: Ref[ENetPacketPeer]): Bool {.loadfrom("is_active", 36873697).}

# MultiplayerPeer
define_godot_engine_class_essencials(MultiplayerPeer, PacketPeer)
MultiplayerPeer.memberProcs:
  proc `transferChannel=`*(self: Ref[MultiplayerPeer]; channel: int32) {.loadfrom("set_transfer_channel", 1286410249).}
  proc transferChannel*(self: Ref[MultiplayerPeer]): int32 {.loadfrom("get_transfer_channel", 3905245786).}
  proc `transferMode=`*(self: Ref[MultiplayerPeer]; mode: MultiplayerPeer|>TransferMode) {.loadfrom("set_transfer_mode", 950411049).}
  proc transferMode*(self: Ref[MultiplayerPeer]): MultiplayerPeer|>TransferMode {.loadfrom("get_transfer_mode", 3369852622).}
  proc setTargetPeer*(self: Ref[MultiplayerPeer]; id: int32) {.loadfrom("set_target_peer", 1286410249).}
  proc getPacketPeer*(self: Ref[MultiplayerPeer]): int32 {.loadfrom("get_packet_peer", 3905245786).}
  proc getPacketChannel*(self: Ref[MultiplayerPeer]): int32 {.loadfrom("get_packet_channel", 3905245786).}
  proc getPacketMode*(self: Ref[MultiplayerPeer]): MultiplayerPeer|>TransferMode {.loadfrom("get_packet_mode", 3369852622).}
  proc poll*(self: Ref[MultiplayerPeer]) {.loadfrom("poll", 3218959716).}
  proc close*(self: Ref[MultiplayerPeer]) {.loadfrom("close", 3218959716).}
  proc disconnectPeer*(self: Ref[MultiplayerPeer]; peer: int32; force: Bool = false) {.loadfrom("disconnect_peer", 4023243586).}
  proc getConnectionStatus*(self: Ref[MultiplayerPeer]): MultiplayerPeer|>ConnectionStatus {.loadfrom("get_connection_status", 2147374275).}
  proc getUniqueId*(self: Ref[MultiplayerPeer]): int32 {.loadfrom("get_unique_id", 3905245786).}
  proc generateUniqueId*(self: Ref[MultiplayerPeer]): uint32 {.loadfrom("generate_unique_id", 3905245786).}
  proc `refuseNewConnections=`*(self: Ref[MultiplayerPeer]; enable: Bool) {.loadfrom("set_refuse_new_connections", 2586408642).}
  proc isRefusingNewConnections*(self: Ref[MultiplayerPeer]): Bool {.loadfrom("is_refusing_new_connections", 36873697).}
  proc isServerRelaySupported*(self: Ref[MultiplayerPeer]): Bool {.loadfrom("is_server_relay_supported", 36873697).}

# PacketPeerDTLS
define_godot_engine_class_essencials(PacketPeerDTLS, PacketPeer)
PacketPeerDTLS.memberProcs:
  proc poll*(self: Ref[PacketPeerDTLS]) {.loadfrom("poll", 3218959716).}
  proc connectToPeer*(self: Ref[PacketPeerDTLS]; packetPeer: Ref[PacketPeerUDP]; hostname: String; clientOptions: Ref[TLSOptions] = default Ref[TLSOptions]): Error {.loadfrom("connect_to_peer", 1801538152).}
  proc getStatus*(self: Ref[PacketPeerDTLS]): PacketPeerDTLS|>Status {.loadfrom("get_status", 3248654679).}
  proc disconnectFromPeer*(self: Ref[PacketPeerDTLS]) {.loadfrom("disconnect_from_peer", 3218959716).}

# PacketPeerExtension
define_godot_engine_class_essencials(PacketPeerExtension, PacketPeer)
method getPacket*(self: Ref[PacketPeerExtension]; rBuffer: ptr ptr uint8; rBufferSize: ptr int32): Error {.base.} = (discard)
method putPacket*(self: Ref[PacketPeerExtension]; pBuffer: ptr uint8; pBufferSize: int32): Error {.base.} = (discard)
method getAvailablePacketCount*(self: Ref[PacketPeerExtension]): int32 {.base.} = (discard)
method getMaxPacketSize*(self: Ref[PacketPeerExtension]): int32 {.base.} = (discard)

# PacketPeerStream
define_godot_engine_class_essencials(PacketPeerStream, PacketPeer)
PacketPeerStream.memberProcs:
  proc `streamPeer=`*(self: Ref[PacketPeerStream]; peer: Ref[StreamPeer]) {.loadfrom("set_stream_peer", 3281897016).}
  proc streamPeer*(self: Ref[PacketPeerStream]): Ref[StreamPeer] {.loadfrom("get_stream_peer", 2741655269).}
  proc `inputBufferMaxSize=`*(self: Ref[PacketPeerStream]; maxSizeBytes: int32) {.loadfrom("set_input_buffer_max_size", 1286410249).}
  proc `outputBufferMaxSize=`*(self: Ref[PacketPeerStream]; maxSizeBytes: int32) {.loadfrom("set_output_buffer_max_size", 1286410249).}
  proc inputBufferMaxSize*(self: Ref[PacketPeerStream]): int32 {.loadfrom("get_input_buffer_max_size", 3905245786).}
  proc outputBufferMaxSize*(self: Ref[PacketPeerStream]): int32 {.loadfrom("get_output_buffer_max_size", 3905245786).}

# PacketPeerUDP
define_godot_engine_class_essencials(PacketPeerUDP, PacketPeer)
PacketPeerUDP.memberProcs:
  proc `bind`*(self: Ref[PacketPeerUDP]; port: int32; bindAddress: String = "*"; recvBufSize: int32 = 65536): Error {.loadfrom("bind", 4290438434).}
  proc close*(self: Ref[PacketPeerUDP]) {.loadfrom("close", 3218959716).}
  proc wait*(self: Ref[PacketPeerUDP]): Error {.loadfrom("wait", 166280745).}
  proc isBound*(self: Ref[PacketPeerUDP]): Bool {.loadfrom("is_bound", 36873697).}
  proc connectToHost*(self: Ref[PacketPeerUDP]; host: String; port: int32): Error {.loadfrom("connect_to_host", 993915709).}
  proc isSocketConnected*(self: Ref[PacketPeerUDP]): Bool {.loadfrom("is_socket_connected", 36873697).}
  proc getPacketIp*(self: Ref[PacketPeerUDP]): String {.loadfrom("get_packet_ip", 201670096).}
  proc getPacketPort*(self: Ref[PacketPeerUDP]): int32 {.loadfrom("get_packet_port", 3905245786).}
  proc getLocalPort*(self: Ref[PacketPeerUDP]): int32 {.loadfrom("get_local_port", 3905245786).}
  proc setDestAddress*(self: Ref[PacketPeerUDP]; host: String; port: int32): Error {.loadfrom("set_dest_address", 993915709).}
  proc setBroadcastEnabled*(self: Ref[PacketPeerUDP]; enabled: Bool) {.loadfrom("set_broadcast_enabled", 2586408642).}
  proc joinMulticastGroup*(self: Ref[PacketPeerUDP]; multicastAddress: String; interfaceName: String): Error {.loadfrom("join_multicast_group", 852856452).}
  proc leaveMulticastGroup*(self: Ref[PacketPeerUDP]; multicastAddress: String; interfaceName: String): Error {.loadfrom("leave_multicast_group", 852856452).}

# WebRTCDataChannel
define_godot_engine_class_essencials(WebRTCDataChannel, PacketPeer)
WebRTCDataChannel.memberProcs:
  proc poll*(self: Ref[WebRTCDataChannel]): Error {.loadfrom("poll", 166280745).}
  proc close*(self: Ref[WebRTCDataChannel]) {.loadfrom("close", 3218959716).}
  proc wasStringPacket*(self: Ref[WebRTCDataChannel]): Bool {.loadfrom("was_string_packet", 36873697).}
  proc `writeMode=`*(self: Ref[WebRTCDataChannel]; writeMode: WebRTCDataChannel|>WriteMode) {.loadfrom("set_write_mode", 1999768052).}
  proc writeMode*(self: Ref[WebRTCDataChannel]): WebRTCDataChannel|>WriteMode {.loadfrom("get_write_mode", 2848495172).}
  proc getReadyState*(self: Ref[WebRTCDataChannel]): WebRTCDataChannel|>ChannelState {.loadfrom("get_ready_state", 3501143017).}
  proc getLabel*(self: Ref[WebRTCDataChannel]): String {.loadfrom("get_label", 201670096).}
  proc isOrdered*(self: Ref[WebRTCDataChannel]): Bool {.loadfrom("is_ordered", 36873697).}
  proc getId*(self: Ref[WebRTCDataChannel]): int32 {.loadfrom("get_id", 3905245786).}
  proc getMaxPacketLifeTime*(self: Ref[WebRTCDataChannel]): int32 {.loadfrom("get_max_packet_life_time", 3905245786).}
  proc getMaxRetransmits*(self: Ref[WebRTCDataChannel]): int32 {.loadfrom("get_max_retransmits", 3905245786).}
  proc getProtocol*(self: Ref[WebRTCDataChannel]): String {.loadfrom("get_protocol", 201670096).}
  proc isNegotiated*(self: Ref[WebRTCDataChannel]): Bool {.loadfrom("is_negotiated", 36873697).}
  proc getBufferedAmount*(self: Ref[WebRTCDataChannel]): int32 {.loadfrom("get_buffered_amount", 3905245786).}

# WebSocketPeer
define_godot_engine_class_essencials(WebSocketPeer, PacketPeer)
WebSocketPeer.memberProcs:
  proc connectToUrl*(self: Ref[WebSocketPeer]; url: String; tlsClientOptions: Ref[TLSOptions] = default Ref[TLSOptions]): Error {.loadfrom("connect_to_url", 3097527179).}
  proc acceptStream*(self: Ref[WebSocketPeer]; stream: Ref[StreamPeer]): Error {.loadfrom("accept_stream", 255125695).}
  proc send*(self: Ref[WebSocketPeer]; message: PackedByteArray; writeMode: WebSocketPeer|>WriteMode = writeModeBinary): Error {.loadfrom("send", 3440492527).}
  proc sendText*(self: Ref[WebSocketPeer]; message: String): Error {.loadfrom("send_text", 166001499).}
  proc wasStringPacket*(self: Ref[WebSocketPeer]): Bool {.loadfrom("was_string_packet", 36873697).}
  proc poll*(self: Ref[WebSocketPeer]) {.loadfrom("poll", 3218959716).}
  proc close*(self: Ref[WebSocketPeer]; code: int32 = 1000; reason: String = "") {.loadfrom("close", 1047156615).}
  proc getConnectedHost*(self: Ref[WebSocketPeer]): String {.loadfrom("get_connected_host", 201670096).}
  proc getConnectedPort*(self: Ref[WebSocketPeer]): uint16 {.loadfrom("get_connected_port", 3905245786).}
  proc getSelectedProtocol*(self: Ref[WebSocketPeer]): String {.loadfrom("get_selected_protocol", 201670096).}
  proc getRequestedUrl*(self: Ref[WebSocketPeer]): String {.loadfrom("get_requested_url", 201670096).}
  proc setNoDelay*(self: Ref[WebSocketPeer]; enabled: Bool) {.loadfrom("set_no_delay", 2586408642).}
  proc getCurrentOutboundBufferedAmount*(self: Ref[WebSocketPeer]): int32 {.loadfrom("get_current_outbound_buffered_amount", 3905245786).}
  proc getReadyState*(self: Ref[WebSocketPeer]): WebSocketPeer|>State {.loadfrom("get_ready_state", 346482985).}
  proc getCloseCode*(self: Ref[WebSocketPeer]): int32 {.loadfrom("get_close_code", 3905245786).}
  proc getCloseReason*(self: Ref[WebSocketPeer]): String {.loadfrom("get_close_reason", 201670096).}
  proc supportedProtocols*(self: Ref[WebSocketPeer]): PackedStringArray {.loadfrom("get_supported_protocols", 1139954409).}
  proc `supportedProtocols=`*(self: Ref[WebSocketPeer]; protocols: PackedStringArray) {.loadfrom("set_supported_protocols", 4015028928).}
  proc handshakeHeaders*(self: Ref[WebSocketPeer]): PackedStringArray {.loadfrom("get_handshake_headers", 1139954409).}
  proc `handshakeHeaders=`*(self: Ref[WebSocketPeer]; protocols: PackedStringArray) {.loadfrom("set_handshake_headers", 4015028928).}
  proc inboundBufferSize*(self: Ref[WebSocketPeer]): int32 {.loadfrom("get_inbound_buffer_size", 3905245786).}
  proc `inboundBufferSize=`*(self: Ref[WebSocketPeer]; bufferSize: int32) {.loadfrom("set_inbound_buffer_size", 1286410249).}
  proc outboundBufferSize*(self: Ref[WebSocketPeer]): int32 {.loadfrom("get_outbound_buffer_size", 3905245786).}
  proc `outboundBufferSize=`*(self: Ref[WebSocketPeer]; bufferSize: int32) {.loadfrom("set_outbound_buffer_size", 1286410249).}
  proc `maxQueuedPackets=`*(self: Ref[WebSocketPeer]; bufferSize: int32) {.loadfrom("set_max_queued_packets", 1286410249).}
  proc maxQueuedPackets*(self: Ref[WebSocketPeer]): int32 {.loadfrom("get_max_queued_packets", 3905245786).}

# Animation
define_godot_engine_class_essencials(Animation, Resource)
Animation.memberProcs:
  proc addTrack*(self: Ref[Animation]; `type`: Animation|>TrackType; atPosition: int32 = -1): int32 {.loadfrom("add_track", 2393815928).}
  proc removeTrack*(self: Ref[Animation]; trackIdx: int32) {.loadfrom("remove_track", 1286410249).}
  proc getTrackCount*(self: Ref[Animation]): int32 {.loadfrom("get_track_count", 3905245786).}
  proc trackGetType*(self: Ref[Animation]; trackIdx: int32): Animation|>TrackType {.loadfrom("track_get_type", 3445944217).}
  proc trackGetPath*(self: Ref[Animation]; trackIdx: int32): NodePath {.loadfrom("track_get_path", 408788394).}
  proc trackSetPath*(self: Ref[Animation]; trackIdx: int32; path: NodePath) {.loadfrom("track_set_path", 2761262315).}
  proc findTrack*(self: Ref[Animation]; path: NodePath; `type`: Animation|>TrackType): int32 {.loadfrom("find_track", 245376003).}
  proc trackMoveUp*(self: Ref[Animation]; trackIdx: int32) {.loadfrom("track_move_up", 1286410249).}
  proc trackMoveDown*(self: Ref[Animation]; trackIdx: int32) {.loadfrom("track_move_down", 1286410249).}
  proc trackMoveTo*(self: Ref[Animation]; trackIdx: int32; toIdx: int32) {.loadfrom("track_move_to", 3937882851).}
  proc trackSwap*(self: Ref[Animation]; trackIdx: int32; withIdx: int32) {.loadfrom("track_swap", 3937882851).}
  proc trackSetImported*(self: Ref[Animation]; trackIdx: int32; imported: Bool) {.loadfrom("track_set_imported", 300928843).}
  proc trackIsImported*(self: Ref[Animation]; trackIdx: int32): Bool {.loadfrom("track_is_imported", 1116898809).}
  proc trackSetEnabled*(self: Ref[Animation]; trackIdx: int32; enabled: Bool) {.loadfrom("track_set_enabled", 300928843).}
  proc trackIsEnabled*(self: Ref[Animation]; trackIdx: int32): Bool {.loadfrom("track_is_enabled", 1116898809).}
  proc positionTrackInsertKey*(self: Ref[Animation]; trackIdx: int32; time: float64; position: Vector3): int32 {.loadfrom("position_track_insert_key", 2540608232).}
  proc rotationTrackInsertKey*(self: Ref[Animation]; trackIdx: int32; time: float64; rotation: Quaternion): int32 {.loadfrom("rotation_track_insert_key", 4165004800).}
  proc scaleTrackInsertKey*(self: Ref[Animation]; trackIdx: int32; time: float64; scale: Vector3): int32 {.loadfrom("scale_track_insert_key", 2540608232).}
  proc blendShapeTrackInsertKey*(self: Ref[Animation]; trackIdx: int32; time: float64; amount: Float): int32 {.loadfrom("blend_shape_track_insert_key", 1534913637).}
  proc positionTrackInterpolate*(self: Ref[Animation]; trackIdx: int32; timeSec: float64): Vector3 {.loadfrom("position_track_interpolate", 3285246857).}
  proc rotationTrackInterpolate*(self: Ref[Animation]; trackIdx: int32; timeSec: float64): Quaternion {.loadfrom("rotation_track_interpolate", 1988711975).}
  proc scaleTrackInterpolate*(self: Ref[Animation]; trackIdx: int32; timeSec: float64): Vector3 {.loadfrom("scale_track_interpolate", 3285246857).}
  proc blendShapeTrackInterpolate*(self: Ref[Animation]; trackIdx: int32; timeSec: float64): Float {.loadfrom("blend_shape_track_interpolate", 1900462983).}
  proc trackInsertKey*(self: Ref[Animation]; trackIdx: int32; time: float64; key: ptr Variant; transition: Float = 1): int32 {.loadfrom("track_insert_key", 1985425300).}
  proc trackRemoveKey*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32) {.loadfrom("track_remove_key", 3937882851).}
  proc trackRemoveKeyAtTime*(self: Ref[Animation]; trackIdx: int32; time: float64) {.loadfrom("track_remove_key_at_time", 1602489585).}
  proc trackSetKeyValue*(self: Ref[Animation]; trackIdx: int32; key: int32; value: ptr Variant) {.loadfrom("track_set_key_value", 2060538656).}
  proc trackSetKeyTransition*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32; transition: Float) {.loadfrom("track_set_key_transition", 3506521499).}
  proc trackSetKeyTime*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32; time: float64) {.loadfrom("track_set_key_time", 3506521499).}
  proc trackGetKeyTransition*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32): Float {.loadfrom("track_get_key_transition", 3085491603).}
  proc trackGetKeyCount*(self: Ref[Animation]; trackIdx: int32): int32 {.loadfrom("track_get_key_count", 923996154).}
  proc trackGetKeyValue*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32): Variant {.loadfrom("track_get_key_value", 678354945).}
  proc trackGetKeyTime*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32): float64 {.loadfrom("track_get_key_time", 3085491603).}
  proc trackFindKey*(self: Ref[Animation]; trackIdx: int32; time: float64; findMode: Animation|>FindMode = findModeNearest): int32 {.loadfrom("track_find_key", 3898229885).}
  proc trackSetInterpolationType*(self: Ref[Animation]; trackIdx: int32; interpolation: Animation|>InterpolationType) {.loadfrom("track_set_interpolation_type", 4112932513).}
  proc trackGetInterpolationType*(self: Ref[Animation]; trackIdx: int32): Animation|>InterpolationType {.loadfrom("track_get_interpolation_type", 1530756894).}
  proc trackSetInterpolationLoopWrap*(self: Ref[Animation]; trackIdx: int32; interpolation: Bool) {.loadfrom("track_set_interpolation_loop_wrap", 300928843).}
  proc trackGetInterpolationLoopWrap*(self: Ref[Animation]; trackIdx: int32): Bool {.loadfrom("track_get_interpolation_loop_wrap", 1116898809).}
  proc trackIsCompressed*(self: Ref[Animation]; trackIdx: int32): Bool {.loadfrom("track_is_compressed", 1116898809).}
  proc valueTrackSetUpdateMode*(self: Ref[Animation]; trackIdx: int32; mode: Animation|>UpdateMode) {.loadfrom("value_track_set_update_mode", 2854058312).}
  proc valueTrackGetUpdateMode*(self: Ref[Animation]; trackIdx: int32): Animation|>UpdateMode {.loadfrom("value_track_get_update_mode", 1440326473).}
  proc valueTrackInterpolate*(self: Ref[Animation]; trackIdx: int32; timeSec: float64): Variant {.loadfrom("value_track_interpolate", 491147702).}
  proc methodTrackGetName*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32): StringName {.loadfrom("method_track_get_name", 351665558).}
  proc methodTrackGetParams*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32): Array {.loadfrom("method_track_get_params", 2345056839).}
  proc bezierTrackInsertKey*(self: Ref[Animation]; trackIdx: int32; time: float64; value: Float; inHandle: Vector2 = gdvec(0, 0); outHandle: Vector2 = gdvec(0, 0)): int32 {.loadfrom("bezier_track_insert_key", 1057544502).}
  proc bezierTrackSetKeyValue*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32; value: Float) {.loadfrom("bezier_track_set_key_value", 3506521499).}
  proc bezierTrackSetKeyInHandle*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32; inHandle: Vector2; balancedValueTimeRatio: Float = 1.0) {.loadfrom("bezier_track_set_key_in_handle", 1028302688).}
  proc bezierTrackSetKeyOutHandle*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32; outHandle: Vector2; balancedValueTimeRatio: Float = 1.0) {.loadfrom("bezier_track_set_key_out_handle", 1028302688).}
  proc bezierTrackGetKeyValue*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32): Float {.loadfrom("bezier_track_get_key_value", 3085491603).}
  proc bezierTrackGetKeyInHandle*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32): Vector2 {.loadfrom("bezier_track_get_key_in_handle", 3016396712).}
  proc bezierTrackGetKeyOutHandle*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32): Vector2 {.loadfrom("bezier_track_get_key_out_handle", 3016396712).}
  proc bezierTrackInterpolate*(self: Ref[Animation]; trackIdx: int32; time: float64): Float {.loadfrom("bezier_track_interpolate", 1900462983).}
  proc audioTrackInsertKey*(self: Ref[Animation]; trackIdx: int32; time: float64; stream: Ref[Resource]; startOffset: Float = 0; endOffset: Float = 0): int32 {.loadfrom("audio_track_insert_key", 3489962123).}
  proc audioTrackSetKeyStream*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32; stream: Ref[Resource]) {.loadfrom("audio_track_set_key_stream", 3886397084).}
  proc audioTrackSetKeyStartOffset*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32; offset: Float) {.loadfrom("audio_track_set_key_start_offset", 3506521499).}
  proc audioTrackSetKeyEndOffset*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32; offset: Float) {.loadfrom("audio_track_set_key_end_offset", 3506521499).}
  proc audioTrackGetKeyStream*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32): Ref[Resource] {.loadfrom("audio_track_get_key_stream", 635277205).}
  proc audioTrackGetKeyStartOffset*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32): Float {.loadfrom("audio_track_get_key_start_offset", 3085491603).}
  proc audioTrackGetKeyEndOffset*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32): Float {.loadfrom("audio_track_get_key_end_offset", 3085491603).}
  proc audioTrackSetUseBlend*(self: Ref[Animation]; trackIdx: int32; enable: Bool) {.loadfrom("audio_track_set_use_blend", 300928843).}
  proc audioTrackIsUseBlend*(self: Ref[Animation]; trackIdx: int32): Bool {.loadfrom("audio_track_is_use_blend", 1116898809).}
  proc animationTrackInsertKey*(self: Ref[Animation]; trackIdx: int32; time: float64; animation: StringName): int32 {.loadfrom("animation_track_insert_key", 158676774).}
  proc animationTrackSetKeyAnimation*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32; animation: StringName) {.loadfrom("animation_track_set_key_animation", 117615382).}
  proc animationTrackGetKeyAnimation*(self: Ref[Animation]; trackIdx: int32; keyIdx: int32): StringName {.loadfrom("animation_track_get_key_animation", 351665558).}
  proc `length=`*(self: Ref[Animation]; timeSec: Float) {.loadfrom("set_length", 373806689).}
  proc length*(self: Ref[Animation]): Float {.loadfrom("get_length", 1740695150).}
  proc `loopMode=`*(self: Ref[Animation]; loopMode: Animation|>LoopMode) {.loadfrom("set_loop_mode", 3155355575).}
  proc loopMode*(self: Ref[Animation]): Animation|>LoopMode {.loadfrom("get_loop_mode", 1988889481).}
  proc `step=`*(self: Ref[Animation]; sizeSec: Float) {.loadfrom("set_step", 373806689).}
  proc step*(self: Ref[Animation]): Float {.loadfrom("get_step", 1740695150).}
  proc clear*(self: Ref[Animation]) {.loadfrom("clear", 3218959716).}
  proc copyTrack*(self: Ref[Animation]; trackIdx: int32; toAnimation: Ref[Animation]) {.loadfrom("copy_track", 148001024).}
  proc compress*(self: Ref[Animation]; pageSize: uint32 = 8192'u32; fps: uint32 = 120'u32; splitTolerance: Float = 4.0) {.loadfrom("compress", 3608408117).}

# AnimationLibrary
define_godot_engine_class_essencials(AnimationLibrary, Resource)
AnimationLibrary.memberProcs:
  proc addAnimation*(self: Ref[AnimationLibrary]; name: StringName; animation: Ref[Animation]): Error {.loadfrom("add_animation", 1811855551).}
  proc removeAnimation*(self: Ref[AnimationLibrary]; name: StringName) {.loadfrom("remove_animation", 3304788590).}
  proc renameAnimation*(self: Ref[AnimationLibrary]; name: StringName; newname: StringName) {.loadfrom("rename_animation", 3740211285).}
  proc hasAnimation*(self: Ref[AnimationLibrary]; name: StringName): Bool {.loadfrom("has_animation", 2619796661).}
  proc getAnimation*(self: Ref[AnimationLibrary]; name: StringName): Ref[Animation] {.loadfrom("get_animation", 2933122410).}
  proc getAnimationList*(self: Ref[AnimationLibrary]): TypedArray[StringName] {.loadfrom("get_animation_list", 3995934104).}

# AnimationNode
define_godot_engine_class_essencials(AnimationNode, Resource)
method getChildNodes*(self: Ref[AnimationNode]): Dictionary {.base.} = (discard)
method getParameterList*(self: Ref[AnimationNode]): Array {.base.} = (discard)
method getChildByName*(self: Ref[AnimationNode]; name: StringName): Ref[AnimationNode] {.base.} = (discard)
method getParameterDefaultValue*(self: Ref[AnimationNode]; parameter: StringName): Variant {.base.} = (discard)
method isParameterReadOnly*(self: Ref[AnimationNode]; parameter: StringName): Bool {.base.} = (discard)
method process*(self: Ref[AnimationNode]; time: float64; seek: Bool; isExternalSeeking: Bool; testOnly: Bool): float64 {.base.} = (discard)
method getCaption*(self: Ref[AnimationNode]): String {.base.} = (discard)
method hasFilter*(self: Ref[AnimationNode]): Bool {.base.} = (discard)
AnimationNode.memberProcs:
  proc addInput*(self: Ref[AnimationNode]; name: String): Bool {.loadfrom("add_input", 2323990056).}
  proc removeInput*(self: Ref[AnimationNode]; index: int32) {.loadfrom("remove_input", 1286410249).}
  proc setInputName*(self: Ref[AnimationNode]; input: int32; name: String): Bool {.loadfrom("set_input_name", 215573526).}
  proc getInputName*(self: Ref[AnimationNode]; input: int32): String {.loadfrom("get_input_name", 844755477).}
  proc getInputCount*(self: Ref[AnimationNode]): int32 {.loadfrom("get_input_count", 3905245786).}
  proc findInput*(self: Ref[AnimationNode]; name: String): int32 {.loadfrom("find_input", 1321353865).}
  proc setFilterPath*(self: Ref[AnimationNode]; path: NodePath; enable: Bool) {.loadfrom("set_filter_path", 3868023870).}
  proc isPathFiltered*(self: Ref[AnimationNode]; path: NodePath): Bool {.loadfrom("is_path_filtered", 861721659).}
  proc `filterEnabled=`*(self: Ref[AnimationNode]; enable: Bool) {.loadfrom("set_filter_enabled", 2586408642).}
  proc isFilterEnabled*(self: Ref[AnimationNode]): Bool {.loadfrom("is_filter_enabled", 36873697).}
  proc blendAnimation*(self: Ref[AnimationNode]; animation: StringName; time: float64; delta: float64; seeked: Bool; isExternalSeeking: Bool; blend: Float; loopedFlag: Animation|>LoopedFlag = loopedFlagNone) {.loadfrom("blend_animation", 11797022).}
  proc blendNode*(self: Ref[AnimationNode]; name: StringName; node: Ref[AnimationNode]; time: float64; seek: Bool; isExternalSeeking: Bool; blend: Float; filter: AnimationNode|>FilterAction = filterIgnore; sync: Bool = true; testOnly: Bool = false): float64 {.loadfrom("blend_node", 263389446).}
  proc blendInput*(self: Ref[AnimationNode]; inputIndex: int32; time: float64; seek: Bool; isExternalSeeking: Bool; blend: Float; filter: AnimationNode|>FilterAction = filterIgnore; sync: Bool = true; testOnly: Bool = false): float64 {.loadfrom("blend_input", 2709059328).}
  proc setParameter*(self: Ref[AnimationNode]; name: StringName; value: ptr Variant) {.loadfrom("set_parameter", 3776071444).}
  proc getParameter*(self: Ref[AnimationNode]; name: StringName): Variant {.loadfrom("get_parameter", 2760726917).}

# AnimationNodeStateMachinePlayback
define_godot_engine_class_essencials(AnimationNodeStateMachinePlayback, Resource)
AnimationNodeStateMachinePlayback.memberProcs:
  proc travel*(self: Ref[AnimationNodeStateMachinePlayback]; toNode: StringName; resetOnTeleport: Bool = true) {.loadfrom("travel", 3683006648).}
  proc start*(self: Ref[AnimationNodeStateMachinePlayback]; node: StringName; reset: Bool = true) {.loadfrom("start", 3683006648).}
  proc next*(self: Ref[AnimationNodeStateMachinePlayback]) {.loadfrom("next", 3218959716).}
  proc stop*(self: Ref[AnimationNodeStateMachinePlayback]) {.loadfrom("stop", 3218959716).}
  proc isPlaying*(self: Ref[AnimationNodeStateMachinePlayback]): Bool {.loadfrom("is_playing", 36873697).}
  proc getCurrentNode*(self: Ref[AnimationNodeStateMachinePlayback]): StringName {.loadfrom("get_current_node", 2002593661).}
  proc getCurrentPlayPosition*(self: Ref[AnimationNodeStateMachinePlayback]): Float {.loadfrom("get_current_play_position", 1740695150).}
  proc getCurrentLength*(self: Ref[AnimationNodeStateMachinePlayback]): Float {.loadfrom("get_current_length", 1740695150).}
  proc getFadingFromNode*(self: Ref[AnimationNodeStateMachinePlayback]): StringName {.loadfrom("get_fading_from_node", 2002593661).}
  proc getTravelPath*(self: Ref[AnimationNodeStateMachinePlayback]): TypedArray[StringName] {.loadfrom("get_travel_path", 3995934104).}

# AnimationNodeStateMachineTransition
define_godot_engine_class_essencials(AnimationNodeStateMachineTransition, Resource)
AnimationNodeStateMachineTransition.memberProcs:
  proc `switchMode=`*(self: Ref[AnimationNodeStateMachineTransition]; mode: AnimationNodeStateMachineTransition|>SwitchMode) {.loadfrom("set_switch_mode", 2074906633).}
  proc switchMode*(self: Ref[AnimationNodeStateMachineTransition]): AnimationNodeStateMachineTransition|>SwitchMode {.loadfrom("get_switch_mode", 2138562085).}
  proc `advanceMode=`*(self: Ref[AnimationNodeStateMachineTransition]; mode: AnimationNodeStateMachineTransition|>AdvanceMode) {.loadfrom("set_advance_mode", 1210869868).}
  proc advanceMode*(self: Ref[AnimationNodeStateMachineTransition]): AnimationNodeStateMachineTransition|>AdvanceMode {.loadfrom("get_advance_mode", 61101689).}
  proc `advanceCondition=`*(self: Ref[AnimationNodeStateMachineTransition]; name: StringName) {.loadfrom("set_advance_condition", 3304788590).}
  proc advanceCondition*(self: Ref[AnimationNodeStateMachineTransition]): StringName {.loadfrom("get_advance_condition", 2002593661).}
  proc `xfadeTime=`*(self: Ref[AnimationNodeStateMachineTransition]; secs: Float) {.loadfrom("set_xfade_time", 373806689).}
  proc xfadeTime*(self: Ref[AnimationNodeStateMachineTransition]): Float {.loadfrom("get_xfade_time", 1740695150).}
  proc `xfadeCurve=`*(self: Ref[AnimationNodeStateMachineTransition]; curve: Ref[Curve]) {.loadfrom("set_xfade_curve", 270443179).}
  proc xfadeCurve*(self: Ref[AnimationNodeStateMachineTransition]): Ref[Curve] {.loadfrom("get_xfade_curve", 2460114913).}
  proc `reset=`*(self: Ref[AnimationNodeStateMachineTransition]; reset: Bool) {.loadfrom("set_reset", 2586408642).}
  proc isReset*(self: Ref[AnimationNodeStateMachineTransition]): Bool {.loadfrom("is_reset", 36873697).}
  proc `priority=`*(self: Ref[AnimationNodeStateMachineTransition]; priority: int32) {.loadfrom("set_priority", 1286410249).}
  proc priority*(self: Ref[AnimationNodeStateMachineTransition]): int32 {.loadfrom("get_priority", 3905245786).}
  proc `advanceExpression=`*(self: Ref[AnimationNodeStateMachineTransition]; text: String) {.loadfrom("set_advance_expression", 83702148).}
  proc advanceExpression*(self: Ref[AnimationNodeStateMachineTransition]): String {.loadfrom("get_advance_expression", 201670096).}

# AudioBusLayout
define_godot_engine_class_essencials(AudioBusLayout, Resource)

# AudioEffect
define_godot_engine_class_essencials(AudioEffect, Resource)
method instantiate*(self: Ref[AudioEffect]): Ref[AudioEffectInstance] {.base.} = (discard)

# AudioStream
define_godot_engine_class_essencials(AudioStream, Resource)
method instantiatePlayback*(self: Ref[AudioStream]): Ref[AudioStreamPlayback] {.base.} = (discard)
method getStreamName*(self: Ref[AudioStream]): String {.base.} = (discard)
method getLength*(self: Ref[AudioStream]): float64 {.base.} = (discard)
method isMonophonic*(self: Ref[AudioStream]): Bool {.base.} = (discard)
method getBpm*(self: Ref[AudioStream]): float64 {.base.} = (discard)
method getBeatCount*(self: Ref[AudioStream]): int32 {.base.} = (discard)
AudioStream.memberProcs:
  proc getLength*(self: Ref[AudioStream]): float64 {.loadfrom("get_length", 1740695150).}
  proc isMonophonic*(self: Ref[AudioStream]): Bool {.loadfrom("is_monophonic", 36873697).}
  proc instantiatePlayback*(self: Ref[AudioStream]): Ref[AudioStreamPlayback] {.loadfrom("instantiate_playback", 210135309).}

# BitMap
define_godot_engine_class_essencials(BitMap, Resource)
BitMap.memberProcs:
  proc create*(self: Ref[BitMap]; size: Vector2i) {.loadfrom("create", 1130785943).}
  proc createFromImageAlpha*(self: Ref[BitMap]; image: Ref[Image]; threshold: Float = 0.1) {.loadfrom("create_from_image_alpha", 505265891).}
  proc setBitv*(self: Ref[BitMap]; position: Vector2i; bit: Bool) {.loadfrom("set_bitv", 4153096796).}
  proc setBit*(self: Ref[BitMap]; x: int32; y: int32; bit: Bool) {.loadfrom("set_bit", 1383440665).}
  proc getBitv*(self: Ref[BitMap]; position: Vector2i): Bool {.loadfrom("get_bitv", 3900751641).}
  proc getBit*(self: Ref[BitMap]; x: int32; y: int32): Bool {.loadfrom("get_bit", 2522259332).}
  proc setBitRect*(self: Ref[BitMap]; rect: Rect2i; bit: Bool) {.loadfrom("set_bit_rect", 472162941).}
  proc getTrueBitCount*(self: Ref[BitMap]): int32 {.loadfrom("get_true_bit_count", 3905245786).}
  proc getSize*(self: Ref[BitMap]): Vector2i {.loadfrom("get_size", 3690982128).}
  proc resize*(self: Ref[BitMap]; newSize: Vector2i) {.loadfrom("resize", 1130785943).}
  proc growMask*(self: Ref[BitMap]; pixels: int32; rect: Rect2i) {.loadfrom("grow_mask", 3317281434).}
  proc convertToImage*(self: Ref[BitMap]): Ref[Image] {.loadfrom("convert_to_image", 4190603485).}
  proc opaqueToPolygons*(self: Ref[BitMap]; rect: Rect2i; epsilon: Float = 2.0): TypedArray[PackedVector2Array] {.loadfrom("opaque_to_polygons", 876132484).}

# BoneMap
define_godot_engine_class_essencials(BoneMap, Resource)
BoneMap.memberProcs:
  proc profile*(self: Ref[BoneMap]): Ref[SkeletonProfile] {.loadfrom("get_profile", 4291782652).}
  proc `profile=`*(self: Ref[BoneMap]; profile: Ref[SkeletonProfile]) {.loadfrom("set_profile", 3870374136).}
  proc getSkeletonBoneName*(self: Ref[BoneMap]; profileBoneName: StringName): StringName {.loadfrom("get_skeleton_bone_name", 1965194235).}
  proc setSkeletonBoneName*(self: Ref[BoneMap]; profileBoneName: StringName; skeletonBoneName: StringName) {.loadfrom("set_skeleton_bone_name", 3740211285).}
  proc findProfileBoneName*(self: Ref[BoneMap]; skeletonBoneName: StringName): StringName {.loadfrom("find_profile_bone_name", 1965194235).}

# ButtonGroup
define_godot_engine_class_essencials(ButtonGroup, Resource)
ButtonGroup.memberProcs:
  proc getPressedButton*(self: Ref[ButtonGroup]): BaseButton {.loadfrom("get_pressed_button", 3886434893).}
  proc getButtons*(self: Ref[ButtonGroup]): TypedArray[BaseButton] {.loadfrom("get_buttons", 2915620761).}
  proc `allowUnpress=`*(self: Ref[ButtonGroup]; enabled: Bool) {.loadfrom("set_allow_unpress", 2586408642).}
  proc isAllowUnpress*(self: Ref[ButtonGroup]): Bool {.loadfrom("is_allow_unpress", 2240911060).}

# CameraAttributes
define_godot_engine_class_essencials(CameraAttributes, Resource)
CameraAttributes.memberProcs:
  proc `exposureMultiplier=`*(self: Ref[CameraAttributes]; multiplier: Float) {.loadfrom("set_exposure_multiplier", 373806689).}
  proc exposureMultiplier*(self: Ref[CameraAttributes]): Float {.loadfrom("get_exposure_multiplier", 1740695150).}
  proc `exposureSensitivity=`*(self: Ref[CameraAttributes]; sensitivity: Float) {.loadfrom("set_exposure_sensitivity", 373806689).}
  proc exposureSensitivity*(self: Ref[CameraAttributes]): Float {.loadfrom("get_exposure_sensitivity", 1740695150).}
  proc `autoExposureEnabled=`*(self: Ref[CameraAttributes]; enabled: Bool) {.loadfrom("set_auto_exposure_enabled", 2586408642).}
  proc isAutoExposureEnabled*(self: Ref[CameraAttributes]): Bool {.loadfrom("is_auto_exposure_enabled", 36873697).}
  proc `autoExposureSpeed=`*(self: Ref[CameraAttributes]; exposureSpeed: Float) {.loadfrom("set_auto_exposure_speed", 373806689).}
  proc autoExposureSpeed*(self: Ref[CameraAttributes]): Float {.loadfrom("get_auto_exposure_speed", 1740695150).}
  proc `autoExposureScale=`*(self: Ref[CameraAttributes]; exposureGrey: Float) {.loadfrom("set_auto_exposure_scale", 373806689).}
  proc autoExposureScale*(self: Ref[CameraAttributes]): Float {.loadfrom("get_auto_exposure_scale", 1740695150).}

# CryptoKey
define_godot_engine_class_essencials(CryptoKey, Resource)
CryptoKey.memberProcs:
  proc save*(self: Ref[CryptoKey]; path: String; publicOnly: Bool = false): Error {.loadfrom("save", 885841341).}
  proc load*(self: Ref[CryptoKey]; path: String; publicOnly: Bool = false): Error {.loadfrom("load", 885841341).}
  proc isPublicOnly*(self: Ref[CryptoKey]): Bool {.loadfrom("is_public_only", 36873697).}
  proc saveToString*(self: Ref[CryptoKey]; publicOnly: Bool = false): String {.loadfrom("save_to_string", 32795936).}
  proc loadFromString*(self: Ref[CryptoKey]; stringKey: String; publicOnly: Bool = false): Error {.loadfrom("load_from_string", 885841341).}

# Curve
define_godot_engine_class_essencials(Curve, Resource)
Curve.memberProcs:
  proc pointCount*(self: Ref[Curve]): int32 {.loadfrom("get_point_count", 3905245786).}
  proc `pointCount=`*(self: Ref[Curve]; count: int32) {.loadfrom("set_point_count", 1286410249).}
  proc addPoint*(self: Ref[Curve]; position: Vector2; leftTangent: Float = 0; rightTangent: Float = 0; leftMode: Curve|>TangentMode = tangentFree; rightMode: Curve|>TangentMode = tangentFree): int32 {.loadfrom("add_point", 2766148617).}
  proc removePoint*(self: Ref[Curve]; index: int32) {.loadfrom("remove_point", 1286410249).}
  proc clearPoints*(self: Ref[Curve]) {.loadfrom("clear_points", 3218959716).}
  proc getPointPosition*(self: Ref[Curve]; index: int32): Vector2 {.loadfrom("get_point_position", 2299179447).}
  proc setPointValue*(self: Ref[Curve]; index: int32; y: Float) {.loadfrom("set_point_value", 1602489585).}
  proc setPointOffset*(self: Ref[Curve]; index: int32; offset: Float): int32 {.loadfrom("set_point_offset", 3780573764).}
  proc sample*(self: Ref[Curve]; offset: Float): Float {.loadfrom("sample", 3919130443).}
  proc sampleBaked*(self: Ref[Curve]; offset: Float): Float {.loadfrom("sample_baked", 3919130443).}
  proc getPointLeftTangent*(self: Ref[Curve]; index: int32): Float {.loadfrom("get_point_left_tangent", 2339986948).}
  proc getPointRightTangent*(self: Ref[Curve]; index: int32): Float {.loadfrom("get_point_right_tangent", 2339986948).}
  proc getPointLeftMode*(self: Ref[Curve]; index: int32): Curve|>TangentMode {.loadfrom("get_point_left_mode", 426950354).}
  proc getPointRightMode*(self: Ref[Curve]; index: int32): Curve|>TangentMode {.loadfrom("get_point_right_mode", 426950354).}
  proc setPointLeftTangent*(self: Ref[Curve]; index: int32; tangent: Float) {.loadfrom("set_point_left_tangent", 1602489585).}
  proc setPointRightTangent*(self: Ref[Curve]; index: int32; tangent: Float) {.loadfrom("set_point_right_tangent", 1602489585).}
  proc setPointLeftMode*(self: Ref[Curve]; index: int32; mode: Curve|>TangentMode) {.loadfrom("set_point_left_mode", 1217242874).}
  proc setPointRightMode*(self: Ref[Curve]; index: int32; mode: Curve|>TangentMode) {.loadfrom("set_point_right_mode", 1217242874).}
  proc minValue*(self: Ref[Curve]): Float {.loadfrom("get_min_value", 1740695150).}
  proc `minValue=`*(self: Ref[Curve]; min: Float) {.loadfrom("set_min_value", 373806689).}
  proc maxValue*(self: Ref[Curve]): Float {.loadfrom("get_max_value", 1740695150).}
  proc `maxValue=`*(self: Ref[Curve]; max: Float) {.loadfrom("set_max_value", 373806689).}
  proc cleanDupes*(self: Ref[Curve]) {.loadfrom("clean_dupes", 3218959716).}
  proc bake*(self: Ref[Curve]) {.loadfrom("bake", 3218959716).}
  proc bakeResolution*(self: Ref[Curve]): int32 {.loadfrom("get_bake_resolution", 3905245786).}
  proc `bakeResolution=`*(self: Ref[Curve]; resolution: int32) {.loadfrom("set_bake_resolution", 1286410249).}

# Curve2D
define_godot_engine_class_essencials(Curve2D, Resource)
Curve2D.memberProcs:
  proc pointCount*(self: Ref[Curve2D]): int32 {.loadfrom("get_point_count", 3905245786).}
  proc `pointCount=`*(self: Ref[Curve2D]; count: int32) {.loadfrom("set_point_count", 1286410249).}
  proc addPoint*(self: Ref[Curve2D]; position: Vector2; `in`: Vector2 = gdvec(0, 0); `out`: Vector2 = gdvec(0, 0); index: int32 = -1) {.loadfrom("add_point", 2437345566).}
  proc setPointPosition*(self: Ref[Curve2D]; idx: int32; position: Vector2) {.loadfrom("set_point_position", 163021252).}
  proc getPointPosition*(self: Ref[Curve2D]; idx: int32): Vector2 {.loadfrom("get_point_position", 2299179447).}
  proc setPointIn*(self: Ref[Curve2D]; idx: int32; position: Vector2) {.loadfrom("set_point_in", 163021252).}
  proc getPointIn*(self: Ref[Curve2D]; idx: int32): Vector2 {.loadfrom("get_point_in", 2299179447).}
  proc setPointOut*(self: Ref[Curve2D]; idx: int32; position: Vector2) {.loadfrom("set_point_out", 163021252).}
  proc getPointOut*(self: Ref[Curve2D]; idx: int32): Vector2 {.loadfrom("get_point_out", 2299179447).}
  proc removePoint*(self: Ref[Curve2D]; idx: int32) {.loadfrom("remove_point", 1286410249).}
  proc clearPoints*(self: Ref[Curve2D]) {.loadfrom("clear_points", 3218959716).}
  proc sample*(self: Ref[Curve2D]; idx: int32; t: Float): Vector2 {.loadfrom("sample", 26514310).}
  proc samplef*(self: Ref[Curve2D]; fofs: Float): Vector2 {.loadfrom("samplef", 3588506812).}
  proc `bakeInterval=`*(self: Ref[Curve2D]; distance: Float) {.loadfrom("set_bake_interval", 373806689).}
  proc bakeInterval*(self: Ref[Curve2D]): Float {.loadfrom("get_bake_interval", 1740695150).}
  proc getBakedLength*(self: Ref[Curve2D]): Float {.loadfrom("get_baked_length", 1740695150).}
  proc sampleBaked*(self: Ref[Curve2D]; offset: Float = 0.0; cubic: Bool = false): Vector2 {.loadfrom("sample_baked", 3464257706).}
  proc sampleBakedWithRotation*(self: Ref[Curve2D]; offset: Float = 0.0; cubic: Bool = false): Transform2D {.loadfrom("sample_baked_with_rotation", 3296056341).}
  proc getBakedPoints*(self: Ref[Curve2D]): PackedVector2Array {.loadfrom("get_baked_points", 2961356807).}
  proc getClosestPoint*(self: Ref[Curve2D]; toPoint: Vector2): Vector2 {.loadfrom("get_closest_point", 2656412154).}
  proc getClosestOffset*(self: Ref[Curve2D]; toPoint: Vector2): Float {.loadfrom("get_closest_offset", 2276447920).}
  proc tessellate*(self: Ref[Curve2D]; maxStages: int32 = 5; toleranceDegrees: Float = 4): PackedVector2Array {.loadfrom("tessellate", 958145977).}
  proc tessellateEvenLength*(self: Ref[Curve2D]; maxStages: int32 = 5; toleranceLength: Float = 20.0): PackedVector2Array {.loadfrom("tessellate_even_length", 2319761637).}

# Curve3D
define_godot_engine_class_essencials(Curve3D, Resource)
Curve3D.memberProcs:
  proc pointCount*(self: Ref[Curve3D]): int32 {.loadfrom("get_point_count", 3905245786).}
  proc `pointCount=`*(self: Ref[Curve3D]; count: int32) {.loadfrom("set_point_count", 1286410249).}
  proc addPoint*(self: Ref[Curve3D]; position: Vector3; `in`: Vector3 = gdvec(0, 0, 0); `out`: Vector3 = gdvec(0, 0, 0); index: int32 = -1) {.loadfrom("add_point", 3836314258).}
  proc setPointPosition*(self: Ref[Curve3D]; idx: int32; position: Vector3) {.loadfrom("set_point_position", 1530502735).}
  proc getPointPosition*(self: Ref[Curve3D]; idx: int32): Vector3 {.loadfrom("get_point_position", 711720468).}
  proc setPointTilt*(self: Ref[Curve3D]; idx: int32; tilt: Float) {.loadfrom("set_point_tilt", 1602489585).}
  proc getPointTilt*(self: Ref[Curve3D]; idx: int32): Float {.loadfrom("get_point_tilt", 2339986948).}
  proc setPointIn*(self: Ref[Curve3D]; idx: int32; position: Vector3) {.loadfrom("set_point_in", 1530502735).}
  proc getPointIn*(self: Ref[Curve3D]; idx: int32): Vector3 {.loadfrom("get_point_in", 711720468).}
  proc setPointOut*(self: Ref[Curve3D]; idx: int32; position: Vector3) {.loadfrom("set_point_out", 1530502735).}
  proc getPointOut*(self: Ref[Curve3D]; idx: int32): Vector3 {.loadfrom("get_point_out", 711720468).}
  proc removePoint*(self: Ref[Curve3D]; idx: int32) {.loadfrom("remove_point", 1286410249).}
  proc clearPoints*(self: Ref[Curve3D]) {.loadfrom("clear_points", 3218959716).}
  proc sample*(self: Ref[Curve3D]; idx: int32; t: Float): Vector3 {.loadfrom("sample", 3285246857).}
  proc samplef*(self: Ref[Curve3D]; fofs: Float): Vector3 {.loadfrom("samplef", 2553580215).}
  proc `bakeInterval=`*(self: Ref[Curve3D]; distance: Float) {.loadfrom("set_bake_interval", 373806689).}
  proc bakeInterval*(self: Ref[Curve3D]): Float {.loadfrom("get_bake_interval", 1740695150).}
  proc `upVectorEnabled=`*(self: Ref[Curve3D]; enable: Bool) {.loadfrom("set_up_vector_enabled", 2586408642).}
  proc isUpVectorEnabled*(self: Ref[Curve3D]): Bool {.loadfrom("is_up_vector_enabled", 36873697).}
  proc getBakedLength*(self: Ref[Curve3D]): Float {.loadfrom("get_baked_length", 1740695150).}
  proc sampleBaked*(self: Ref[Curve3D]; offset: Float = 0.0; cubic: Bool = false): Vector3 {.loadfrom("sample_baked", 1350085894).}
  proc sampleBakedWithRotation*(self: Ref[Curve3D]; offset: Float = 0.0; cubic: Bool = false; applyTilt: Bool = false): Transform3D {.loadfrom("sample_baked_with_rotation", 1939359131).}
  proc sampleBakedUpVector*(self: Ref[Curve3D]; offset: Float; applyTilt: Bool = false): Vector3 {.loadfrom("sample_baked_up_vector", 1362627031).}
  proc getBakedPoints*(self: Ref[Curve3D]): PackedVector3Array {.loadfrom("get_baked_points", 497664490).}
  proc getBakedTilts*(self: Ref[Curve3D]): PackedFloat32Array {.loadfrom("get_baked_tilts", 675695659).}
  proc getBakedUpVectors*(self: Ref[Curve3D]): PackedVector3Array {.loadfrom("get_baked_up_vectors", 497664490).}
  proc getClosestPoint*(self: Ref[Curve3D]; toPoint: Vector3): Vector3 {.loadfrom("get_closest_point", 192990374).}
  proc getClosestOffset*(self: Ref[Curve3D]; toPoint: Vector3): Float {.loadfrom("get_closest_offset", 1109078154).}
  proc tessellate*(self: Ref[Curve3D]; maxStages: int32 = 5; toleranceDegrees: Float = 4): PackedVector3Array {.loadfrom("tessellate", 1519759391).}
  proc tessellateEvenLength*(self: Ref[Curve3D]; maxStages: int32 = 5; toleranceLength: Float = 0.2): PackedVector3Array {.loadfrom("tessellate_even_length", 133237049).}

# EditorNode3DGizmoPlugin
define_godot_engine_class_essencials(EditorNode3DGizmoPlugin, Resource)
method hasGizmo*(self: Ref[EditorNode3DGizmoPlugin]; forNode3d: Node3D): Bool {.base.} = (discard)
method createGizmo*(self: Ref[EditorNode3DGizmoPlugin]; forNode3d: Node3D): Ref[EditorNode3DGizmo] {.base.} = (discard)
method getGizmoName*(self: Ref[EditorNode3DGizmoPlugin]): String {.base.} = (discard)
method getPriority*(self: Ref[EditorNode3DGizmoPlugin]): int32 {.base.} = (discard)
method canBeHidden*(self: Ref[EditorNode3DGizmoPlugin]): Bool {.base.} = (discard)
method isSelectableWhenHidden*(self: Ref[EditorNode3DGizmoPlugin]): Bool {.base.} = (discard)
method redraw*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]) {.base.} = (discard)
method getHandleName*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; handleId: int32; secondary: Bool): String {.base.} = (discard)
method isHandleHighlighted*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; handleId: int32; secondary: Bool): Bool {.base.} = (discard)
method getHandleValue*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; handleId: int32; secondary: Bool): Variant {.base.} = (discard)
method setHandle*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; handleId: int32; secondary: Bool; camera: Camera3D; screenPos: Vector2) {.base.} = (discard)
method commitHandle*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; handleId: int32; secondary: Bool; restore: ptr Variant; cancel: Bool) {.base.} = (discard)
method subgizmosIntersectRay*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; camera: Camera3D; screenPos: Vector2): int32 {.base.} = (discard)
method subgizmosIntersectFrustum*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; camera: Camera3D; frustumPlanes: TypedArray[Plane]): PackedInt32Array {.base.} = (discard)
method getSubgizmoTransform*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; subgizmoId: int32): Transform3D {.base.} = (discard)
method setSubgizmoTransform*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; subgizmoId: int32; transform: Transform3D) {.base.} = (discard)
method commitSubgizmos*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; ids: PackedInt32Array; restores: TypedArray[Transform3D]; cancel: Bool) {.base.} = (discard)
EditorNode3DGizmoPlugin.memberProcs:
  proc createMaterial*(self: Ref[EditorNode3DGizmoPlugin]; name: String; color: Color; billboard: Bool = false; onTop: Bool = false; useVertexColor: Bool = false) {.loadfrom("create_material", 3486012546).}
  proc createIconMaterial*(self: Ref[EditorNode3DGizmoPlugin]; name: String; texture: Ref[Texture2D]; onTop: Bool = false; color: Color = Color|>init(1, 1, 1, 1)) {.loadfrom("create_icon_material", 2976007329).}
  proc createHandleMaterial*(self: Ref[EditorNode3DGizmoPlugin]; name: String; billboard: Bool = false; texture: Ref[Texture2D] = default Ref[Texture2D]) {.loadfrom("create_handle_material", 2486475223).}
  proc addMaterial*(self: Ref[EditorNode3DGizmoPlugin]; name: String; material: Ref[StandardMaterial3D]) {.loadfrom("add_material", 1374068695).}
  proc getMaterial*(self: Ref[EditorNode3DGizmoPlugin]; name: String; gizmo: Ref[EditorNode3DGizmo] = default Ref[EditorNode3DGizmo]): Ref[StandardMaterial3D] {.loadfrom("get_material", 3501703615).}

# EditorSettings
define_godot_engine_class_essencials(EditorSettings, Resource)
EditorSettings.memberProcs:
  proc hasSetting*(self: Ref[EditorSettings]; name: String): Bool {.loadfrom("has_setting", 3927539163).}
  proc setSetting*(self: Ref[EditorSettings]; name: String; value: ptr Variant) {.loadfrom("set_setting", 402577236).}
  proc getSetting*(self: Ref[EditorSettings]; name: String): Variant {.loadfrom("get_setting", 1868160156).}
  proc erase*(self: Ref[EditorSettings]; property: String) {.loadfrom("erase", 83702148).}
  proc setInitialValue*(self: Ref[EditorSettings]; name: StringName; value: ptr Variant; updateCurrent: Bool) {.loadfrom("set_initial_value", 1529169264).}
  proc addPropertyInfo*(self: Ref[EditorSettings]; info: Dictionary) {.loadfrom("add_property_info", 4155329257).}
  proc setProjectMetadata*(self: Ref[EditorSettings]; section: String; key: String; data: ptr Variant) {.loadfrom("set_project_metadata", 2504492430).}
  proc getProjectMetadata*(self: Ref[EditorSettings]; section: String; key: String; default: ptr Variant = nil): Variant {.loadfrom("get_project_metadata", 89809366).}
  proc setFavorites*(self: Ref[EditorSettings]; dirs: PackedStringArray) {.loadfrom("set_favorites", 4015028928).}
  proc getFavorites*(self: Ref[EditorSettings]): PackedStringArray {.loadfrom("get_favorites", 1139954409).}
  proc setRecentDirs*(self: Ref[EditorSettings]; dirs: PackedStringArray) {.loadfrom("set_recent_dirs", 4015028928).}
  proc getRecentDirs*(self: Ref[EditorSettings]): PackedStringArray {.loadfrom("get_recent_dirs", 1139954409).}
  proc setBuiltinActionOverride*(self: Ref[EditorSettings]; name: String; actionsList: TypedArray[InputEvent]) {.loadfrom("set_builtin_action_override", 1209351045).}
  proc checkChangedSettingsInGroup*(self: Ref[EditorSettings]; settingPrefix: String): Bool {.loadfrom("check_changed_settings_in_group", 3927539163).}
  proc getChangedSettings*(self: Ref[EditorSettings]): PackedStringArray {.loadfrom("get_changed_settings", 1139954409).}
  proc markSettingChanged*(self: Ref[EditorSettings]; setting: String) {.loadfrom("mark_setting_changed", 83702148).}

# Environment
define_godot_engine_class_essencials(Environment, Resource)
Environment.memberProcs:
  proc `background=`*(self: Ref[Environment]; mode: Environment|>BGMode) {.loadfrom("set_background", 4071623990).}
  proc background*(self: Ref[Environment]): Environment|>BGMode {.loadfrom("get_background", 1843210413).}
  proc `sky=`*(self: Ref[Environment]; sky: Ref[Sky]) {.loadfrom("set_sky", 3336722921).}
  proc sky*(self: Ref[Environment]): Ref[Sky] {.loadfrom("get_sky", 1177136966).}
  proc `skyCustomFov=`*(self: Ref[Environment]; scale: Float) {.loadfrom("set_sky_custom_fov", 373806689).}
  proc skyCustomFov*(self: Ref[Environment]): Float {.loadfrom("get_sky_custom_fov", 1740695150).}
  proc `skyRotation=`*(self: Ref[Environment]; eulerRadians: Vector3) {.loadfrom("set_sky_rotation", 3460891852).}
  proc skyRotation*(self: Ref[Environment]): Vector3 {.loadfrom("get_sky_rotation", 3360562783).}
  proc `bgColor=`*(self: Ref[Environment]; color: Color) {.loadfrom("set_bg_color", 2920490490).}
  proc bgColor*(self: Ref[Environment]): Color {.loadfrom("get_bg_color", 3444240500).}
  proc `bgEnergyMultiplier=`*(self: Ref[Environment]; energy: Float) {.loadfrom("set_bg_energy_multiplier", 373806689).}
  proc bgEnergyMultiplier*(self: Ref[Environment]): Float {.loadfrom("get_bg_energy_multiplier", 1740695150).}
  proc `bgIntensity=`*(self: Ref[Environment]; energy: Float) {.loadfrom("set_bg_intensity", 373806689).}
  proc bgIntensity*(self: Ref[Environment]): Float {.loadfrom("get_bg_intensity", 1740695150).}
  proc `canvasMaxLayer=`*(self: Ref[Environment]; layer: int32) {.loadfrom("set_canvas_max_layer", 1286410249).}
  proc canvasMaxLayer*(self: Ref[Environment]): int32 {.loadfrom("get_canvas_max_layer", 3905245786).}
  proc `cameraFeedId=`*(self: Ref[Environment]; id: int32) {.loadfrom("set_camera_feed_id", 1286410249).}
  proc cameraFeedId*(self: Ref[Environment]): int32 {.loadfrom("get_camera_feed_id", 3905245786).}
  proc `ambientLightColor=`*(self: Ref[Environment]; color: Color) {.loadfrom("set_ambient_light_color", 2920490490).}
  proc ambientLightColor*(self: Ref[Environment]): Color {.loadfrom("get_ambient_light_color", 3444240500).}
  proc `ambientSource=`*(self: Ref[Environment]; source: Environment|>AmbientSource) {.loadfrom("set_ambient_source", 2607780160).}
  proc ambientSource*(self: Ref[Environment]): Environment|>AmbientSource {.loadfrom("get_ambient_source", 67453933).}
  proc `ambientLightEnergy=`*(self: Ref[Environment]; energy: Float) {.loadfrom("set_ambient_light_energy", 373806689).}
  proc ambientLightEnergy*(self: Ref[Environment]): Float {.loadfrom("get_ambient_light_energy", 1740695150).}
  proc `ambientLightSkyContribution=`*(self: Ref[Environment]; ratio: Float) {.loadfrom("set_ambient_light_sky_contribution", 373806689).}
  proc ambientLightSkyContribution*(self: Ref[Environment]): Float {.loadfrom("get_ambient_light_sky_contribution", 1740695150).}
  proc `reflectionSource=`*(self: Ref[Environment]; source: Environment|>ReflectionSource) {.loadfrom("set_reflection_source", 299673197).}
  proc reflectionSource*(self: Ref[Environment]): Environment|>ReflectionSource {.loadfrom("get_reflection_source", 777700713).}
  proc `tonemapper=`*(self: Ref[Environment]; mode: Environment|>ToneMapper) {.loadfrom("set_tonemapper", 1509116664).}
  proc tonemapper*(self: Ref[Environment]): Environment|>ToneMapper {.loadfrom("get_tonemapper", 2908408137).}
  proc `tonemapExposure=`*(self: Ref[Environment]; exposure: Float) {.loadfrom("set_tonemap_exposure", 373806689).}
  proc tonemapExposure*(self: Ref[Environment]): Float {.loadfrom("get_tonemap_exposure", 1740695150).}
  proc `tonemapWhite=`*(self: Ref[Environment]; white: Float) {.loadfrom("set_tonemap_white", 373806689).}
  proc tonemapWhite*(self: Ref[Environment]): Float {.loadfrom("get_tonemap_white", 1740695150).}
  proc `ssrEnabled=`*(self: Ref[Environment]; enabled: Bool) {.loadfrom("set_ssr_enabled", 2586408642).}
  proc isSsrEnabled*(self: Ref[Environment]): Bool {.loadfrom("is_ssr_enabled", 36873697).}
  proc `ssrMaxSteps=`*(self: Ref[Environment]; maxSteps: int32) {.loadfrom("set_ssr_max_steps", 1286410249).}
  proc ssrMaxSteps*(self: Ref[Environment]): int32 {.loadfrom("get_ssr_max_steps", 3905245786).}
  proc `ssrFadeIn=`*(self: Ref[Environment]; fadeIn: Float) {.loadfrom("set_ssr_fade_in", 373806689).}
  proc ssrFadeIn*(self: Ref[Environment]): Float {.loadfrom("get_ssr_fade_in", 1740695150).}
  proc `ssrFadeOut=`*(self: Ref[Environment]; fadeOut: Float) {.loadfrom("set_ssr_fade_out", 373806689).}
  proc ssrFadeOut*(self: Ref[Environment]): Float {.loadfrom("get_ssr_fade_out", 1740695150).}
  proc `ssrDepthTolerance=`*(self: Ref[Environment]; depthTolerance: Float) {.loadfrom("set_ssr_depth_tolerance", 373806689).}
  proc ssrDepthTolerance*(self: Ref[Environment]): Float {.loadfrom("get_ssr_depth_tolerance", 1740695150).}
  proc `ssaoEnabled=`*(self: Ref[Environment]; enabled: Bool) {.loadfrom("set_ssao_enabled", 2586408642).}
  proc isSsaoEnabled*(self: Ref[Environment]): Bool {.loadfrom("is_ssao_enabled", 36873697).}
  proc `ssaoRadius=`*(self: Ref[Environment]; radius: Float) {.loadfrom("set_ssao_radius", 373806689).}
  proc ssaoRadius*(self: Ref[Environment]): Float {.loadfrom("get_ssao_radius", 1740695150).}
  proc `ssaoIntensity=`*(self: Ref[Environment]; intensity: Float) {.loadfrom("set_ssao_intensity", 373806689).}
  proc ssaoIntensity*(self: Ref[Environment]): Float {.loadfrom("get_ssao_intensity", 1740695150).}
  proc `ssaoPower=`*(self: Ref[Environment]; power: Float) {.loadfrom("set_ssao_power", 373806689).}
  proc ssaoPower*(self: Ref[Environment]): Float {.loadfrom("get_ssao_power", 1740695150).}
  proc `ssaoDetail=`*(self: Ref[Environment]; detail: Float) {.loadfrom("set_ssao_detail", 373806689).}
  proc ssaoDetail*(self: Ref[Environment]): Float {.loadfrom("get_ssao_detail", 1740695150).}
  proc `ssaoHorizon=`*(self: Ref[Environment]; horizon: Float) {.loadfrom("set_ssao_horizon", 373806689).}
  proc ssaoHorizon*(self: Ref[Environment]): Float {.loadfrom("get_ssao_horizon", 1740695150).}
  proc `ssaoSharpness=`*(self: Ref[Environment]; sharpness: Float) {.loadfrom("set_ssao_sharpness", 373806689).}
  proc ssaoSharpness*(self: Ref[Environment]): Float {.loadfrom("get_ssao_sharpness", 1740695150).}
  proc `ssaoDirectLightAffect=`*(self: Ref[Environment]; amount: Float) {.loadfrom("set_ssao_direct_light_affect", 373806689).}
  proc ssaoDirectLightAffect*(self: Ref[Environment]): Float {.loadfrom("get_ssao_direct_light_affect", 1740695150).}
  proc `ssaoAoChannelAffect=`*(self: Ref[Environment]; amount: Float) {.loadfrom("set_ssao_ao_channel_affect", 373806689).}
  proc ssaoAoChannelAffect*(self: Ref[Environment]): Float {.loadfrom("get_ssao_ao_channel_affect", 1740695150).}
  proc `ssilEnabled=`*(self: Ref[Environment]; enabled: Bool) {.loadfrom("set_ssil_enabled", 2586408642).}
  proc isSsilEnabled*(self: Ref[Environment]): Bool {.loadfrom("is_ssil_enabled", 36873697).}
  proc `ssilRadius=`*(self: Ref[Environment]; radius: Float) {.loadfrom("set_ssil_radius", 373806689).}
  proc ssilRadius*(self: Ref[Environment]): Float {.loadfrom("get_ssil_radius", 1740695150).}
  proc `ssilIntensity=`*(self: Ref[Environment]; intensity: Float) {.loadfrom("set_ssil_intensity", 373806689).}
  proc ssilIntensity*(self: Ref[Environment]): Float {.loadfrom("get_ssil_intensity", 1740695150).}
  proc `ssilSharpness=`*(self: Ref[Environment]; sharpness: Float) {.loadfrom("set_ssil_sharpness", 373806689).}
  proc ssilSharpness*(self: Ref[Environment]): Float {.loadfrom("get_ssil_sharpness", 1740695150).}
  proc `ssilNormalRejection=`*(self: Ref[Environment]; normalRejection: Float) {.loadfrom("set_ssil_normal_rejection", 373806689).}
  proc ssilNormalRejection*(self: Ref[Environment]): Float {.loadfrom("get_ssil_normal_rejection", 1740695150).}
  proc `sdfgiEnabled=`*(self: Ref[Environment]; enabled: Bool) {.loadfrom("set_sdfgi_enabled", 2586408642).}
  proc isSdfgiEnabled*(self: Ref[Environment]): Bool {.loadfrom("is_sdfgi_enabled", 36873697).}
  proc `sdfgiCascades=`*(self: Ref[Environment]; amount: int32) {.loadfrom("set_sdfgi_cascades", 1286410249).}
  proc sdfgiCascades*(self: Ref[Environment]): int32 {.loadfrom("get_sdfgi_cascades", 3905245786).}
  proc `sdfgiMinCellSize=`*(self: Ref[Environment]; size: Float) {.loadfrom("set_sdfgi_min_cell_size", 373806689).}
  proc sdfgiMinCellSize*(self: Ref[Environment]): Float {.loadfrom("get_sdfgi_min_cell_size", 1740695150).}
  proc `sdfgiMaxDistance=`*(self: Ref[Environment]; distance: Float) {.loadfrom("set_sdfgi_max_distance", 373806689).}
  proc sdfgiMaxDistance*(self: Ref[Environment]): Float {.loadfrom("get_sdfgi_max_distance", 1740695150).}
  proc `sdfgiCascade0Distance=`*(self: Ref[Environment]; distance: Float) {.loadfrom("set_sdfgi_cascade0_distance", 373806689).}
  proc sdfgiCascade0Distance*(self: Ref[Environment]): Float {.loadfrom("get_sdfgi_cascade0_distance", 1740695150).}
  proc `sdfgiYScale=`*(self: Ref[Environment]; scale: Environment|>SDFGIYScale) {.loadfrom("set_sdfgi_y_scale", 3608608372).}
  proc sdfgiYScale*(self: Ref[Environment]): Environment|>SDFGIYScale {.loadfrom("get_sdfgi_y_scale", 2568002245).}
  proc `sdfgiUseOcclusion=`*(self: Ref[Environment]; enable: Bool) {.loadfrom("set_sdfgi_use_occlusion", 2586408642).}
  proc isSdfgiUsingOcclusion*(self: Ref[Environment]): Bool {.loadfrom("is_sdfgi_using_occlusion", 36873697).}
  proc `sdfgiBounceFeedback=`*(self: Ref[Environment]; amount: Float) {.loadfrom("set_sdfgi_bounce_feedback", 373806689).}
  proc sdfgiBounceFeedback*(self: Ref[Environment]): Float {.loadfrom("get_sdfgi_bounce_feedback", 1740695150).}
  proc `sdfgiReadSkyLight=`*(self: Ref[Environment]; enable: Bool) {.loadfrom("set_sdfgi_read_sky_light", 2586408642).}
  proc isSdfgiReadingSkyLight*(self: Ref[Environment]): Bool {.loadfrom("is_sdfgi_reading_sky_light", 36873697).}
  proc `sdfgiEnergy=`*(self: Ref[Environment]; amount: Float) {.loadfrom("set_sdfgi_energy", 373806689).}
  proc sdfgiEnergy*(self: Ref[Environment]): Float {.loadfrom("get_sdfgi_energy", 1740695150).}
  proc `sdfgiNormalBias=`*(self: Ref[Environment]; bias: Float) {.loadfrom("set_sdfgi_normal_bias", 373806689).}
  proc sdfgiNormalBias*(self: Ref[Environment]): Float {.loadfrom("get_sdfgi_normal_bias", 1740695150).}
  proc `sdfgiProbeBias=`*(self: Ref[Environment]; bias: Float) {.loadfrom("set_sdfgi_probe_bias", 373806689).}
  proc sdfgiProbeBias*(self: Ref[Environment]): Float {.loadfrom("get_sdfgi_probe_bias", 1740695150).}
  proc `glowEnabled=`*(self: Ref[Environment]; enabled: Bool) {.loadfrom("set_glow_enabled", 2586408642).}
  proc isGlowEnabled*(self: Ref[Environment]): Bool {.loadfrom("is_glow_enabled", 36873697).}
  proc setGlowLevel*(self: Ref[Environment]; idx: int32; intensity: Float) {.loadfrom("set_glow_level", 1602489585).}
  proc getGlowLevel*(self: Ref[Environment]; idx: int32): Float {.loadfrom("get_glow_level", 2339986948).}
  proc `glowNormalized=`*(self: Ref[Environment]; normalize: Bool) {.loadfrom("set_glow_normalized", 2586408642).}
  proc isGlowNormalized*(self: Ref[Environment]): Bool {.loadfrom("is_glow_normalized", 36873697).}
  proc `glowIntensity=`*(self: Ref[Environment]; intensity: Float) {.loadfrom("set_glow_intensity", 373806689).}
  proc glowIntensity*(self: Ref[Environment]): Float {.loadfrom("get_glow_intensity", 1740695150).}
  proc `glowStrength=`*(self: Ref[Environment]; strength: Float) {.loadfrom("set_glow_strength", 373806689).}
  proc glowStrength*(self: Ref[Environment]): Float {.loadfrom("get_glow_strength", 1740695150).}
  proc `glowMix=`*(self: Ref[Environment]; mix: Float) {.loadfrom("set_glow_mix", 373806689).}
  proc glowMix*(self: Ref[Environment]): Float {.loadfrom("get_glow_mix", 1740695150).}
  proc `glowBloom=`*(self: Ref[Environment]; amount: Float) {.loadfrom("set_glow_bloom", 373806689).}
  proc glowBloom*(self: Ref[Environment]): Float {.loadfrom("get_glow_bloom", 1740695150).}
  proc `glowBlendMode=`*(self: Ref[Environment]; mode: Environment|>GlowBlendMode) {.loadfrom("set_glow_blend_mode", 2561587761).}
  proc glowBlendMode*(self: Ref[Environment]): Environment|>GlowBlendMode {.loadfrom("get_glow_blend_mode", 1529667332).}
  proc `glowHdrBleedThreshold=`*(self: Ref[Environment]; threshold: Float) {.loadfrom("set_glow_hdr_bleed_threshold", 373806689).}
  proc glowHdrBleedThreshold*(self: Ref[Environment]): Float {.loadfrom("get_glow_hdr_bleed_threshold", 1740695150).}
  proc `glowHdrBleedScale=`*(self: Ref[Environment]; scale: Float) {.loadfrom("set_glow_hdr_bleed_scale", 373806689).}
  proc glowHdrBleedScale*(self: Ref[Environment]): Float {.loadfrom("get_glow_hdr_bleed_scale", 1740695150).}
  proc `glowHdrLuminanceCap=`*(self: Ref[Environment]; amount: Float) {.loadfrom("set_glow_hdr_luminance_cap", 373806689).}
  proc glowHdrLuminanceCap*(self: Ref[Environment]): Float {.loadfrom("get_glow_hdr_luminance_cap", 1740695150).}
  proc `glowMapStrength=`*(self: Ref[Environment]; strength: Float) {.loadfrom("set_glow_map_strength", 373806689).}
  proc glowMapStrength*(self: Ref[Environment]): Float {.loadfrom("get_glow_map_strength", 1740695150).}
  proc `glowMap=`*(self: Ref[Environment]; mode: Ref[Texture]) {.loadfrom("set_glow_map", 1790811099).}
  proc glowMap*(self: Ref[Environment]): Ref[Texture] {.loadfrom("get_glow_map", 4037048985).}
  proc `fogEnabled=`*(self: Ref[Environment]; enabled: Bool) {.loadfrom("set_fog_enabled", 2586408642).}
  proc isFogEnabled*(self: Ref[Environment]): Bool {.loadfrom("is_fog_enabled", 36873697).}
  proc `fogLightColor=`*(self: Ref[Environment]; lightColor: Color) {.loadfrom("set_fog_light_color", 2920490490).}
  proc fogLightColor*(self: Ref[Environment]): Color {.loadfrom("get_fog_light_color", 3444240500).}
  proc `fogLightEnergy=`*(self: Ref[Environment]; lightEnergy: Float) {.loadfrom("set_fog_light_energy", 373806689).}
  proc fogLightEnergy*(self: Ref[Environment]): Float {.loadfrom("get_fog_light_energy", 1740695150).}
  proc `fogSunScatter=`*(self: Ref[Environment]; sunScatter: Float) {.loadfrom("set_fog_sun_scatter", 373806689).}
  proc fogSunScatter*(self: Ref[Environment]): Float {.loadfrom("get_fog_sun_scatter", 1740695150).}
  proc `fogDensity=`*(self: Ref[Environment]; density: Float) {.loadfrom("set_fog_density", 373806689).}
  proc fogDensity*(self: Ref[Environment]): Float {.loadfrom("get_fog_density", 1740695150).}
  proc `fogHeight=`*(self: Ref[Environment]; height: Float) {.loadfrom("set_fog_height", 373806689).}
  proc fogHeight*(self: Ref[Environment]): Float {.loadfrom("get_fog_height", 1740695150).}
  proc `fogHeightDensity=`*(self: Ref[Environment]; heightDensity: Float) {.loadfrom("set_fog_height_density", 373806689).}
  proc fogHeightDensity*(self: Ref[Environment]): Float {.loadfrom("get_fog_height_density", 1740695150).}
  proc `fogAerialPerspective=`*(self: Ref[Environment]; aerialPerspective: Float) {.loadfrom("set_fog_aerial_perspective", 373806689).}
  proc fogAerialPerspective*(self: Ref[Environment]): Float {.loadfrom("get_fog_aerial_perspective", 1740695150).}
  proc `fogSkyAffect=`*(self: Ref[Environment]; skyAffect: Float) {.loadfrom("set_fog_sky_affect", 373806689).}
  proc fogSkyAffect*(self: Ref[Environment]): Float {.loadfrom("get_fog_sky_affect", 1740695150).}
  proc `volumetricFogEnabled=`*(self: Ref[Environment]; enabled: Bool) {.loadfrom("set_volumetric_fog_enabled", 2586408642).}
  proc isVolumetricFogEnabled*(self: Ref[Environment]): Bool {.loadfrom("is_volumetric_fog_enabled", 36873697).}
  proc `volumetricFogEmission=`*(self: Ref[Environment]; color: Color) {.loadfrom("set_volumetric_fog_emission", 2920490490).}
  proc volumetricFogEmission*(self: Ref[Environment]): Color {.loadfrom("get_volumetric_fog_emission", 3444240500).}
  proc `volumetricFogAlbedo=`*(self: Ref[Environment]; color: Color) {.loadfrom("set_volumetric_fog_albedo", 2920490490).}
  proc volumetricFogAlbedo*(self: Ref[Environment]): Color {.loadfrom("get_volumetric_fog_albedo", 3444240500).}
  proc `volumetricFogDensity=`*(self: Ref[Environment]; density: Float) {.loadfrom("set_volumetric_fog_density", 373806689).}
  proc volumetricFogDensity*(self: Ref[Environment]): Float {.loadfrom("get_volumetric_fog_density", 1740695150).}
  proc `volumetricFogEmissionEnergy=`*(self: Ref[Environment]; begin: Float) {.loadfrom("set_volumetric_fog_emission_energy", 373806689).}
  proc volumetricFogEmissionEnergy*(self: Ref[Environment]): Float {.loadfrom("get_volumetric_fog_emission_energy", 1740695150).}
  proc `volumetricFogAnisotropy=`*(self: Ref[Environment]; anisotropy: Float) {.loadfrom("set_volumetric_fog_anisotropy", 373806689).}
  proc volumetricFogAnisotropy*(self: Ref[Environment]): Float {.loadfrom("get_volumetric_fog_anisotropy", 1740695150).}
  proc `volumetricFogLength=`*(self: Ref[Environment]; length: Float) {.loadfrom("set_volumetric_fog_length", 373806689).}
  proc volumetricFogLength*(self: Ref[Environment]): Float {.loadfrom("get_volumetric_fog_length", 1740695150).}
  proc `volumetricFogDetailSpread=`*(self: Ref[Environment]; detailSpread: Float) {.loadfrom("set_volumetric_fog_detail_spread", 373806689).}
  proc volumetricFogDetailSpread*(self: Ref[Environment]): Float {.loadfrom("get_volumetric_fog_detail_spread", 1740695150).}
  proc `volumetricFogGiInject=`*(self: Ref[Environment]; giInject: Float) {.loadfrom("set_volumetric_fog_gi_inject", 373806689).}
  proc volumetricFogGiInject*(self: Ref[Environment]): Float {.loadfrom("get_volumetric_fog_gi_inject", 1740695150).}
  proc `volumetricFogAmbientInject=`*(self: Ref[Environment]; enabled: Float) {.loadfrom("set_volumetric_fog_ambient_inject", 373806689).}
  proc volumetricFogAmbientInject*(self: Ref[Environment]): Float {.loadfrom("get_volumetric_fog_ambient_inject", 1740695150).}
  proc `volumetricFogSkyAffect=`*(self: Ref[Environment]; skyAffect: Float) {.loadfrom("set_volumetric_fog_sky_affect", 373806689).}
  proc volumetricFogSkyAffect*(self: Ref[Environment]): Float {.loadfrom("get_volumetric_fog_sky_affect", 1740695150).}
  proc `volumetricFogTemporalReprojectionEnabled=`*(self: Ref[Environment]; enabled: Bool) {.loadfrom("set_volumetric_fog_temporal_reprojection_enabled", 2586408642).}
  proc isVolumetricFogTemporalReprojectionEnabled*(self: Ref[Environment]): Bool {.loadfrom("is_volumetric_fog_temporal_reprojection_enabled", 36873697).}
  proc `volumetricFogTemporalReprojectionAmount=`*(self: Ref[Environment]; temporalReprojectionAmount: Float) {.loadfrom("set_volumetric_fog_temporal_reprojection_amount", 373806689).}
  proc volumetricFogTemporalReprojectionAmount*(self: Ref[Environment]): Float {.loadfrom("get_volumetric_fog_temporal_reprojection_amount", 1740695150).}
  proc `adjustmentEnabled=`*(self: Ref[Environment]; enabled: Bool) {.loadfrom("set_adjustment_enabled", 2586408642).}
  proc isAdjustmentEnabled*(self: Ref[Environment]): Bool {.loadfrom("is_adjustment_enabled", 36873697).}
  proc `adjustmentBrightness=`*(self: Ref[Environment]; brightness: Float) {.loadfrom("set_adjustment_brightness", 373806689).}
  proc adjustmentBrightness*(self: Ref[Environment]): Float {.loadfrom("get_adjustment_brightness", 1740695150).}
  proc `adjustmentContrast=`*(self: Ref[Environment]; contrast: Float) {.loadfrom("set_adjustment_contrast", 373806689).}
  proc adjustmentContrast*(self: Ref[Environment]): Float {.loadfrom("get_adjustment_contrast", 1740695150).}
  proc `adjustmentSaturation=`*(self: Ref[Environment]; saturation: Float) {.loadfrom("set_adjustment_saturation", 373806689).}
  proc adjustmentSaturation*(self: Ref[Environment]): Float {.loadfrom("get_adjustment_saturation", 1740695150).}
  proc `adjustmentColorCorrection=`*(self: Ref[Environment]; colorCorrection: Ref[Texture]) {.loadfrom("set_adjustment_color_correction", 1790811099).}
  proc adjustmentColorCorrection*(self: Ref[Environment]): Ref[Texture] {.loadfrom("get_adjustment_color_correction", 4037048985).}

# Font
define_godot_engine_class_essencials(Font, Resource)
Font.memberProcs:
  proc setFallbacks*(self: Ref[Font]; fallbacks: TypedArray[Font]) {.loadfrom("set_fallbacks", 381264803).}
  proc getFallbacks*(self: Ref[Font]): TypedArray[Font] {.loadfrom("get_fallbacks", 3995934104).}
  proc findVariation*(self: Ref[Font]; variationCoordinates: Dictionary; faceIndex: int32 = 0; strength: Float = 0.0; transform: Transform2D = Transform2D|>init()): RID {.loadfrom("find_variation", 1149405976).}
  proc getRids*(self: Ref[Font]): TypedArray[RID] {.loadfrom("get_rids", 3995934104).}
  proc getHeight*(self: Ref[Font]; fontSize: int32 = 16): Float {.loadfrom("get_height", 378113874).}
  proc getAscent*(self: Ref[Font]; fontSize: int32 = 16): Float {.loadfrom("get_ascent", 378113874).}
  proc getDescent*(self: Ref[Font]; fontSize: int32 = 16): Float {.loadfrom("get_descent", 378113874).}
  proc getUnderlinePosition*(self: Ref[Font]; fontSize: int32 = 16): Float {.loadfrom("get_underline_position", 378113874).}
  proc getUnderlineThickness*(self: Ref[Font]; fontSize: int32 = 16): Float {.loadfrom("get_underline_thickness", 378113874).}
  proc getFontName*(self: Ref[Font]): String {.loadfrom("get_font_name", 201670096).}
  proc getFontStyleName*(self: Ref[Font]): String {.loadfrom("get_font_style_name", 201670096).}
  proc getOtNameStrings*(self: Ref[Font]): Dictionary {.loadfrom("get_ot_name_strings", 3102165223).}
  proc getFontStyle*(self: Ref[Font]): set[TextServer|>FontStyle] {.loadfrom("get_font_style", 2520224254).}
  proc getFontWeight*(self: Ref[Font]): int32 {.loadfrom("get_font_weight", 3905245786).}
  proc getFontStretch*(self: Ref[Font]): int32 {.loadfrom("get_font_stretch", 3905245786).}
  proc getSpacing*(self: Ref[Font]; spacing: TextServer|>SpacingType): int32 {.loadfrom("get_spacing", 1310880908).}
  proc getOpentypeFeatures*(self: Ref[Font]): Dictionary {.loadfrom("get_opentype_features", 3102165223).}
  proc setCacheCapacity*(self: Ref[Font]; singleLine: int32; multiLine: int32) {.loadfrom("set_cache_capacity", 3937882851).}
  proc getStringSize*(self: Ref[Font]; text: String; alignment: HorizontalAlignment = horizontalAlignmentLeft; width: Float = -1; fontSize: int32 = 16; justificationFlags: set[TextServer|>JustificationFlag] = {}; direction: TextServer|>Direction = directionAuto; orientation: TextServer|>Orientation = orientationHorizontal): Vector2 {.loadfrom("get_string_size", 3678918099).}
  proc getMultilineStringSize*(self: Ref[Font]; text: String; alignment: HorizontalAlignment = horizontalAlignmentLeft; width: Float = -1; fontSize: int32 = 16; maxLines: int32 = -1; brkFlags: set[TextServer|>LineBreakFlag] = {}; justificationFlags: set[TextServer|>JustificationFlag] = {}; direction: TextServer|>Direction = directionAuto; orientation: TextServer|>Orientation = orientationHorizontal): Vector2 {.loadfrom("get_multiline_string_size", 2427690650).}
  proc drawString*(self: Ref[Font]; canvasItem: RID; pos: Vector2; text: String; alignment: HorizontalAlignment = horizontalAlignmentLeft; width: Float = -1; fontSize: int32 = 16; modulate: Color = Color|>init(1, 1, 1, 1); justificationFlags: set[TextServer|>JustificationFlag] = {}; direction: TextServer|>Direction = directionAuto; orientation: TextServer|>Orientation = orientationHorizontal) {.loadfrom("draw_string", 2565402639).}
  proc drawMultilineString*(self: Ref[Font]; canvasItem: RID; pos: Vector2; text: String; alignment: HorizontalAlignment = horizontalAlignmentLeft; width: Float = -1; fontSize: int32 = 16; maxLines: int32 = -1; modulate: Color = Color|>init(1, 1, 1, 1); brkFlags: set[TextServer|>LineBreakFlag] = {}; justificationFlags: set[TextServer|>JustificationFlag] = {}; direction: TextServer|>Direction = directionAuto; orientation: TextServer|>Orientation = orientationHorizontal) {.loadfrom("draw_multiline_string", 348869189).}
  proc drawStringOutline*(self: Ref[Font]; canvasItem: RID; pos: Vector2; text: String; alignment: HorizontalAlignment = horizontalAlignmentLeft; width: Float = -1; fontSize: int32 = 16; size: int32 = 1; modulate: Color = Color|>init(1, 1, 1, 1); justificationFlags: set[TextServer|>JustificationFlag] = {}; direction: TextServer|>Direction = directionAuto; orientation: TextServer|>Orientation = orientationHorizontal) {.loadfrom("draw_string_outline", 657875837).}
  proc drawMultilineStringOutline*(self: Ref[Font]; canvasItem: RID; pos: Vector2; text: String; alignment: HorizontalAlignment = horizontalAlignmentLeft; width: Float = -1; fontSize: int32 = 16; maxLines: int32 = -1; size: int32 = 1; modulate: Color = Color|>init(1, 1, 1, 1); brkFlags: set[TextServer|>LineBreakFlag] = {}; justificationFlags: set[TextServer|>JustificationFlag] = {}; direction: TextServer|>Direction = directionAuto; orientation: TextServer|>Orientation = orientationHorizontal) {.loadfrom("draw_multiline_string_outline", 1649790182).}
  proc getCharSize*(self: Ref[Font]; char: Int; fontSize: int32): Vector2 {.loadfrom("get_char_size", 3016396712).}
  proc drawChar*(self: Ref[Font]; canvasItem: RID; pos: Vector2; char: Int; fontSize: int32; modulate: Color = Color|>init(1, 1, 1, 1)): Float {.loadfrom("draw_char", 1462476057).}
  proc drawCharOutline*(self: Ref[Font]; canvasItem: RID; pos: Vector2; char: Int; fontSize: int32; size: int32 = -1; modulate: Color = Color|>init(1, 1, 1, 1)): Float {.loadfrom("draw_char_outline", 4161008124).}
  proc hasChar*(self: Ref[Font]; char: Int): Bool {.loadfrom("has_char", 1116898809).}
  proc getSupportedChars*(self: Ref[Font]): String {.loadfrom("get_supported_chars", 201670096).}
  proc isLanguageSupported*(self: Ref[Font]; language: String): Bool {.loadfrom("is_language_supported", 3927539163).}
  proc isScriptSupported*(self: Ref[Font]; script: String): Bool {.loadfrom("is_script_supported", 3927539163).}
  proc getSupportedFeatureList*(self: Ref[Font]): Dictionary {.loadfrom("get_supported_feature_list", 3102165223).}
  proc getSupportedVariationList*(self: Ref[Font]): Dictionary {.loadfrom("get_supported_variation_list", 3102165223).}
  proc getFaceCount*(self: Ref[Font]): int64 {.loadfrom("get_face_count", 3905245786).}

# GDExtension
define_godot_engine_class_essencials(GDExtension, Resource)
GDExtension.memberProcs:
  proc openLibrary*(self: Ref[GDExtension]; path: String; entrySymbol: String): Error {.loadfrom("open_library", 852856452).}
  proc closeLibrary*(self: Ref[GDExtension]) {.loadfrom("close_library", 3218959716).}
  proc isLibraryOpen*(self: Ref[GDExtension]): Bool {.loadfrom("is_library_open", 36873697).}
  proc getMinimumLibraryInitializationLevel*(self: Ref[GDExtension]): GDExtension|>InitializationLevel {.loadfrom("get_minimum_library_initialization_level", 964858755).}
  proc initializeLibrary*(self: Ref[GDExtension]; level: GDExtension|>InitializationLevel) {.loadfrom("initialize_library", 3409922941).}

# GLTFAccessor
define_godot_engine_class_essencials(GLTFAccessor, Resource)
GLTFAccessor.memberProcs:
  proc bufferView*(self: Ref[GLTFAccessor]): int32 {.loadfrom("get_buffer_view", 2455072627).}
  proc `bufferView=`*(self: Ref[GLTFAccessor]; bufferView: int32) {.loadfrom("set_buffer_view", 1286410249).}
  proc byteOffset*(self: Ref[GLTFAccessor]): int32 {.loadfrom("get_byte_offset", 2455072627).}
  proc `byteOffset=`*(self: Ref[GLTFAccessor]; byteOffset: int32) {.loadfrom("set_byte_offset", 1286410249).}
  proc componentType*(self: Ref[GLTFAccessor]): int32 {.loadfrom("get_component_type", 2455072627).}
  proc `componentType=`*(self: Ref[GLTFAccessor]; componentType: int32) {.loadfrom("set_component_type", 1286410249).}
  proc normalized*(self: Ref[GLTFAccessor]): Bool {.loadfrom("get_normalized", 2240911060).}
  proc `normalized=`*(self: Ref[GLTFAccessor]; normalized: Bool) {.loadfrom("set_normalized", 2586408642).}
  proc count*(self: Ref[GLTFAccessor]): int32 {.loadfrom("get_count", 2455072627).}
  proc `count=`*(self: Ref[GLTFAccessor]; count: int32) {.loadfrom("set_count", 1286410249).}
  proc `type`*(self: Ref[GLTFAccessor]): int32 {.loadfrom("get_type", 2455072627).}
  proc `type=`*(self: Ref[GLTFAccessor]; `type`: int32) {.loadfrom("set_type", 1286410249).}
  proc min*(self: Ref[GLTFAccessor]): PackedFloat64Array {.loadfrom("get_min", 148677866).}
  proc `min=`*(self: Ref[GLTFAccessor]; min: PackedFloat64Array) {.loadfrom("set_min", 2576592201).}
  proc max*(self: Ref[GLTFAccessor]): PackedFloat64Array {.loadfrom("get_max", 148677866).}
  proc `max=`*(self: Ref[GLTFAccessor]; max: PackedFloat64Array) {.loadfrom("set_max", 2576592201).}
  proc sparseCount*(self: Ref[GLTFAccessor]): int32 {.loadfrom("get_sparse_count", 2455072627).}
  proc `sparseCount=`*(self: Ref[GLTFAccessor]; sparseCount: int32) {.loadfrom("set_sparse_count", 1286410249).}
  proc sparseIndicesBufferView*(self: Ref[GLTFAccessor]): int32 {.loadfrom("get_sparse_indices_buffer_view", 2455072627).}
  proc `sparseIndicesBufferView=`*(self: Ref[GLTFAccessor]; sparseIndicesBufferView: int32) {.loadfrom("set_sparse_indices_buffer_view", 1286410249).}
  proc sparseIndicesByteOffset*(self: Ref[GLTFAccessor]): int32 {.loadfrom("get_sparse_indices_byte_offset", 2455072627).}
  proc `sparseIndicesByteOffset=`*(self: Ref[GLTFAccessor]; sparseIndicesByteOffset: int32) {.loadfrom("set_sparse_indices_byte_offset", 1286410249).}
  proc sparseIndicesComponentType*(self: Ref[GLTFAccessor]): int32 {.loadfrom("get_sparse_indices_component_type", 2455072627).}
  proc `sparseIndicesComponentType=`*(self: Ref[GLTFAccessor]; sparseIndicesComponentType: int32) {.loadfrom("set_sparse_indices_component_type", 1286410249).}
  proc sparseValuesBufferView*(self: Ref[GLTFAccessor]): int32 {.loadfrom("get_sparse_values_buffer_view", 2455072627).}
  proc `sparseValuesBufferView=`*(self: Ref[GLTFAccessor]; sparseValuesBufferView: int32) {.loadfrom("set_sparse_values_buffer_view", 1286410249).}
  proc sparseValuesByteOffset*(self: Ref[GLTFAccessor]): int32 {.loadfrom("get_sparse_values_byte_offset", 2455072627).}
  proc `sparseValuesByteOffset=`*(self: Ref[GLTFAccessor]; sparseValuesByteOffset: int32) {.loadfrom("set_sparse_values_byte_offset", 1286410249).}

# GLTFAnimation
define_godot_engine_class_essencials(GLTFAnimation, Resource)
GLTFAnimation.memberProcs:
  proc loop*(self: Ref[GLTFAnimation]): Bool {.loadfrom("get_loop", 36873697).}
  proc `loop=`*(self: Ref[GLTFAnimation]; loop: Bool) {.loadfrom("set_loop", 2586408642).}

# GLTFBufferView
define_godot_engine_class_essencials(GLTFBufferView, Resource)
GLTFBufferView.memberProcs:
  proc buffer*(self: Ref[GLTFBufferView]): int32 {.loadfrom("get_buffer", 2455072627).}
  proc `buffer=`*(self: Ref[GLTFBufferView]; buffer: int32) {.loadfrom("set_buffer", 1286410249).}
  proc byteOffset*(self: Ref[GLTFBufferView]): int32 {.loadfrom("get_byte_offset", 2455072627).}
  proc `byteOffset=`*(self: Ref[GLTFBufferView]; byteOffset: int32) {.loadfrom("set_byte_offset", 1286410249).}
  proc byteLength*(self: Ref[GLTFBufferView]): int32 {.loadfrom("get_byte_length", 2455072627).}
  proc `byteLength=`*(self: Ref[GLTFBufferView]; byteLength: int32) {.loadfrom("set_byte_length", 1286410249).}
  proc byteStride*(self: Ref[GLTFBufferView]): int32 {.loadfrom("get_byte_stride", 2455072627).}
  proc `byteStride=`*(self: Ref[GLTFBufferView]; byteStride: int32) {.loadfrom("set_byte_stride", 1286410249).}
  proc indices*(self: Ref[GLTFBufferView]): Bool {.loadfrom("get_indices", 2240911060).}
  proc `indices=`*(self: Ref[GLTFBufferView]; indices: Bool) {.loadfrom("set_indices", 2586408642).}

# GLTFCamera
define_godot_engine_class_essencials(GLTFCamera, Resource)
GLTFCamera.memberProcs:
  proc fromNode*(cameraNode: Camera3D): Ref[GLTFCamera] {.staticOf: GLTFCamera, loadfrom("from_node", 237784).}
  proc toNode*(self: Ref[GLTFCamera]): Camera3D {.loadfrom("to_node", 2285090890).}
  proc fromDictionary*(dictionary: Dictionary): Ref[GLTFCamera] {.staticOf: GLTFCamera, loadfrom("from_dictionary", 2495512509).}
  proc toDictionary*(self: Ref[GLTFCamera]): Dictionary {.loadfrom("to_dictionary", 3102165223).}
  proc perspective*(self: Ref[GLTFCamera]): Bool {.loadfrom("get_perspective", 36873697).}
  proc `perspective=`*(self: Ref[GLTFCamera]; perspective: Bool) {.loadfrom("set_perspective", 2586408642).}
  proc fov*(self: Ref[GLTFCamera]): Float {.loadfrom("get_fov", 1740695150).}
  proc `fov=`*(self: Ref[GLTFCamera]; fov: Float) {.loadfrom("set_fov", 373806689).}
  proc sizeMag*(self: Ref[GLTFCamera]): Float {.loadfrom("get_size_mag", 1740695150).}
  proc `sizeMag=`*(self: Ref[GLTFCamera]; sizeMag: Float) {.loadfrom("set_size_mag", 373806689).}
  proc depthFar*(self: Ref[GLTFCamera]): Float {.loadfrom("get_depth_far", 1740695150).}
  proc `depthFar=`*(self: Ref[GLTFCamera]; zdepthFar: Float) {.loadfrom("set_depth_far", 373806689).}
  proc depthNear*(self: Ref[GLTFCamera]): Float {.loadfrom("get_depth_near", 1740695150).}
  proc `depthNear=`*(self: Ref[GLTFCamera]; zdepthNear: Float) {.loadfrom("set_depth_near", 373806689).}

# GLTFDocument
define_godot_engine_class_essencials(GLTFDocument, Resource)
GLTFDocument.memberProcs:
  proc appendFromFile*(self: Ref[GLTFDocument]; path: String; state: Ref[GLTFState]; flags: uint32 = 0'u32; basePath: String = ""): Error {.loadfrom("append_from_file", 1862991421).}
  proc appendFromBuffer*(self: Ref[GLTFDocument]; bytes: PackedByteArray; basePath: String; state: Ref[GLTFState]; flags: uint32 = 0'u32): Error {.loadfrom("append_from_buffer", 2818062664).}
  proc appendFromScene*(self: Ref[GLTFDocument]; node: ptr Node; state: Ref[GLTFState]; flags: uint32 = 0'u32): Error {.loadfrom("append_from_scene", 374125375).}
  proc generateScene*(self: Ref[GLTFDocument]; state: Ref[GLTFState]; bakeFps: Float = 30; trimming: Bool = false; removeImmutableTracks: Bool = true): Node {.loadfrom("generate_scene", 2770277081).}
  proc generateBuffer*(self: Ref[GLTFDocument]; state: Ref[GLTFState]): PackedByteArray {.loadfrom("generate_buffer", 741783455).}
  proc writeToFilesystem*(self: Ref[GLTFDocument]; state: Ref[GLTFState]; path: String): Error {.loadfrom("write_to_filesystem", 1784551478).}
  proc registerGltfDocumentExtension*(extension: Ref[GLTFDocumentExtension]; firstPriority: Bool = false) {.staticOf: GLTFDocument, loadfrom("register_gltf_document_extension", 3752678331).}
  proc unregisterGltfDocumentExtension*(extension: Ref[GLTFDocumentExtension]) {.staticOf: GLTFDocument, loadfrom("unregister_gltf_document_extension", 2684415758).}

# GLTFDocumentExtension
define_godot_engine_class_essencials(GLTFDocumentExtension, Resource)
method importPreflight*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; extensions: PackedStringArray): Error {.base.} = (discard)
method getSupportedExtensions*(self: Ref[GLTFDocumentExtension]): PackedStringArray {.base.} = (discard)
method parseNodeExtensions*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; gltfNode: Ref[GLTFNode]; extensions: Dictionary): Error {.base.} = (discard)
method parseImageData*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; imageData: PackedByteArray; mimeType: String; retImage: Ref[Image]): Error {.base.} = (discard)
method parseTextureJson*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; textureJson: Dictionary; retGltfTexture: Ref[GLTFTexture]): Error {.base.} = (discard)
method generateSceneNode*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; gltfNode: Ref[GLTFNode]; sceneParent: ptr Node): Node3D {.base.} = (discard)
method importPostParse*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]): Error {.base.} = (discard)
method importNode*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; gltfNode: Ref[GLTFNode]; json: Dictionary; node: ptr Node): Error {.base.} = (discard)
method importPost*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; root: ptr Node): Error {.base.} = (discard)
method exportPreflight*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; root: ptr Node): Error {.base.} = (discard)
method convertSceneNode*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; gltfNode: Ref[GLTFNode]; sceneNode: ptr Node) {.base.} = (discard)
method exportNode*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; gltfNode: Ref[GLTFNode]; json: Dictionary; node: ptr Node): Error {.base.} = (discard)
method exportPost*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]): Error {.base.} = (discard)

# GLTFLight
define_godot_engine_class_essencials(GLTFLight, Resource)
GLTFLight.memberProcs:
  proc fromNode*(lightNode: Light3D): Ref[GLTFLight] {.staticOf: GLTFLight, loadfrom("from_node", 3907677874).}
  proc toNode*(self: Ref[GLTFLight]): Light3D {.loadfrom("to_node", 2040811672).}
  proc fromDictionary*(dictionary: Dictionary): Ref[GLTFLight] {.staticOf: GLTFLight, loadfrom("from_dictionary", 4057087208).}
  proc toDictionary*(self: Ref[GLTFLight]): Dictionary {.loadfrom("to_dictionary", 3102165223).}
  proc color*(self: Ref[GLTFLight]): Color {.loadfrom("get_color", 3200896285).}
  proc `color=`*(self: Ref[GLTFLight]; color: Color) {.loadfrom("set_color", 2920490490).}
  proc intensity*(self: Ref[GLTFLight]): Float {.loadfrom("get_intensity", 191475506).}
  proc `intensity=`*(self: Ref[GLTFLight]; intensity: Float) {.loadfrom("set_intensity", 373806689).}
  proc lightType*(self: Ref[GLTFLight]): String {.loadfrom("get_light_type", 2841200299).}
  proc `lightType=`*(self: Ref[GLTFLight]; lightType: String) {.loadfrom("set_light_type", 83702148).}
  proc range*(self: Ref[GLTFLight]): Float {.loadfrom("get_range", 191475506).}
  proc `range=`*(self: Ref[GLTFLight]; range: Float) {.loadfrom("set_range", 373806689).}
  proc innerConeAngle*(self: Ref[GLTFLight]): Float {.loadfrom("get_inner_cone_angle", 191475506).}
  proc `innerConeAngle=`*(self: Ref[GLTFLight]; innerConeAngle: Float) {.loadfrom("set_inner_cone_angle", 373806689).}
  proc outerConeAngle*(self: Ref[GLTFLight]): Float {.loadfrom("get_outer_cone_angle", 191475506).}
  proc `outerConeAngle=`*(self: Ref[GLTFLight]; outerConeAngle: Float) {.loadfrom("set_outer_cone_angle", 373806689).}

# GLTFMesh
define_godot_engine_class_essencials(GLTFMesh, Resource)
GLTFMesh.memberProcs:
  proc mesh*(self: Ref[GLTFMesh]): Ref[ImporterMesh] {.loadfrom("get_mesh", 3754628756).}
  proc `mesh=`*(self: Ref[GLTFMesh]; mesh: Ref[ImporterMesh]) {.loadfrom("set_mesh", 2255166972).}
  proc blendWeights*(self: Ref[GLTFMesh]): PackedFloat32Array {.loadfrom("get_blend_weights", 2445143706).}
  proc `blendWeights=`*(self: Ref[GLTFMesh]; blendWeights: PackedFloat32Array) {.loadfrom("set_blend_weights", 2899603908).}
  proc instanceMaterials*(self: Ref[GLTFMesh]): TypedArray[Material] {.loadfrom("get_instance_materials", 2915620761).}
  proc `instanceMaterials=`*(self: Ref[GLTFMesh]; instanceMaterials: TypedArray[Material]) {.loadfrom("set_instance_materials", 381264803).}

# GLTFNode
define_godot_engine_class_essencials(GLTFNode, Resource)
GLTFNode.memberProcs:
  proc parent*(self: Ref[GLTFNode]): int32 {.loadfrom("get_parent", 2455072627).}
  proc `parent=`*(self: Ref[GLTFNode]; parent: int32) {.loadfrom("set_parent", 1286410249).}
  proc height*(self: Ref[GLTFNode]): int32 {.loadfrom("get_height", 2455072627).}
  proc `height=`*(self: Ref[GLTFNode]; height: int32) {.loadfrom("set_height", 1286410249).}
  proc xform*(self: Ref[GLTFNode]): Transform3D {.loadfrom("get_xform", 4183770049).}
  proc `xform=`*(self: Ref[GLTFNode]; xform: Transform3D) {.loadfrom("set_xform", 2952846383).}
  proc mesh*(self: Ref[GLTFNode]): int32 {.loadfrom("get_mesh", 2455072627).}
  proc `mesh=`*(self: Ref[GLTFNode]; mesh: int32) {.loadfrom("set_mesh", 1286410249).}
  proc camera*(self: Ref[GLTFNode]): int32 {.loadfrom("get_camera", 2455072627).}
  proc `camera=`*(self: Ref[GLTFNode]; camera: int32) {.loadfrom("set_camera", 1286410249).}
  proc skin*(self: Ref[GLTFNode]): int32 {.loadfrom("get_skin", 2455072627).}
  proc `skin=`*(self: Ref[GLTFNode]; skin: int32) {.loadfrom("set_skin", 1286410249).}
  proc skeleton*(self: Ref[GLTFNode]): int32 {.loadfrom("get_skeleton", 2455072627).}
  proc `skeleton=`*(self: Ref[GLTFNode]; skeleton: int32) {.loadfrom("set_skeleton", 1286410249).}
  proc position*(self: Ref[GLTFNode]): Vector3 {.loadfrom("get_position", 3783033775).}
  proc `position=`*(self: Ref[GLTFNode]; position: Vector3) {.loadfrom("set_position", 3460891852).}
  proc rotation*(self: Ref[GLTFNode]): Quaternion {.loadfrom("get_rotation", 2916281908).}
  proc `rotation=`*(self: Ref[GLTFNode]; rotation: Quaternion) {.loadfrom("set_rotation", 1727505552).}
  proc scale*(self: Ref[GLTFNode]): Vector3 {.loadfrom("get_scale", 3783033775).}
  proc `scale=`*(self: Ref[GLTFNode]; scale: Vector3) {.loadfrom("set_scale", 3460891852).}
  proc children*(self: Ref[GLTFNode]): PackedInt32Array {.loadfrom("get_children", 969006518).}
  proc `children=`*(self: Ref[GLTFNode]; children: PackedInt32Array) {.loadfrom("set_children", 3614634198).}
  proc light*(self: Ref[GLTFNode]): int32 {.loadfrom("get_light", 2455072627).}
  proc `light=`*(self: Ref[GLTFNode]; light: int32) {.loadfrom("set_light", 1286410249).}
  proc getAdditionalData*(self: Ref[GLTFNode]; extensionName: StringName): Variant {.loadfrom("get_additional_data", 2138907829).}
  proc setAdditionalData*(self: Ref[GLTFNode]; extensionName: StringName; additionalData: ptr Variant) {.loadfrom("set_additional_data", 3776071444).}

# GLTFPhysicsBody
define_godot_engine_class_essencials(GLTFPhysicsBody, Resource)
GLTFPhysicsBody.memberProcs:
  proc fromNode*(bodyNode: CollisionObject3D): Ref[GLTFPhysicsBody] {.staticOf: GLTFPhysicsBody, loadfrom("from_node", 420544174).}
  proc toNode*(self: Ref[GLTFPhysicsBody]): CollisionObject3D {.loadfrom("to_node", 3224013656).}
  proc fromDictionary*(dictionary: Dictionary): Ref[GLTFPhysicsBody] {.staticOf: GLTFPhysicsBody, loadfrom("from_dictionary", 1177544336).}
  proc toDictionary*(self: Ref[GLTFPhysicsBody]): Dictionary {.loadfrom("to_dictionary", 3102165223).}
  proc bodyType*(self: Ref[GLTFPhysicsBody]): String {.loadfrom("get_body_type", 201670096).}
  proc `bodyType=`*(self: Ref[GLTFPhysicsBody]; bodyType: String) {.loadfrom("set_body_type", 83702148).}
  proc mass*(self: Ref[GLTFPhysicsBody]): Float {.loadfrom("get_mass", 1740695150).}
  proc `mass=`*(self: Ref[GLTFPhysicsBody]; mass: Float) {.loadfrom("set_mass", 373806689).}
  proc linearVelocity*(self: Ref[GLTFPhysicsBody]): Vector3 {.loadfrom("get_linear_velocity", 3360562783).}
  proc `linearVelocity=`*(self: Ref[GLTFPhysicsBody]; linearVelocity: Vector3) {.loadfrom("set_linear_velocity", 3460891852).}
  proc angularVelocity*(self: Ref[GLTFPhysicsBody]): Vector3 {.loadfrom("get_angular_velocity", 3360562783).}
  proc `angularVelocity=`*(self: Ref[GLTFPhysicsBody]; angularVelocity: Vector3) {.loadfrom("set_angular_velocity", 3460891852).}
  proc inertiaTensor*(self: Ref[GLTFPhysicsBody]): Basis {.loadfrom("get_inertia_tensor", 2716978435).}
  proc `inertiaTensor=`*(self: Ref[GLTFPhysicsBody]; inertiaTensor: Basis) {.loadfrom("set_inertia_tensor", 1055510324).}

# GLTFPhysicsShape
define_godot_engine_class_essencials(GLTFPhysicsShape, Resource)
GLTFPhysicsShape.memberProcs:
  proc fromNode*(shapeNode: CollisionShape3D): Ref[GLTFPhysicsShape] {.staticOf: GLTFPhysicsShape, loadfrom("from_node", 3613751275).}
  proc toNode*(self: Ref[GLTFPhysicsShape]; cacheShapes: Bool = false): CollisionShape3D {.loadfrom("to_node", 563689933).}
  proc fromDictionary*(dictionary: Dictionary): Ref[GLTFPhysicsShape] {.staticOf: GLTFPhysicsShape, loadfrom("from_dictionary", 2390691823).}
  proc toDictionary*(self: Ref[GLTFPhysicsShape]): Dictionary {.loadfrom("to_dictionary", 3102165223).}
  proc shapeType*(self: Ref[GLTFPhysicsShape]): String {.loadfrom("get_shape_type", 201670096).}
  proc `shapeType=`*(self: Ref[GLTFPhysicsShape]; shapeType: String) {.loadfrom("set_shape_type", 83702148).}
  proc size*(self: Ref[GLTFPhysicsShape]): Vector3 {.loadfrom("get_size", 3360562783).}
  proc `size=`*(self: Ref[GLTFPhysicsShape]; size: Vector3) {.loadfrom("set_size", 3460891852).}
  proc radius*(self: Ref[GLTFPhysicsShape]): Float {.loadfrom("get_radius", 1740695150).}
  proc `radius=`*(self: Ref[GLTFPhysicsShape]; radius: Float) {.loadfrom("set_radius", 373806689).}
  proc height*(self: Ref[GLTFPhysicsShape]): Float {.loadfrom("get_height", 1740695150).}
  proc `height=`*(self: Ref[GLTFPhysicsShape]; height: Float) {.loadfrom("set_height", 373806689).}
  proc isTrigger*(self: Ref[GLTFPhysicsShape]): Bool {.loadfrom("get_is_trigger", 36873697).}
  proc `isTrigger=`*(self: Ref[GLTFPhysicsShape]; isTrigger: Bool) {.loadfrom("set_is_trigger", 2586408642).}
  proc meshIndex*(self: Ref[GLTFPhysicsShape]): int32 {.loadfrom("get_mesh_index", 3905245786).}
  proc `meshIndex=`*(self: Ref[GLTFPhysicsShape]; meshIndex: int32) {.loadfrom("set_mesh_index", 1286410249).}
  proc importerMesh*(self: Ref[GLTFPhysicsShape]): Ref[ImporterMesh] {.loadfrom("get_importer_mesh", 3161779525).}
  proc `importerMesh=`*(self: Ref[GLTFPhysicsShape]; importerMesh: Ref[ImporterMesh]) {.loadfrom("set_importer_mesh", 2255166972).}

# GLTFSkeleton
define_godot_engine_class_essencials(GLTFSkeleton, Resource)
GLTFSkeleton.memberProcs:
  proc joints*(self: Ref[GLTFSkeleton]): PackedInt32Array {.loadfrom("get_joints", 969006518).}
  proc `joints=`*(self: Ref[GLTFSkeleton]; joints: PackedInt32Array) {.loadfrom("set_joints", 3614634198).}
  proc roots*(self: Ref[GLTFSkeleton]): PackedInt32Array {.loadfrom("get_roots", 969006518).}
  proc `roots=`*(self: Ref[GLTFSkeleton]; roots: PackedInt32Array) {.loadfrom("set_roots", 3614634198).}
  proc getGodotSkeleton*(self: Ref[GLTFSkeleton]): Skeleton3D {.loadfrom("get_godot_skeleton", 1814733083).}
  proc uniqueNames*(self: Ref[GLTFSkeleton]): TypedArray[String] {.loadfrom("get_unique_names", 2915620761).}
  proc `uniqueNames=`*(self: Ref[GLTFSkeleton]; uniqueNames: TypedArray[String]) {.loadfrom("set_unique_names", 381264803).}
  proc godotBoneNode*(self: Ref[GLTFSkeleton]): Dictionary {.loadfrom("get_godot_bone_node", 2382534195).}
  proc `godotBoneNode=`*(self: Ref[GLTFSkeleton]; godotBoneNode: Dictionary) {.loadfrom("set_godot_bone_node", 4155329257).}
  proc getBoneAttachmentCount*(self: Ref[GLTFSkeleton]): int32 {.loadfrom("get_bone_attachment_count", 2455072627).}
  proc getBoneAttachment*(self: Ref[GLTFSkeleton]; idx: int32): BoneAttachment3D {.loadfrom("get_bone_attachment", 945440495).}

# GLTFSkin
define_godot_engine_class_essencials(GLTFSkin, Resource)
GLTFSkin.memberProcs:
  proc skinRoot*(self: Ref[GLTFSkin]): int32 {.loadfrom("get_skin_root", 2455072627).}
  proc `skinRoot=`*(self: Ref[GLTFSkin]; skinRoot: int32) {.loadfrom("set_skin_root", 1286410249).}
  proc jointsOriginal*(self: Ref[GLTFSkin]): PackedInt32Array {.loadfrom("get_joints_original", 969006518).}
  proc `jointsOriginal=`*(self: Ref[GLTFSkin]; jointsOriginal: PackedInt32Array) {.loadfrom("set_joints_original", 3614634198).}
  proc inverseBinds*(self: Ref[GLTFSkin]): TypedArray[Transform3D] {.loadfrom("get_inverse_binds", 2915620761).}
  proc `inverseBinds=`*(self: Ref[GLTFSkin]; inverseBinds: TypedArray[Transform3D]) {.loadfrom("set_inverse_binds", 381264803).}
  proc joints*(self: Ref[GLTFSkin]): PackedInt32Array {.loadfrom("get_joints", 969006518).}
  proc `joints=`*(self: Ref[GLTFSkin]; joints: PackedInt32Array) {.loadfrom("set_joints", 3614634198).}
  proc nonJoints*(self: Ref[GLTFSkin]): PackedInt32Array {.loadfrom("get_non_joints", 969006518).}
  proc `nonJoints=`*(self: Ref[GLTFSkin]; nonJoints: PackedInt32Array) {.loadfrom("set_non_joints", 3614634198).}
  proc roots*(self: Ref[GLTFSkin]): PackedInt32Array {.loadfrom("get_roots", 969006518).}
  proc `roots=`*(self: Ref[GLTFSkin]; roots: PackedInt32Array) {.loadfrom("set_roots", 3614634198).}
  proc skeleton*(self: Ref[GLTFSkin]): int32 {.loadfrom("get_skeleton", 2455072627).}
  proc `skeleton=`*(self: Ref[GLTFSkin]; skeleton: int32) {.loadfrom("set_skeleton", 1286410249).}
  proc jointIToBoneI*(self: Ref[GLTFSkin]): Dictionary {.loadfrom("get_joint_i_to_bone_i", 2382534195).}
  proc `jointIToBoneI=`*(self: Ref[GLTFSkin]; jointIToBoneI: Dictionary) {.loadfrom("set_joint_i_to_bone_i", 4155329257).}
  proc jointIToName*(self: Ref[GLTFSkin]): Dictionary {.loadfrom("get_joint_i_to_name", 2382534195).}
  proc `jointIToName=`*(self: Ref[GLTFSkin]; jointIToName: Dictionary) {.loadfrom("set_joint_i_to_name", 4155329257).}
  proc godotSkin*(self: Ref[GLTFSkin]): Ref[Skin] {.loadfrom("get_godot_skin", 1032037385).}
  proc `godotSkin=`*(self: Ref[GLTFSkin]; godotSkin: Ref[Skin]) {.loadfrom("set_godot_skin", 3971435618).}

# GLTFSpecGloss
define_godot_engine_class_essencials(GLTFSpecGloss, Resource)
GLTFSpecGloss.memberProcs:
  proc diffuseImg*(self: Ref[GLTFSpecGloss]): Ref[Image] {.loadfrom("get_diffuse_img", 564927088).}
  proc `diffuseImg=`*(self: Ref[GLTFSpecGloss]; diffuseImg: Ref[Image]) {.loadfrom("set_diffuse_img", 532598488).}
  proc diffuseFactor*(self: Ref[GLTFSpecGloss]): Color {.loadfrom("get_diffuse_factor", 3200896285).}
  proc `diffuseFactor=`*(self: Ref[GLTFSpecGloss]; diffuseFactor: Color) {.loadfrom("set_diffuse_factor", 2920490490).}
  proc glossFactor*(self: Ref[GLTFSpecGloss]): Float {.loadfrom("get_gloss_factor", 191475506).}
  proc `glossFactor=`*(self: Ref[GLTFSpecGloss]; glossFactor: Float) {.loadfrom("set_gloss_factor", 373806689).}
  proc specularFactor*(self: Ref[GLTFSpecGloss]): Color {.loadfrom("get_specular_factor", 3200896285).}
  proc `specularFactor=`*(self: Ref[GLTFSpecGloss]; specularFactor: Color) {.loadfrom("set_specular_factor", 2920490490).}
  proc specGlossImg*(self: Ref[GLTFSpecGloss]): Ref[Image] {.loadfrom("get_spec_gloss_img", 564927088).}
  proc `specGlossImg=`*(self: Ref[GLTFSpecGloss]; specGlossImg: Ref[Image]) {.loadfrom("set_spec_gloss_img", 532598488).}

# GLTFState
define_godot_engine_class_essencials(GLTFState, Resource)
GLTFState.memberProcs:
  proc addUsedExtension*(self: Ref[GLTFState]; extensionName: String; required: Bool) {.loadfrom("add_used_extension", 2678287736).}
  proc json*(self: Ref[GLTFState]): Dictionary {.loadfrom("get_json", 2382534195).}
  proc `json=`*(self: Ref[GLTFState]; json: Dictionary) {.loadfrom("set_json", 4155329257).}
  proc majorVersion*(self: Ref[GLTFState]): int32 {.loadfrom("get_major_version", 2455072627).}
  proc `majorVersion=`*(self: Ref[GLTFState]; majorVersion: int32) {.loadfrom("set_major_version", 1286410249).}
  proc minorVersion*(self: Ref[GLTFState]): int32 {.loadfrom("get_minor_version", 2455072627).}
  proc `minorVersion=`*(self: Ref[GLTFState]; minorVersion: int32) {.loadfrom("set_minor_version", 1286410249).}
  proc glbData*(self: Ref[GLTFState]): PackedByteArray {.loadfrom("get_glb_data", 2115431945).}
  proc `glbData=`*(self: Ref[GLTFState]; glbData: PackedByteArray) {.loadfrom("set_glb_data", 2971499966).}
  proc useNamedSkinBinds*(self: Ref[GLTFState]): Bool {.loadfrom("get_use_named_skin_binds", 2240911060).}
  proc `useNamedSkinBinds=`*(self: Ref[GLTFState]; useNamedSkinBinds: Bool) {.loadfrom("set_use_named_skin_binds", 2586408642).}
  proc nodes*(self: Ref[GLTFState]): TypedArray[GLTFNode] {.loadfrom("get_nodes", 2915620761).}
  proc `nodes=`*(self: Ref[GLTFState]; nodes: TypedArray[GLTFNode]) {.loadfrom("set_nodes", 381264803).}
  proc buffers*(self: Ref[GLTFState]): TypedArray[PackedByteArray] {.loadfrom("get_buffers", 2915620761).}
  proc `buffers=`*(self: Ref[GLTFState]; buffers: TypedArray[PackedByteArray]) {.loadfrom("set_buffers", 381264803).}
  proc bufferViews*(self: Ref[GLTFState]): TypedArray[GLTFBufferView] {.loadfrom("get_buffer_views", 2915620761).}
  proc `bufferViews=`*(self: Ref[GLTFState]; bufferViews: TypedArray[GLTFBufferView]) {.loadfrom("set_buffer_views", 381264803).}
  proc accessors*(self: Ref[GLTFState]): TypedArray[GLTFAccessor] {.loadfrom("get_accessors", 2915620761).}
  proc `accessors=`*(self: Ref[GLTFState]; accessors: TypedArray[GLTFAccessor]) {.loadfrom("set_accessors", 381264803).}
  proc meshes*(self: Ref[GLTFState]): TypedArray[GLTFMesh] {.loadfrom("get_meshes", 2915620761).}
  proc `meshes=`*(self: Ref[GLTFState]; meshes: TypedArray[GLTFMesh]) {.loadfrom("set_meshes", 381264803).}
  proc getAnimationPlayersCount*(self: Ref[GLTFState]; idx: int32): int32 {.loadfrom("get_animation_players_count", 3744713108).}
  proc getAnimationPlayer*(self: Ref[GLTFState]; idx: int32): AnimationPlayer {.loadfrom("get_animation_player", 925043400).}
  proc materials*(self: Ref[GLTFState]): TypedArray[Material] {.loadfrom("get_materials", 2915620761).}
  proc `materials=`*(self: Ref[GLTFState]; materials: TypedArray[Material]) {.loadfrom("set_materials", 381264803).}
  proc sceneName*(self: Ref[GLTFState]): String {.loadfrom("get_scene_name", 2841200299).}
  proc `sceneName=`*(self: Ref[GLTFState]; sceneName: String) {.loadfrom("set_scene_name", 83702148).}
  proc basePath*(self: Ref[GLTFState]): String {.loadfrom("get_base_path", 2841200299).}
  proc `basePath=`*(self: Ref[GLTFState]; basePath: String) {.loadfrom("set_base_path", 83702148).}
  proc rootNodes*(self: Ref[GLTFState]): PackedInt32Array {.loadfrom("get_root_nodes", 969006518).}
  proc `rootNodes=`*(self: Ref[GLTFState]; rootNodes: PackedInt32Array) {.loadfrom("set_root_nodes", 3614634198).}
  proc textures*(self: Ref[GLTFState]): TypedArray[GLTFTexture] {.loadfrom("get_textures", 2915620761).}
  proc `textures=`*(self: Ref[GLTFState]; textures: TypedArray[GLTFTexture]) {.loadfrom("set_textures", 381264803).}
  proc textureSamplers*(self: Ref[GLTFState]): TypedArray[GLTFTextureSampler] {.loadfrom("get_texture_samplers", 2915620761).}
  proc `textureSamplers=`*(self: Ref[GLTFState]; textureSamplers: TypedArray[GLTFTextureSampler]) {.loadfrom("set_texture_samplers", 381264803).}
  proc images*(self: Ref[GLTFState]): TypedArray[Texture2D] {.loadfrom("get_images", 2915620761).}
  proc `images=`*(self: Ref[GLTFState]; images: TypedArray[Texture2D]) {.loadfrom("set_images", 381264803).}
  proc skins*(self: Ref[GLTFState]): TypedArray[GLTFSkin] {.loadfrom("get_skins", 2915620761).}
  proc `skins=`*(self: Ref[GLTFState]; skins: TypedArray[GLTFSkin]) {.loadfrom("set_skins", 381264803).}
  proc cameras*(self: Ref[GLTFState]): TypedArray[GLTFCamera] {.loadfrom("get_cameras", 2915620761).}
  proc `cameras=`*(self: Ref[GLTFState]; cameras: TypedArray[GLTFCamera]) {.loadfrom("set_cameras", 381264803).}
  proc lights*(self: Ref[GLTFState]): TypedArray[GLTFLight] {.loadfrom("get_lights", 2915620761).}
  proc `lights=`*(self: Ref[GLTFState]; lights: TypedArray[GLTFLight]) {.loadfrom("set_lights", 381264803).}
  proc uniqueNames*(self: Ref[GLTFState]): TypedArray[String] {.loadfrom("get_unique_names", 2915620761).}
  proc `uniqueNames=`*(self: Ref[GLTFState]; uniqueNames: TypedArray[String]) {.loadfrom("set_unique_names", 381264803).}
  proc uniqueAnimationNames*(self: Ref[GLTFState]): TypedArray[String] {.loadfrom("get_unique_animation_names", 2915620761).}
  proc `uniqueAnimationNames=`*(self: Ref[GLTFState]; uniqueAnimationNames: TypedArray[String]) {.loadfrom("set_unique_animation_names", 381264803).}
  proc skeletons*(self: Ref[GLTFState]): TypedArray[GLTFSkeleton] {.loadfrom("get_skeletons", 2915620761).}
  proc `skeletons=`*(self: Ref[GLTFState]; skeletons: TypedArray[GLTFSkeleton]) {.loadfrom("set_skeletons", 381264803).}
  proc createAnimations*(self: Ref[GLTFState]): Bool {.loadfrom("get_create_animations", 2240911060).}
  proc `createAnimations=`*(self: Ref[GLTFState]; createAnimations: Bool) {.loadfrom("set_create_animations", 2586408642).}
  proc animations*(self: Ref[GLTFState]): TypedArray[GLTFAnimation] {.loadfrom("get_animations", 2915620761).}
  proc `animations=`*(self: Ref[GLTFState]; animations: TypedArray[GLTFAnimation]) {.loadfrom("set_animations", 381264803).}
  proc getSceneNode*(self: Ref[GLTFState]; idx: int32): Node {.loadfrom("get_scene_node", 4253421667).}
  proc getNodeIndex*(self: Ref[GLTFState]; sceneNode: ptr Node): int32 {.loadfrom("get_node_index", 1205807060).}
  proc getAdditionalData*(self: Ref[GLTFState]; extensionName: StringName): Variant {.loadfrom("get_additional_data", 2138907829).}
  proc setAdditionalData*(self: Ref[GLTFState]; extensionName: StringName; additionalData: ptr Variant) {.loadfrom("set_additional_data", 3776071444).}
  proc handleBinaryImage*(self: Ref[GLTFState]): int32 {.loadfrom("get_handle_binary_image", 2455072627).}
  proc `handleBinaryImage=`*(self: Ref[GLTFState]; `method`: int32) {.loadfrom("set_handle_binary_image", 1286410249).}

# GLTFTexture
define_godot_engine_class_essencials(GLTFTexture, Resource)
GLTFTexture.memberProcs:
  proc srcImage*(self: Ref[GLTFTexture]): int32 {.loadfrom("get_src_image", 3905245786).}
  proc `srcImage=`*(self: Ref[GLTFTexture]; srcImage: int32) {.loadfrom("set_src_image", 1286410249).}
  proc sampler*(self: Ref[GLTFTexture]): int32 {.loadfrom("get_sampler", 3905245786).}
  proc `sampler=`*(self: Ref[GLTFTexture]; sampler: int32) {.loadfrom("set_sampler", 1286410249).}

# GLTFTextureSampler
define_godot_engine_class_essencials(GLTFTextureSampler, Resource)
GLTFTextureSampler.memberProcs:
  proc magFilter*(self: Ref[GLTFTextureSampler]): int32 {.loadfrom("get_mag_filter", 3905245786).}
  proc `magFilter=`*(self: Ref[GLTFTextureSampler]; filterMode: int32) {.loadfrom("set_mag_filter", 1286410249).}
  proc minFilter*(self: Ref[GLTFTextureSampler]): int32 {.loadfrom("get_min_filter", 3905245786).}
  proc `minFilter=`*(self: Ref[GLTFTextureSampler]; filterMode: int32) {.loadfrom("set_min_filter", 1286410249).}
  proc wrapS*(self: Ref[GLTFTextureSampler]): int32 {.loadfrom("get_wrap_s", 3905245786).}
  proc `wrapS=`*(self: Ref[GLTFTextureSampler]; wrapMode: int32) {.loadfrom("set_wrap_s", 1286410249).}
  proc wrapT*(self: Ref[GLTFTextureSampler]): int32 {.loadfrom("get_wrap_t", 3905245786).}
  proc `wrapT=`*(self: Ref[GLTFTextureSampler]; wrapMode: int32) {.loadfrom("set_wrap_t", 1286410249).}

# Gradient
define_godot_engine_class_essencials(Gradient, Resource)
Gradient.memberProcs:
  proc addPoint*(self: Ref[Gradient]; offset: Float; color: Color) {.loadfrom("add_point", 3629403827).}
  proc removePoint*(self: Ref[Gradient]; point: int32) {.loadfrom("remove_point", 1286410249).}
  proc setOffset*(self: Ref[Gradient]; point: int32; offset: Float) {.loadfrom("set_offset", 1602489585).}
  proc getOffset*(self: Ref[Gradient]; point: int32): Float {.loadfrom("get_offset", 4025615559).}
  proc reverse*(self: Ref[Gradient]) {.loadfrom("reverse", 3218959716).}
  proc setColor*(self: Ref[Gradient]; point: int32; color: Color) {.loadfrom("set_color", 2878471219).}
  proc getColor*(self: Ref[Gradient]; point: int32): Color {.loadfrom("get_color", 2624840992).}
  proc sample*(self: Ref[Gradient]; offset: Float): Color {.loadfrom("sample", 1250405064).}
  proc getPointCount*(self: Ref[Gradient]): int32 {.loadfrom("get_point_count", 3905245786).}
  proc `offsets=`*(self: Ref[Gradient]; offsets: PackedFloat32Array) {.loadfrom("set_offsets", 2899603908).}
  proc offsets*(self: Ref[Gradient]): PackedFloat32Array {.loadfrom("get_offsets", 675695659).}
  proc `colors=`*(self: Ref[Gradient]; colors: PackedColorArray) {.loadfrom("set_colors", 3546319833).}
  proc colors*(self: Ref[Gradient]): PackedColorArray {.loadfrom("get_colors", 1392750486).}
  proc `interpolationMode=`*(self: Ref[Gradient]; interpolationMode: Gradient|>InterpolationMode) {.loadfrom("set_interpolation_mode", 1971444490).}
  proc interpolationMode*(self: Ref[Gradient]): Gradient|>InterpolationMode {.loadfrom("get_interpolation_mode", 3674172981).}
  proc `interpolationColorSpace=`*(self: Ref[Gradient]; interpolationColorSpace: Gradient|>ColorSpace) {.loadfrom("set_interpolation_color_space", 3685995981).}
  proc interpolationColorSpace*(self: Ref[Gradient]): Gradient|>ColorSpace {.loadfrom("get_interpolation_color_space", 1538296000).}

# Image
define_godot_engine_class_essencials(Image, Resource)
Image.memberProcs:
  proc getWidth*(self: Ref[Image]): int32 {.loadfrom("get_width", 3905245786).}
  proc getHeight*(self: Ref[Image]): int32 {.loadfrom("get_height", 3905245786).}
  proc getSize*(self: Ref[Image]): Vector2i {.loadfrom("get_size", 3690982128).}
  proc hasMipmaps*(self: Ref[Image]): Bool {.loadfrom("has_mipmaps", 36873697).}
  proc getFormat*(self: Ref[Image]): Image|>Format {.loadfrom("get_format", 3847873762).}
  proc getData*(self: Ref[Image]): PackedByteArray {.loadfrom("get_data", 2362200018).}
  proc convert*(self: Ref[Image]; format: Image|>Format) {.loadfrom("convert", 2120693146).}
  proc getMipmapOffset*(self: Ref[Image]; mipmap: int32): int32 {.loadfrom("get_mipmap_offset", 923996154).}
  proc resizeToPo2*(self: Ref[Image]; square: Bool = false; interpolation: Image|>Interpolation = interpolateBilinear) {.loadfrom("resize_to_po2", 4189212329).}
  proc resize*(self: Ref[Image]; width: int32; height: int32; interpolation: Image|>Interpolation = interpolateBilinear) {.loadfrom("resize", 2461393748).}
  proc shrinkX2*(self: Ref[Image]) {.loadfrom("shrink_x2", 3218959716).}
  proc crop*(self: Ref[Image]; width: int32; height: int32) {.loadfrom("crop", 3937882851).}
  proc flipX*(self: Ref[Image]) {.loadfrom("flip_x", 3218959716).}
  proc flipY*(self: Ref[Image]) {.loadfrom("flip_y", 3218959716).}
  proc generateMipmaps*(self: Ref[Image]; renormalize: Bool = false): Error {.loadfrom("generate_mipmaps", 1633102583).}
  proc clearMipmaps*(self: Ref[Image]) {.loadfrom("clear_mipmaps", 3218959716).}
  proc create*(width: int32; height: int32; useMipmaps: Bool; format: Image|>Format): Ref[Image] {.staticOf: Image, loadfrom("create", 986942177).}
  proc createFromData*(width: int32; height: int32; useMipmaps: Bool; format: Image|>Format; data: PackedByteArray): Ref[Image] {.staticOf: Image, loadfrom("create_from_data", 299398494).}
  proc setData*(self: Ref[Image]; width: int32; height: int32; useMipmaps: Bool; format: Image|>Format; data: PackedByteArray) {.loadfrom("set_data", 2740482212).}
  proc isEmpty*(self: Ref[Image]): Bool {.loadfrom("is_empty", 36873697).}
  proc load*(self: Ref[Image]; path: String): Error {.loadfrom("load", 166001499).}
  proc loadFromFile*(path: String): Ref[Image] {.staticOf: Image, loadfrom("load_from_file", 736337515).}
  proc savePng*(self: Ref[Image]; path: String): Error {.loadfrom("save_png", 2113323047).}
  proc savePngToBuffer*(self: Ref[Image]): PackedByteArray {.loadfrom("save_png_to_buffer", 2362200018).}
  proc saveJpg*(self: Ref[Image]; path: String; quality: Float = 0.75): Error {.loadfrom("save_jpg", 578836491).}
  proc saveJpgToBuffer*(self: Ref[Image]; quality: Float = 0.75): PackedByteArray {.loadfrom("save_jpg_to_buffer", 592235273).}
  proc saveExr*(self: Ref[Image]; path: String; grayscale: Bool = false): Error {.loadfrom("save_exr", 3108122999).}
  proc saveExrToBuffer*(self: Ref[Image]; grayscale: Bool = false): PackedByteArray {.loadfrom("save_exr_to_buffer", 3178917920).}
  proc saveWebp*(self: Ref[Image]; path: String; lossy: Bool = false; quality: Float = 0.75): Error {.loadfrom("save_webp", 3594949219).}
  proc saveWebpToBuffer*(self: Ref[Image]; lossy: Bool = false; quality: Float = 0.75): PackedByteArray {.loadfrom("save_webp_to_buffer", 1214628238).}
  proc detectAlpha*(self: Ref[Image]): Image|>AlphaMode {.loadfrom("detect_alpha", 2030116505).}
  proc isInvisible*(self: Ref[Image]): Bool {.loadfrom("is_invisible", 36873697).}
  proc detectUsedChannels*(self: Ref[Image]; source: Image|>CompressSource = compressSourceGeneric): Image|>UsedChannels {.loadfrom("detect_used_channels", 2703139984).}
  proc compress*(self: Ref[Image]; mode: Image|>CompressMode; source: Image|>CompressSource = compressSourceGeneric; astcFormat: Image|>ASTCFormat = astcFormat4x4): Error {.loadfrom("compress", 4094210332).}
  proc compressFromChannels*(self: Ref[Image]; mode: Image|>CompressMode; channels: Image|>UsedChannels; astcFormat: Image|>ASTCFormat = astcFormat4x4): Error {.loadfrom("compress_from_channels", 279105990).}
  proc decompress*(self: Ref[Image]): Error {.loadfrom("decompress", 166280745).}
  proc isCompressed*(self: Ref[Image]): Bool {.loadfrom("is_compressed", 36873697).}
  proc rotate90*(self: Ref[Image]; direction: ClockDirection) {.loadfrom("rotate_90", 1901204267).}
  proc rotate180*(self: Ref[Image]) {.loadfrom("rotate_180", 3218959716).}
  proc fixAlphaEdges*(self: Ref[Image]) {.loadfrom("fix_alpha_edges", 3218959716).}
  proc premultiplyAlpha*(self: Ref[Image]) {.loadfrom("premultiply_alpha", 3218959716).}
  proc srgbToLinear*(self: Ref[Image]) {.loadfrom("srgb_to_linear", 3218959716).}
  proc normalMapToXy*(self: Ref[Image]) {.loadfrom("normal_map_to_xy", 3218959716).}
  proc rgbeToSrgb*(self: Ref[Image]): Ref[Image] {.loadfrom("rgbe_to_srgb", 564927088).}
  proc bumpMapToNormalMap*(self: Ref[Image]; bumpScale: Float = 1.0) {.loadfrom("bump_map_to_normal_map", 3423495036).}
  proc computeImageMetrics*(self: Ref[Image]; comparedImage: Ref[Image]; useLuma: Bool): Dictionary {.loadfrom("compute_image_metrics", 3080961247).}
  proc blitRect*(self: Ref[Image]; src: Ref[Image]; srcRect: Rect2i; dst: Vector2i) {.loadfrom("blit_rect", 2903928755).}
  proc blitRectMask*(self: Ref[Image]; src: Ref[Image]; mask: Ref[Image]; srcRect: Rect2i; dst: Vector2i) {.loadfrom("blit_rect_mask", 3383581145).}
  proc blendRect*(self: Ref[Image]; src: Ref[Image]; srcRect: Rect2i; dst: Vector2i) {.loadfrom("blend_rect", 2903928755).}
  proc blendRectMask*(self: Ref[Image]; src: Ref[Image]; mask: Ref[Image]; srcRect: Rect2i; dst: Vector2i) {.loadfrom("blend_rect_mask", 3383581145).}
  proc fill*(self: Ref[Image]; color: Color) {.loadfrom("fill", 2920490490).}
  proc fillRect*(self: Ref[Image]; rect: Rect2i; color: Color) {.loadfrom("fill_rect", 514693913).}
  proc getUsedRect*(self: Ref[Image]): Rect2i {.loadfrom("get_used_rect", 410525958).}
  proc getRegion*(self: Ref[Image]; region: Rect2i): Ref[Image] {.loadfrom("get_region", 2601441065).}
  proc copyFrom*(self: Ref[Image]; src: Ref[Image]) {.loadfrom("copy_from", 532598488).}
  proc getPixelv*(self: Ref[Image]; point: Vector2i): Color {.loadfrom("get_pixelv", 1532707496).}
  proc getPixel*(self: Ref[Image]; x: int32; y: int32): Color {.loadfrom("get_pixel", 2165839948).}
  proc setPixelv*(self: Ref[Image]; point: Vector2i; color: Color) {.loadfrom("set_pixelv", 287851464).}
  proc setPixel*(self: Ref[Image]; x: int32; y: int32; color: Color) {.loadfrom("set_pixel", 3733378741).}
  proc adjustBcs*(self: Ref[Image]; brightness: Float; contrast: Float; saturation: Float) {.loadfrom("adjust_bcs", 2385087082).}
  proc loadPngFromBuffer*(self: Ref[Image]; buffer: PackedByteArray): Error {.loadfrom("load_png_from_buffer", 680677267).}
  proc loadJpgFromBuffer*(self: Ref[Image]; buffer: PackedByteArray): Error {.loadfrom("load_jpg_from_buffer", 680677267).}
  proc loadWebpFromBuffer*(self: Ref[Image]; buffer: PackedByteArray): Error {.loadfrom("load_webp_from_buffer", 680677267).}
  proc loadTgaFromBuffer*(self: Ref[Image]; buffer: PackedByteArray): Error {.loadfrom("load_tga_from_buffer", 680677267).}
  proc loadBmpFromBuffer*(self: Ref[Image]; buffer: PackedByteArray): Error {.loadfrom("load_bmp_from_buffer", 680677267).}

# ImporterMesh
define_godot_engine_class_essencials(ImporterMesh, Resource)
ImporterMesh.memberProcs:
  proc addBlendShape*(self: Ref[ImporterMesh]; name: String) {.loadfrom("add_blend_shape", 83702148).}
  proc getBlendShapeCount*(self: Ref[ImporterMesh]): int32 {.loadfrom("get_blend_shape_count", 3905245786).}
  proc getBlendShapeName*(self: Ref[ImporterMesh]; blendShapeIdx: int32): String {.loadfrom("get_blend_shape_name", 844755477).}
  proc setBlendShapeMode*(self: Ref[ImporterMesh]; mode: Mesh|>BlendShapeMode) {.loadfrom("set_blend_shape_mode", 227983991).}
  proc getBlendShapeMode*(self: Ref[ImporterMesh]): Mesh|>BlendShapeMode {.loadfrom("get_blend_shape_mode", 836485024).}
  proc addSurface*(self: Ref[ImporterMesh]; primitive: Mesh|>PrimitiveType; arrays: Array; blendShapes: TypedArray[Array] = TypedArray|>init[Array](); lods: Dictionary = Dictionary|>init(); material: Ref[Material] = default Ref[Material]; name: String = ""; flags: uint32 = 0'u32) {.loadfrom("add_surface", 4122361985).}
  proc getSurfaceCount*(self: Ref[ImporterMesh]): int32 {.loadfrom("get_surface_count", 3905245786).}
  proc getSurfacePrimitiveType*(self: Ref[ImporterMesh]; surfaceIdx: int32): Mesh|>PrimitiveType {.loadfrom("get_surface_primitive_type", 3552571330).}
  proc getSurfaceName*(self: Ref[ImporterMesh]; surfaceIdx: int32): String {.loadfrom("get_surface_name", 844755477).}
  proc getSurfaceArrays*(self: Ref[ImporterMesh]; surfaceIdx: int32): Array {.loadfrom("get_surface_arrays", 663333327).}
  proc getSurfaceBlendShapeArrays*(self: Ref[ImporterMesh]; surfaceIdx: int32; blendShapeIdx: int32): Array {.loadfrom("get_surface_blend_shape_arrays", 2345056839).}
  proc getSurfaceLodCount*(self: Ref[ImporterMesh]; surfaceIdx: int32): int32 {.loadfrom("get_surface_lod_count", 923996154).}
  proc getSurfaceLodSize*(self: Ref[ImporterMesh]; surfaceIdx: int32; lodIdx: int32): Float {.loadfrom("get_surface_lod_size", 3085491603).}
  proc getSurfaceLodIndices*(self: Ref[ImporterMesh]; surfaceIdx: int32; lodIdx: int32): PackedInt32Array {.loadfrom("get_surface_lod_indices", 1265128013).}
  proc getSurfaceMaterial*(self: Ref[ImporterMesh]; surfaceIdx: int32): Ref[Material] {.loadfrom("get_surface_material", 2897466400).}
  proc getSurfaceFormat*(self: Ref[ImporterMesh]; surfaceIdx: int32): uint32 {.loadfrom("get_surface_format", 923996154).}
  proc setSurfaceName*(self: Ref[ImporterMesh]; surfaceIdx: int32; name: String) {.loadfrom("set_surface_name", 501894301).}
  proc setSurfaceMaterial*(self: Ref[ImporterMesh]; surfaceIdx: int32; material: Ref[Material]) {.loadfrom("set_surface_material", 3671737478).}
  proc generateLods*(self: Ref[ImporterMesh]; normalMergeAngle: Float; normalSplitAngle: Float; boneTransformArray: Array) {.loadfrom("generate_lods", 2491878677).}
  proc getMesh*(self: Ref[ImporterMesh]; baseMesh: Ref[ArrayMesh] = default Ref[ArrayMesh]): Ref[ArrayMesh] {.loadfrom("get_mesh", 1457573577).}
  proc clear*(self: Ref[ImporterMesh]) {.loadfrom("clear", 3218959716).}
  proc setLightmapSizeHint*(self: Ref[ImporterMesh]; size: Vector2i) {.loadfrom("set_lightmap_size_hint", 1130785943).}
  proc getLightmapSizeHint*(self: Ref[ImporterMesh]): Vector2i {.loadfrom("get_lightmap_size_hint", 3690982128).}

# InputEvent
define_godot_engine_class_essencials(InputEvent, Resource)
InputEvent.memberProcs:
  proc `device=`*(self: Ref[InputEvent]; device: int32) {.loadfrom("set_device", 1286410249).}
  proc device*(self: Ref[InputEvent]): int32 {.loadfrom("get_device", 3905245786).}
  proc isAction*(self: Ref[InputEvent]; action: StringName; exactMatch: Bool = false): Bool {.loadfrom("is_action", 1558498928).}
  proc isActionPressed*(self: Ref[InputEvent]; action: StringName; allowEcho: Bool = false; exactMatch: Bool = false): Bool {.loadfrom("is_action_pressed", 1631499404).}
  proc isActionReleased*(self: Ref[InputEvent]; action: StringName; exactMatch: Bool = false): Bool {.loadfrom("is_action_released", 1558498928).}
  proc getActionStrength*(self: Ref[InputEvent]; action: StringName; exactMatch: Bool = false): Float {.loadfrom("get_action_strength", 801543509).}
  proc isCanceled*(self: Ref[InputEvent]): Bool {.loadfrom("is_canceled", 36873697).}
  proc isPressed*(self: Ref[InputEvent]): Bool {.loadfrom("is_pressed", 36873697).}
  proc isReleased*(self: Ref[InputEvent]): Bool {.loadfrom("is_released", 36873697).}
  proc isEcho*(self: Ref[InputEvent]): Bool {.loadfrom("is_echo", 36873697).}
  proc asText*(self: Ref[InputEvent]): String {.loadfrom("as_text", 201670096).}
  proc isMatch*(self: Ref[InputEvent]; event: Ref[InputEvent]; exactMatch: Bool = true): Bool {.loadfrom("is_match", 3392494811).}
  proc isActionType*(self: Ref[InputEvent]): Bool {.loadfrom("is_action_type", 36873697).}
  proc accumulate*(self: Ref[InputEvent]; withEvent: Ref[InputEvent]): Bool {.loadfrom("accumulate", 1062211774).}
  proc xformedBy*(self: Ref[InputEvent]; xform: Transform2D; localOfs: Vector2 = gdvec(0, 0)): Ref[InputEvent] {.loadfrom("xformed_by", 2747409789).}

# JSON
define_godot_engine_class_essencials(JSON, Resource)
JSON.memberProcs:
  proc stringify*(data: ptr Variant; indent: String = ""; sortKeys: Bool = true; fullPrecision: Bool = false): String {.staticOf: JSON, loadfrom("stringify", 2656701787).}
  proc parseString*(jsonString: String): Variant {.staticOf: JSON, loadfrom("parse_string", 309047738).}
  proc parse*(self: Ref[JSON]; jsonText: String; keepText: Bool = false): Error {.loadfrom("parse", 885841341).}
  proc data*(self: Ref[JSON]): Variant {.loadfrom("get_data", 1214101251).}
  proc `data=`*(self: Ref[JSON]; data: ptr Variant) {.loadfrom("set_data", 1114965689).}
  proc getParsedText*(self: Ref[JSON]): String {.loadfrom("get_parsed_text", 201670096).}
  proc getErrorLine*(self: Ref[JSON]): int32 {.loadfrom("get_error_line", 3905245786).}
  proc getErrorMessage*(self: Ref[JSON]): String {.loadfrom("get_error_message", 201670096).}

# LabelSettings
define_godot_engine_class_essencials(LabelSettings, Resource)
LabelSettings.memberProcs:
  proc `lineSpacing=`*(self: Ref[LabelSettings]; spacing: Float) {.loadfrom("set_line_spacing", 373806689).}
  proc lineSpacing*(self: Ref[LabelSettings]): Float {.loadfrom("get_line_spacing", 1740695150).}
  proc `font=`*(self: Ref[LabelSettings]; font: Ref[Font]) {.loadfrom("set_font", 1262170328).}
  proc font*(self: Ref[LabelSettings]): Ref[Font] {.loadfrom("get_font", 3229501585).}
  proc `fontSize=`*(self: Ref[LabelSettings]; size: int32) {.loadfrom("set_font_size", 1286410249).}
  proc fontSize*(self: Ref[LabelSettings]): int32 {.loadfrom("get_font_size", 3905245786).}
  proc `fontColor=`*(self: Ref[LabelSettings]; color: Color) {.loadfrom("set_font_color", 2920490490).}
  proc fontColor*(self: Ref[LabelSettings]): Color {.loadfrom("get_font_color", 3444240500).}
  proc `outlineSize=`*(self: Ref[LabelSettings]; size: int32) {.loadfrom("set_outline_size", 1286410249).}
  proc outlineSize*(self: Ref[LabelSettings]): int32 {.loadfrom("get_outline_size", 3905245786).}
  proc `outlineColor=`*(self: Ref[LabelSettings]; color: Color) {.loadfrom("set_outline_color", 2920490490).}
  proc outlineColor*(self: Ref[LabelSettings]): Color {.loadfrom("get_outline_color", 3444240500).}
  proc `shadowSize=`*(self: Ref[LabelSettings]; size: int32) {.loadfrom("set_shadow_size", 1286410249).}
  proc shadowSize*(self: Ref[LabelSettings]): int32 {.loadfrom("get_shadow_size", 3905245786).}
  proc `shadowColor=`*(self: Ref[LabelSettings]; color: Color) {.loadfrom("set_shadow_color", 2920490490).}
  proc shadowColor*(self: Ref[LabelSettings]): Color {.loadfrom("get_shadow_color", 3444240500).}
  proc `shadowOffset=`*(self: Ref[LabelSettings]; offset: Vector2) {.loadfrom("set_shadow_offset", 743155724).}
  proc shadowOffset*(self: Ref[LabelSettings]): Vector2 {.loadfrom("get_shadow_offset", 3341600327).}

# LightmapGIData
define_godot_engine_class_essencials(LightmapGIData, Resource)
LightmapGIData.memberProcs:
  proc `lightTexture=`*(self: Ref[LightmapGIData]; lightTexture: Ref[TextureLayered]) {.loadfrom("set_light_texture", 1278366092).}
  proc lightTexture*(self: Ref[LightmapGIData]): Ref[TextureLayered] {.loadfrom("get_light_texture", 3984243839).}
  proc `usesSphericalHarmonics=`*(self: Ref[LightmapGIData]; usesSphericalHarmonics: Bool) {.loadfrom("set_uses_spherical_harmonics", 2586408642).}
  proc isUsingSphericalHarmonics*(self: Ref[LightmapGIData]): Bool {.loadfrom("is_using_spherical_harmonics", 36873697).}
  proc addUser*(self: Ref[LightmapGIData]; path: NodePath; uvScale: Rect2; sliceIndex: int32; subInstance: int32) {.loadfrom("add_user", 4272570515).}
  proc getUserCount*(self: Ref[LightmapGIData]): int32 {.loadfrom("get_user_count", 3905245786).}
  proc getUserPath*(self: Ref[LightmapGIData]; userIdx: int32): NodePath {.loadfrom("get_user_path", 408788394).}
  proc clearUsers*(self: Ref[LightmapGIData]) {.loadfrom("clear_users", 3218959716).}

# Material
define_godot_engine_class_essencials(Material, Resource)
method getShaderRid*(self: Ref[Material]): RID {.base.} = (discard)
method getShaderMode*(self: Ref[Material]): Shader|>Mode {.base.} = (discard)
method canDoNextPass*(self: Ref[Material]): Bool {.base.} = (discard)
method canUseRenderPriority*(self: Ref[Material]): Bool {.base.} = (discard)
Material.memberProcs:
  proc `nextPass=`*(self: Ref[Material]; nextPass: Ref[Material]) {.loadfrom("set_next_pass", 2757459619).}
  proc nextPass*(self: Ref[Material]): Ref[Material] {.loadfrom("get_next_pass", 5934680).}
  proc `renderPriority=`*(self: Ref[Material]; priority: int32) {.loadfrom("set_render_priority", 1286410249).}
  proc renderPriority*(self: Ref[Material]): int32 {.loadfrom("get_render_priority", 3905245786).}
  proc inspectNativeShaderCode*(self: Ref[Material]) {.loadfrom("inspect_native_shader_code", 3218959716).}
  proc createPlaceholder*(self: Ref[Material]): Ref[Resource] {.loadfrom("create_placeholder", 121922552).}

# Mesh
define_godot_engine_class_essencials(Mesh, Resource)
method getSurfaceCount*(self: Ref[Mesh]): int32 {.base.} = (discard)
method surfaceGetArrayLen*(self: Ref[Mesh]; index: int32): int32 {.base.} = (discard)
method surfaceGetArrayIndexLen*(self: Ref[Mesh]; index: int32): int32 {.base.} = (discard)
method surfaceGetArrays*(self: Ref[Mesh]; index: int32): Array {.base.} = (discard)
method surfaceGetBlendShapeArrays*(self: Ref[Mesh]; index: int32): TypedArray[Array] {.base.} = (discard)
method surfaceGetLods*(self: Ref[Mesh]; index: int32): Dictionary {.base.} = (discard)
method surfaceGetFormat*(self: Ref[Mesh]; index: int32): uint32 {.base.} = (discard)
method surfaceGetPrimitiveType*(self: Ref[Mesh]; index: int32): uint32 {.base.} = (discard)
method surfaceSetMaterial*(self: Ref[Mesh]; index: int32; material: Ref[Material]) {.base.} = (discard)
method surfaceGetMaterial*(self: Ref[Mesh]; index: int32): Ref[Material] {.base.} = (discard)
method getBlendShapeCount*(self: Ref[Mesh]): int32 {.base.} = (discard)
method getBlendShapeName*(self: Ref[Mesh]; index: int32): StringName {.base.} = (discard)
method setBlendShapeName*(self: Ref[Mesh]; index: int32; name: StringName) {.base.} = (discard)
method getAabb*(self: Ref[Mesh]): AABB {.base.} = (discard)
Mesh.memberProcs:
  proc `lightmapSizeHint=`*(self: Ref[Mesh]; size: Vector2i) {.loadfrom("set_lightmap_size_hint", 1130785943).}
  proc lightmapSizeHint*(self: Ref[Mesh]): Vector2i {.loadfrom("get_lightmap_size_hint", 3690982128).}
  proc getAabb*(self: Ref[Mesh]): AABB {.loadfrom("get_aabb", 1068685055).}
  proc getFaces*(self: Ref[Mesh]): PackedVector3Array {.loadfrom("get_faces", 497664490).}
  proc getSurfaceCount*(self: Ref[Mesh]): int32 {.loadfrom("get_surface_count", 3905245786).}
  proc surfaceGetArrays*(self: Ref[Mesh]; surfIdx: int32): Array {.loadfrom("surface_get_arrays", 663333327).}
  proc surfaceGetBlendShapeArrays*(self: Ref[Mesh]; surfIdx: int32): TypedArray[Array] {.loadfrom("surface_get_blend_shape_arrays", 663333327).}
  proc surfaceSetMaterial*(self: Ref[Mesh]; surfIdx: int32; material: Ref[Material]) {.loadfrom("surface_set_material", 3671737478).}
  proc surfaceGetMaterial*(self: Ref[Mesh]; surfIdx: int32): Ref[Material] {.loadfrom("surface_get_material", 2897466400).}
  proc createPlaceholder*(self: Ref[Mesh]): Ref[Resource] {.loadfrom("create_placeholder", 121922552).}
  proc createTrimeshShape*(self: Ref[Mesh]): Ref[ConcavePolygonShape3D] {.loadfrom("create_trimesh_shape", 4160111210).}
  proc createConvexShape*(self: Ref[Mesh]; clean: Bool = true; simplify: Bool = false): Ref[ConvexPolygonShape3D] {.loadfrom("create_convex_shape", 2529984628).}
  proc createOutline*(self: Ref[Mesh]; margin: Float): Ref[Mesh] {.loadfrom("create_outline", 1208642001).}
  proc generateTriangleMesh*(self: Ref[Mesh]): Ref[TriangleMesh] {.loadfrom("generate_triangle_mesh", 3476533166).}

# MeshLibrary
define_godot_engine_class_essencials(MeshLibrary, Resource)
MeshLibrary.memberProcs:
  proc createItem*(self: Ref[MeshLibrary]; id: int32) {.loadfrom("create_item", 1286410249).}
  proc setItemName*(self: Ref[MeshLibrary]; id: int32; name: String) {.loadfrom("set_item_name", 501894301).}
  proc setItemMesh*(self: Ref[MeshLibrary]; id: int32; mesh: Ref[Mesh]) {.loadfrom("set_item_mesh", 969122797).}
  proc setItemMeshTransform*(self: Ref[MeshLibrary]; id: int32; meshTransform: Transform3D) {.loadfrom("set_item_mesh_transform", 3616898986).}
  proc setItemNavigationMesh*(self: Ref[MeshLibrary]; id: int32; navigationMesh: Ref[NavigationMesh]) {.loadfrom("set_item_navigation_mesh", 3483353960).}
  proc setItemNavigationMeshTransform*(self: Ref[MeshLibrary]; id: int32; navigationMesh: Transform3D) {.loadfrom("set_item_navigation_mesh_transform", 3616898986).}
  proc setItemNavigationLayers*(self: Ref[MeshLibrary]; id: int32; navigationLayers: uint32) {.loadfrom("set_item_navigation_layers", 3937882851).}
  proc setItemShapes*(self: Ref[MeshLibrary]; id: int32; shapes: Array) {.loadfrom("set_item_shapes", 537221740).}
  proc setItemPreview*(self: Ref[MeshLibrary]; id: int32; texture: Ref[Texture2D]) {.loadfrom("set_item_preview", 666127730).}
  proc getItemName*(self: Ref[MeshLibrary]; id: int32): String {.loadfrom("get_item_name", 844755477).}
  proc getItemMesh*(self: Ref[MeshLibrary]; id: int32): Ref[Mesh] {.loadfrom("get_item_mesh", 1576363275).}
  proc getItemMeshTransform*(self: Ref[MeshLibrary]; id: int32): Transform3D {.loadfrom("get_item_mesh_transform", 1965739696).}
  proc getItemNavigationMesh*(self: Ref[MeshLibrary]; id: int32): Ref[NavigationMesh] {.loadfrom("get_item_navigation_mesh", 2729647406).}
  proc getItemNavigationMeshTransform*(self: Ref[MeshLibrary]; id: int32): Transform3D {.loadfrom("get_item_navigation_mesh_transform", 1965739696).}
  proc getItemNavigationLayers*(self: Ref[MeshLibrary]; id: int32): uint32 {.loadfrom("get_item_navigation_layers", 923996154).}
  proc getItemShapes*(self: Ref[MeshLibrary]; id: int32): Array {.loadfrom("get_item_shapes", 663333327).}
  proc getItemPreview*(self: Ref[MeshLibrary]; id: int32): Ref[Texture2D] {.loadfrom("get_item_preview", 3536238170).}
  proc removeItem*(self: Ref[MeshLibrary]; id: int32) {.loadfrom("remove_item", 1286410249).}
  proc findItemByName*(self: Ref[MeshLibrary]; name: String): int32 {.loadfrom("find_item_by_name", 1321353865).}
  proc clear*(self: Ref[MeshLibrary]) {.loadfrom("clear", 3218959716).}
  proc getItemList*(self: Ref[MeshLibrary]): PackedInt32Array {.loadfrom("get_item_list", 1930428628).}
  proc getLastUnusedItemId*(self: Ref[MeshLibrary]): int32 {.loadfrom("get_last_unused_item_id", 3905245786).}

# MissingResource
define_godot_engine_class_essencials(MissingResource, Resource)
MissingResource.memberProcs:
  proc `originalClass=`*(self: Ref[MissingResource]; name: String) {.loadfrom("set_original_class", 83702148).}
  proc originalClass*(self: Ref[MissingResource]): String {.loadfrom("get_original_class", 201670096).}
  proc `recordingProperties=`*(self: Ref[MissingResource]; enable: Bool) {.loadfrom("set_recording_properties", 2586408642).}
  proc isRecordingProperties*(self: Ref[MissingResource]): Bool {.loadfrom("is_recording_properties", 36873697).}

# MultiMesh
define_godot_engine_class_essencials(MultiMesh, Resource)
MultiMesh.memberProcs:
  proc `mesh=`*(self: Ref[MultiMesh]; mesh: Ref[Mesh]) {.loadfrom("set_mesh", 194775623).}
  proc mesh*(self: Ref[MultiMesh]): Ref[Mesh] {.loadfrom("get_mesh", 1808005922).}
  proc `useColors=`*(self: Ref[MultiMesh]; enable: Bool) {.loadfrom("set_use_colors", 2586408642).}
  proc isUsingColors*(self: Ref[MultiMesh]): Bool {.loadfrom("is_using_colors", 36873697).}
  proc `useCustomData=`*(self: Ref[MultiMesh]; enable: Bool) {.loadfrom("set_use_custom_data", 2586408642).}
  proc isUsingCustomData*(self: Ref[MultiMesh]): Bool {.loadfrom("is_using_custom_data", 36873697).}
  proc `transformFormat=`*(self: Ref[MultiMesh]; format: MultiMesh|>TransformFormat) {.loadfrom("set_transform_format", 2404750322).}
  proc transformFormat*(self: Ref[MultiMesh]): MultiMesh|>TransformFormat {.loadfrom("get_transform_format", 2444156481).}
  proc `instanceCount=`*(self: Ref[MultiMesh]; count: int32) {.loadfrom("set_instance_count", 1286410249).}
  proc instanceCount*(self: Ref[MultiMesh]): int32 {.loadfrom("get_instance_count", 3905245786).}
  proc `visibleInstanceCount=`*(self: Ref[MultiMesh]; count: int32) {.loadfrom("set_visible_instance_count", 1286410249).}
  proc visibleInstanceCount*(self: Ref[MultiMesh]): int32 {.loadfrom("get_visible_instance_count", 3905245786).}
  proc setInstanceTransform*(self: Ref[MultiMesh]; instance: int32; transform: Transform3D) {.loadfrom("set_instance_transform", 3616898986).}
  proc setInstanceTransform2d*(self: Ref[MultiMesh]; instance: int32; transform: Transform2D) {.loadfrom("set_instance_transform_2d", 30160968).}
  proc getInstanceTransform*(self: Ref[MultiMesh]; instance: int32): Transform3D {.loadfrom("get_instance_transform", 1965739696).}
  proc getInstanceTransform2d*(self: Ref[MultiMesh]; instance: int32): Transform2D {.loadfrom("get_instance_transform_2d", 3836996910).}
  proc setInstanceColor*(self: Ref[MultiMesh]; instance: int32; color: Color) {.loadfrom("set_instance_color", 2878471219).}
  proc getInstanceColor*(self: Ref[MultiMesh]; instance: int32): Color {.loadfrom("get_instance_color", 3457211756).}
  proc setInstanceCustomData*(self: Ref[MultiMesh]; instance: int32; customData: Color) {.loadfrom("set_instance_custom_data", 2878471219).}
  proc getInstanceCustomData*(self: Ref[MultiMesh]; instance: int32): Color {.loadfrom("get_instance_custom_data", 3457211756).}
  proc getAabb*(self: Ref[MultiMesh]): AABB {.loadfrom("get_aabb", 1068685055).}
  proc buffer*(self: Ref[MultiMesh]): PackedFloat32Array {.loadfrom("get_buffer", 675695659).}
  proc `buffer=`*(self: Ref[MultiMesh]; buffer: PackedFloat32Array) {.loadfrom("set_buffer", 2899603908).}

# NavigationMesh
define_godot_engine_class_essencials(NavigationMesh, Resource)
NavigationMesh.memberProcs:
  proc `samplePartitionType=`*(self: Ref[NavigationMesh]; samplePartitionType: NavigationMesh|>SamplePartitionType) {.loadfrom("set_sample_partition_type", 2472437533).}
  proc samplePartitionType*(self: Ref[NavigationMesh]): NavigationMesh|>SamplePartitionType {.loadfrom("get_sample_partition_type", 833513918).}
  proc `parsedGeometryType=`*(self: Ref[NavigationMesh]; geometryType: NavigationMesh|>ParsedGeometryType) {.loadfrom("set_parsed_geometry_type", 3064713163).}
  proc parsedGeometryType*(self: Ref[NavigationMesh]): NavigationMesh|>ParsedGeometryType {.loadfrom("get_parsed_geometry_type", 3928011953).}
  proc `collisionMask=`*(self: Ref[NavigationMesh]; mask: uint32) {.loadfrom("set_collision_mask", 1286410249).}
  proc collisionMask*(self: Ref[NavigationMesh]): uint32 {.loadfrom("get_collision_mask", 3905245786).}
  proc setCollisionMaskValue*(self: Ref[NavigationMesh]; layerNumber: int32; value: Bool) {.loadfrom("set_collision_mask_value", 300928843).}
  proc getCollisionMaskValue*(self: Ref[NavigationMesh]; layerNumber: int32): Bool {.loadfrom("get_collision_mask_value", 1116898809).}
  proc `sourceGeometryMode=`*(self: Ref[NavigationMesh]; mask: NavigationMesh|>SourceGeometryMode) {.loadfrom("set_source_geometry_mode", 2700825194).}
  proc sourceGeometryMode*(self: Ref[NavigationMesh]): NavigationMesh|>SourceGeometryMode {.loadfrom("get_source_geometry_mode", 2770484141).}
  proc `sourceGroupName=`*(self: Ref[NavigationMesh]; mask: StringName) {.loadfrom("set_source_group_name", 3304788590).}
  proc sourceGroupName*(self: Ref[NavigationMesh]): StringName {.loadfrom("get_source_group_name", 2002593661).}
  proc `cellSize=`*(self: Ref[NavigationMesh]; cellSize: Float) {.loadfrom("set_cell_size", 373806689).}
  proc cellSize*(self: Ref[NavigationMesh]): Float {.loadfrom("get_cell_size", 1740695150).}
  proc `cellHeight=`*(self: Ref[NavigationMesh]; cellHeight: Float) {.loadfrom("set_cell_height", 373806689).}
  proc cellHeight*(self: Ref[NavigationMesh]): Float {.loadfrom("get_cell_height", 1740695150).}
  proc `agentHeight=`*(self: Ref[NavigationMesh]; agentHeight: Float) {.loadfrom("set_agent_height", 373806689).}
  proc agentHeight*(self: Ref[NavigationMesh]): Float {.loadfrom("get_agent_height", 1740695150).}
  proc `agentRadius=`*(self: Ref[NavigationMesh]; agentRadius: Float) {.loadfrom("set_agent_radius", 373806689).}
  proc agentRadius*(self: Ref[NavigationMesh]): Float {.loadfrom("get_agent_radius", 191475506).}
  proc `agentMaxClimb=`*(self: Ref[NavigationMesh]; agentMaxClimb: Float) {.loadfrom("set_agent_max_climb", 373806689).}
  proc agentMaxClimb*(self: Ref[NavigationMesh]): Float {.loadfrom("get_agent_max_climb", 1740695150).}
  proc `agentMaxSlope=`*(self: Ref[NavigationMesh]; agentMaxSlope: Float) {.loadfrom("set_agent_max_slope", 373806689).}
  proc agentMaxSlope*(self: Ref[NavigationMesh]): Float {.loadfrom("get_agent_max_slope", 1740695150).}
  proc `regionMinSize=`*(self: Ref[NavigationMesh]; regionMinSize: Float) {.loadfrom("set_region_min_size", 373806689).}
  proc regionMinSize*(self: Ref[NavigationMesh]): Float {.loadfrom("get_region_min_size", 1740695150).}
  proc `regionMergeSize=`*(self: Ref[NavigationMesh]; regionMergeSize: Float) {.loadfrom("set_region_merge_size", 373806689).}
  proc regionMergeSize*(self: Ref[NavigationMesh]): Float {.loadfrom("get_region_merge_size", 1740695150).}
  proc `edgeMaxLength=`*(self: Ref[NavigationMesh]; edgeMaxLength: Float) {.loadfrom("set_edge_max_length", 373806689).}
  proc edgeMaxLength*(self: Ref[NavigationMesh]): Float {.loadfrom("get_edge_max_length", 1740695150).}
  proc `edgeMaxError=`*(self: Ref[NavigationMesh]; edgeMaxError: Float) {.loadfrom("set_edge_max_error", 373806689).}
  proc edgeMaxError*(self: Ref[NavigationMesh]): Float {.loadfrom("get_edge_max_error", 1740695150).}
  proc `verticesPerPolygon=`*(self: Ref[NavigationMesh]; verticesPerPolygon: Float) {.loadfrom("set_vertices_per_polygon", 373806689).}
  proc verticesPerPolygon*(self: Ref[NavigationMesh]): Float {.loadfrom("get_vertices_per_polygon", 1740695150).}
  proc `detailSampleDistance=`*(self: Ref[NavigationMesh]; detailSampleDist: Float) {.loadfrom("set_detail_sample_distance", 373806689).}
  proc detailSampleDistance*(self: Ref[NavigationMesh]): Float {.loadfrom("get_detail_sample_distance", 1740695150).}
  proc `detailSampleMaxError=`*(self: Ref[NavigationMesh]; detailSampleMaxError: Float) {.loadfrom("set_detail_sample_max_error", 373806689).}
  proc detailSampleMaxError*(self: Ref[NavigationMesh]): Float {.loadfrom("get_detail_sample_max_error", 1740695150).}
  proc `filterLowHangingObstacles=`*(self: Ref[NavigationMesh]; filterLowHangingObstacles: Bool) {.loadfrom("set_filter_low_hanging_obstacles", 2586408642).}
  proc filterLowHangingObstacles*(self: Ref[NavigationMesh]): Bool {.loadfrom("get_filter_low_hanging_obstacles", 36873697).}
  proc `filterLedgeSpans=`*(self: Ref[NavigationMesh]; filterLedgeSpans: Bool) {.loadfrom("set_filter_ledge_spans", 2586408642).}
  proc filterLedgeSpans*(self: Ref[NavigationMesh]): Bool {.loadfrom("get_filter_ledge_spans", 36873697).}
  proc `filterWalkableLowHeightSpans=`*(self: Ref[NavigationMesh]; filterWalkableLowHeightSpans: Bool) {.loadfrom("set_filter_walkable_low_height_spans", 2586408642).}
  proc filterWalkableLowHeightSpans*(self: Ref[NavigationMesh]): Bool {.loadfrom("get_filter_walkable_low_height_spans", 36873697).}
  proc `filterBakingAabb=`*(self: Ref[NavigationMesh]; bakingAabb: AABB) {.loadfrom("set_filter_baking_aabb", 259215842).}
  proc filterBakingAabb*(self: Ref[NavigationMesh]): AABB {.loadfrom("get_filter_baking_aabb", 1068685055).}
  proc `filterBakingAabbOffset=`*(self: Ref[NavigationMesh]; bakingAabbOffset: Vector3) {.loadfrom("set_filter_baking_aabb_offset", 3460891852).}
  proc filterBakingAabbOffset*(self: Ref[NavigationMesh]): Vector3 {.loadfrom("get_filter_baking_aabb_offset", 3360562783).}
  proc `vertices=`*(self: Ref[NavigationMesh]; vertices: PackedVector3Array) {.loadfrom("set_vertices", 334873810).}
  proc vertices*(self: Ref[NavigationMesh]): PackedVector3Array {.loadfrom("get_vertices", 497664490).}
  proc addPolygon*(self: Ref[NavigationMesh]; polygon: PackedInt32Array) {.loadfrom("add_polygon", 3614634198).}
  proc getPolygonCount*(self: Ref[NavigationMesh]): int32 {.loadfrom("get_polygon_count", 3905245786).}
  proc getPolygon*(self: Ref[NavigationMesh]; idx: int32): PackedInt32Array {.loadfrom("get_polygon", 3668444399).}
  proc clearPolygons*(self: Ref[NavigationMesh]) {.loadfrom("clear_polygons", 3218959716).}
  proc createFromMesh*(self: Ref[NavigationMesh]; mesh: Ref[Mesh]) {.loadfrom("create_from_mesh", 194775623).}

# NavigationMeshSourceGeometryData3D
define_godot_engine_class_essencials(NavigationMeshSourceGeometryData3D, Resource)
NavigationMeshSourceGeometryData3D.memberProcs:
  proc `vertices=`*(self: Ref[NavigationMeshSourceGeometryData3D]; vertices: PackedFloat32Array) {.loadfrom("set_vertices", 2899603908).}
  proc vertices*(self: Ref[NavigationMeshSourceGeometryData3D]): PackedFloat32Array {.loadfrom("get_vertices", 675695659).}
  proc `indices=`*(self: Ref[NavigationMeshSourceGeometryData3D]; indices: PackedInt32Array) {.loadfrom("set_indices", 3614634198).}
  proc indices*(self: Ref[NavigationMeshSourceGeometryData3D]): PackedInt32Array {.loadfrom("get_indices", 1930428628).}
  proc clear*(self: Ref[NavigationMeshSourceGeometryData3D]) {.loadfrom("clear", 3218959716).}
  proc hasData*(self: Ref[NavigationMeshSourceGeometryData3D]): Bool {.loadfrom("has_data", 2240911060).}
  proc addMesh*(self: Ref[NavigationMeshSourceGeometryData3D]; mesh: Ref[Mesh]; xform: Transform3D) {.loadfrom("add_mesh", 975462459).}
  proc addMeshArray*(self: Ref[NavigationMeshSourceGeometryData3D]; meshArray: Array; xform: Transform3D) {.loadfrom("add_mesh_array", 4235710913).}
  proc addFaces*(self: Ref[NavigationMeshSourceGeometryData3D]; faces: PackedVector3Array; xform: Transform3D) {.loadfrom("add_faces", 1440358797).}

# NavigationPolygon
define_godot_engine_class_essencials(NavigationPolygon, Resource)
NavigationPolygon.memberProcs:
  proc `vertices=`*(self: Ref[NavigationPolygon]; vertices: PackedVector2Array) {.loadfrom("set_vertices", 1509147220).}
  proc vertices*(self: Ref[NavigationPolygon]): PackedVector2Array {.loadfrom("get_vertices", 2961356807).}
  proc addPolygon*(self: Ref[NavigationPolygon]; polygon: PackedInt32Array) {.loadfrom("add_polygon", 3614634198).}
  proc getPolygonCount*(self: Ref[NavigationPolygon]): int32 {.loadfrom("get_polygon_count", 3905245786).}
  proc getPolygon*(self: Ref[NavigationPolygon]; idx: int32): PackedInt32Array {.loadfrom("get_polygon", 3668444399).}
  proc clearPolygons*(self: Ref[NavigationPolygon]) {.loadfrom("clear_polygons", 3218959716).}
  proc getNavigationMesh*(self: Ref[NavigationPolygon]): Ref[NavigationMesh] {.loadfrom("get_navigation_mesh", 330232164).}
  proc addOutline*(self: Ref[NavigationPolygon]; outline: PackedVector2Array) {.loadfrom("add_outline", 1509147220).}
  proc addOutlineAtIndex*(self: Ref[NavigationPolygon]; outline: PackedVector2Array; index: int32) {.loadfrom("add_outline_at_index", 1569738947).}
  proc getOutlineCount*(self: Ref[NavigationPolygon]): int32 {.loadfrom("get_outline_count", 3905245786).}
  proc setOutline*(self: Ref[NavigationPolygon]; idx: int32; outline: PackedVector2Array) {.loadfrom("set_outline", 1201971903).}
  proc getOutline*(self: Ref[NavigationPolygon]; idx: int32): PackedVector2Array {.loadfrom("get_outline", 3946907486).}
  proc removeOutline*(self: Ref[NavigationPolygon]; idx: int32) {.loadfrom("remove_outline", 1286410249).}
  proc clearOutlines*(self: Ref[NavigationPolygon]) {.loadfrom("clear_outlines", 3218959716).}
  proc makePolygonsFromOutlines*(self: Ref[NavigationPolygon]) {.loadfrom("make_polygons_from_outlines", 3218959716).}
  proc `cellSize=`*(self: Ref[NavigationPolygon]; cellSize: Float) {.loadfrom("set_cell_size", 373806689).}
  proc cellSize*(self: Ref[NavigationPolygon]): Float {.loadfrom("get_cell_size", 1740695150).}

# Noise
define_godot_engine_class_essencials(Noise, Resource)
Noise.memberProcs:
  proc getNoise1d*(self: Ref[Noise]; x: Float): Float {.loadfrom("get_noise_1d", 3919130443).}
  proc getNoise2d*(self: Ref[Noise]; x: Float; y: Float): Float {.loadfrom("get_noise_2d", 2753205203).}
  proc getNoise2dv*(self: Ref[Noise]; v: Vector2): Float {.loadfrom("get_noise_2dv", 2276447920).}
  proc getNoise3d*(self: Ref[Noise]; x: Float; y: Float; z: Float): Float {.loadfrom("get_noise_3d", 973811851).}
  proc getNoise3dv*(self: Ref[Noise]; v: Vector3): Float {.loadfrom("get_noise_3dv", 1109078154).}
  proc getImage*(self: Ref[Noise]; width: int32; height: int32; invert: Bool = false; in3dSpace: Bool = false; normalize: Bool = true): Ref[Image] {.loadfrom("get_image", 2569233413).}
  proc getSeamlessImage*(self: Ref[Noise]; width: int32; height: int32; invert: Bool = false; in3dSpace: Bool = false; skirt: Float = 0.1; normalize: Bool = true): Ref[Image] {.loadfrom("get_seamless_image", 2210827790).}
  proc getImage3d*(self: Ref[Noise]; width: int32; height: int32; depth: int32; invert: Bool = false; normalize: Bool = true): TypedArray[Image] {.loadfrom("get_image_3d", 2358868431).}
  proc getSeamlessImage3d*(self: Ref[Noise]; width: int32; height: int32; depth: int32; invert: Bool = false; skirt: Float = 0.1; normalize: Bool = true): TypedArray[Image] {.loadfrom("get_seamless_image_3d", 3328694319).}

# Occluder3D
define_godot_engine_class_essencials(Occluder3D, Resource)
Occluder3D.memberProcs:
  proc getVertices*(self: Ref[Occluder3D]): PackedVector3Array {.loadfrom("get_vertices", 497664490).}
  proc getIndices*(self: Ref[Occluder3D]): PackedInt32Array {.loadfrom("get_indices", 1930428628).}

# OccluderPolygon2D
define_godot_engine_class_essencials(OccluderPolygon2D, Resource)
OccluderPolygon2D.memberProcs:
  proc `closed=`*(self: Ref[OccluderPolygon2D]; closed: Bool) {.loadfrom("set_closed", 2586408642).}
  proc isClosed*(self: Ref[OccluderPolygon2D]): Bool {.loadfrom("is_closed", 36873697).}
  proc `cullMode=`*(self: Ref[OccluderPolygon2D]; cullMode: OccluderPolygon2D|>CullMode) {.loadfrom("set_cull_mode", 3500863002).}
  proc cullMode*(self: Ref[OccluderPolygon2D]): OccluderPolygon2D|>CullMode {.loadfrom("get_cull_mode", 33931036).}
  proc `polygon=`*(self: Ref[OccluderPolygon2D]; polygon: PackedVector2Array) {.loadfrom("set_polygon", 1509147220).}
  proc polygon*(self: Ref[OccluderPolygon2D]): PackedVector2Array {.loadfrom("get_polygon", 2961356807).}

# OggPacketSequence
define_godot_engine_class_essencials(OggPacketSequence, Resource)
OggPacketSequence.memberProcs:
  proc `packetData=`*(self: Ref[OggPacketSequence]; packetData: TypedArray[Array]) {.loadfrom("set_packet_data", 381264803).}
  proc packetData*(self: Ref[OggPacketSequence]): TypedArray[Array] {.loadfrom("get_packet_data", 3995934104).}
  proc `packetGranulePositions=`*(self: Ref[OggPacketSequence]; granulePositions: PackedInt64Array) {.loadfrom("set_packet_granule_positions", 3709968205).}
  proc packetGranulePositions*(self: Ref[OggPacketSequence]): PackedInt64Array {.loadfrom("get_packet_granule_positions", 235988956).}
  proc `samplingRate=`*(self: Ref[OggPacketSequence]; samplingRate: Float) {.loadfrom("set_sampling_rate", 373806689).}
  proc samplingRate*(self: Ref[OggPacketSequence]): Float {.loadfrom("get_sampling_rate", 1740695150).}
  proc getLength*(self: Ref[OggPacketSequence]): Float {.loadfrom("get_length", 1740695150).}

# OpenXRAction
define_godot_engine_class_essencials(OpenXRAction, Resource)
OpenXRAction.memberProcs:
  proc `localizedName=`*(self: Ref[OpenXRAction]; localizedName: String) {.loadfrom("set_localized_name", 83702148).}
  proc localizedName*(self: Ref[OpenXRAction]): String {.loadfrom("get_localized_name", 201670096).}
  proc `actionType=`*(self: Ref[OpenXRAction]; actionType: OpenXRAction|>ActionType) {.loadfrom("set_action_type", 1675238366).}
  proc actionType*(self: Ref[OpenXRAction]): OpenXRAction|>ActionType {.loadfrom("get_action_type", 3536542431).}
  proc `toplevelPaths=`*(self: Ref[OpenXRAction]; toplevelPaths: PackedStringArray) {.loadfrom("set_toplevel_paths", 4015028928).}
  proc toplevelPaths*(self: Ref[OpenXRAction]): PackedStringArray {.loadfrom("get_toplevel_paths", 1139954409).}

# OpenXRActionMap
define_godot_engine_class_essencials(OpenXRActionMap, Resource)
OpenXRActionMap.memberProcs:
  proc `actionSets=`*(self: Ref[OpenXRActionMap]; actionSets: Array) {.loadfrom("set_action_sets", 381264803).}
  proc actionSets*(self: Ref[OpenXRActionMap]): Array {.loadfrom("get_action_sets", 3995934104).}
  proc getActionSetCount*(self: Ref[OpenXRActionMap]): int32 {.loadfrom("get_action_set_count", 3905245786).}
  proc findActionSet*(self: Ref[OpenXRActionMap]; name: String): Ref[OpenXRActionSet] {.loadfrom("find_action_set", 1888809267).}
  proc getActionSet*(self: Ref[OpenXRActionMap]; idx: int32): Ref[OpenXRActionSet] {.loadfrom("get_action_set", 1789580336).}
  proc addActionSet*(self: Ref[OpenXRActionMap]; actionSet: Ref[OpenXRActionSet]) {.loadfrom("add_action_set", 2093310581).}
  proc removeActionSet*(self: Ref[OpenXRActionMap]; actionSet: Ref[OpenXRActionSet]) {.loadfrom("remove_action_set", 2093310581).}
  proc `interactionProfiles=`*(self: Ref[OpenXRActionMap]; interactionProfiles: Array) {.loadfrom("set_interaction_profiles", 381264803).}
  proc interactionProfiles*(self: Ref[OpenXRActionMap]): Array {.loadfrom("get_interaction_profiles", 3995934104).}
  proc getInteractionProfileCount*(self: Ref[OpenXRActionMap]): int32 {.loadfrom("get_interaction_profile_count", 3905245786).}
  proc findInteractionProfile*(self: Ref[OpenXRActionMap]; name: String): Ref[OpenXRInteractionProfile] {.loadfrom("find_interaction_profile", 3095875538).}
  proc getInteractionProfile*(self: Ref[OpenXRActionMap]; idx: int32): Ref[OpenXRInteractionProfile] {.loadfrom("get_interaction_profile", 2546151210).}
  proc addInteractionProfile*(self: Ref[OpenXRActionMap]; interactionProfile: Ref[OpenXRInteractionProfile]) {.loadfrom("add_interaction_profile", 2697953512).}
  proc removeInteractionProfile*(self: Ref[OpenXRActionMap]; interactionProfile: Ref[OpenXRInteractionProfile]) {.loadfrom("remove_interaction_profile", 2697953512).}
  proc createDefaultActionSets*(self: Ref[OpenXRActionMap]) {.loadfrom("create_default_action_sets", 3218959716).}

# OpenXRActionSet
define_godot_engine_class_essencials(OpenXRActionSet, Resource)
OpenXRActionSet.memberProcs:
  proc `localizedName=`*(self: Ref[OpenXRActionSet]; localizedName: String) {.loadfrom("set_localized_name", 83702148).}
  proc localizedName*(self: Ref[OpenXRActionSet]): String {.loadfrom("get_localized_name", 201670096).}
  proc `priority=`*(self: Ref[OpenXRActionSet]; priority: int32) {.loadfrom("set_priority", 1286410249).}
  proc priority*(self: Ref[OpenXRActionSet]): int32 {.loadfrom("get_priority", 3905245786).}
  proc getActionCount*(self: Ref[OpenXRActionSet]): int32 {.loadfrom("get_action_count", 3905245786).}
  proc `actions=`*(self: Ref[OpenXRActionSet]; actions: Array) {.loadfrom("set_actions", 381264803).}
  proc actions*(self: Ref[OpenXRActionSet]): Array {.loadfrom("get_actions", 3995934104).}
  proc addAction*(self: Ref[OpenXRActionSet]; action: Ref[OpenXRAction]) {.loadfrom("add_action", 349361333).}
  proc removeAction*(self: Ref[OpenXRActionSet]; action: Ref[OpenXRAction]) {.loadfrom("remove_action", 349361333).}

# OpenXRIPBinding
define_godot_engine_class_essencials(OpenXRIPBinding, Resource)
OpenXRIPBinding.memberProcs:
  proc `action=`*(self: Ref[OpenXRIPBinding]; action: Ref[OpenXRAction]) {.loadfrom("set_action", 349361333).}
  proc action*(self: Ref[OpenXRIPBinding]): Ref[OpenXRAction] {.loadfrom("get_action", 4072409085).}
  proc getPathCount*(self: Ref[OpenXRIPBinding]): int32 {.loadfrom("get_path_count", 3905245786).}
  proc `paths=`*(self: Ref[OpenXRIPBinding]; paths: PackedStringArray) {.loadfrom("set_paths", 4015028928).}
  proc paths*(self: Ref[OpenXRIPBinding]): PackedStringArray {.loadfrom("get_paths", 1139954409).}
  proc hasPath*(self: Ref[OpenXRIPBinding]; path: String): Bool {.loadfrom("has_path", 3927539163).}
  proc addPath*(self: Ref[OpenXRIPBinding]; path: String) {.loadfrom("add_path", 83702148).}
  proc removePath*(self: Ref[OpenXRIPBinding]; path: String) {.loadfrom("remove_path", 83702148).}

# OpenXRInteractionProfile
define_godot_engine_class_essencials(OpenXRInteractionProfile, Resource)
OpenXRInteractionProfile.memberProcs:
  proc `interactionProfilePath=`*(self: Ref[OpenXRInteractionProfile]; interactionProfilePath: String) {.loadfrom("set_interaction_profile_path", 83702148).}
  proc interactionProfilePath*(self: Ref[OpenXRInteractionProfile]): String {.loadfrom("get_interaction_profile_path", 201670096).}
  proc getBindingCount*(self: Ref[OpenXRInteractionProfile]): int32 {.loadfrom("get_binding_count", 3905245786).}
  proc getBinding*(self: Ref[OpenXRInteractionProfile]; index: int32): Ref[OpenXRIPBinding] {.loadfrom("get_binding", 3934429652).}
  proc `bindings=`*(self: Ref[OpenXRInteractionProfile]; bindings: Array) {.loadfrom("set_bindings", 381264803).}
  proc bindings*(self: Ref[OpenXRInteractionProfile]): Array {.loadfrom("get_bindings", 3995934104).}

# PackedDataContainer
define_godot_engine_class_essencials(PackedDataContainer, Resource)
PackedDataContainer.memberProcs:
  proc pack*(self: Ref[PackedDataContainer]; value: ptr Variant): Error {.loadfrom("pack", 966674026).}
  proc size*(self: Ref[PackedDataContainer]): int32 {.loadfrom("size", 3905245786).}

# PackedScene
define_godot_engine_class_essencials(PackedScene, Resource)
PackedScene.memberProcs:
  proc pack*(self: Ref[PackedScene]; path: ptr Node): Error {.loadfrom("pack", 2584678054).}
  proc instantiate*(self: Ref[PackedScene]; editState: PackedScene|>GenEditState = genEditStateDisabled): Node {.loadfrom("instantiate", 2628778455).}
  proc canInstantiate*(self: Ref[PackedScene]): Bool {.loadfrom("can_instantiate", 36873697).}
  proc getState*(self: Ref[PackedScene]): Ref[SceneState] {.loadfrom("get_state", 3479783971).}

# PhysicsMaterial
define_godot_engine_class_essencials(PhysicsMaterial, Resource)
PhysicsMaterial.memberProcs:
  proc `friction=`*(self: Ref[PhysicsMaterial]; friction: Float) {.loadfrom("set_friction", 373806689).}
  proc friction*(self: Ref[PhysicsMaterial]): Float {.loadfrom("get_friction", 1740695150).}
  proc `rough=`*(self: Ref[PhysicsMaterial]; rough: Bool) {.loadfrom("set_rough", 2586408642).}
  proc isRough*(self: Ref[PhysicsMaterial]): Bool {.loadfrom("is_rough", 36873697).}
  proc `bounce=`*(self: Ref[PhysicsMaterial]; bounce: Float) {.loadfrom("set_bounce", 373806689).}
  proc bounce*(self: Ref[PhysicsMaterial]): Float {.loadfrom("get_bounce", 1740695150).}
  proc `absorbent=`*(self: Ref[PhysicsMaterial]; absorbent: Bool) {.loadfrom("set_absorbent", 2586408642).}
  proc isAbsorbent*(self: Ref[PhysicsMaterial]): Bool {.loadfrom("is_absorbent", 36873697).}

# PolygonPathFinder
define_godot_engine_class_essencials(PolygonPathFinder, Resource)
PolygonPathFinder.memberProcs:
  proc setup*(self: Ref[PolygonPathFinder]; points: PackedVector2Array; connections: PackedInt32Array) {.loadfrom("setup", 3251786936).}
  proc findPath*(self: Ref[PolygonPathFinder]; `from`: Vector2; to: Vector2): PackedVector2Array {.loadfrom("find_path", 1562168077).}
  proc getIntersections*(self: Ref[PolygonPathFinder]; `from`: Vector2; to: Vector2): PackedVector2Array {.loadfrom("get_intersections", 3932192302).}
  proc getClosestPoint*(self: Ref[PolygonPathFinder]; point: Vector2): Vector2 {.loadfrom("get_closest_point", 2656412154).}
  proc isPointInside*(self: Ref[PolygonPathFinder]; point: Vector2): Bool {.loadfrom("is_point_inside", 556197845).}
  proc setPointPenalty*(self: Ref[PolygonPathFinder]; idx: int32; penalty: Float) {.loadfrom("set_point_penalty", 1602489585).}
  proc getPointPenalty*(self: Ref[PolygonPathFinder]; idx: int32): Float {.loadfrom("get_point_penalty", 2339986948).}
  proc getBounds*(self: Ref[PolygonPathFinder]): Rect2 {.loadfrom("get_bounds", 1639390495).}

# RDShaderFile
define_godot_engine_class_essencials(RDShaderFile, Resource)
RDShaderFile.memberProcs:
  proc setBytecode*(self: Ref[RDShaderFile]; bytecode: Ref[RDShaderSPIRV]; version: StringName = "") {.loadfrom("set_bytecode", 1558064255).}
  proc getSpirv*(self: Ref[RDShaderFile]; version: StringName = ""): Ref[RDShaderSPIRV] {.loadfrom("get_spirv", 3340165340).}
  proc getVersionList*(self: Ref[RDShaderFile]): TypedArray[StringName] {.loadfrom("get_version_list", 3995934104).}
  proc `baseError=`*(self: Ref[RDShaderFile]; error: String) {.loadfrom("set_base_error", 83702148).}
  proc baseError*(self: Ref[RDShaderFile]): String {.loadfrom("get_base_error", 201670096).}

# RDShaderSPIRV
define_godot_engine_class_essencials(RDShaderSPIRV, Resource)
RDShaderSPIRV.memberProcs:
  proc `stageBytecode=`*(self: Ref[RDShaderSPIRV]; stage: RenderingDevice|>ShaderStage; bytecode: PackedByteArray) {.loadfrom("set_stage_bytecode", 3514097977).}
  proc stageBytecode*(self: Ref[RDShaderSPIRV]; stage: RenderingDevice|>ShaderStage): PackedByteArray {.loadfrom("get_stage_bytecode", 3816765404).}
  proc `stageCompileError=`*(self: Ref[RDShaderSPIRV]; stage: RenderingDevice|>ShaderStage; compileError: String) {.loadfrom("set_stage_compile_error", 620821314).}
  proc stageCompileError*(self: Ref[RDShaderSPIRV]; stage: RenderingDevice|>ShaderStage): String {.loadfrom("get_stage_compile_error", 3354920045).}

# RichTextEffect
define_godot_engine_class_essencials(RichTextEffect, Resource)
method processCustomFx*(self: Ref[RichTextEffect]; charFx: Ref[CharFXTransform]): Bool {.base.} = (discard)

# SceneReplicationConfig
define_godot_engine_class_essencials(SceneReplicationConfig, Resource)
SceneReplicationConfig.memberProcs:
  proc getProperties*(self: Ref[SceneReplicationConfig]): TypedArray[NodePath] {.loadfrom("get_properties", 3995934104).}
  proc addProperty*(self: Ref[SceneReplicationConfig]; path: NodePath; index: int32 = -1) {.loadfrom("add_property", 3818401521).}
  proc hasProperty*(self: Ref[SceneReplicationConfig]; path: NodePath): Bool {.loadfrom("has_property", 861721659).}
  proc removeProperty*(self: Ref[SceneReplicationConfig]; path: NodePath) {.loadfrom("remove_property", 1348162250).}
  proc propertyGetIndex*(self: Ref[SceneReplicationConfig]; path: NodePath): int32 {.loadfrom("property_get_index", 1382022557).}
  proc propertyGetSpawn*(self: Ref[SceneReplicationConfig]; path: NodePath): Bool {.loadfrom("property_get_spawn", 3456846888).}
  proc propertySetSpawn*(self: Ref[SceneReplicationConfig]; path: NodePath; enabled: Bool) {.loadfrom("property_set_spawn", 3868023870).}
  proc propertyGetSync*(self: Ref[SceneReplicationConfig]; path: NodePath): Bool {.loadfrom("property_get_sync", 3456846888).}
  proc propertySetSync*(self: Ref[SceneReplicationConfig]; path: NodePath; enabled: Bool) {.loadfrom("property_set_sync", 3868023870).}
  proc propertyGetWatch*(self: Ref[SceneReplicationConfig]; path: NodePath): Bool {.loadfrom("property_get_watch", 3456846888).}
  proc propertySetWatch*(self: Ref[SceneReplicationConfig]; path: NodePath; enabled: Bool) {.loadfrom("property_set_watch", 3868023870).}

# Script
define_godot_engine_class_essencials(Script, Resource)
Script.memberProcs:
  proc canInstantiate*(self: Ref[Script]): Bool {.loadfrom("can_instantiate", 36873697).}
  proc instanceHas*(self: Ref[Script]; baseObject: ptr Object): Bool {.loadfrom("instance_has", 397768994).}
  proc hasSourceCode*(self: Ref[Script]): Bool {.loadfrom("has_source_code", 36873697).}
  proc sourceCode*(self: Ref[Script]): String {.loadfrom("get_source_code", 201670096).}
  proc `sourceCode=`*(self: Ref[Script]; source: String) {.loadfrom("set_source_code", 83702148).}
  proc reload*(self: Ref[Script]; keepState: Bool = false): Error {.loadfrom("reload", 1633102583).}
  proc getBaseScript*(self: Ref[Script]): Ref[Script] {.loadfrom("get_base_script", 278624046).}
  proc getInstanceBaseType*(self: Ref[Script]): StringName {.loadfrom("get_instance_base_type", 2002593661).}
  proc hasScriptSignal*(self: Ref[Script]; signalName: StringName): Bool {.loadfrom("has_script_signal", 2619796661).}
  proc getScriptPropertyList*(self: Ref[Script]): TypedArray[Dictionary] {.loadfrom("get_script_property_list", 2915620761).}
  proc getScriptMethodList*(self: Ref[Script]): TypedArray[Dictionary] {.loadfrom("get_script_method_list", 2915620761).}
  proc getScriptSignalList*(self: Ref[Script]): TypedArray[Dictionary] {.loadfrom("get_script_signal_list", 2915620761).}
  proc getScriptConstantMap*(self: Ref[Script]): Dictionary {.loadfrom("get_script_constant_map", 2382534195).}
  proc getPropertyDefaultValue*(self: Ref[Script]; property: StringName): Variant {.loadfrom("get_property_default_value", 2138907829).}
  proc isTool*(self: Ref[Script]): Bool {.loadfrom("is_tool", 36873697).}

# Shader
define_godot_engine_class_essencials(Shader, Resource)
Shader.memberProcs:
  proc getMode*(self: Ref[Shader]): Shader|>Mode {.loadfrom("get_mode", 3392948163).}
  proc `code=`*(self: Ref[Shader]; code: String) {.loadfrom("set_code", 83702148).}
  proc code*(self: Ref[Shader]): String {.loadfrom("get_code", 201670096).}
  proc setDefaultTextureParameter*(self: Ref[Shader]; name: StringName; texture: Ref[Texture2D]; index: int32 = 0) {.loadfrom("set_default_texture_parameter", 1628453603).}
  proc getDefaultTextureParameter*(self: Ref[Shader]; name: StringName; index: int32 = 0): Ref[Texture2D] {.loadfrom("get_default_texture_parameter", 3823812009).}
  proc getShaderUniformList*(self: Ref[Shader]; getGroups: Bool = false): Array {.loadfrom("get_shader_uniform_list", 1230511656).}

# ShaderInclude
define_godot_engine_class_essencials(ShaderInclude, Resource)
ShaderInclude.memberProcs:
  proc `code=`*(self: Ref[ShaderInclude]; code: String) {.loadfrom("set_code", 83702148).}
  proc code*(self: Ref[ShaderInclude]): String {.loadfrom("get_code", 201670096).}

# Shape2D
define_godot_engine_class_essencials(Shape2D, Resource)
Shape2D.memberProcs:
  proc `customSolverBias=`*(self: Ref[Shape2D]; bias: Float) {.loadfrom("set_custom_solver_bias", 373806689).}
  proc customSolverBias*(self: Ref[Shape2D]): Float {.loadfrom("get_custom_solver_bias", 1740695150).}
  proc collide*(self: Ref[Shape2D]; localXform: Transform2D; withShape: Ref[Shape2D]; shapeXform: Transform2D): Bool {.loadfrom("collide", 3709843132).}
  proc collideWithMotion*(self: Ref[Shape2D]; localXform: Transform2D; localMotion: Vector2; withShape: Ref[Shape2D]; shapeXform: Transform2D; shapeMotion: Vector2): Bool {.loadfrom("collide_with_motion", 2869556801).}
  proc collideAndGetContacts*(self: Ref[Shape2D]; localXform: Transform2D; withShape: Ref[Shape2D]; shapeXform: Transform2D): PackedVector2Array {.loadfrom("collide_and_get_contacts", 3056932662).}
  proc collideWithMotionAndGetContacts*(self: Ref[Shape2D]; localXform: Transform2D; localMotion: Vector2; withShape: Ref[Shape2D]; shapeXform: Transform2D; shapeMotion: Vector2): PackedVector2Array {.loadfrom("collide_with_motion_and_get_contacts", 3620351573).}
  proc draw*(self: Ref[Shape2D]; canvasItem: RID; color: Color) {.loadfrom("draw", 2948539648).}
  proc getRect*(self: Ref[Shape2D]): Rect2 {.loadfrom("get_rect", 1639390495).}

# Shape3D
define_godot_engine_class_essencials(Shape3D, Resource)
Shape3D.memberProcs:
  proc `customSolverBias=`*(self: Ref[Shape3D]; bias: Float) {.loadfrom("set_custom_solver_bias", 373806689).}
  proc customSolverBias*(self: Ref[Shape3D]): Float {.loadfrom("get_custom_solver_bias", 1740695150).}
  proc `margin=`*(self: Ref[Shape3D]; margin: Float) {.loadfrom("set_margin", 373806689).}
  proc margin*(self: Ref[Shape3D]): Float {.loadfrom("get_margin", 1740695150).}
  proc getDebugMesh*(self: Ref[Shape3D]): Ref[ArrayMesh] {.loadfrom("get_debug_mesh", 1605880883).}

# Shortcut
define_godot_engine_class_essencials(Shortcut, Resource)
Shortcut.memberProcs:
  proc `events=`*(self: Ref[Shortcut]; events: Array) {.loadfrom("set_events", 381264803).}
  proc events*(self: Ref[Shortcut]): Array {.loadfrom("get_events", 3995934104).}
  proc hasValidEvent*(self: Ref[Shortcut]): Bool {.loadfrom("has_valid_event", 36873697).}
  proc matchesEvent*(self: Ref[Shortcut]; event: Ref[InputEvent]): Bool {.loadfrom("matches_event", 3738334489).}
  proc getAsText*(self: Ref[Shortcut]): String {.loadfrom("get_as_text", 201670096).}

# SkeletonModification2D
define_godot_engine_class_essencials(SkeletonModification2D, Resource)
method execute*(self: Ref[SkeletonModification2D]; delta: float64) {.base.} = (discard)
method setupModification*(self: Ref[SkeletonModification2D]; modificationStack: Ref[SkeletonModificationStack2D]) {.base.} = (discard)
method drawEditorGizmo*(self: Ref[SkeletonModification2D]) {.base.} = (discard)
SkeletonModification2D.memberProcs:
  proc `enabled=`*(self: Ref[SkeletonModification2D]; enabled: Bool) {.loadfrom("set_enabled", 2586408642).}
  proc enabled*(self: Ref[SkeletonModification2D]): Bool {.loadfrom("get_enabled", 2240911060).}
  proc getModificationStack*(self: Ref[SkeletonModification2D]): Ref[SkeletonModificationStack2D] {.loadfrom("get_modification_stack", 2137761694).}
  proc setIsSetup*(self: Ref[SkeletonModification2D]; isSetup: Bool) {.loadfrom("set_is_setup", 2586408642).}
  proc getIsSetup*(self: Ref[SkeletonModification2D]): Bool {.loadfrom("get_is_setup", 36873697).}
  proc `executionMode=`*(self: Ref[SkeletonModification2D]; executionMode: int32) {.loadfrom("set_execution_mode", 1286410249).}
  proc executionMode*(self: Ref[SkeletonModification2D]): int32 {.loadfrom("get_execution_mode", 3905245786).}
  proc clampAngle*(self: Ref[SkeletonModification2D]; angle: Float; min: Float; max: Float; invert: Bool): Float {.loadfrom("clamp_angle", 1229502682).}
  proc setEditorDrawGizmo*(self: Ref[SkeletonModification2D]; drawGizmo: Bool) {.loadfrom("set_editor_draw_gizmo", 2586408642).}
  proc getEditorDrawGizmo*(self: Ref[SkeletonModification2D]): Bool {.loadfrom("get_editor_draw_gizmo", 36873697).}

# SkeletonModificationStack2D
define_godot_engine_class_essencials(SkeletonModificationStack2D, Resource)
SkeletonModificationStack2D.memberProcs:
  proc setup*(self: Ref[SkeletonModificationStack2D]) {.loadfrom("setup", 3218959716).}
  proc execute*(self: Ref[SkeletonModificationStack2D]; delta: Float; executionMode: int32) {.loadfrom("execute", 1005356550).}
  proc enableAllModifications*(self: Ref[SkeletonModificationStack2D]; enabled: Bool) {.loadfrom("enable_all_modifications", 2586408642).}
  proc getModification*(self: Ref[SkeletonModificationStack2D]; modIdx: int32): Ref[SkeletonModification2D] {.loadfrom("get_modification", 2570274329).}
  proc addModification*(self: Ref[SkeletonModificationStack2D]; modification: Ref[SkeletonModification2D]) {.loadfrom("add_modification", 354162120).}
  proc deleteModification*(self: Ref[SkeletonModificationStack2D]; modIdx: int32) {.loadfrom("delete_modification", 1286410249).}
  proc setModification*(self: Ref[SkeletonModificationStack2D]; modIdx: int32; modification: Ref[SkeletonModification2D]) {.loadfrom("set_modification", 1098262544).}
  proc `modificationCount=`*(self: Ref[SkeletonModificationStack2D]; count: int32) {.loadfrom("set_modification_count", 1286410249).}
  proc modificationCount*(self: Ref[SkeletonModificationStack2D]): int32 {.loadfrom("get_modification_count", 3905245786).}
  proc getIsSetup*(self: Ref[SkeletonModificationStack2D]): Bool {.loadfrom("get_is_setup", 36873697).}
  proc `enabled=`*(self: Ref[SkeletonModificationStack2D]; enabled: Bool) {.loadfrom("set_enabled", 2586408642).}
  proc enabled*(self: Ref[SkeletonModificationStack2D]): Bool {.loadfrom("get_enabled", 36873697).}
  proc `strength=`*(self: Ref[SkeletonModificationStack2D]; strength: Float) {.loadfrom("set_strength", 373806689).}
  proc strength*(self: Ref[SkeletonModificationStack2D]): Float {.loadfrom("get_strength", 1740695150).}
  proc getSkeleton*(self: Ref[SkeletonModificationStack2D]): Skeleton2D {.loadfrom("get_skeleton", 1697361217).}

# SkeletonProfile
define_godot_engine_class_essencials(SkeletonProfile, Resource)
SkeletonProfile.memberProcs:
  proc `rootBone=`*(self: Ref[SkeletonProfile]; boneName: StringName) {.loadfrom("set_root_bone", 3304788590).}
  proc rootBone*(self: Ref[SkeletonProfile]): StringName {.loadfrom("get_root_bone", 2737447660).}
  proc `scaleBaseBone=`*(self: Ref[SkeletonProfile]; boneName: StringName) {.loadfrom("set_scale_base_bone", 3304788590).}
  proc scaleBaseBone*(self: Ref[SkeletonProfile]): StringName {.loadfrom("get_scale_base_bone", 2737447660).}
  proc `groupSize=`*(self: Ref[SkeletonProfile]; size: int32) {.loadfrom("set_group_size", 1286410249).}
  proc groupSize*(self: Ref[SkeletonProfile]): int32 {.loadfrom("get_group_size", 2455072627).}
  proc getGroupName*(self: Ref[SkeletonProfile]; groupIdx: int32): StringName {.loadfrom("get_group_name", 659327637).}
  proc setGroupName*(self: Ref[SkeletonProfile]; groupIdx: int32; groupName: StringName) {.loadfrom("set_group_name", 3780747571).}
  proc getTexture*(self: Ref[SkeletonProfile]; groupIdx: int32): Ref[Texture2D] {.loadfrom("get_texture", 3536238170).}
  proc setTexture*(self: Ref[SkeletonProfile]; groupIdx: int32; texture: Ref[Texture2D]) {.loadfrom("set_texture", 666127730).}
  proc `boneSize=`*(self: Ref[SkeletonProfile]; size: int32) {.loadfrom("set_bone_size", 1286410249).}
  proc boneSize*(self: Ref[SkeletonProfile]): int32 {.loadfrom("get_bone_size", 2455072627).}
  proc findBone*(self: Ref[SkeletonProfile]; boneName: StringName): int32 {.loadfrom("find_bone", 2458036349).}
  proc getBoneName*(self: Ref[SkeletonProfile]; boneIdx: int32): StringName {.loadfrom("get_bone_name", 659327637).}
  proc setBoneName*(self: Ref[SkeletonProfile]; boneIdx: int32; boneName: StringName) {.loadfrom("set_bone_name", 3780747571).}
  proc getBoneParent*(self: Ref[SkeletonProfile]; boneIdx: int32): StringName {.loadfrom("get_bone_parent", 659327637).}
  proc setBoneParent*(self: Ref[SkeletonProfile]; boneIdx: int32; boneParent: StringName) {.loadfrom("set_bone_parent", 3780747571).}
  proc getTailDirection*(self: Ref[SkeletonProfile]; boneIdx: int32): SkeletonProfile|>TailDirection {.loadfrom("get_tail_direction", 2675997574).}
  proc setTailDirection*(self: Ref[SkeletonProfile]; boneIdx: int32; tailDirection: SkeletonProfile|>TailDirection) {.loadfrom("set_tail_direction", 1231951015).}
  proc getBoneTail*(self: Ref[SkeletonProfile]; boneIdx: int32): StringName {.loadfrom("get_bone_tail", 659327637).}
  proc setBoneTail*(self: Ref[SkeletonProfile]; boneIdx: int32; boneTail: StringName) {.loadfrom("set_bone_tail", 3780747571).}
  proc getReferencePose*(self: Ref[SkeletonProfile]; boneIdx: int32): Transform3D {.loadfrom("get_reference_pose", 1965739696).}
  proc setReferencePose*(self: Ref[SkeletonProfile]; boneIdx: int32; boneName: Transform3D) {.loadfrom("set_reference_pose", 3616898986).}
  proc getHandleOffset*(self: Ref[SkeletonProfile]; boneIdx: int32): Vector2 {.loadfrom("get_handle_offset", 2299179447).}
  proc setHandleOffset*(self: Ref[SkeletonProfile]; boneIdx: int32; handleOffset: Vector2) {.loadfrom("set_handle_offset", 163021252).}
  proc getGroup*(self: Ref[SkeletonProfile]; boneIdx: int32): StringName {.loadfrom("get_group", 659327637).}
  proc setGroup*(self: Ref[SkeletonProfile]; boneIdx: int32; group: StringName) {.loadfrom("set_group", 3780747571).}

# Skin
define_godot_engine_class_essencials(Skin, Resource)
Skin.memberProcs:
  proc setBindCount*(self: Ref[Skin]; bindCount: int32) {.loadfrom("set_bind_count", 1286410249).}
  proc getBindCount*(self: Ref[Skin]): int32 {.loadfrom("get_bind_count", 3905245786).}
  proc addBind*(self: Ref[Skin]; bone: int32; pose: Transform3D) {.loadfrom("add_bind", 3616898986).}
  proc addNamedBind*(self: Ref[Skin]; name: String; pose: Transform3D) {.loadfrom("add_named_bind", 3154712474).}
  proc setBindPose*(self: Ref[Skin]; bindIndex: int32; pose: Transform3D) {.loadfrom("set_bind_pose", 3616898986).}
  proc getBindPose*(self: Ref[Skin]; bindIndex: int32): Transform3D {.loadfrom("get_bind_pose", 1965739696).}
  proc setBindName*(self: Ref[Skin]; bindIndex: int32; name: StringName) {.loadfrom("set_bind_name", 3780747571).}
  proc getBindName*(self: Ref[Skin]; bindIndex: int32): StringName {.loadfrom("get_bind_name", 659327637).}
  proc setBindBone*(self: Ref[Skin]; bindIndex: int32; bone: int32) {.loadfrom("set_bind_bone", 3937882851).}
  proc getBindBone*(self: Ref[Skin]; bindIndex: int32): int32 {.loadfrom("get_bind_bone", 923996154).}
  proc clearBinds*(self: Ref[Skin]) {.loadfrom("clear_binds", 3218959716).}

# Sky
define_godot_engine_class_essencials(Sky, Resource)
Sky.memberProcs:
  proc `radianceSize=`*(self: Ref[Sky]; size: Sky|>RadianceSize) {.loadfrom("set_radiance_size", 1512957179).}
  proc radianceSize*(self: Ref[Sky]): Sky|>RadianceSize {.loadfrom("get_radiance_size", 2708733976).}
  proc `processMode=`*(self: Ref[Sky]; mode: Sky|>ProcessMode) {.loadfrom("set_process_mode", 875986769).}
  proc processMode*(self: Ref[Sky]): Sky|>ProcessMode {.loadfrom("get_process_mode", 731245043).}
  proc `material=`*(self: Ref[Sky]; material: Ref[Material]) {.loadfrom("set_material", 2757459619).}
  proc material*(self: Ref[Sky]): Ref[Material] {.loadfrom("get_material", 5934680).}

# SpriteFrames
define_godot_engine_class_essencials(SpriteFrames, Resource)
SpriteFrames.memberProcs:
  proc addAnimation*(self: Ref[SpriteFrames]; anim: StringName) {.loadfrom("add_animation", 3304788590).}
  proc hasAnimation*(self: Ref[SpriteFrames]; anim: StringName): Bool {.loadfrom("has_animation", 2619796661).}
  proc removeAnimation*(self: Ref[SpriteFrames]; anim: StringName) {.loadfrom("remove_animation", 3304788590).}
  proc renameAnimation*(self: Ref[SpriteFrames]; anim: StringName; newname: StringName) {.loadfrom("rename_animation", 3740211285).}
  proc getAnimationNames*(self: Ref[SpriteFrames]): PackedStringArray {.loadfrom("get_animation_names", 1139954409).}
  proc setAnimationSpeed*(self: Ref[SpriteFrames]; anim: StringName; fps: float64) {.loadfrom("set_animation_speed", 4135858297).}
  proc getAnimationSpeed*(self: Ref[SpriteFrames]; anim: StringName): float64 {.loadfrom("get_animation_speed", 2349060816).}
  proc setAnimationLoop*(self: Ref[SpriteFrames]; anim: StringName; loop: Bool) {.loadfrom("set_animation_loop", 2524380260).}
  proc getAnimationLoop*(self: Ref[SpriteFrames]; anim: StringName): Bool {.loadfrom("get_animation_loop", 2619796661).}
  proc addFrame*(self: Ref[SpriteFrames]; anim: StringName; texture: Ref[Texture2D]; duration: Float = 1.0; atPosition: int32 = -1) {.loadfrom("add_frame", 407562921).}
  proc setFrame*(self: Ref[SpriteFrames]; anim: StringName; idx: int32; texture: Ref[Texture2D]; duration: Float = 1.0) {.loadfrom("set_frame", 3155743884).}
  proc removeFrame*(self: Ref[SpriteFrames]; anim: StringName; idx: int32) {.loadfrom("remove_frame", 2415702435).}
  proc getFrameCount*(self: Ref[SpriteFrames]; anim: StringName): int32 {.loadfrom("get_frame_count", 2458036349).}
  proc getFrameTexture*(self: Ref[SpriteFrames]; anim: StringName; idx: int32): Ref[Texture2D] {.loadfrom("get_frame_texture", 2900517879).}
  proc getFrameDuration*(self: Ref[SpriteFrames]; anim: StringName; idx: int32): Float {.loadfrom("get_frame_duration", 1129309260).}
  proc clear*(self: Ref[SpriteFrames]; anim: StringName) {.loadfrom("clear", 3304788590).}
  proc clearAll*(self: Ref[SpriteFrames]) {.loadfrom("clear_all", 3218959716).}

# StyleBox
define_godot_engine_class_essencials(StyleBox, Resource)
method draw*(self: Ref[StyleBox]; toCanvasItem: RID; rect: Rect2) {.base.} = (discard)
method getDrawRect*(self: Ref[StyleBox]; rect: Rect2): Rect2 {.base.} = (discard)
method getMinimumSize*(self: Ref[StyleBox]): Vector2 {.base.} = (discard)
method testMask*(self: Ref[StyleBox]; point: Vector2; rect: Rect2): Bool {.base.} = (discard)
StyleBox.memberProcs:
  proc getMinimumSize*(self: Ref[StyleBox]): Vector2 {.loadfrom("get_minimum_size", 3341600327).}
  proc `contentMargin=`*(self: Ref[StyleBox]; margin: Side; offset: Float) {.loadfrom("set_content_margin", 4290182280).}
  proc setContentMarginAll*(self: Ref[StyleBox]; offset: Float) {.loadfrom("set_content_margin_all", 373806689).}
  proc contentMargin*(self: Ref[StyleBox]; margin: Side): Float {.loadfrom("get_content_margin", 2869120046).}
  proc getMargin*(self: Ref[StyleBox]; margin: Side): Float {.loadfrom("get_margin", 2869120046).}
  proc getOffset*(self: Ref[StyleBox]): Vector2 {.loadfrom("get_offset", 3341600327).}
  proc draw*(self: Ref[StyleBox]; canvasItem: RID; rect: Rect2) {.loadfrom("draw", 2275962004).}
  proc getCurrentItemDrawn*(self: Ref[StyleBox]): CanvasItem {.loadfrom("get_current_item_drawn", 3213695180).}
  proc testMask*(self: Ref[StyleBox]; point: Vector2; rect: Rect2): Bool {.loadfrom("test_mask", 3735564539).}

# SyntaxHighlighter
define_godot_engine_class_essencials(SyntaxHighlighter, Resource)
method getLineSyntaxHighlighting*(self: Ref[SyntaxHighlighter]; line: int32): Dictionary {.base.} = (discard)
method clearHighlightingCache*(self: Ref[SyntaxHighlighter]) {.base.} = (discard)
method updateCache*(self: Ref[SyntaxHighlighter]) {.base.} = (discard)
SyntaxHighlighter.memberProcs:
  proc getLineSyntaxHighlighting*(self: Ref[SyntaxHighlighter]; line: int32): Dictionary {.loadfrom("get_line_syntax_highlighting", 3554694381).}
  proc updateCache*(self: Ref[SyntaxHighlighter]) {.loadfrom("update_cache", 3218959716).}
  proc clearHighlightingCache*(self: Ref[SyntaxHighlighter]) {.loadfrom("clear_highlighting_cache", 3218959716).}
  proc getTextEdit*(self: Ref[SyntaxHighlighter]): TextEdit {.loadfrom("get_text_edit", 1893027089).}

# Texture
define_godot_engine_class_essencials(Texture, Resource)

# Theme
define_godot_engine_class_essencials(Theme, Resource)
Theme.memberProcs:
  proc setIcon*(self: Ref[Theme]; name: StringName; themeType: StringName; texture: Ref[Texture2D]) {.loadfrom("set_icon", 2188371082).}
  proc getIcon*(self: Ref[Theme]; name: StringName; themeType: StringName): Ref[Texture2D] {.loadfrom("get_icon", 934555193).}
  proc hasIcon*(self: Ref[Theme]; name: StringName; themeType: StringName): Bool {.loadfrom("has_icon", 471820014).}
  proc renameIcon*(self: Ref[Theme]; oldName: StringName; name: StringName; themeType: StringName) {.loadfrom("rename_icon", 642128662).}
  proc clearIcon*(self: Ref[Theme]; name: StringName; themeType: StringName) {.loadfrom("clear_icon", 3740211285).}
  proc getIconList*(self: Ref[Theme]; themeType: String): PackedStringArray {.loadfrom("get_icon_list", 4291131558).}
  proc getIconTypeList*(self: Ref[Theme]): PackedStringArray {.loadfrom("get_icon_type_list", 1139954409).}
  proc setStylebox*(self: Ref[Theme]; name: StringName; themeType: StringName; texture: Ref[StyleBox]) {.loadfrom("set_stylebox", 2075907568).}
  proc getStylebox*(self: Ref[Theme]; name: StringName; themeType: StringName): Ref[StyleBox] {.loadfrom("get_stylebox", 3405608165).}
  proc hasStylebox*(self: Ref[Theme]; name: StringName; themeType: StringName): Bool {.loadfrom("has_stylebox", 471820014).}
  proc renameStylebox*(self: Ref[Theme]; oldName: StringName; name: StringName; themeType: StringName) {.loadfrom("rename_stylebox", 642128662).}
  proc clearStylebox*(self: Ref[Theme]; name: StringName; themeType: StringName) {.loadfrom("clear_stylebox", 3740211285).}
  proc getStyleboxList*(self: Ref[Theme]; themeType: String): PackedStringArray {.loadfrom("get_stylebox_list", 4291131558).}
  proc getStyleboxTypeList*(self: Ref[Theme]): PackedStringArray {.loadfrom("get_stylebox_type_list", 1139954409).}
  proc setFont*(self: Ref[Theme]; name: StringName; themeType: StringName; font: Ref[Font]) {.loadfrom("set_font", 177292320).}
  proc getFont*(self: Ref[Theme]; name: StringName; themeType: StringName): Ref[Font] {.loadfrom("get_font", 3445063586).}
  proc hasFont*(self: Ref[Theme]; name: StringName; themeType: StringName): Bool {.loadfrom("has_font", 471820014).}
  proc renameFont*(self: Ref[Theme]; oldName: StringName; name: StringName; themeType: StringName) {.loadfrom("rename_font", 642128662).}
  proc clearFont*(self: Ref[Theme]; name: StringName; themeType: StringName) {.loadfrom("clear_font", 3740211285).}
  proc getFontList*(self: Ref[Theme]; themeType: String): PackedStringArray {.loadfrom("get_font_list", 4291131558).}
  proc getFontTypeList*(self: Ref[Theme]): PackedStringArray {.loadfrom("get_font_type_list", 1139954409).}
  proc setFontSize*(self: Ref[Theme]; name: StringName; themeType: StringName; fontSize: int32) {.loadfrom("set_font_size", 281601298).}
  proc getFontSize*(self: Ref[Theme]; name: StringName; themeType: StringName): int32 {.loadfrom("get_font_size", 2419549490).}
  proc hasFontSize*(self: Ref[Theme]; name: StringName; themeType: StringName): Bool {.loadfrom("has_font_size", 471820014).}
  proc renameFontSize*(self: Ref[Theme]; oldName: StringName; name: StringName; themeType: StringName) {.loadfrom("rename_font_size", 642128662).}
  proc clearFontSize*(self: Ref[Theme]; name: StringName; themeType: StringName) {.loadfrom("clear_font_size", 3740211285).}
  proc getFontSizeList*(self: Ref[Theme]; themeType: String): PackedStringArray {.loadfrom("get_font_size_list", 4291131558).}
  proc getFontSizeTypeList*(self: Ref[Theme]): PackedStringArray {.loadfrom("get_font_size_type_list", 1139954409).}
  proc setColor*(self: Ref[Theme]; name: StringName; themeType: StringName; color: Color) {.loadfrom("set_color", 4111215154).}
  proc getColor*(self: Ref[Theme]; name: StringName; themeType: StringName): Color {.loadfrom("get_color", 2015923404).}
  proc hasColor*(self: Ref[Theme]; name: StringName; themeType: StringName): Bool {.loadfrom("has_color", 471820014).}
  proc renameColor*(self: Ref[Theme]; oldName: StringName; name: StringName; themeType: StringName) {.loadfrom("rename_color", 642128662).}
  proc clearColor*(self: Ref[Theme]; name: StringName; themeType: StringName) {.loadfrom("clear_color", 3740211285).}
  proc getColorList*(self: Ref[Theme]; themeType: String): PackedStringArray {.loadfrom("get_color_list", 4291131558).}
  proc getColorTypeList*(self: Ref[Theme]): PackedStringArray {.loadfrom("get_color_type_list", 1139954409).}
  proc setConstant*(self: Ref[Theme]; name: StringName; themeType: StringName; constant: int32) {.loadfrom("set_constant", 281601298).}
  proc getConstant*(self: Ref[Theme]; name: StringName; themeType: StringName): int32 {.loadfrom("get_constant", 2419549490).}
  proc hasConstant*(self: Ref[Theme]; name: StringName; themeType: StringName): Bool {.loadfrom("has_constant", 471820014).}
  proc renameConstant*(self: Ref[Theme]; oldName: StringName; name: StringName; themeType: StringName) {.loadfrom("rename_constant", 642128662).}
  proc clearConstant*(self: Ref[Theme]; name: StringName; themeType: StringName) {.loadfrom("clear_constant", 3740211285).}
  proc getConstantList*(self: Ref[Theme]; themeType: String): PackedStringArray {.loadfrom("get_constant_list", 4291131558).}
  proc getConstantTypeList*(self: Ref[Theme]): PackedStringArray {.loadfrom("get_constant_type_list", 1139954409).}
  proc `defaultBaseScale=`*(self: Ref[Theme]; baseScale: Float) {.loadfrom("set_default_base_scale", 373806689).}
  proc defaultBaseScale*(self: Ref[Theme]): Float {.loadfrom("get_default_base_scale", 1740695150).}
  proc hasDefaultBaseScale*(self: Ref[Theme]): Bool {.loadfrom("has_default_base_scale", 36873697).}
  proc `defaultFont=`*(self: Ref[Theme]; font: Ref[Font]) {.loadfrom("set_default_font", 1262170328).}
  proc defaultFont*(self: Ref[Theme]): Ref[Font] {.loadfrom("get_default_font", 3229501585).}
  proc hasDefaultFont*(self: Ref[Theme]): Bool {.loadfrom("has_default_font", 36873697).}
  proc `defaultFontSize=`*(self: Ref[Theme]; fontSize: int32) {.loadfrom("set_default_font_size", 1286410249).}
  proc defaultFontSize*(self: Ref[Theme]): int32 {.loadfrom("get_default_font_size", 3905245786).}
  proc hasDefaultFontSize*(self: Ref[Theme]): Bool {.loadfrom("has_default_font_size", 36873697).}
  proc setThemeItem*(self: Ref[Theme]; dataType: Theme|>DataType; name: StringName; themeType: StringName; value: ptr Variant) {.loadfrom("set_theme_item", 2492983623).}
  proc getThemeItem*(self: Ref[Theme]; dataType: Theme|>DataType; name: StringName; themeType: StringName): Variant {.loadfrom("get_theme_item", 2191024021).}
  proc hasThemeItem*(self: Ref[Theme]; dataType: Theme|>DataType; name: StringName; themeType: StringName): Bool {.loadfrom("has_theme_item", 1739311056).}
  proc renameThemeItem*(self: Ref[Theme]; dataType: Theme|>DataType; oldName: StringName; name: StringName; themeType: StringName) {.loadfrom("rename_theme_item", 3900867553).}
  proc clearThemeItem*(self: Ref[Theme]; dataType: Theme|>DataType; name: StringName; themeType: StringName) {.loadfrom("clear_theme_item", 2965505587).}
  proc getThemeItemList*(self: Ref[Theme]; dataType: Theme|>DataType; themeType: String): PackedStringArray {.loadfrom("get_theme_item_list", 3726716710).}
  proc getThemeItemTypeList*(self: Ref[Theme]; dataType: Theme|>DataType): PackedStringArray {.loadfrom("get_theme_item_type_list", 1316004935).}
  proc setTypeVariation*(self: Ref[Theme]; themeType: StringName; baseType: StringName) {.loadfrom("set_type_variation", 3740211285).}
  proc isTypeVariation*(self: Ref[Theme]; themeType: StringName; baseType: StringName): Bool {.loadfrom("is_type_variation", 471820014).}
  proc clearTypeVariation*(self: Ref[Theme]; themeType: StringName) {.loadfrom("clear_type_variation", 3304788590).}
  proc getTypeVariationBase*(self: Ref[Theme]; themeType: StringName): StringName {.loadfrom("get_type_variation_base", 1965194235).}
  proc getTypeVariationList*(self: Ref[Theme]; baseType: StringName): PackedStringArray {.loadfrom("get_type_variation_list", 1761182771).}
  proc addType*(self: Ref[Theme]; themeType: StringName) {.loadfrom("add_type", 3304788590).}
  proc removeType*(self: Ref[Theme]; themeType: StringName) {.loadfrom("remove_type", 3304788590).}
  proc getTypeList*(self: Ref[Theme]): PackedStringArray {.loadfrom("get_type_list", 1139954409).}
  proc mergeWith*(self: Ref[Theme]; other: Ref[Theme]) {.loadfrom("merge_with", 2326690814).}
  proc clear*(self: Ref[Theme]) {.loadfrom("clear", 3218959716).}

# TileMapPattern
define_godot_engine_class_essencials(TileMapPattern, Resource)
TileMapPattern.memberProcs:
  proc setCell*(self: Ref[TileMapPattern]; coords: Vector2i; sourceId: int32 = -1; atlasCoords: Vector2i = gdveci(-1, -1); alternativeTile: int32 = -1) {.loadfrom("set_cell", 634000503).}
  proc hasCell*(self: Ref[TileMapPattern]; coords: Vector2i): Bool {.loadfrom("has_cell", 3900751641).}
  proc removeCell*(self: Ref[TileMapPattern]; coords: Vector2i; updateSize: Bool) {.loadfrom("remove_cell", 4153096796).}
  proc getCellSourceId*(self: Ref[TileMapPattern]; coords: Vector2i): int32 {.loadfrom("get_cell_source_id", 2485466453).}
  proc getCellAtlasCoords*(self: Ref[TileMapPattern]; coords: Vector2i): Vector2i {.loadfrom("get_cell_atlas_coords", 3050897911).}
  proc getCellAlternativeTile*(self: Ref[TileMapPattern]; coords: Vector2i): int32 {.loadfrom("get_cell_alternative_tile", 2485466453).}
  proc getUsedCells*(self: Ref[TileMapPattern]): TypedArray[Vector2i] {.loadfrom("get_used_cells", 3995934104).}
  proc getSize*(self: Ref[TileMapPattern]): Vector2i {.loadfrom("get_size", 3690982128).}
  proc setSize*(self: Ref[TileMapPattern]; size: Vector2i) {.loadfrom("set_size", 1130785943).}
  proc isEmpty*(self: Ref[TileMapPattern]): Bool {.loadfrom("is_empty", 36873697).}

# TileSet
define_godot_engine_class_essencials(TileSet, Resource)
TileSet.memberProcs:
  proc getNextSourceId*(self: Ref[TileSet]): int32 {.loadfrom("get_next_source_id", 3905245786).}
  proc addSource*(self: Ref[TileSet]; source: Ref[TileSetSource]; atlasSourceIdOverride: int32 = -1): int32 {.loadfrom("add_source", 276991387).}
  proc removeSource*(self: Ref[TileSet]; sourceId: int32) {.loadfrom("remove_source", 1286410249).}
  proc setSourceId*(self: Ref[TileSet]; sourceId: int32; newSourceId: int32) {.loadfrom("set_source_id", 3937882851).}
  proc getSourceCount*(self: Ref[TileSet]): int32 {.loadfrom("get_source_count", 3905245786).}
  proc getSourceId*(self: Ref[TileSet]; index: int32): int32 {.loadfrom("get_source_id", 923996154).}
  proc hasSource*(self: Ref[TileSet]; sourceId: int32): Bool {.loadfrom("has_source", 1116898809).}
  proc getSource*(self: Ref[TileSet]; sourceId: int32): Ref[TileSetSource] {.loadfrom("get_source", 1763540252).}
  proc `tileShape=`*(self: Ref[TileSet]; shape: TileSet|>TileShape) {.loadfrom("set_tile_shape", 2131427112).}
  proc tileShape*(self: Ref[TileSet]): TileSet|>TileShape {.loadfrom("get_tile_shape", 716918169).}
  proc `tileLayout=`*(self: Ref[TileSet]; layout: TileSet|>TileLayout) {.loadfrom("set_tile_layout", 1071216679).}
  proc tileLayout*(self: Ref[TileSet]): TileSet|>TileLayout {.loadfrom("get_tile_layout", 194628839).}
  proc `tileOffaxis=`*(self: Ref[TileSet]; alignment: TileSet|>TileOffsetAxis) {.loadfrom("set_tile_offset_axis", 3300198521).}
  proc tileOffsetAxis*(self: Ref[TileSet]): TileSet|>TileOffsetAxis {.loadfrom("get_tile_offset_axis", 762494114).}
  proc `tileSize=`*(self: Ref[TileSet]; size: Vector2i) {.loadfrom("set_tile_size", 1130785943).}
  proc tileSize*(self: Ref[TileSet]): Vector2i {.loadfrom("get_tile_size", 3690982128).}
  proc `uvClipping=`*(self: Ref[TileSet]; uvClipping: Bool) {.loadfrom("set_uv_clipping", 2586408642).}
  proc isUvClipping*(self: Ref[TileSet]): Bool {.loadfrom("is_uv_clipping", 36873697).}
  proc getOcclusionLayersCount*(self: Ref[TileSet]): int32 {.loadfrom("get_occlusion_layers_count", 3905245786).}
  proc addOcclusionLayer*(self: Ref[TileSet]; toPosition: int32 = -1) {.loadfrom("add_occlusion_layer", 1025054187).}
  proc moveOcclusionLayer*(self: Ref[TileSet]; layerIndex: int32; toPosition: int32) {.loadfrom("move_occlusion_layer", 3937882851).}
  proc removeOcclusionLayer*(self: Ref[TileSet]; layerIndex: int32) {.loadfrom("remove_occlusion_layer", 1286410249).}
  proc setOcclusionLayerLightMask*(self: Ref[TileSet]; layerIndex: int32; lightMask: int32) {.loadfrom("set_occlusion_layer_light_mask", 3937882851).}
  proc getOcclusionLayerLightMask*(self: Ref[TileSet]; layerIndex: int32): int32 {.loadfrom("get_occlusion_layer_light_mask", 923996154).}
  proc setOcclusionLayerSdfCollision*(self: Ref[TileSet]; layerIndex: int32; sdfCollision: Bool) {.loadfrom("set_occlusion_layer_sdf_collision", 300928843).}
  proc getOcclusionLayerSdfCollision*(self: Ref[TileSet]; layerIndex: int32): Bool {.loadfrom("get_occlusion_layer_sdf_collision", 1116898809).}
  proc getPhysicsLayersCount*(self: Ref[TileSet]): int32 {.loadfrom("get_physics_layers_count", 3905245786).}
  proc addPhysicsLayer*(self: Ref[TileSet]; toPosition: int32 = -1) {.loadfrom("add_physics_layer", 1025054187).}
  proc movePhysicsLayer*(self: Ref[TileSet]; layerIndex: int32; toPosition: int32) {.loadfrom("move_physics_layer", 3937882851).}
  proc removePhysicsLayer*(self: Ref[TileSet]; layerIndex: int32) {.loadfrom("remove_physics_layer", 1286410249).}
  proc setPhysicsLayerCollisionLayer*(self: Ref[TileSet]; layerIndex: int32; layer: uint32) {.loadfrom("set_physics_layer_collision_layer", 3937882851).}
  proc getPhysicsLayerCollisionLayer*(self: Ref[TileSet]; layerIndex: int32): uint32 {.loadfrom("get_physics_layer_collision_layer", 923996154).}
  proc setPhysicsLayerCollisionMask*(self: Ref[TileSet]; layerIndex: int32; mask: uint32) {.loadfrom("set_physics_layer_collision_mask", 3937882851).}
  proc getPhysicsLayerCollisionMask*(self: Ref[TileSet]; layerIndex: int32): uint32 {.loadfrom("get_physics_layer_collision_mask", 923996154).}
  proc setPhysicsLayerPhysicsMaterial*(self: Ref[TileSet]; layerIndex: int32; physicsMaterial: Ref[PhysicsMaterial]) {.loadfrom("set_physics_layer_physics_material", 1018687357).}
  proc getPhysicsLayerPhysicsMaterial*(self: Ref[TileSet]; layerIndex: int32): Ref[PhysicsMaterial] {.loadfrom("get_physics_layer_physics_material", 788318639).}
  proc getTerrainSetsCount*(self: Ref[TileSet]): int32 {.loadfrom("get_terrain_sets_count", 3905245786).}
  proc addTerrainSet*(self: Ref[TileSet]; toPosition: int32 = -1) {.loadfrom("add_terrain_set", 1025054187).}
  proc moveTerrainSet*(self: Ref[TileSet]; terrainSet: int32; toPosition: int32) {.loadfrom("move_terrain_set", 3937882851).}
  proc removeTerrainSet*(self: Ref[TileSet]; terrainSet: int32) {.loadfrom("remove_terrain_set", 1286410249).}
  proc setTerrainSetMode*(self: Ref[TileSet]; terrainSet: int32; mode: TileSet|>TerrainMode) {.loadfrom("set_terrain_set_mode", 3943003916).}
  proc getTerrainSetMode*(self: Ref[TileSet]; terrainSet: int32): TileSet|>TerrainMode {.loadfrom("get_terrain_set_mode", 2084469411).}
  proc getTerrainsCount*(self: Ref[TileSet]; terrainSet: int32): int32 {.loadfrom("get_terrains_count", 923996154).}
  proc addTerrain*(self: Ref[TileSet]; terrainSet: int32; toPosition: int32 = -1) {.loadfrom("add_terrain", 3023605688).}
  proc moveTerrain*(self: Ref[TileSet]; terrainSet: int32; terrainIndex: int32; toPosition: int32) {.loadfrom("move_terrain", 1649997291).}
  proc removeTerrain*(self: Ref[TileSet]; terrainSet: int32; terrainIndex: int32) {.loadfrom("remove_terrain", 3937882851).}
  proc setTerrainName*(self: Ref[TileSet]; terrainSet: int32; terrainIndex: int32; name: String) {.loadfrom("set_terrain_name", 2285447957).}
  proc getTerrainName*(self: Ref[TileSet]; terrainSet: int32; terrainIndex: int32): String {.loadfrom("get_terrain_name", 1391810591).}
  proc setTerrainColor*(self: Ref[TileSet]; terrainSet: int32; terrainIndex: int32; color: Color) {.loadfrom("set_terrain_color", 3733378741).}
  proc getTerrainColor*(self: Ref[TileSet]; terrainSet: int32; terrainIndex: int32): Color {.loadfrom("get_terrain_color", 2165839948).}
  proc getNavigationLayersCount*(self: Ref[TileSet]): int32 {.loadfrom("get_navigation_layers_count", 3905245786).}
  proc addNavigationLayer*(self: Ref[TileSet]; toPosition: int32 = -1) {.loadfrom("add_navigation_layer", 1025054187).}
  proc moveNavigationLayer*(self: Ref[TileSet]; layerIndex: int32; toPosition: int32) {.loadfrom("move_navigation_layer", 3937882851).}
  proc removeNavigationLayer*(self: Ref[TileSet]; layerIndex: int32) {.loadfrom("remove_navigation_layer", 1286410249).}
  proc setNavigationLayerLayers*(self: Ref[TileSet]; layerIndex: int32; layers: uint32) {.loadfrom("set_navigation_layer_layers", 3937882851).}
  proc getNavigationLayerLayers*(self: Ref[TileSet]; layerIndex: int32): uint32 {.loadfrom("get_navigation_layer_layers", 923996154).}
  proc setNavigationLayerLayerValue*(self: Ref[TileSet]; layerIndex: int32; layerNumber: int32; value: Bool) {.loadfrom("set_navigation_layer_layer_value", 1383440665).}
  proc getNavigationLayerLayerValue*(self: Ref[TileSet]; layerIndex: int32; layerNumber: int32): Bool {.loadfrom("get_navigation_layer_layer_value", 2522259332).}
  proc getCustomDataLayersCount*(self: Ref[TileSet]): int32 {.loadfrom("get_custom_data_layers_count", 3905245786).}
  proc addCustomDataLayer*(self: Ref[TileSet]; toPosition: int32 = -1) {.loadfrom("add_custom_data_layer", 1025054187).}
  proc moveCustomDataLayer*(self: Ref[TileSet]; layerIndex: int32; toPosition: int32) {.loadfrom("move_custom_data_layer", 3937882851).}
  proc removeCustomDataLayer*(self: Ref[TileSet]; layerIndex: int32) {.loadfrom("remove_custom_data_layer", 1286410249).}
  proc getCustomDataLayerByName*(self: Ref[TileSet]; layerName: String): int32 {.loadfrom("get_custom_data_layer_by_name", 1321353865).}
  proc setCustomDataLayerName*(self: Ref[TileSet]; layerIndex: int32; layerName: String) {.loadfrom("set_custom_data_layer_name", 501894301).}
  proc getCustomDataLayerName*(self: Ref[TileSet]; layerIndex: int32): String {.loadfrom("get_custom_data_layer_name", 844755477).}
  proc setCustomDataLayerType*(self: Ref[TileSet]; layerIndex: int32; layerType: Variant|>Type) {.loadfrom("set_custom_data_layer_type", 3492912874).}
  proc getCustomDataLayerType*(self: Ref[TileSet]; layerIndex: int32): Variant|>Type {.loadfrom("get_custom_data_layer_type", 2990820875).}
  proc setSourceLevelTileProxy*(self: Ref[TileSet]; sourceFrom: int32; sourceTo: int32) {.loadfrom("set_source_level_tile_proxy", 3937882851).}
  proc getSourceLevelTileProxy*(self: Ref[TileSet]; sourceFrom: int32): int32 {.loadfrom("get_source_level_tile_proxy", 3744713108).}
  proc hasSourceLevelTileProxy*(self: Ref[TileSet]; sourceFrom: int32): Bool {.loadfrom("has_source_level_tile_proxy", 3067735520).}
  proc removeSourceLevelTileProxy*(self: Ref[TileSet]; sourceFrom: int32) {.loadfrom("remove_source_level_tile_proxy", 1286410249).}
  proc setCoordsLevelTileProxy*(self: Ref[TileSet]; pSourceFrom: int32; coordsFrom: Vector2i; sourceTo: int32; coordsTo: Vector2i) {.loadfrom("set_coords_level_tile_proxy", 1769939278).}
  proc getCoordsLevelTileProxy*(self: Ref[TileSet]; sourceFrom: int32; coordsFrom: Vector2i): Array {.loadfrom("get_coords_level_tile_proxy", 2856536371).}
  proc hasCoordsLevelTileProxy*(self: Ref[TileSet]; sourceFrom: int32; coordsFrom: Vector2i): Bool {.loadfrom("has_coords_level_tile_proxy", 3957903770).}
  proc removeCoordsLevelTileProxy*(self: Ref[TileSet]; sourceFrom: int32; coordsFrom: Vector2i) {.loadfrom("remove_coords_level_tile_proxy", 2311374912).}
  proc setAlternativeLevelTileProxy*(self: Ref[TileSet]; sourceFrom: int32; coordsFrom: Vector2i; alternativeFrom: int32; sourceTo: int32; coordsTo: Vector2i; alternativeTo: int32) {.loadfrom("set_alternative_level_tile_proxy", 3862385460).}
  proc getAlternativeLevelTileProxy*(self: Ref[TileSet]; sourceFrom: int32; coordsFrom: Vector2i; alternativeFrom: int32): Array {.loadfrom("get_alternative_level_tile_proxy", 2303761075).}
  proc hasAlternativeLevelTileProxy*(self: Ref[TileSet]; sourceFrom: int32; coordsFrom: Vector2i; alternativeFrom: int32): Bool {.loadfrom("has_alternative_level_tile_proxy", 180086755).}
  proc removeAlternativeLevelTileProxy*(self: Ref[TileSet]; sourceFrom: int32; coordsFrom: Vector2i; alternativeFrom: int32) {.loadfrom("remove_alternative_level_tile_proxy", 2328951467).}
  proc mapTileProxy*(self: Ref[TileSet]; sourceFrom: int32; coordsFrom: Vector2i; alternativeFrom: int32): Array {.loadfrom("map_tile_proxy", 4267935328).}
  proc cleanupInvalidTileProxies*(self: Ref[TileSet]) {.loadfrom("cleanup_invalid_tile_proxies", 3218959716).}
  proc clearTileProxies*(self: Ref[TileSet]) {.loadfrom("clear_tile_proxies", 3218959716).}
  proc addPattern*(self: Ref[TileSet]; pattern: Ref[TileMapPattern]; index: int32 = -1): int32 {.loadfrom("add_pattern", 3009264082).}
  proc getPattern*(self: Ref[TileSet]; index: int32 = -1): Ref[TileMapPattern] {.loadfrom("get_pattern", 4207737510).}
  proc removePattern*(self: Ref[TileSet]; index: int32) {.loadfrom("remove_pattern", 1286410249).}
  proc getPatternsCount*(self: Ref[TileSet]): int32 {.loadfrom("get_patterns_count", 2455072627).}

# TileSetSource
define_godot_engine_class_essencials(TileSetSource, Resource)
TileSetSource.memberProcs:
  proc getTilesCount*(self: Ref[TileSetSource]): int32 {.loadfrom("get_tiles_count", 3905245786).}
  proc getTileId*(self: Ref[TileSetSource]; index: int32): Vector2i {.loadfrom("get_tile_id", 880721226).}
  proc hasTile*(self: Ref[TileSetSource]; atlasCoords: Vector2i): Bool {.loadfrom("has_tile", 3900751641).}
  proc getAlternativeTilesCount*(self: Ref[TileSetSource]; atlasCoords: Vector2i): int32 {.loadfrom("get_alternative_tiles_count", 2485466453).}
  proc getAlternativeTileId*(self: Ref[TileSetSource]; atlasCoords: Vector2i; index: int32): int32 {.loadfrom("get_alternative_tile_id", 89881719).}
  proc hasAlternativeTile*(self: Ref[TileSetSource]; atlasCoords: Vector2i; alternativeTile: int32): Bool {.loadfrom("has_alternative_tile", 1073731340).}

# Translation
define_godot_engine_class_essencials(Translation, Resource)
method getPluralMessage*(self: Ref[Translation]; srcMessage: StringName; srcPluralMessage: StringName; n: int32; context: StringName): StringName {.base.} = (discard)
method getMessage*(self: Ref[Translation]; srcMessage: StringName; context: StringName): StringName {.base.} = (discard)
Translation.memberProcs:
  proc `locale=`*(self: Ref[Translation]; locale: String) {.loadfrom("set_locale", 83702148).}
  proc locale*(self: Ref[Translation]): String {.loadfrom("get_locale", 201670096).}
  proc addMessage*(self: Ref[Translation]; srcMessage: StringName; xlatedMessage: StringName; context: StringName = "") {.loadfrom("add_message", 971803314).}
  proc addPluralMessage*(self: Ref[Translation]; srcMessage: StringName; xlatedMessages: PackedStringArray; context: StringName = "") {.loadfrom("add_plural_message", 360316719).}
  proc getMessage*(self: Ref[Translation]; srcMessage: StringName; context: StringName = ""): StringName {.loadfrom("get_message", 58037827).}
  proc getPluralMessage*(self: Ref[Translation]; srcMessage: StringName; srcPluralMessage: StringName; n: int32; context: StringName = ""): StringName {.loadfrom("get_plural_message", 1333931916).}
  proc eraseMessage*(self: Ref[Translation]; srcMessage: StringName; context: StringName = "") {.loadfrom("erase_message", 3919944288).}
  proc getMessageList*(self: Ref[Translation]): PackedStringArray {.loadfrom("get_message_list", 1139954409).}
  proc getTranslatedMessageList*(self: Ref[Translation]): PackedStringArray {.loadfrom("get_translated_message_list", 1139954409).}
  proc getMessageCount*(self: Ref[Translation]): int32 {.loadfrom("get_message_count", 3905245786).}

# VideoStream
define_godot_engine_class_essencials(VideoStream, Resource)
method instantiatePlayback*(self: Ref[VideoStream]): Ref[VideoStreamPlayback] {.base.} = (discard)
VideoStream.memberProcs:
  proc `file=`*(self: Ref[VideoStream]; file: String) {.loadfrom("set_file", 83702148).}
  proc file*(self: Ref[VideoStream]): String {.loadfrom("get_file", 2841200299).}

# VideoStreamPlayback
define_godot_engine_class_essencials(VideoStreamPlayback, Resource)
method stop*(self: Ref[VideoStreamPlayback]) {.base.} = (discard)
method play*(self: Ref[VideoStreamPlayback]) {.base.} = (discard)
method isPlaying*(self: Ref[VideoStreamPlayback]): Bool {.base.} = (discard)
method setPaused*(self: Ref[VideoStreamPlayback]; paused: Bool) {.base.} = (discard)
method isPaused*(self: Ref[VideoStreamPlayback]): Bool {.base.} = (discard)
method getLength*(self: Ref[VideoStreamPlayback]): float64 {.base.} = (discard)
method getPlaybackPosition*(self: Ref[VideoStreamPlayback]): float64 {.base.} = (discard)
method seek*(self: Ref[VideoStreamPlayback]; time: float64) {.base.} = (discard)
method setAudioTrack*(self: Ref[VideoStreamPlayback]; idx: int32) {.base.} = (discard)
method getTexture*(self: Ref[VideoStreamPlayback]): Ref[Texture2D] {.base.} = (discard)
method update*(self: Ref[VideoStreamPlayback]; delta: float64) {.base.} = (discard)
method getChannels*(self: Ref[VideoStreamPlayback]): int32 {.base.} = (discard)
method getMixRate*(self: Ref[VideoStreamPlayback]): int32 {.base.} = (discard)
VideoStreamPlayback.memberProcs:
  proc mixAudio*(self: Ref[VideoStreamPlayback]; numFrames: int32; buffer: PackedFloat32Array = PackedFloat32Array(); offset: int32 = 0): int32 {.loadfrom("mix_audio", 1369271885).}

# VisualShaderNode
define_godot_engine_class_essencials(VisualShaderNode, Resource)
VisualShaderNode.memberProcs:
  proc `outputPortForPreview=`*(self: Ref[VisualShaderNode]; port: int32) {.loadfrom("set_output_port_for_preview", 1286410249).}
  proc outputPortForPreview*(self: Ref[VisualShaderNode]): int32 {.loadfrom("get_output_port_for_preview", 3905245786).}
  proc setInputPortDefaultValue*(self: Ref[VisualShaderNode]; port: int32; value: ptr Variant; prevValue: ptr Variant = nil) {.loadfrom("set_input_port_default_value", 150923387).}
  proc getInputPortDefaultValue*(self: Ref[VisualShaderNode]; port: int32): Variant {.loadfrom("get_input_port_default_value", 4227898402).}
  proc removeInputPortDefaultValue*(self: Ref[VisualShaderNode]; port: int32) {.loadfrom("remove_input_port_default_value", 1286410249).}
  proc clearDefaultInputValues*(self: Ref[VisualShaderNode]) {.loadfrom("clear_default_input_values", 3218959716).}
  proc `defaultInputValues=`*(self: Ref[VisualShaderNode]; values: Array) {.loadfrom("set_default_input_values", 381264803).}
  proc defaultInputValues*(self: Ref[VisualShaderNode]): Array {.loadfrom("get_default_input_values", 3995934104).}

# VoxelGIData
define_godot_engine_class_essencials(VoxelGIData, Resource)
VoxelGIData.memberProcs:
  proc allocate*(self: Ref[VoxelGIData]; toCellXform: Transform3D; aabb: AABB; octreeSize: Vector3; octreeCells: PackedByteArray; dataCells: PackedByteArray; distanceField: PackedByteArray; levelCounts: PackedInt32Array) {.loadfrom("allocate", 4041601946).}
  proc getBounds*(self: Ref[VoxelGIData]): AABB {.loadfrom("get_bounds", 1068685055).}
  proc getOctreeSize*(self: Ref[VoxelGIData]): Vector3 {.loadfrom("get_octree_size", 3360562783).}
  proc getToCellXform*(self: Ref[VoxelGIData]): Transform3D {.loadfrom("get_to_cell_xform", 3229777777).}
  proc getOctreeCells*(self: Ref[VoxelGIData]): PackedByteArray {.loadfrom("get_octree_cells", 2362200018).}
  proc getDataCells*(self: Ref[VoxelGIData]): PackedByteArray {.loadfrom("get_data_cells", 2362200018).}
  proc getLevelCounts*(self: Ref[VoxelGIData]): PackedInt32Array {.loadfrom("get_level_counts", 1930428628).}
  proc `dynamicRange=`*(self: Ref[VoxelGIData]; dynamicRange: Float) {.loadfrom("set_dynamic_range", 373806689).}
  proc dynamicRange*(self: Ref[VoxelGIData]): Float {.loadfrom("get_dynamic_range", 1740695150).}
  proc `energy=`*(self: Ref[VoxelGIData]; energy: Float) {.loadfrom("set_energy", 373806689).}
  proc energy*(self: Ref[VoxelGIData]): Float {.loadfrom("get_energy", 1740695150).}
  proc `bias=`*(self: Ref[VoxelGIData]; bias: Float) {.loadfrom("set_bias", 373806689).}
  proc bias*(self: Ref[VoxelGIData]): Float {.loadfrom("get_bias", 1740695150).}
  proc `normalBias=`*(self: Ref[VoxelGIData]; bias: Float) {.loadfrom("set_normal_bias", 373806689).}
  proc normalBias*(self: Ref[VoxelGIData]): Float {.loadfrom("get_normal_bias", 1740695150).}
  proc `propagation=`*(self: Ref[VoxelGIData]; propagation: Float) {.loadfrom("set_propagation", 373806689).}
  proc propagation*(self: Ref[VoxelGIData]): Float {.loadfrom("get_propagation", 1740695150).}
  proc `interior=`*(self: Ref[VoxelGIData]; interior: Bool) {.loadfrom("set_interior", 2586408642).}
  proc isInterior*(self: Ref[VoxelGIData]): Bool {.loadfrom("is_interior", 36873697).}
  proc `useTwoBounces=`*(self: Ref[VoxelGIData]; enable: Bool) {.loadfrom("set_use_two_bounces", 2586408642).}
  proc isUsingTwoBounces*(self: Ref[VoxelGIData]): Bool {.loadfrom("is_using_two_bounces", 36873697).}

# World2D
define_godot_engine_class_essencials(World2D, Resource)
World2D.memberProcs:
  proc canvas*(self: Ref[World2D]): RID {.loadfrom("get_canvas", 2944877500).}
  proc space*(self: Ref[World2D]): RID {.loadfrom("get_space", 2944877500).}
  proc navigationMap*(self: Ref[World2D]): RID {.loadfrom("get_navigation_map", 2944877500).}
  proc directSpaceState*(self: Ref[World2D]): PhysicsDirectSpaceState2D {.loadfrom("get_direct_space_state", 2506717822).}

# World3D
define_godot_engine_class_essencials(World3D, Resource)
World3D.memberProcs:
  proc space*(self: Ref[World3D]): RID {.loadfrom("get_space", 2944877500).}
  proc navigationMap*(self: Ref[World3D]): RID {.loadfrom("get_navigation_map", 2944877500).}
  proc scenario*(self: Ref[World3D]): RID {.loadfrom("get_scenario", 2944877500).}
  proc `environment=`*(self: Ref[World3D]; env: Ref[Environment]) {.loadfrom("set_environment", 4143518816).}
  proc environment*(self: Ref[World3D]): Ref[Environment] {.loadfrom("get_environment", 3082064660).}
  proc `fallbackEnvironment=`*(self: Ref[World3D]; env: Ref[Environment]) {.loadfrom("set_fallback_environment", 4143518816).}
  proc fallbackEnvironment*(self: Ref[World3D]): Ref[Environment] {.loadfrom("get_fallback_environment", 3082064660).}
  proc `cameraAttributes=`*(self: Ref[World3D]; attributes: Ref[CameraAttributes]) {.loadfrom("set_camera_attributes", 2817810567).}
  proc cameraAttributes*(self: Ref[World3D]): Ref[CameraAttributes] {.loadfrom("get_camera_attributes", 3921283215).}
  proc directSpaceState*(self: Ref[World3D]): PhysicsDirectSpaceState3D {.loadfrom("get_direct_space_state", 2069328350).}

# X509Certificate
define_godot_engine_class_essencials(X509Certificate, Resource)
X509Certificate.memberProcs:
  proc save*(self: Ref[X509Certificate]; path: String): Error {.loadfrom("save", 166001499).}
  proc load*(self: Ref[X509Certificate]; path: String): Error {.loadfrom("load", 166001499).}
  proc saveToString*(self: Ref[X509Certificate]): String {.loadfrom("save_to_string", 2841200299).}
  proc loadFromString*(self: Ref[X509Certificate]; string: String): Error {.loadfrom("load_from_string", 166001499).}

# ResourceFormatImporterSaver
define_godot_engine_class_essencials(ResourceFormatImporterSaver, ResourceFormatSaver)

# EditorImportPlugin
define_godot_engine_class_essencials(EditorImportPlugin, ResourceImporter)
method getImporterName*(self: Ref[EditorImportPlugin]): String {.base.} = (discard)
method getVisibleName*(self: Ref[EditorImportPlugin]): String {.base.} = (discard)
method getPresetCount*(self: Ref[EditorImportPlugin]): int32 {.base.} = (discard)
method getPresetName*(self: Ref[EditorImportPlugin]; presetIndex: int32): String {.base.} = (discard)
method getRecognizedExtensions*(self: Ref[EditorImportPlugin]): PackedStringArray {.base.} = (discard)
method getImportOptions*(self: Ref[EditorImportPlugin]; path: String; presetIndex: int32): TypedArray[Dictionary] {.base.} = (discard)
method getSaveExtension*(self: Ref[EditorImportPlugin]): String {.base.} = (discard)
method getResourceType*(self: Ref[EditorImportPlugin]): String {.base.} = (discard)
method getPriority*(self: Ref[EditorImportPlugin]): Float {.base.} = (discard)
method getImportOrder*(self: Ref[EditorImportPlugin]): int32 {.base.} = (discard)
method getOptionVisibility*(self: Ref[EditorImportPlugin]; path: String; optionName: StringName; options: Dictionary): Bool {.base.} = (discard)
method `import`*(self: Ref[EditorImportPlugin]; sourceFile: String; savePath: String; options: Dictionary; platformVariants: TypedArray[String]; genFiles: TypedArray[String]): Error {.base.} = (discard)
EditorImportPlugin.memberProcs:
  proc appendImportExternalResource*(self: Ref[EditorImportPlugin]; path: String; customOptions: Dictionary = Dictionary|>init(); customImporter: String = ""; generatorParameters: ptr Variant = nil): Error {.loadfrom("append_import_external_resource", 3645925746).}

# StreamPeerBuffer
define_godot_engine_class_essencials(StreamPeerBuffer, StreamPeer)
StreamPeerBuffer.memberProcs:
  proc seek*(self: Ref[StreamPeerBuffer]; position: int32) {.loadfrom("seek", 1286410249).}
  proc getSize*(self: Ref[StreamPeerBuffer]): int32 {.loadfrom("get_size", 3905245786).}
  proc getPosition*(self: Ref[StreamPeerBuffer]): int32 {.loadfrom("get_position", 3905245786).}
  proc resize*(self: Ref[StreamPeerBuffer]; size: int32) {.loadfrom("resize", 1286410249).}
  proc `dataArray=`*(self: Ref[StreamPeerBuffer]; data: PackedByteArray) {.loadfrom("set_data_array", 2971499966).}
  proc dataArray*(self: Ref[StreamPeerBuffer]): PackedByteArray {.loadfrom("get_data_array", 2362200018).}
  proc clear*(self: Ref[StreamPeerBuffer]) {.loadfrom("clear", 3218959716).}
  proc duplicate*(self: Ref[StreamPeerBuffer]): Ref[StreamPeerBuffer] {.loadfrom("duplicate", 2474064677).}

# StreamPeerExtension
define_godot_engine_class_essencials(StreamPeerExtension, StreamPeer)
method getData*(self: Ref[StreamPeerExtension]; rBuffer: ptr uint8; rBytes: int32; rReceived: ptr int32): Error {.base.} = (discard)
method getPartialData*(self: Ref[StreamPeerExtension]; rBuffer: ptr uint8; rBytes: int32; rReceived: ptr int32): Error {.base.} = (discard)
method putData*(self: Ref[StreamPeerExtension]; pData: ptr uint8; pBytes: int32; rSent: ptr int32): Error {.base.} = (discard)
method putPartialData*(self: Ref[StreamPeerExtension]; pData: ptr uint8; pBytes: int32; rSent: ptr int32): Error {.base.} = (discard)
method getAvailableBytes*(self: Ref[StreamPeerExtension]): int32 {.base.} = (discard)

# StreamPeerGZIP
define_godot_engine_class_essencials(StreamPeerGZIP, StreamPeer)
StreamPeerGZIP.memberProcs:
  proc startCompression*(self: Ref[StreamPeerGZIP]; useDeflate: Bool = false; bufferSize: int32 = 65535): Error {.loadfrom("start_compression", 781582770).}
  proc startDecompression*(self: Ref[StreamPeerGZIP]; useDeflate: Bool = false; bufferSize: int32 = 65535): Error {.loadfrom("start_decompression", 781582770).}
  proc finish*(self: Ref[StreamPeerGZIP]): Error {.loadfrom("finish", 166280745).}
  proc clear*(self: Ref[StreamPeerGZIP]) {.loadfrom("clear", 3218959716).}

# StreamPeerTCP
define_godot_engine_class_essencials(StreamPeerTCP, StreamPeer)
StreamPeerTCP.memberProcs:
  proc `bind`*(self: Ref[StreamPeerTCP]; port: int32; host: String = "*"): Error {.loadfrom("bind", 4025329869).}
  proc connectToHost*(self: Ref[StreamPeerTCP]; host: String; port: int32): Error {.loadfrom("connect_to_host", 993915709).}
  proc poll*(self: Ref[StreamPeerTCP]): Error {.loadfrom("poll", 166280745).}
  proc getStatus*(self: Ref[StreamPeerTCP]): StreamPeerTCP|>Status {.loadfrom("get_status", 859471121).}
  proc getConnectedHost*(self: Ref[StreamPeerTCP]): String {.loadfrom("get_connected_host", 201670096).}
  proc getConnectedPort*(self: Ref[StreamPeerTCP]): int32 {.loadfrom("get_connected_port", 3905245786).}
  proc getLocalPort*(self: Ref[StreamPeerTCP]): int32 {.loadfrom("get_local_port", 3905245786).}
  proc disconnectFromHost*(self: Ref[StreamPeerTCP]) {.loadfrom("disconnect_from_host", 3218959716).}
  proc setNoDelay*(self: Ref[StreamPeerTCP]; enabled: Bool) {.loadfrom("set_no_delay", 2586408642).}

# StreamPeerTLS
define_godot_engine_class_essencials(StreamPeerTLS, StreamPeer)
StreamPeerTLS.memberProcs:
  proc poll*(self: Ref[StreamPeerTLS]) {.loadfrom("poll", 3218959716).}
  proc acceptStream*(self: Ref[StreamPeerTLS]; stream: Ref[StreamPeer]; serverOptions: Ref[TLSOptions]): Error {.loadfrom("accept_stream", 4292689651).}
  proc connectToStream*(self: Ref[StreamPeerTLS]; stream: Ref[StreamPeer]; commonName: String; clientOptions: Ref[TLSOptions] = default Ref[TLSOptions]): Error {.loadfrom("connect_to_stream", 1325480781).}
  proc getStatus*(self: Ref[StreamPeerTLS]): StreamPeerTLS|>Status {.loadfrom("get_status", 1128380576).}
  proc getStream*(self: Ref[StreamPeerTLS]): Ref[StreamPeer] {.loadfrom("get_stream", 2741655269).}
  proc disconnectFromStream*(self: Ref[StreamPeerTLS]) {.loadfrom("disconnect_from_stream", 3218959716).}

# TextServerExtension
define_godot_engine_class_essencials(TextServerExtension, TextServer)
method hasFeature*(self: Ref[TextServerExtension]; feature: TextServer|>Feature): Bool {.base.} = (discard)
method getName*(self: Ref[TextServerExtension]): String {.base.} = (discard)
method getFeatures*(self: Ref[TextServerExtension]): int64 {.base.} = (discard)
method freeRid*(self: Ref[TextServerExtension]; rid: RID) {.base.} = (discard)
method has*(self: Ref[TextServerExtension]; rid: RID): Bool {.base.} = (discard)
method loadSupportData*(self: Ref[TextServerExtension]; filename: String): Bool {.base.} = (discard)
method getSupportDataFilename*(self: Ref[TextServerExtension]): String {.base.} = (discard)
method getSupportDataInfo*(self: Ref[TextServerExtension]): String {.base.} = (discard)
method saveSupportData*(self: Ref[TextServerExtension]; filename: String): Bool {.base.} = (discard)
method isLocaleRightToLeft*(self: Ref[TextServerExtension]; locale: String): Bool {.base.} = (discard)
method nameToTag*(self: Ref[TextServerExtension]; name: String): int64 {.base.} = (discard)
method tagToName*(self: Ref[TextServerExtension]; tag: int64): String {.base.} = (discard)
method createFont*(self: Ref[TextServerExtension]): RID {.base.} = (discard)
method fontSetData*(self: Ref[TextServerExtension]; fontRid: RID; data: PackedByteArray) {.base.} = (discard)
method fontSetDataPtr*(self: Ref[TextServerExtension]; fontRid: RID; dataPtr: ptr uint8; dataSize: int64) {.base.} = (discard)
method fontSetFaceIndex*(self: Ref[TextServerExtension]; fontRid: RID; faceIndex: int64) {.base.} = (discard)
method fontGetFaceIndex*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontGetFaceCount*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontSetStyle*(self: Ref[TextServerExtension]; fontRid: RID; style: set[TextServer|>FontStyle]) {.base.} = (discard)
method fontGetStyle*(self: Ref[TextServerExtension]; fontRid: RID): set[TextServer|>FontStyle] {.base.} = (discard)
method fontSetName*(self: Ref[TextServerExtension]; fontRid: RID; name: String) {.base.} = (discard)
method fontGetName*(self: Ref[TextServerExtension]; fontRid: RID): String {.base.} = (discard)
method fontGetOtNameStrings*(self: Ref[TextServerExtension]; fontRid: RID): Dictionary {.base.} = (discard)
method fontSetStyleName*(self: Ref[TextServerExtension]; fontRid: RID; nameStyle: String) {.base.} = (discard)
method fontGetStyleName*(self: Ref[TextServerExtension]; fontRid: RID): String {.base.} = (discard)
method fontSetWeight*(self: Ref[TextServerExtension]; fontRid: RID; weight: int64) {.base.} = (discard)
method fontGetWeight*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontSetStretch*(self: Ref[TextServerExtension]; fontRid: RID; stretch: int64) {.base.} = (discard)
method fontGetStretch*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontSetAntialiasing*(self: Ref[TextServerExtension]; fontRid: RID; antialiasing: TextServer|>FontAntialiasing) {.base.} = (discard)
method fontGetAntialiasing*(self: Ref[TextServerExtension]; fontRid: RID): TextServer|>FontAntialiasing {.base.} = (discard)
method fontSetGenerateMipmaps*(self: Ref[TextServerExtension]; fontRid: RID; generateMipmaps: Bool) {.base.} = (discard)
method fontGetGenerateMipmaps*(self: Ref[TextServerExtension]; fontRid: RID): Bool {.base.} = (discard)
method fontSetMultichannelSignedDistanceField*(self: Ref[TextServerExtension]; fontRid: RID; msdf: Bool) {.base.} = (discard)
method fontIsMultichannelSignedDistanceField*(self: Ref[TextServerExtension]; fontRid: RID): Bool {.base.} = (discard)
method fontSetMsdfPixelRange*(self: Ref[TextServerExtension]; fontRid: RID; msdfPixelRange: int64) {.base.} = (discard)
method fontGetMsdfPixelRange*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontSetMsdfSize*(self: Ref[TextServerExtension]; fontRid: RID; msdfSize: int64) {.base.} = (discard)
method fontGetMsdfSize*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontSetFixedSize*(self: Ref[TextServerExtension]; fontRid: RID; fixedSize: int64) {.base.} = (discard)
method fontGetFixedSize*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontSetAllowSystemFallback*(self: Ref[TextServerExtension]; fontRid: RID; allowSystemFallback: Bool) {.base.} = (discard)
method fontIsAllowSystemFallback*(self: Ref[TextServerExtension]; fontRid: RID): Bool {.base.} = (discard)
method fontSetForceAutohinter*(self: Ref[TextServerExtension]; fontRid: RID; forceAutohinter: Bool) {.base.} = (discard)
method fontIsForceAutohinter*(self: Ref[TextServerExtension]; fontRid: RID): Bool {.base.} = (discard)
method fontSetHinting*(self: Ref[TextServerExtension]; fontRid: RID; hinting: TextServer|>Hinting) {.base.} = (discard)
method fontGetHinting*(self: Ref[TextServerExtension]; fontRid: RID): TextServer|>Hinting {.base.} = (discard)
method fontSetSubpixelPositioning*(self: Ref[TextServerExtension]; fontRid: RID; subpixelPositioning: TextServer|>SubpixelPositioning) {.base.} = (discard)
method fontGetSubpixelPositioning*(self: Ref[TextServerExtension]; fontRid: RID): TextServer|>SubpixelPositioning {.base.} = (discard)
method fontSetEmbolden*(self: Ref[TextServerExtension]; fontRid: RID; strength: float64) {.base.} = (discard)
method fontGetEmbolden*(self: Ref[TextServerExtension]; fontRid: RID): float64 {.base.} = (discard)
method fontSetTransform*(self: Ref[TextServerExtension]; fontRid: RID; transform: Transform2D) {.base.} = (discard)
method fontGetTransform*(self: Ref[TextServerExtension]; fontRid: RID): Transform2D {.base.} = (discard)
method fontSetVariationCoordinates*(self: Ref[TextServerExtension]; fontRid: RID; variationCoordinates: Dictionary) {.base.} = (discard)
method fontGetVariationCoordinates*(self: Ref[TextServerExtension]; fontRid: RID): Dictionary {.base.} = (discard)
method fontSetOversampling*(self: Ref[TextServerExtension]; fontRid: RID; oversampling: float64) {.base.} = (discard)
method fontGetOversampling*(self: Ref[TextServerExtension]; fontRid: RID): float64 {.base.} = (discard)
method fontGetSizeCacheList*(self: Ref[TextServerExtension]; fontRid: RID): TypedArray[Vector2i] {.base.} = (discard)
method fontClearSizeCache*(self: Ref[TextServerExtension]; fontRid: RID) {.base.} = (discard)
method fontRemoveSizeCache*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i) {.base.} = (discard)
method fontSetAscent*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; ascent: float64) {.base.} = (discard)
method fontGetAscent*(self: Ref[TextServerExtension]; fontRid: RID; size: int64): float64 {.base.} = (discard)
method fontSetDescent*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; descent: float64) {.base.} = (discard)
method fontGetDescent*(self: Ref[TextServerExtension]; fontRid: RID; size: int64): float64 {.base.} = (discard)
method fontSetUnderlinePosition*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; underlinePosition: float64) {.base.} = (discard)
method fontGetUnderlinePosition*(self: Ref[TextServerExtension]; fontRid: RID; size: int64): float64 {.base.} = (discard)
method fontSetUnderlineThickness*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; underlineThickness: float64) {.base.} = (discard)
method fontGetUnderlineThickness*(self: Ref[TextServerExtension]; fontRid: RID; size: int64): float64 {.base.} = (discard)
method fontSetScale*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; scale: float64) {.base.} = (discard)
method fontGetScale*(self: Ref[TextServerExtension]; fontRid: RID; size: int64): float64 {.base.} = (discard)
method fontGetTextureCount*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i): int64 {.base.} = (discard)
method fontClearTextures*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i) {.base.} = (discard)
method fontRemoveTexture*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; textureIndex: int64) {.base.} = (discard)
method fontSetTextureImage*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; textureIndex: int64; image: Ref[Image]) {.base.} = (discard)
method fontGetTextureImage*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; textureIndex: int64): Ref[Image] {.base.} = (discard)
method fontSetTextureOffsets*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; textureIndex: int64; offset: PackedInt32Array) {.base.} = (discard)
method fontGetTextureOffsets*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; textureIndex: int64): PackedInt32Array {.base.} = (discard)
method fontGetGlyphList*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i): PackedInt32Array {.base.} = (discard)
method fontClearGlyphs*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i) {.base.} = (discard)
method fontRemoveGlyph*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64) {.base.} = (discard)
method fontGetGlyphAdvance*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; glyph: int64): Vector2 {.base.} = (discard)
method fontSetGlyphAdvance*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; glyph: int64; advance: Vector2) {.base.} = (discard)
method fontGetGlyphOffset*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64): Vector2 {.base.} = (discard)
method fontSetGlyphOffset*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64; offset: Vector2) {.base.} = (discard)
method fontGetGlyphSize*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64): Vector2 {.base.} = (discard)
method fontSetGlyphSize*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64; glSize: Vector2) {.base.} = (discard)
method fontGetGlyphUvRect*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64): Rect2 {.base.} = (discard)
method fontSetGlyphUvRect*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64; uvRect: Rect2) {.base.} = (discard)
method fontGetGlyphTextureIdx*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64): int64 {.base.} = (discard)
method fontSetGlyphTextureIdx*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64; textureIdx: int64) {.base.} = (discard)
method fontGetGlyphTextureRid*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64): RID {.base.} = (discard)
method fontGetGlyphTextureSize*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64): Vector2 {.base.} = (discard)
method fontGetGlyphContours*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; index: int64): Dictionary {.base.} = (discard)
method fontGetKerningList*(self: Ref[TextServerExtension]; fontRid: RID; size: int64): TypedArray[Vector2i] {.base.} = (discard)
method fontClearKerningMap*(self: Ref[TextServerExtension]; fontRid: RID; size: int64) {.base.} = (discard)
method fontRemoveKerning*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; glyphPair: Vector2i) {.base.} = (discard)
method fontSetKerning*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; glyphPair: Vector2i; kerning: Vector2) {.base.} = (discard)
method fontGetKerning*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; glyphPair: Vector2i): Vector2 {.base.} = (discard)
method fontGetGlyphIndex*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; char: int64; variationSelector: int64): int64 {.base.} = (discard)
method fontGetCharFromGlyphIndex*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; glyphIndex: int64): int64 {.base.} = (discard)
method fontHasChar*(self: Ref[TextServerExtension]; fontRid: RID; char: int64): Bool {.base.} = (discard)
method fontGetSupportedChars*(self: Ref[TextServerExtension]; fontRid: RID): String {.base.} = (discard)
method fontRenderRange*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; start: int64; `end`: int64) {.base.} = (discard)
method fontRenderGlyph*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; index: int64) {.base.} = (discard)
method fontDrawGlyph*(self: Ref[TextServerExtension]; fontRid: RID; canvas: RID; size: int64; pos: Vector2; index: int64; color: Color) {.base.} = (discard)
method fontDrawGlyphOutline*(self: Ref[TextServerExtension]; fontRid: RID; canvas: RID; size: int64; outlineSize: int64; pos: Vector2; index: int64; color: Color) {.base.} = (discard)
method fontIsLanguageSupported*(self: Ref[TextServerExtension]; fontRid: RID; language: String): Bool {.base.} = (discard)
method fontSetLanguageSupportOverride*(self: Ref[TextServerExtension]; fontRid: RID; language: String; supported: Bool) {.base.} = (discard)
method fontGetLanguageSupportOverride*(self: Ref[TextServerExtension]; fontRid: RID; language: String): Bool {.base.} = (discard)
method fontRemoveLanguageSupportOverride*(self: Ref[TextServerExtension]; fontRid: RID; language: String) {.base.} = (discard)
method fontGetLanguageSupportOverrides*(self: Ref[TextServerExtension]; fontRid: RID): PackedStringArray {.base.} = (discard)
method fontIsScriptSupported*(self: Ref[TextServerExtension]; fontRid: RID; script: String): Bool {.base.} = (discard)
method fontSetScriptSupportOverride*(self: Ref[TextServerExtension]; fontRid: RID; script: String; supported: Bool) {.base.} = (discard)
method fontGetScriptSupportOverride*(self: Ref[TextServerExtension]; fontRid: RID; script: String): Bool {.base.} = (discard)
method fontRemoveScriptSupportOverride*(self: Ref[TextServerExtension]; fontRid: RID; script: String) {.base.} = (discard)
method fontGetScriptSupportOverrides*(self: Ref[TextServerExtension]; fontRid: RID): PackedStringArray {.base.} = (discard)
method fontSetOpentypeFeatureOverrides*(self: Ref[TextServerExtension]; fontRid: RID; overrides: Dictionary) {.base.} = (discard)
method fontGetOpentypeFeatureOverrides*(self: Ref[TextServerExtension]; fontRid: RID): Dictionary {.base.} = (discard)
method fontSupportedFeatureList*(self: Ref[TextServerExtension]; fontRid: RID): Dictionary {.base.} = (discard)
method fontSupportedVariationList*(self: Ref[TextServerExtension]; fontRid: RID): Dictionary {.base.} = (discard)
method fontGetGlobalOversampling*(self: Ref[TextServerExtension]): float64 {.base.} = (discard)
method fontSetGlobalOversampling*(self: Ref[TextServerExtension]; oversampling: float64) {.base.} = (discard)
method getHexCodeBoxSize*(self: Ref[TextServerExtension]; size: int64; index: int64): Vector2 {.base.} = (discard)
method drawHexCodeBox*(self: Ref[TextServerExtension]; canvas: RID; size: int64; pos: Vector2; index: int64; color: Color) {.base.} = (discard)
method createShapedText*(self: Ref[TextServerExtension]; direction: TextServer|>Direction; orientation: TextServer|>Orientation): RID {.base.} = (discard)
method shapedTextClear*(self: Ref[TextServerExtension]; shaped: RID) {.base.} = (discard)
method shapedTextSetDirection*(self: Ref[TextServerExtension]; shaped: RID; direction: TextServer|>Direction) {.base.} = (discard)
method shapedTextGetDirection*(self: Ref[TextServerExtension]; shaped: RID): TextServer|>Direction {.base.} = (discard)
method shapedTextGetInferredDirection*(self: Ref[TextServerExtension]; shaped: RID): TextServer|>Direction {.base.} = (discard)
method shapedTextSetBidiOverride*(self: Ref[TextServerExtension]; shaped: RID; override: Array) {.base.} = (discard)
method shapedTextSetCustomPunctuation*(self: Ref[TextServerExtension]; shaped: RID; punct: String) {.base.} = (discard)
method shapedTextGetCustomPunctuation*(self: Ref[TextServerExtension]; shaped: RID): String {.base.} = (discard)
method shapedTextSetOrientation*(self: Ref[TextServerExtension]; shaped: RID; orientation: TextServer|>Orientation) {.base.} = (discard)
method shapedTextGetOrientation*(self: Ref[TextServerExtension]; shaped: RID): TextServer|>Orientation {.base.} = (discard)
method shapedTextSetPreserveInvalid*(self: Ref[TextServerExtension]; shaped: RID; enabled: Bool) {.base.} = (discard)
method shapedTextGetPreserveInvalid*(self: Ref[TextServerExtension]; shaped: RID): Bool {.base.} = (discard)
method shapedTextSetPreserveControl*(self: Ref[TextServerExtension]; shaped: RID; enabled: Bool) {.base.} = (discard)
method shapedTextGetPreserveControl*(self: Ref[TextServerExtension]; shaped: RID): Bool {.base.} = (discard)
method shapedTextSetSpacing*(self: Ref[TextServerExtension]; shaped: RID; spacing: TextServer|>SpacingType; value: int64) {.base.} = (discard)
method shapedTextGetSpacing*(self: Ref[TextServerExtension]; shaped: RID; spacing: TextServer|>SpacingType): int64 {.base.} = (discard)
method shapedTextAddString*(self: Ref[TextServerExtension]; shaped: RID; text: String; fonts: TypedArray[RID]; size: int64; opentypeFeatures: Dictionary; language: String; meta: ptr Variant): Bool {.base.} = (discard)
method shapedTextAddObject*(self: Ref[TextServerExtension]; shaped: RID; key: ptr Variant; size: Vector2; inlineAlign: InlineAlignment; length: int64; baseline: float64): Bool {.base.} = (discard)
method shapedTextResizeObject*(self: Ref[TextServerExtension]; shaped: RID; key: ptr Variant; size: Vector2; inlineAlign: InlineAlignment; baseline: float64): Bool {.base.} = (discard)
method shapedGetSpanCount*(self: Ref[TextServerExtension]; shaped: RID): int64 {.base.} = (discard)
method shapedGetSpanMeta*(self: Ref[TextServerExtension]; shaped: RID; index: int64): Variant {.base.} = (discard)
method shapedSetSpanUpdateFont*(self: Ref[TextServerExtension]; shaped: RID; index: int64; fonts: TypedArray[RID]; size: int64; opentypeFeatures: Dictionary) {.base.} = (discard)
method shapedTextSubstr*(self: Ref[TextServerExtension]; shaped: RID; start: int64; length: int64): RID {.base.} = (discard)
method shapedTextGetParent*(self: Ref[TextServerExtension]; shaped: RID): RID {.base.} = (discard)
method shapedTextFitToWidth*(self: Ref[TextServerExtension]; shaped: RID; width: float64; justificationFlags: set[TextServer|>JustificationFlag]): float64 {.base.} = (discard)
method shapedTextTabAlign*(self: Ref[TextServerExtension]; shaped: RID; tabStops: PackedFloat32Array): float64 {.base.} = (discard)
method shapedTextShape*(self: Ref[TextServerExtension]; shaped: RID): Bool {.base.} = (discard)
method shapedTextUpdateBreaks*(self: Ref[TextServerExtension]; shaped: RID): Bool {.base.} = (discard)
method shapedTextUpdateJustificationOps*(self: Ref[TextServerExtension]; shaped: RID): Bool {.base.} = (discard)
method shapedTextIsReady*(self: Ref[TextServerExtension]; shaped: RID): Bool {.base.} = (discard)
method shapedTextGetGlyphs*(self: Ref[TextServerExtension]; shaped: RID): ptr Glyph {.base.} = (discard)
method shapedTextSortLogical*(self: Ref[TextServerExtension]; shaped: RID): ptr Glyph {.base.} = (discard)
method shapedTextGetGlyphCount*(self: Ref[TextServerExtension]; shaped: RID): int64 {.base.} = (discard)
method shapedTextGetRange*(self: Ref[TextServerExtension]; shaped: RID): Vector2i {.base.} = (discard)
method shapedTextGetLineBreaksAdv*(self: Ref[TextServerExtension]; shaped: RID; width: PackedFloat32Array; start: int64; once: Bool; breakFlags: set[TextServer|>LineBreakFlag]): PackedInt32Array {.base.} = (discard)
method shapedTextGetLineBreaks*(self: Ref[TextServerExtension]; shaped: RID; width: float64; start: int64; breakFlags: set[TextServer|>LineBreakFlag]): PackedInt32Array {.base.} = (discard)
method shapedTextGetWordBreaks*(self: Ref[TextServerExtension]; shaped: RID; graphemeFlags: set[TextServer|>GraphemeFlag]): PackedInt32Array {.base.} = (discard)
method shapedTextGetTrimPos*(self: Ref[TextServerExtension]; shaped: RID): int64 {.base.} = (discard)
method shapedTextGetEllipsisPos*(self: Ref[TextServerExtension]; shaped: RID): int64 {.base.} = (discard)
method shapedTextGetEllipsisGlyphCount*(self: Ref[TextServerExtension]; shaped: RID): int64 {.base.} = (discard)
method shapedTextGetEllipsisGlyphs*(self: Ref[TextServerExtension]; shaped: RID): ptr Glyph {.base.} = (discard)
method shapedTextOverrunTrimToWidth*(self: Ref[TextServerExtension]; shaped: RID; width: float64; trimFlags: set[TextServer|>TextOverrunFlag]) {.base.} = (discard)
method shapedTextGetObjects*(self: Ref[TextServerExtension]; shaped: RID): Array {.base.} = (discard)
method shapedTextGetObjectRect*(self: Ref[TextServerExtension]; shaped: RID; key: ptr Variant): Rect2 {.base.} = (discard)
method shapedTextGetSize*(self: Ref[TextServerExtension]; shaped: RID): Vector2 {.base.} = (discard)
method shapedTextGetAscent*(self: Ref[TextServerExtension]; shaped: RID): float64 {.base.} = (discard)
method shapedTextGetDescent*(self: Ref[TextServerExtension]; shaped: RID): float64 {.base.} = (discard)
method shapedTextGetWidth*(self: Ref[TextServerExtension]; shaped: RID): float64 {.base.} = (discard)
method shapedTextGetUnderlinePosition*(self: Ref[TextServerExtension]; shaped: RID): float64 {.base.} = (discard)
method shapedTextGetUnderlineThickness*(self: Ref[TextServerExtension]; shaped: RID): float64 {.base.} = (discard)
method shapedTextGetDominantDirectionInRange*(self: Ref[TextServerExtension]; shaped: RID; start: int64; `end`: int64): int64 {.base.} = (discard)
method shapedTextGetCarets*(self: Ref[TextServerExtension]; shaped: RID; position: int64; caret: ptr CaretInfo) {.base.} = (discard)
method shapedTextGetSelection*(self: Ref[TextServerExtension]; shaped: RID; start: int64; `end`: int64): PackedVector2Array {.base.} = (discard)
method shapedTextHitTestGrapheme*(self: Ref[TextServerExtension]; shaped: RID; coord: float64): int64 {.base.} = (discard)
method shapedTextHitTestPosition*(self: Ref[TextServerExtension]; shaped: RID; coord: float64): int64 {.base.} = (discard)
method shapedTextDraw*(self: Ref[TextServerExtension]; shaped: RID; canvas: RID; pos: Vector2; clipL: float64; clipR: float64; color: Color) {.base.} = (discard)
method shapedTextDrawOutline*(self: Ref[TextServerExtension]; shaped: RID; canvas: RID; pos: Vector2; clipL: float64; clipR: float64; outlineSize: int64; color: Color) {.base.} = (discard)
method shapedTextGetGraphemeBounds*(self: Ref[TextServerExtension]; shaped: RID; pos: int64): Vector2 {.base.} = (discard)
method shapedTextNextGraphemePos*(self: Ref[TextServerExtension]; shaped: RID; pos: int64): int64 {.base.} = (discard)
method shapedTextPrevGraphemePos*(self: Ref[TextServerExtension]; shaped: RID; pos: int64): int64 {.base.} = (discard)
method formatNumber*(self: Ref[TextServerExtension]; string: String; language: String): String {.base.} = (discard)
method parseNumber*(self: Ref[TextServerExtension]; string: String; language: String): String {.base.} = (discard)
method percentSign*(self: Ref[TextServerExtension]; language: String): String {.base.} = (discard)
method stripDiacritics*(self: Ref[TextServerExtension]; string: String): String {.base.} = (discard)
method isValidIdentifier*(self: Ref[TextServerExtension]; string: String): Bool {.base.} = (discard)
method stringGetWordBreaks*(self: Ref[TextServerExtension]; string: String; language: String; charsPerLine: int64): PackedInt32Array {.base.} = (discard)
method isConfusable*(self: Ref[TextServerExtension]; string: String; dict: PackedStringArray): int64 {.base.} = (discard)
method spoofCheck*(self: Ref[TextServerExtension]; string: String): Bool {.base.} = (discard)
method stringToUpper*(self: Ref[TextServerExtension]; string: String; language: String): String {.base.} = (discard)
method stringToLower*(self: Ref[TextServerExtension]; string: String; language: String): String {.base.} = (discard)
method parseStructuredText*(self: Ref[TextServerExtension]; parserType: TextServer|>StructuredTextParser; args: Array; text: String): TypedArray[Vector3i] {.base.} = (discard)
method cleanup*(self: Ref[TextServerExtension]) {.base.} = (discard)

# CallbackTweener
define_godot_engine_class_essencials(CallbackTweener, Tweener)
CallbackTweener.memberProcs:
  proc setDelay*(self: Ref[CallbackTweener]; delay: float64): Ref[CallbackTweener] {.loadfrom("set_delay", 3008182292).}

# IntervalTweener
define_godot_engine_class_essencials(IntervalTweener, Tweener)

# MethodTweener
define_godot_engine_class_essencials(MethodTweener, Tweener)
MethodTweener.memberProcs:
  proc setDelay*(self: Ref[MethodTweener]; delay: float64): Ref[MethodTweener] {.loadfrom("set_delay", 266477812).}
  proc setTrans*(self: Ref[MethodTweener]; trans: Tween|>TransitionType): Ref[MethodTweener] {.loadfrom("set_trans", 3740975367).}
  proc setEase*(self: Ref[MethodTweener]; ease: Tween|>EaseType): Ref[MethodTweener] {.loadfrom("set_ease", 315540545).}

# PropertyTweener
define_godot_engine_class_essencials(PropertyTweener, Tweener)
PropertyTweener.memberProcs:
  proc `from`*(self: Ref[PropertyTweener]; value: ptr Variant): Ref[PropertyTweener] {.loadfrom("from", 4190193059).}
  proc fromCurrent*(self: Ref[PropertyTweener]): Ref[PropertyTweener] {.loadfrom("from_current", 4279177709).}
  proc asRelative*(self: Ref[PropertyTweener]): Ref[PropertyTweener] {.loadfrom("as_relative", 4279177709).}
  proc setTrans*(self: Ref[PropertyTweener]; trans: Tween|>TransitionType): Ref[PropertyTweener] {.loadfrom("set_trans", 1899107404).}
  proc setEase*(self: Ref[PropertyTweener]; ease: Tween|>EaseType): Ref[PropertyTweener] {.loadfrom("set_ease", 1080455622).}
  proc setDelay*(self: Ref[PropertyTweener]; delay: float64): Ref[PropertyTweener] {.loadfrom("set_delay", 2171559331).}

# WebRTCPeerConnectionExtension
define_godot_engine_class_essencials(WebRTCPeerConnectionExtension, WebRTCPeerConnection)
method getConnectionState*(self: Ref[WebRTCPeerConnectionExtension]): WebRTCPeerConnection|>ConnectionState {.base.} = (discard)
method getGatheringState*(self: Ref[WebRTCPeerConnectionExtension]): WebRTCPeerConnection|>GatheringState {.base.} = (discard)
method getSignalingState*(self: Ref[WebRTCPeerConnectionExtension]): WebRTCPeerConnection|>SignalingState {.base.} = (discard)
method initialize*(self: Ref[WebRTCPeerConnectionExtension]; pConfig: Dictionary): Error {.base.} = (discard)
method createDataChannel*(self: Ref[WebRTCPeerConnectionExtension]; pLabel: String; pConfig: Dictionary): Ref[WebRTCDataChannel] {.base.} = (discard)
method createOffer*(self: Ref[WebRTCPeerConnectionExtension]): Error {.base.} = (discard)
method setRemoteDescription*(self: Ref[WebRTCPeerConnectionExtension]; pType: String; pSdp: String): Error {.base.} = (discard)
method setLocalDescription*(self: Ref[WebRTCPeerConnectionExtension]; pType: String; pSdp: String): Error {.base.} = (discard)
method addIceCandidate*(self: Ref[WebRTCPeerConnectionExtension]; pSdpMidName: String; pSdpMlineIndex: int32; pSdpName: String): Error {.base.} = (discard)
method poll*(self: Ref[WebRTCPeerConnectionExtension]): Error {.base.} = (discard)
method close*(self: Ref[WebRTCPeerConnectionExtension]) {.base.} = (discard)

# MobileVRInterface
define_godot_engine_class_essencials(MobileVRInterface, XRInterface)
MobileVRInterface.memberProcs:
  proc `eyeHeight=`*(self: Ref[MobileVRInterface]; eyeHeight: float64) {.loadfrom("set_eye_height", 373806689).}
  proc eyeHeight*(self: Ref[MobileVRInterface]): float64 {.loadfrom("get_eye_height", 1740695150).}
  proc `iod=`*(self: Ref[MobileVRInterface]; iod: float64) {.loadfrom("set_iod", 373806689).}
  proc iod*(self: Ref[MobileVRInterface]): float64 {.loadfrom("get_iod", 1740695150).}
  proc `displayWidth=`*(self: Ref[MobileVRInterface]; displayWidth: float64) {.loadfrom("set_display_width", 373806689).}
  proc displayWidth*(self: Ref[MobileVRInterface]): float64 {.loadfrom("get_display_width", 1740695150).}
  proc `displayToLens=`*(self: Ref[MobileVRInterface]; displayToLens: float64) {.loadfrom("set_display_to_lens", 373806689).}
  proc displayToLens*(self: Ref[MobileVRInterface]): float64 {.loadfrom("get_display_to_lens", 1740695150).}
  proc `oversample=`*(self: Ref[MobileVRInterface]; oversample: float64) {.loadfrom("set_oversample", 373806689).}
  proc oversample*(self: Ref[MobileVRInterface]): float64 {.loadfrom("get_oversample", 1740695150).}
  proc `k1=`*(self: Ref[MobileVRInterface]; k: float64) {.loadfrom("set_k1", 373806689).}
  proc k1*(self: Ref[MobileVRInterface]): float64 {.loadfrom("get_k1", 1740695150).}
  proc `k2=`*(self: Ref[MobileVRInterface]; k: float64) {.loadfrom("set_k2", 373806689).}
  proc k2*(self: Ref[MobileVRInterface]): float64 {.loadfrom("get_k2", 1740695150).}

# OpenXRInterface
define_godot_engine_class_essencials(OpenXRInterface, XRInterface)
OpenXRInterface.memberProcs:
  proc displayRefreshRate*(self: Ref[OpenXRInterface]): Float {.loadfrom("get_display_refresh_rate", 1740695150).}
  proc `displayRefreshRate=`*(self: Ref[OpenXRInterface]; refreshRate: Float) {.loadfrom("set_display_refresh_rate", 373806689).}
  proc renderTarsizeMultiplier*(self: Ref[OpenXRInterface]): float64 {.loadfrom("get_render_target_size_multiplier", 1740695150).}
  proc `renderTargetSizeMultiplier=`*(self: Ref[OpenXRInterface]; multiplier: float64) {.loadfrom("set_render_target_size_multiplier", 373806689).}
  proc isActionSetActive*(self: Ref[OpenXRInterface]; name: String): Bool {.loadfrom("is_action_set_active", 3927539163).}
  proc setActionSetActive*(self: Ref[OpenXRInterface]; name: String; active: Bool) {.loadfrom("set_action_set_active", 2678287736).}
  proc getActionSets*(self: Ref[OpenXRInterface]): Array {.loadfrom("get_action_sets", 3995934104).}
  proc getAvailableDisplayRefreshRates*(self: Ref[OpenXRInterface]): Array {.loadfrom("get_available_display_refresh_rates", 3995934104).}

# WebXRInterface
define_godot_engine_class_essencials(WebXRInterface, XRInterface)
WebXRInterface.memberProcs:
  proc isSessionSupported*(self: Ref[WebXRInterface]; sessionMode: String) {.loadfrom("is_session_supported", 83702148).}
  proc `sessionMode=`*(self: Ref[WebXRInterface]; sessionMode: String) {.loadfrom("set_session_mode", 83702148).}
  proc sessionMode*(self: Ref[WebXRInterface]): String {.loadfrom("get_session_mode", 201670096).}
  proc `requiredFeatures=`*(self: Ref[WebXRInterface]; requiredFeatures: String) {.loadfrom("set_required_features", 83702148).}
  proc requiredFeatures*(self: Ref[WebXRInterface]): String {.loadfrom("get_required_features", 201670096).}
  proc `optionalFeatures=`*(self: Ref[WebXRInterface]; optionalFeatures: String) {.loadfrom("set_optional_features", 83702148).}
  proc optionalFeatures*(self: Ref[WebXRInterface]): String {.loadfrom("get_optional_features", 201670096).}
  proc referenceSpaceType*(self: Ref[WebXRInterface]): String {.loadfrom("get_reference_space_type", 201670096).}
  proc `requestedReferenceSpaceTypes=`*(self: Ref[WebXRInterface]; requestedReferenceSpaceTypes: String) {.loadfrom("set_requested_reference_space_types", 83702148).}
  proc requestedReferenceSpaceTypes*(self: Ref[WebXRInterface]): String {.loadfrom("get_requested_reference_space_types", 201670096).}
  proc isInputSourceActive*(self: Ref[WebXRInterface]; inputSourceId: int32): Bool {.loadfrom("is_input_source_active", 1116898809).}
  proc getInputSourceTracker*(self: Ref[WebXRInterface]; inputSourceId: int32): Ref[XRPositionalTracker] {.loadfrom("get_input_source_tracker", 636011756).}
  proc getInputSourceTargetRayMode*(self: Ref[WebXRInterface]; inputSourceId: int32): WebXRInterface|>TargetRayMode {.loadfrom("get_input_source_target_ray_mode", 2852387453).}
  proc visibilityState*(self: Ref[WebXRInterface]): String {.loadfrom("get_visibility_state", 201670096).}
  proc getDisplayRefreshRate*(self: Ref[WebXRInterface]): Float {.loadfrom("get_display_refresh_rate", 1740695150).}
  proc setDisplayRefreshRate*(self: Ref[WebXRInterface]; refreshRate: Float) {.loadfrom("set_display_refresh_rate", 373806689).}
  proc getAvailableDisplayRefreshRates*(self: Ref[WebXRInterface]): Array {.loadfrom("get_available_display_refresh_rates", 3995934104).}

# XRInterfaceExtension
define_godot_engine_class_essencials(XRInterfaceExtension, XRInterface)
method getName*(self: Ref[XRInterfaceExtension]): StringName {.base.} = (discard)
method getCapabilities*(self: Ref[XRInterfaceExtension]): uint32 {.base.} = (discard)
method isInitialized*(self: Ref[XRInterfaceExtension]): Bool {.base.} = (discard)
method initialize*(self: Ref[XRInterfaceExtension]): Bool {.base.} = (discard)
method uninitialize*(self: Ref[XRInterfaceExtension]) {.base.} = (discard)
method getSystemInfo*(self: Ref[XRInterfaceExtension]): Dictionary {.base.} = (discard)
method supportsPlayAreaMode*(self: Ref[XRInterfaceExtension]; mode: XRInterface|>PlayAreaMode): Bool {.base.} = (discard)
method getPlayAreaMode*(self: Ref[XRInterfaceExtension]): XRInterface|>PlayAreaMode {.base.} = (discard)
method setPlayAreaMode*(self: Ref[XRInterfaceExtension]; mode: XRInterface|>PlayAreaMode): Bool {.base.} = (discard)
method getPlayArea*(self: Ref[XRInterfaceExtension]): PackedVector3Array {.base.} = (discard)
method getRenderTargetSize*(self: Ref[XRInterfaceExtension]): Vector2 {.base.} = (discard)
method getViewCount*(self: Ref[XRInterfaceExtension]): uint32 {.base.} = (discard)
method getCameraTransform*(self: Ref[XRInterfaceExtension]): Transform3D {.base.} = (discard)
method getTransformForView*(self: Ref[XRInterfaceExtension]; view: uint32; camTransform: Transform3D): Transform3D {.base.} = (discard)
method getProjectionForView*(self: Ref[XRInterfaceExtension]; view: uint32; aspect: float64; zNear: float64; zFar: float64): PackedFloat64Array {.base.} = (discard)
method getVrsTexture*(self: Ref[XRInterfaceExtension]): RID {.base.} = (discard)
method process*(self: Ref[XRInterfaceExtension]) {.base.} = (discard)
method preRender*(self: Ref[XRInterfaceExtension]) {.base.} = (discard)
method preDrawViewport*(self: Ref[XRInterfaceExtension]; renderTarget: RID): Bool {.base.} = (discard)
method postDrawViewport*(self: Ref[XRInterfaceExtension]; renderTarget: RID; screenRect: Rect2) {.base.} = (discard)
method endFrame*(self: Ref[XRInterfaceExtension]) {.base.} = (discard)
method getSuggestedTrackerNames*(self: Ref[XRInterfaceExtension]): PackedStringArray {.base.} = (discard)
method getSuggestedPoseNames*(self: Ref[XRInterfaceExtension]; trackerName: StringName): PackedStringArray {.base.} = (discard)
method getTrackingStatus*(self: Ref[XRInterfaceExtension]): XRInterface|>TrackingStatus {.base.} = (discard)
method triggerHapticPulse*(self: Ref[XRInterfaceExtension]; actionName: String; trackerName: StringName; frequency: float64; amplitude: float64; durationSec: float64; delaySec: float64) {.base.} = (discard)
method getAnchorDetectionIsEnabled*(self: Ref[XRInterfaceExtension]): Bool {.base.} = (discard)
method setAnchorDetectionIsEnabled*(self: Ref[XRInterfaceExtension]; enabled: Bool) {.base.} = (discard)
method getCameraFeedId*(self: Ref[XRInterfaceExtension]): int32 {.base.} = (discard)
method getColorTexture*(self: Ref[XRInterfaceExtension]): RID {.base.} = (discard)
method getDepthTexture*(self: Ref[XRInterfaceExtension]): RID {.base.} = (discard)
method getVelocityTexture*(self: Ref[XRInterfaceExtension]): RID {.base.} = (discard)
XRInterfaceExtension.memberProcs:
  proc getColorTexture*(self: Ref[XRInterfaceExtension]): RID {.loadfrom("get_color_texture", 529393457).}
  proc getDepthTexture*(self: Ref[XRInterfaceExtension]): RID {.loadfrom("get_depth_texture", 529393457).}
  proc getVelocityTexture*(self: Ref[XRInterfaceExtension]): RID {.loadfrom("get_velocity_texture", 529393457).}
  proc addBlit*(self: Ref[XRInterfaceExtension]; renderTarget: RID; srcRect: Rect2; dstRect: Rect2i; useLayer: Bool; layer: uint32; applyLensDistortion: Bool; eyeCenter: Vector2; k1: float64; k2: float64; upscale: float64; aspectRatio: float64) {.loadfrom("add_blit", 258596971).}
  proc getRenderTargetTexture*(self: Ref[XRInterfaceExtension]; renderTarget: RID): RID {.loadfrom("get_render_target_texture", 41030802).}

# BaseButton
define_godot_engine_class_essencials(BaseButton, Control)
method pressed*(self: BaseButton) {.base.} = (discard)
method toggled*(self: BaseButton; buttonPressed: Bool) {.base.} = (discard)
BaseButton.memberProcs:
  proc `pressed=`*(self: BaseButton; pressed: Bool) {.loadfrom("set_pressed", 2586408642).}
  proc isPressed*(self: BaseButton): Bool {.loadfrom("is_pressed", 36873697).}
  proc setPressedNoSignal*(self: BaseButton; pressed: Bool) {.loadfrom("set_pressed_no_signal", 2586408642).}
  proc isHovered*(self: BaseButton): Bool {.loadfrom("is_hovered", 36873697).}
  proc `toggleMode=`*(self: BaseButton; enabled: Bool) {.loadfrom("set_toggle_mode", 2586408642).}
  proc isToggleMode*(self: BaseButton): Bool {.loadfrom("is_toggle_mode", 36873697).}
  proc `shortcutInTooltip=`*(self: BaseButton; enabled: Bool) {.loadfrom("set_shortcut_in_tooltip", 2586408642).}
  proc isShortcutInTooltipEnabled*(self: BaseButton): Bool {.loadfrom("is_shortcut_in_tooltip_enabled", 36873697).}
  proc `disabled=`*(self: BaseButton; disabled: Bool) {.loadfrom("set_disabled", 2586408642).}
  proc isDisabled*(self: BaseButton): Bool {.loadfrom("is_disabled", 36873697).}
  proc `actionMode=`*(self: BaseButton; mode: BaseButton|>ActionMode) {.loadfrom("set_action_mode", 1985162088).}
  proc actionMode*(self: BaseButton): BaseButton|>ActionMode {.loadfrom("get_action_mode", 2589712189).}
  proc `buttonMask=`*(self: BaseButton; mask: set[MouseButtonMask]) {.loadfrom("set_button_mask", 3950145251).}
  proc buttonMask*(self: BaseButton): set[MouseButtonMask] {.loadfrom("get_button_mask", 2512161324).}
  proc getDrawMode*(self: BaseButton): BaseButton|>DrawMode {.loadfrom("get_draw_mode", 2492721305).}
  proc `keepPressedOutside=`*(self: BaseButton; enabled: Bool) {.loadfrom("set_keep_pressed_outside", 2586408642).}
  proc isKeepPressedOutside*(self: BaseButton): Bool {.loadfrom("is_keep_pressed_outside", 36873697).}
  proc `shortcutFeedback=`*(self: BaseButton; enabled: Bool) {.loadfrom("set_shortcut_feedback", 2586408642).}
  proc isShortcutFeedback*(self: BaseButton): Bool {.loadfrom("is_shortcut_feedback", 36873697).}
  proc `shortcut=`*(self: BaseButton; shortcut: Ref[Shortcut]) {.loadfrom("set_shortcut", 857163497).}
  proc shortcut*(self: BaseButton): Ref[Shortcut] {.loadfrom("get_shortcut", 3415666916).}
  proc `buttonGroup=`*(self: BaseButton; buttonGroup: Ref[ButtonGroup]) {.loadfrom("set_button_group", 1794463739).}
  proc buttonGroup*(self: BaseButton): Ref[ButtonGroup] {.loadfrom("get_button_group", 281644053).}

# ColorRect
define_godot_engine_class_essencials(ColorRect, Control)
ColorRect.memberProcs:
  proc `color=`*(self: ColorRect; color: Color) {.loadfrom("set_color", 2920490490).}
  proc color*(self: ColorRect): Color {.loadfrom("get_color", 3444240500).}

# Container
define_godot_engine_class_essencials(Container, Control)
method getAllowedSizeFlagsHorizontal*(self: Container): PackedInt32Array {.base.} = (discard)
method getAllowedSizeFlagsVertical*(self: Container): PackedInt32Array {.base.} = (discard)
Container.memberProcs:
  proc queueSort*(self: Container) {.loadfrom("queue_sort", 3218959716).}
  proc fitChildInRect*(self: Container; child: Control; rect: Rect2) {.loadfrom("fit_child_in_rect", 1993438598).}

# GraphEdit
define_godot_engine_class_essencials(GraphEdit, Control)
method isInInputHotzone*(self: GraphEdit; inNode: ptr Object; inPort: int32; mousePosition: Vector2): Bool {.base.} = (discard)
method isInOutputHotzone*(self: GraphEdit; inNode: ptr Object; inPort: int32; mousePosition: Vector2): Bool {.base.} = (discard)
method getConnectionLine*(self: GraphEdit; fromPosition: Vector2; toPosition: Vector2): PackedVector2Array {.base.} = (discard)
method isNodeHoverValid*(self: GraphEdit; fromNode: StringName; fromPort: int32; toNode: StringName; toPort: int32): Bool {.base.} = (discard)
GraphEdit.memberProcs:
  proc connectNode*(self: GraphEdit; fromNode: StringName; fromPort: int32; toNode: StringName; toPort: int32): Error {.loadfrom("connect_node", 195065850).}
  proc isNodeConnected*(self: GraphEdit; fromNode: StringName; fromPort: int32; toNode: StringName; toPort: int32): Bool {.loadfrom("is_node_connected", 4216241294).}
  proc disconnectNode*(self: GraphEdit; fromNode: StringName; fromPort: int32; toNode: StringName; toPort: int32) {.loadfrom("disconnect_node", 1933654315).}
  proc setConnectionActivity*(self: GraphEdit; fromNode: StringName; fromPort: int32; toNode: StringName; toPort: int32; amount: Float) {.loadfrom("set_connection_activity", 1141899943).}
  proc getConnectionList*(self: GraphEdit): TypedArray[Dictionary] {.loadfrom("get_connection_list", 3995934104).}
  proc clearConnections*(self: GraphEdit) {.loadfrom("clear_connections", 3218959716).}
  proc forceConnectionDragEnd*(self: GraphEdit) {.loadfrom("force_connection_drag_end", 3218959716).}
  proc scrollOfs*(self: GraphEdit): Vector2 {.loadfrom("get_scroll_ofs", 3341600327).}
  proc `scrollOfs=`*(self: GraphEdit; offset: Vector2) {.loadfrom("set_scroll_ofs", 743155724).}
  proc addValidRightDisconnectType*(self: GraphEdit; `type`: int32) {.loadfrom("add_valid_right_disconnect_type", 1286410249).}
  proc removeValidRightDisconnectType*(self: GraphEdit; `type`: int32) {.loadfrom("remove_valid_right_disconnect_type", 1286410249).}
  proc addValidLeftDisconnectType*(self: GraphEdit; `type`: int32) {.loadfrom("add_valid_left_disconnect_type", 1286410249).}
  proc removeValidLeftDisconnectType*(self: GraphEdit; `type`: int32) {.loadfrom("remove_valid_left_disconnect_type", 1286410249).}
  proc addValidConnectionType*(self: GraphEdit; fromType: int32; toType: int32) {.loadfrom("add_valid_connection_type", 3937882851).}
  proc removeValidConnectionType*(self: GraphEdit; fromType: int32; toType: int32) {.loadfrom("remove_valid_connection_type", 3937882851).}
  proc isValidConnectionType*(self: GraphEdit; fromType: int32; toType: int32): Bool {.loadfrom("is_valid_connection_type", 2522259332).}
  proc getConnectionLine*(self: GraphEdit; fromNode: Vector2; toNode: Vector2): PackedVector2Array {.loadfrom("get_connection_line", 1562168077).}
  proc `panningScheme=`*(self: GraphEdit; scheme: GraphEdit|>PanningScheme) {.loadfrom("set_panning_scheme", 18893313).}
  proc panningScheme*(self: GraphEdit): GraphEdit|>PanningScheme {.loadfrom("get_panning_scheme", 549924446).}
  proc `zoom=`*(self: GraphEdit; zoom: Float) {.loadfrom("set_zoom", 373806689).}
  proc zoom*(self: GraphEdit): Float {.loadfrom("get_zoom", 1740695150).}
  proc `zoomMin=`*(self: GraphEdit; zoomMin: Float) {.loadfrom("set_zoom_min", 373806689).}
  proc zoomMin*(self: GraphEdit): Float {.loadfrom("get_zoom_min", 1740695150).}
  proc `zoomMax=`*(self: GraphEdit; zoomMax: Float) {.loadfrom("set_zoom_max", 373806689).}
  proc zoomMax*(self: GraphEdit): Float {.loadfrom("get_zoom_max", 1740695150).}
  proc `zoomStep=`*(self: GraphEdit; zoomStep: Float) {.loadfrom("set_zoom_step", 373806689).}
  proc zoomStep*(self: GraphEdit): Float {.loadfrom("get_zoom_step", 1740695150).}
  proc `showZoomLabel=`*(self: GraphEdit; enable: Bool) {.loadfrom("set_show_zoom_label", 2586408642).}
  proc isShowingZoomLabel*(self: GraphEdit): Bool {.loadfrom("is_showing_zoom_label", 36873697).}
  proc `snap=`*(self: GraphEdit; pixels: int32) {.loadfrom("set_snap", 1286410249).}
  proc snap*(self: GraphEdit): int32 {.loadfrom("get_snap", 3905245786).}
  proc `useSnap=`*(self: GraphEdit; enable: Bool) {.loadfrom("set_use_snap", 2586408642).}
  proc isUsingSnap*(self: GraphEdit): Bool {.loadfrom("is_using_snap", 36873697).}
  proc `connectionLinesCurvature=`*(self: GraphEdit; curvature: Float) {.loadfrom("set_connection_lines_curvature", 373806689).}
  proc connectionLinesCurvature*(self: GraphEdit): Float {.loadfrom("get_connection_lines_curvature", 1740695150).}
  proc `connectionLinesThickness=`*(self: GraphEdit; pixels: Float) {.loadfrom("set_connection_lines_thickness", 373806689).}
  proc connectionLinesThickness*(self: GraphEdit): Float {.loadfrom("get_connection_lines_thickness", 1740695150).}
  proc `connectionLinesAntialiased=`*(self: GraphEdit; pixels: Bool) {.loadfrom("set_connection_lines_antialiased", 2586408642).}
  proc isConnectionLinesAntialiased*(self: GraphEdit): Bool {.loadfrom("is_connection_lines_antialiased", 36873697).}
  proc `minimapSize=`*(self: GraphEdit; size: Vector2) {.loadfrom("set_minimap_size", 743155724).}
  proc minimapSize*(self: GraphEdit): Vector2 {.loadfrom("get_minimap_size", 3341600327).}
  proc `minimapOpacity=`*(self: GraphEdit; opacity: Float) {.loadfrom("set_minimap_opacity", 373806689).}
  proc minimapOpacity*(self: GraphEdit): Float {.loadfrom("get_minimap_opacity", 1740695150).}
  proc `minimapEnabled=`*(self: GraphEdit; enable: Bool) {.loadfrom("set_minimap_enabled", 2586408642).}
  proc isMinimapEnabled*(self: GraphEdit): Bool {.loadfrom("is_minimap_enabled", 36873697).}
  proc `arrangeNodesButtonHidden=`*(self: GraphEdit; enable: Bool) {.loadfrom("set_arrange_nodes_button_hidden", 2586408642).}
  proc isArrangeNodesButtonHidden*(self: GraphEdit): Bool {.loadfrom("is_arrange_nodes_button_hidden", 36873697).}
  proc `rightDisconnects=`*(self: GraphEdit; enable: Bool) {.loadfrom("set_right_disconnects", 2586408642).}
  proc isRightDisconnectsEnabled*(self: GraphEdit): Bool {.loadfrom("is_right_disconnects_enabled", 36873697).}
  proc getZoomHbox*(self: GraphEdit): HBoxContainer {.loadfrom("get_zoom_hbox", 3590609951).}
  proc arrangeNodes*(self: GraphEdit) {.loadfrom("arrange_nodes", 3218959716).}
  proc setSelected*(self: GraphEdit; node: ptr Node) {.loadfrom("set_selected", 1078189570).}

# ItemList
define_godot_engine_class_essencials(ItemList, Control)
ItemList.memberProcs:
  proc addItem*(self: ItemList; text: String; icon: Ref[Texture2D] = default Ref[Texture2D]; selectable: Bool = true): int32 {.loadfrom("add_item", 4086250691).}
  proc addIconItem*(self: ItemList; icon: Ref[Texture2D]; selectable: Bool = true): int32 {.loadfrom("add_icon_item", 3332687421).}
  proc setItemText*(self: ItemList; idx: int32; text: String) {.loadfrom("set_item_text", 501894301).}
  proc getItemText*(self: ItemList; idx: int32): String {.loadfrom("get_item_text", 844755477).}
  proc setItemIcon*(self: ItemList; idx: int32; icon: Ref[Texture2D]) {.loadfrom("set_item_icon", 666127730).}
  proc getItemIcon*(self: ItemList; idx: int32): Ref[Texture2D] {.loadfrom("get_item_icon", 3536238170).}
  proc setItemTextDirection*(self: ItemList; idx: int32; direction: Control|>TextDirection) {.loadfrom("set_item_text_direction", 1707680378).}
  proc getItemTextDirection*(self: ItemList; idx: int32): Control|>TextDirection {.loadfrom("get_item_text_direction", 4235602388).}
  proc setItemLanguage*(self: ItemList; idx: int32; language: String) {.loadfrom("set_item_language", 501894301).}
  proc getItemLanguage*(self: ItemList; idx: int32): String {.loadfrom("get_item_language", 844755477).}
  proc setItemIconTransposed*(self: ItemList; idx: int32; transposed: Bool) {.loadfrom("set_item_icon_transposed", 300928843).}
  proc isItemIconTransposed*(self: ItemList; idx: int32): Bool {.loadfrom("is_item_icon_transposed", 1116898809).}
  proc setItemIconRegion*(self: ItemList; idx: int32; rect: Rect2) {.loadfrom("set_item_icon_region", 1356297692).}
  proc getItemIconRegion*(self: ItemList; idx: int32): Rect2 {.loadfrom("get_item_icon_region", 3327874267).}
  proc setItemIconModulate*(self: ItemList; idx: int32; modulate: Color) {.loadfrom("set_item_icon_modulate", 2878471219).}
  proc getItemIconModulate*(self: ItemList; idx: int32): Color {.loadfrom("get_item_icon_modulate", 3457211756).}
  proc setItemSelectable*(self: ItemList; idx: int32; selectable: Bool) {.loadfrom("set_item_selectable", 300928843).}
  proc isItemSelectable*(self: ItemList; idx: int32): Bool {.loadfrom("is_item_selectable", 1116898809).}
  proc setItemDisabled*(self: ItemList; idx: int32; disabled: Bool) {.loadfrom("set_item_disabled", 300928843).}
  proc isItemDisabled*(self: ItemList; idx: int32): Bool {.loadfrom("is_item_disabled", 1116898809).}
  proc setItemMetadata*(self: ItemList; idx: int32; metadata: ptr Variant) {.loadfrom("set_item_metadata", 2152698145).}
  proc getItemMetadata*(self: ItemList; idx: int32): Variant {.loadfrom("get_item_metadata", 4227898402).}
  proc setItemCustomBgColor*(self: ItemList; idx: int32; customBgColor: Color) {.loadfrom("set_item_custom_bg_color", 2878471219).}
  proc getItemCustomBgColor*(self: ItemList; idx: int32): Color {.loadfrom("get_item_custom_bg_color", 3457211756).}
  proc setItemCustomFgColor*(self: ItemList; idx: int32; customFgColor: Color) {.loadfrom("set_item_custom_fg_color", 2878471219).}
  proc getItemCustomFgColor*(self: ItemList; idx: int32): Color {.loadfrom("get_item_custom_fg_color", 3457211756).}
  proc getItemRect*(self: ItemList; idx: int32; expand: Bool = true): Rect2 {.loadfrom("get_item_rect", 1501513492).}
  proc setItemTooltipEnabled*(self: ItemList; idx: int32; enable: Bool) {.loadfrom("set_item_tooltip_enabled", 300928843).}
  proc isItemTooltipEnabled*(self: ItemList; idx: int32): Bool {.loadfrom("is_item_tooltip_enabled", 1116898809).}
  proc setItemTooltip*(self: ItemList; idx: int32; tooltip: String) {.loadfrom("set_item_tooltip", 501894301).}
  proc getItemTooltip*(self: ItemList; idx: int32): String {.loadfrom("get_item_tooltip", 844755477).}
  proc select*(self: ItemList; idx: int32; single: Bool = true) {.loadfrom("select", 4023243586).}
  proc deselect*(self: ItemList; idx: int32) {.loadfrom("deselect", 1286410249).}
  proc deselectAll*(self: ItemList) {.loadfrom("deselect_all", 3218959716).}
  proc isSelected*(self: ItemList; idx: int32): Bool {.loadfrom("is_selected", 1116898809).}
  proc getSelectedItems*(self: ItemList): PackedInt32Array {.loadfrom("get_selected_items", 969006518).}
  proc moveItem*(self: ItemList; fromIdx: int32; toIdx: int32) {.loadfrom("move_item", 3937882851).}
  proc `itemCount=`*(self: ItemList; count: int32) {.loadfrom("set_item_count", 1286410249).}
  proc itemCount*(self: ItemList): int32 {.loadfrom("get_item_count", 3905245786).}
  proc removeItem*(self: ItemList; idx: int32) {.loadfrom("remove_item", 1286410249).}
  proc clear*(self: ItemList) {.loadfrom("clear", 3218959716).}
  proc sortItemsByText*(self: ItemList) {.loadfrom("sort_items_by_text", 3218959716).}
  proc `fixedColumnWidth=`*(self: ItemList; width: int32) {.loadfrom("set_fixed_column_width", 1286410249).}
  proc fixedColumnWidth*(self: ItemList): int32 {.loadfrom("get_fixed_column_width", 3905245786).}
  proc `sameColumnWidth=`*(self: ItemList; enable: Bool) {.loadfrom("set_same_column_width", 2586408642).}
  proc isSameColumnWidth*(self: ItemList): Bool {.loadfrom("is_same_column_width", 36873697).}
  proc `maxTextLines=`*(self: ItemList; lines: int32) {.loadfrom("set_max_text_lines", 1286410249).}
  proc maxTextLines*(self: ItemList): int32 {.loadfrom("get_max_text_lines", 3905245786).}
  proc `maxColumns=`*(self: ItemList; amount: int32) {.loadfrom("set_max_columns", 1286410249).}
  proc maxColumns*(self: ItemList): int32 {.loadfrom("get_max_columns", 3905245786).}
  proc `selectMode=`*(self: ItemList; mode: ItemList|>SelectMode) {.loadfrom("set_select_mode", 928267388).}
  proc selectMode*(self: ItemList): ItemList|>SelectMode {.loadfrom("get_select_mode", 1191945842).}
  proc `iconMode=`*(self: ItemList; mode: ItemList|>IconMode) {.loadfrom("set_icon_mode", 2025053633).}
  proc iconMode*(self: ItemList): ItemList|>IconMode {.loadfrom("get_icon_mode", 3353929232).}
  proc `fixedIconSize=`*(self: ItemList; size: Vector2i) {.loadfrom("set_fixed_icon_size", 1130785943).}
  proc fixedIconSize*(self: ItemList): Vector2i {.loadfrom("get_fixed_icon_size", 3690982128).}
  proc `iconScale=`*(self: ItemList; scale: Float) {.loadfrom("set_icon_scale", 373806689).}
  proc iconScale*(self: ItemList): Float {.loadfrom("get_icon_scale", 1740695150).}
  proc `allowRmbSelect=`*(self: ItemList; allow: Bool) {.loadfrom("set_allow_rmb_select", 2586408642).}
  proc allowRmbSelect*(self: ItemList): Bool {.loadfrom("get_allow_rmb_select", 36873697).}
  proc `allowReselect=`*(self: ItemList; allow: Bool) {.loadfrom("set_allow_reselect", 2586408642).}
  proc allowReselect*(self: ItemList): Bool {.loadfrom("get_allow_reselect", 36873697).}
  proc `allowSearch=`*(self: ItemList; allow: Bool) {.loadfrom("set_allow_search", 2586408642).}
  proc allowSearch*(self: ItemList): Bool {.loadfrom("get_allow_search", 36873697).}
  proc `autoHeight=`*(self: ItemList; enable: Bool) {.loadfrom("set_auto_height", 2586408642).}
  proc hasAutoHeight*(self: ItemList): Bool {.loadfrom("has_auto_height", 36873697).}
  proc isAnythingSelected*(self: ItemList): Bool {.loadfrom("is_anything_selected", 2240911060).}
  proc getItemAtPosition*(self: ItemList; position: Vector2; exact: Bool = false): int32 {.loadfrom("get_item_at_position", 2300324924).}
  proc ensureCurrentIsVisible*(self: ItemList) {.loadfrom("ensure_current_is_visible", 3218959716).}
  proc getVScrollBar*(self: ItemList): VScrollBar {.loadfrom("get_v_scroll_bar", 2630340773).}
  proc `textOverrunBehavior=`*(self: ItemList; overrunBehavior: TextServer|>OverrunBehavior) {.loadfrom("set_text_overrun_behavior", 1008890932).}
  proc textOverrunBehavior*(self: ItemList): TextServer|>OverrunBehavior {.loadfrom("get_text_overrun_behavior", 3779142101).}

# Label
define_godot_engine_class_essencials(Label, Control)
Label.memberProcs:
  proc `horizontalAlignment=`*(self: Label; alignment: HorizontalAlignment) {.loadfrom("set_horizontal_alignment", 2312603777).}
  proc horizontalAlignment*(self: Label): HorizontalAlignment {.loadfrom("get_horizontal_alignment", 341400642).}
  proc `verticalAlignment=`*(self: Label; alignment: VerticalAlignment) {.loadfrom("set_vertical_alignment", 1796458609).}
  proc verticalAlignment*(self: Label): VerticalAlignment {.loadfrom("get_vertical_alignment", 3274884059).}
  proc `text=`*(self: Label; text: String) {.loadfrom("set_text", 83702148).}
  proc text*(self: Label): String {.loadfrom("get_text", 201670096).}
  proc `labelSettings=`*(self: Label; settings: Ref[LabelSettings]) {.loadfrom("set_label_settings", 1030653839).}
  proc labelSettings*(self: Label): Ref[LabelSettings] {.loadfrom("get_label_settings", 826676056).}
  proc `textDirection=`*(self: Label; direction: Control|>TextDirection) {.loadfrom("set_text_direction", 119160795).}
  proc textDirection*(self: Label): Control|>TextDirection {.loadfrom("get_text_direction", 797257663).}
  proc `language=`*(self: Label; language: String) {.loadfrom("set_language", 83702148).}
  proc language*(self: Label): String {.loadfrom("get_language", 201670096).}
  proc `autowrapMode=`*(self: Label; autowrapMode: TextServer|>AutowrapMode) {.loadfrom("set_autowrap_mode", 3289138044).}
  proc autowrapMode*(self: Label): TextServer|>AutowrapMode {.loadfrom("get_autowrap_mode", 1549071663).}
  proc `justificationFlags=`*(self: Label; justificationFlags: set[TextServer|>JustificationFlag]) {.loadfrom("set_justification_flags", 2877345813).}
  proc justificationFlags*(self: Label): set[TextServer|>JustificationFlag] {.loadfrom("get_justification_flags", 1583363614).}
  proc `clipText=`*(self: Label; enable: Bool) {.loadfrom("set_clip_text", 2586408642).}
  proc isClippingText*(self: Label): Bool {.loadfrom("is_clipping_text", 36873697).}
  proc `tabStops=`*(self: Label; tabStops: PackedFloat32Array) {.loadfrom("set_tab_stops", 2899603908).}
  proc tabStops*(self: Label): PackedFloat32Array {.loadfrom("get_tab_stops", 675695659).}
  proc `textOverrunBehavior=`*(self: Label; overrunBehavior: TextServer|>OverrunBehavior) {.loadfrom("set_text_overrun_behavior", 1008890932).}
  proc textOverrunBehavior*(self: Label): TextServer|>OverrunBehavior {.loadfrom("get_text_overrun_behavior", 3779142101).}
  proc `uppercase=`*(self: Label; enable: Bool) {.loadfrom("set_uppercase", 2586408642).}
  proc isUppercase*(self: Label): Bool {.loadfrom("is_uppercase", 36873697).}
  proc getLineHeight*(self: Label; line: int32 = -1): int32 {.loadfrom("get_line_height", 181039630).}
  proc getLineCount*(self: Label): int32 {.loadfrom("get_line_count", 3905245786).}
  proc getVisibleLineCount*(self: Label): int32 {.loadfrom("get_visible_line_count", 3905245786).}
  proc getTotalCharacterCount*(self: Label): int32 {.loadfrom("get_total_character_count", 3905245786).}
  proc `visibleCharacters=`*(self: Label; amount: int32) {.loadfrom("set_visible_characters", 1286410249).}
  proc visibleCharacters*(self: Label): int32 {.loadfrom("get_visible_characters", 3905245786).}
  proc visibleCharactersBehavior*(self: Label): TextServer|>VisibleCharactersBehavior {.loadfrom("get_visible_characters_behavior", 258789322).}
  proc `visibleCharactersBehavior=`*(self: Label; behavior: TextServer|>VisibleCharactersBehavior) {.loadfrom("set_visible_characters_behavior", 3383839701).}
  proc `visibleRatio=`*(self: Label; ratio: Float) {.loadfrom("set_visible_ratio", 373806689).}
  proc visibleRatio*(self: Label): Float {.loadfrom("get_visible_ratio", 1740695150).}
  proc `linesSkipped=`*(self: Label; linesSkipped: int32) {.loadfrom("set_lines_skipped", 1286410249).}
  proc linesSkipped*(self: Label): int32 {.loadfrom("get_lines_skipped", 3905245786).}
  proc `maxLinesVisible=`*(self: Label; linesVisible: int32) {.loadfrom("set_max_lines_visible", 1286410249).}
  proc maxLinesVisible*(self: Label): int32 {.loadfrom("get_max_lines_visible", 3905245786).}
  proc `structuredTextBidiOverride=`*(self: Label; parser: TextServer|>StructuredTextParser) {.loadfrom("set_structured_text_bidi_override", 55961453).}
  proc structuredTextBidiOverride*(self: Label): TextServer|>StructuredTextParser {.loadfrom("get_structured_text_bidi_override", 3385126229).}
  proc `structuredTextBidiOverrideOptions=`*(self: Label; args: Array) {.loadfrom("set_structured_text_bidi_override_options", 381264803).}
  proc structuredTextBidiOverrideOptions*(self: Label): Array {.loadfrom("get_structured_text_bidi_override_options", 3995934104).}

# LineEdit
define_godot_engine_class_essencials(LineEdit, Control)
LineEdit.memberProcs:
  proc `horizontalAlignment=`*(self: LineEdit; alignment: HorizontalAlignment) {.loadfrom("set_horizontal_alignment", 2312603777).}
  proc horizontalAlignment*(self: LineEdit): HorizontalAlignment {.loadfrom("get_horizontal_alignment", 341400642).}
  proc clear*(self: LineEdit) {.loadfrom("clear", 3218959716).}
  proc select*(self: LineEdit; `from`: int32 = 0; to: int32 = -1) {.loadfrom("select", 1328111411).}
  proc selectAll*(self: LineEdit) {.loadfrom("select_all", 3218959716).}
  proc deselect*(self: LineEdit) {.loadfrom("deselect", 3218959716).}
  proc hasSelection*(self: LineEdit): Bool {.loadfrom("has_selection", 36873697).}
  proc getSelectedText*(self: LineEdit): String {.loadfrom("get_selected_text", 2841200299).}
  proc getSelectionFromColumn*(self: LineEdit): int32 {.loadfrom("get_selection_from_column", 3905245786).}
  proc getSelectionToColumn*(self: LineEdit): int32 {.loadfrom("get_selection_to_column", 3905245786).}
  proc `text=`*(self: LineEdit; text: String) {.loadfrom("set_text", 83702148).}
  proc text*(self: LineEdit): String {.loadfrom("get_text", 201670096).}
  proc drawControlChars*(self: LineEdit): Bool {.loadfrom("get_draw_control_chars", 36873697).}
  proc `drawControlChars=`*(self: LineEdit; enable: Bool) {.loadfrom("set_draw_control_chars", 2586408642).}
  proc `textDirection=`*(self: LineEdit; direction: Control|>TextDirection) {.loadfrom("set_text_direction", 119160795).}
  proc textDirection*(self: LineEdit): Control|>TextDirection {.loadfrom("get_text_direction", 797257663).}
  proc `language=`*(self: LineEdit; language: String) {.loadfrom("set_language", 83702148).}
  proc language*(self: LineEdit): String {.loadfrom("get_language", 201670096).}
  proc `structuredTextBidiOverride=`*(self: LineEdit; parser: TextServer|>StructuredTextParser) {.loadfrom("set_structured_text_bidi_override", 55961453).}
  proc structuredTextBidiOverride*(self: LineEdit): TextServer|>StructuredTextParser {.loadfrom("get_structured_text_bidi_override", 3385126229).}
  proc `structuredTextBidiOverrideOptions=`*(self: LineEdit; args: Array) {.loadfrom("set_structured_text_bidi_override_options", 381264803).}
  proc structuredTextBidiOverrideOptions*(self: LineEdit): Array {.loadfrom("get_structured_text_bidi_override_options", 3995934104).}
  proc `placeholder=`*(self: LineEdit; text: String) {.loadfrom("set_placeholder", 83702148).}
  proc placeholder*(self: LineEdit): String {.loadfrom("get_placeholder", 201670096).}
  proc `caretColumn=`*(self: LineEdit; position: int32) {.loadfrom("set_caret_column", 1286410249).}
  proc caretColumn*(self: LineEdit): int32 {.loadfrom("get_caret_column", 3905245786).}
  proc getScrollOffset*(self: LineEdit): Float {.loadfrom("get_scroll_offset", 1740695150).}
  proc `expandToTextLengthEnabled=`*(self: LineEdit; enabled: Bool) {.loadfrom("set_expand_to_text_length_enabled", 2586408642).}
  proc isExpandToTextLengthEnabled*(self: LineEdit): Bool {.loadfrom("is_expand_to_text_length_enabled", 36873697).}
  proc `caretBlinkEnabled=`*(self: LineEdit; enabled: Bool) {.loadfrom("set_caret_blink_enabled", 2586408642).}
  proc isCaretBlinkEnabled*(self: LineEdit): Bool {.loadfrom("is_caret_blink_enabled", 36873697).}
  proc `caretMidGraphemeEnabled=`*(self: LineEdit; enabled: Bool) {.loadfrom("set_caret_mid_grapheme_enabled", 2586408642).}
  proc isCaretMidGraphemeEnabled*(self: LineEdit): Bool {.loadfrom("is_caret_mid_grapheme_enabled", 36873697).}
  proc `caretForceDisplayed=`*(self: LineEdit; enabled: Bool) {.loadfrom("set_caret_force_displayed", 2586408642).}
  proc isCaretForceDisplayed*(self: LineEdit): Bool {.loadfrom("is_caret_force_displayed", 36873697).}
  proc `caretBlinkInterval=`*(self: LineEdit; interval: Float) {.loadfrom("set_caret_blink_interval", 373806689).}
  proc caretBlinkInterval*(self: LineEdit): Float {.loadfrom("get_caret_blink_interval", 1740695150).}
  proc `maxLength=`*(self: LineEdit; chars: int32) {.loadfrom("set_max_length", 1286410249).}
  proc maxLength*(self: LineEdit): int32 {.loadfrom("get_max_length", 3905245786).}
  proc insertTextAtCaret*(self: LineEdit; text: String) {.loadfrom("insert_text_at_caret", 83702148).}
  proc deleteCharAtCaret*(self: LineEdit) {.loadfrom("delete_char_at_caret", 3218959716).}
  proc deleteText*(self: LineEdit; fromColumn: int32; toColumn: int32) {.loadfrom("delete_text", 3937882851).}
  proc `editable=`*(self: LineEdit; enabled: Bool) {.loadfrom("set_editable", 2586408642).}
  proc isEditable*(self: LineEdit): Bool {.loadfrom("is_editable", 36873697).}
  proc `secret=`*(self: LineEdit; enabled: Bool) {.loadfrom("set_secret", 2586408642).}
  proc isSecret*(self: LineEdit): Bool {.loadfrom("is_secret", 36873697).}
  proc `secretCharacter=`*(self: LineEdit; character: String) {.loadfrom("set_secret_character", 83702148).}
  proc secretCharacter*(self: LineEdit): String {.loadfrom("get_secret_character", 201670096).}
  proc menuOption*(self: LineEdit; option: int32) {.loadfrom("menu_option", 1286410249).}
  proc getMenu*(self: LineEdit): PopupMenu {.loadfrom("get_menu", 229722558).}
  proc isMenuVisible*(self: LineEdit): Bool {.loadfrom("is_menu_visible", 36873697).}
  proc `contextMenuEnabled=`*(self: LineEdit; enable: Bool) {.loadfrom("set_context_menu_enabled", 2586408642).}
  proc isContextMenuEnabled*(self: LineEdit): Bool {.loadfrom("is_context_menu_enabled", 2240911060).}
  proc `virtualKeyboardEnabled=`*(self: LineEdit; enable: Bool) {.loadfrom("set_virtual_keyboard_enabled", 2586408642).}
  proc isVirtualKeyboardEnabled*(self: LineEdit): Bool {.loadfrom("is_virtual_keyboard_enabled", 36873697).}
  proc `virtualKeyboardType=`*(self: LineEdit; `type`: LineEdit|>VirtualKeyboardType) {.loadfrom("set_virtual_keyboard_type", 2696893573).}
  proc virtualKeyboardType*(self: LineEdit): LineEdit|>VirtualKeyboardType {.loadfrom("get_virtual_keyboard_type", 1928699316).}
  proc `clearButtonEnabled=`*(self: LineEdit; enable: Bool) {.loadfrom("set_clear_button_enabled", 2586408642).}
  proc isClearButtonEnabled*(self: LineEdit): Bool {.loadfrom("is_clear_button_enabled", 36873697).}
  proc `shortcutKeysEnabled=`*(self: LineEdit; enable: Bool) {.loadfrom("set_shortcut_keys_enabled", 2586408642).}
  proc isShortcutKeysEnabled*(self: LineEdit): Bool {.loadfrom("is_shortcut_keys_enabled", 36873697).}
  proc `middleMousePasteEnabled=`*(self: LineEdit; enable: Bool) {.loadfrom("set_middle_mouse_paste_enabled", 2586408642).}
  proc isMiddleMousePasteEnabled*(self: LineEdit): Bool {.loadfrom("is_middle_mouse_paste_enabled", 36873697).}
  proc `selectingEnabled=`*(self: LineEdit; enable: Bool) {.loadfrom("set_selecting_enabled", 2586408642).}
  proc isSelectingEnabled*(self: LineEdit): Bool {.loadfrom("is_selecting_enabled", 36873697).}
  proc `deselectOnFocusLossEnabled=`*(self: LineEdit; enable: Bool) {.loadfrom("set_deselect_on_focus_loss_enabled", 2586408642).}
  proc isDeselectOnFocusLossEnabled*(self: LineEdit): Bool {.loadfrom("is_deselect_on_focus_loss_enabled", 36873697).}
  proc `rightIcon=`*(self: LineEdit; icon: Ref[Texture2D]) {.loadfrom("set_right_icon", 4051416890).}
  proc rightIcon*(self: LineEdit): Ref[Texture2D] {.loadfrom("get_right_icon", 255860311).}
  proc `flat=`*(self: LineEdit; enabled: Bool) {.loadfrom("set_flat", 2586408642).}
  proc isFlat*(self: LineEdit): Bool {.loadfrom("is_flat", 36873697).}
  proc `selectAllOnFocus=`*(self: LineEdit; enabled: Bool) {.loadfrom("set_select_all_on_focus", 2586408642).}
  proc isSelectAllOnFocus*(self: LineEdit): Bool {.loadfrom("is_select_all_on_focus", 36873697).}

# MenuBar
define_godot_engine_class_essencials(MenuBar, Control)
MenuBar.memberProcs:
  proc `switchOnHover=`*(self: MenuBar; enable: Bool) {.loadfrom("set_switch_on_hover", 2586408642).}
  proc isSwitchOnHover*(self: MenuBar): Bool {.loadfrom("is_switch_on_hover", 2240911060).}
  proc setDisableShortcuts*(self: MenuBar; disabled: Bool) {.loadfrom("set_disable_shortcuts", 2586408642).}
  proc `preferGlobalMenu=`*(self: MenuBar; enabled: Bool) {.loadfrom("set_prefer_global_menu", 2586408642).}
  proc isPreferGlobalMenu*(self: MenuBar): Bool {.loadfrom("is_prefer_global_menu", 36873697).}
  proc isNativeMenu*(self: MenuBar): Bool {.loadfrom("is_native_menu", 36873697).}
  proc getMenuCount*(self: MenuBar): int32 {.loadfrom("get_menu_count", 3905245786).}
  proc `textDirection=`*(self: MenuBar; direction: Control|>TextDirection) {.loadfrom("set_text_direction", 119160795).}
  proc textDirection*(self: MenuBar): Control|>TextDirection {.loadfrom("get_text_direction", 797257663).}
  proc `language=`*(self: MenuBar; language: String) {.loadfrom("set_language", 83702148).}
  proc language*(self: MenuBar): String {.loadfrom("get_language", 201670096).}
  proc `flat=`*(self: MenuBar; enabled: Bool) {.loadfrom("set_flat", 2586408642).}
  proc isFlat*(self: MenuBar): Bool {.loadfrom("is_flat", 36873697).}
  proc `startIndex=`*(self: MenuBar; enabled: int32) {.loadfrom("set_start_index", 1286410249).}
  proc startIndex*(self: MenuBar): int32 {.loadfrom("get_start_index", 3905245786).}
  proc setMenuTitle*(self: MenuBar; menu: int32; title: String) {.loadfrom("set_menu_title", 501894301).}
  proc getMenuTitle*(self: MenuBar; menu: int32): String {.loadfrom("get_menu_title", 844755477).}
  proc setMenuTooltip*(self: MenuBar; menu: int32; tooltip: String) {.loadfrom("set_menu_tooltip", 501894301).}
  proc getMenuTooltip*(self: MenuBar; menu: int32): String {.loadfrom("get_menu_tooltip", 844755477).}
  proc setMenuDisabled*(self: MenuBar; menu: int32; disabled: Bool) {.loadfrom("set_menu_disabled", 300928843).}
  proc isMenuDisabled*(self: MenuBar; menu: int32): Bool {.loadfrom("is_menu_disabled", 1116898809).}
  proc setMenuHidden*(self: MenuBar; menu: int32; hidden: Bool) {.loadfrom("set_menu_hidden", 300928843).}
  proc isMenuHidden*(self: MenuBar; menu: int32): Bool {.loadfrom("is_menu_hidden", 1116898809).}
  proc getMenuPopup*(self: MenuBar; menu: int32): PopupMenu {.loadfrom("get_menu_popup", 2100501353).}

# NinePatchRect
define_godot_engine_class_essencials(NinePatchRect, Control)
NinePatchRect.memberProcs:
  proc `texture=`*(self: NinePatchRect; texture: Ref[Texture2D]) {.loadfrom("set_texture", 4051416890).}
  proc texture*(self: NinePatchRect): Ref[Texture2D] {.loadfrom("get_texture", 3635182373).}
  proc `patchMargin=`*(self: NinePatchRect; margin: Side; value: int32) {.loadfrom("set_patch_margin", 437707142).}
  proc patchMargin*(self: NinePatchRect; margin: Side): int32 {.loadfrom("get_patch_margin", 1983885014).}
  proc `regionRect=`*(self: NinePatchRect; rect: Rect2) {.loadfrom("set_region_rect", 2046264180).}
  proc regionRect*(self: NinePatchRect): Rect2 {.loadfrom("get_region_rect", 1639390495).}
  proc `drawCenter=`*(self: NinePatchRect; drawCenter: Bool) {.loadfrom("set_draw_center", 2586408642).}
  proc isDrawCenterEnabled*(self: NinePatchRect): Bool {.loadfrom("is_draw_center_enabled", 36873697).}
  proc `hAxisStretchMode=`*(self: NinePatchRect; mode: NinePatchRect|>AxisStretchMode) {.loadfrom("set_h_axis_stretch_mode", 3219608417).}
  proc hAxisStretchMode*(self: NinePatchRect): NinePatchRect|>AxisStretchMode {.loadfrom("get_h_axis_stretch_mode", 3317113799).}
  proc `vAxisStretchMode=`*(self: NinePatchRect; mode: NinePatchRect|>AxisStretchMode) {.loadfrom("set_v_axis_stretch_mode", 3219608417).}
  proc vAxisStretchMode*(self: NinePatchRect): NinePatchRect|>AxisStretchMode {.loadfrom("get_v_axis_stretch_mode", 3317113799).}

# Panel
define_godot_engine_class_essencials(Panel, Control)

# Range
define_godot_engine_class_essencials(Range, Control)
method valueChanged*(self: Range; newValue: float64) {.base.} = (discard)
Range.memberProcs:
  proc value*(self: Range): float64 {.loadfrom("get_value", 1740695150).}
  proc min*(self: Range): float64 {.loadfrom("get_min", 1740695150).}
  proc max*(self: Range): float64 {.loadfrom("get_max", 1740695150).}
  proc step*(self: Range): float64 {.loadfrom("get_step", 1740695150).}
  proc page*(self: Range): float64 {.loadfrom("get_page", 1740695150).}
  proc asRatio*(self: Range): float64 {.loadfrom("get_as_ratio", 1740695150).}
  proc `value=`*(self: Range; value: float64) {.loadfrom("set_value", 373806689).}
  proc setValueNoSignal*(self: Range; value: float64) {.loadfrom("set_value_no_signal", 373806689).}
  proc `min=`*(self: Range; minimum: float64) {.loadfrom("set_min", 373806689).}
  proc `max=`*(self: Range; maximum: float64) {.loadfrom("set_max", 373806689).}
  proc `step=`*(self: Range; step: float64) {.loadfrom("set_step", 373806689).}
  proc `page=`*(self: Range; pagesize: float64) {.loadfrom("set_page", 373806689).}
  proc `asRatio=`*(self: Range; value: float64) {.loadfrom("set_as_ratio", 373806689).}
  proc `useRoundedValues=`*(self: Range; enabled: Bool) {.loadfrom("set_use_rounded_values", 2586408642).}
  proc isUsingRoundedValues*(self: Range): Bool {.loadfrom("is_using_rounded_values", 36873697).}
  proc `expRatio=`*(self: Range; enabled: Bool) {.loadfrom("set_exp_ratio", 2586408642).}
  proc isRatioExp*(self: Range): Bool {.loadfrom("is_ratio_exp", 36873697).}
  proc `allowGreater=`*(self: Range; allow: Bool) {.loadfrom("set_allow_greater", 2586408642).}
  proc isGreaterAllowed*(self: Range): Bool {.loadfrom("is_greater_allowed", 36873697).}
  proc `allowLesser=`*(self: Range; allow: Bool) {.loadfrom("set_allow_lesser", 2586408642).}
  proc isLesserAllowed*(self: Range): Bool {.loadfrom("is_lesser_allowed", 36873697).}
  proc share*(self: Range; with: ptr Node) {.loadfrom("share", 1078189570).}
  proc unshare*(self: Range) {.loadfrom("unshare", 3218959716).}

# ReferenceRect
define_godot_engine_class_essencials(ReferenceRect, Control)
ReferenceRect.memberProcs:
  proc borderColor*(self: ReferenceRect): Color {.loadfrom("get_border_color", 3444240500).}
  proc `borderColor=`*(self: ReferenceRect; color: Color) {.loadfrom("set_border_color", 2920490490).}
  proc borderWidth*(self: ReferenceRect): Float {.loadfrom("get_border_width", 1740695150).}
  proc `borderWidth=`*(self: ReferenceRect; width: Float) {.loadfrom("set_border_width", 373806689).}
  proc editorOnly*(self: ReferenceRect): Bool {.loadfrom("get_editor_only", 36873697).}
  proc `editorOnly=`*(self: ReferenceRect; enabled: Bool) {.loadfrom("set_editor_only", 2586408642).}

# RichTextLabel
define_godot_engine_class_essencials(RichTextLabel, Control)
RichTextLabel.memberProcs:
  proc getParsedText*(self: RichTextLabel): String {.loadfrom("get_parsed_text", 201670096).}
  proc addText*(self: RichTextLabel; text: String) {.loadfrom("add_text", 83702148).}
  proc `text=`*(self: RichTextLabel; text: String) {.loadfrom("set_text", 83702148).}
  proc addImage*(self: RichTextLabel; image: Ref[Texture2D]; width: int32 = 0; height: int32 = 0; color: Color = Color|>init(1, 1, 1, 1); inlineAlign: InlineAlignment = inlineAlignmentCenter; region: Rect2 = Rect2|>init(0, 0, 0, 0)) {.loadfrom("add_image", 3346058748).}
  proc newline*(self: RichTextLabel) {.loadfrom("newline", 3218959716).}
  proc removeParagraph*(self: RichTextLabel; paragraph: int32): Bool {.loadfrom("remove_paragraph", 3067735520).}
  proc pushFont*(self: RichTextLabel; font: Ref[Font]; fontSize: int32) {.loadfrom("push_font", 3014009009).}
  proc pushFontSize*(self: RichTextLabel; fontSize: int32) {.loadfrom("push_font_size", 1286410249).}
  proc pushNormal*(self: RichTextLabel) {.loadfrom("push_normal", 3218959716).}
  proc pushBold*(self: RichTextLabel) {.loadfrom("push_bold", 3218959716).}
  proc pushBoldItalics*(self: RichTextLabel) {.loadfrom("push_bold_italics", 3218959716).}
  proc pushItalics*(self: RichTextLabel) {.loadfrom("push_italics", 3218959716).}
  proc pushMono*(self: RichTextLabel) {.loadfrom("push_mono", 3218959716).}
  proc pushColor*(self: RichTextLabel; color: Color) {.loadfrom("push_color", 2920490490).}
  proc pushOutlineSize*(self: RichTextLabel; outlineSize: int32) {.loadfrom("push_outline_size", 1286410249).}
  proc pushOutlineColor*(self: RichTextLabel; color: Color) {.loadfrom("push_outline_color", 2920490490).}
  proc pushParagraph*(self: RichTextLabel; alignment: HorizontalAlignment; baseDirection: Control|>TextDirection = textDirectionAuto; language: String = ""; stParser: TextServer|>StructuredTextParser = structuredTextDefault; justificationFlags: set[TextServer|>JustificationFlag] = {}; tabStops: PackedFloat32Array = PackedFloat32Array()) {.loadfrom("push_paragraph", 3218895358).}
  proc pushIndent*(self: RichTextLabel; level: int32) {.loadfrom("push_indent", 1286410249).}
  proc pushList*(self: RichTextLabel; level: int32; `type`: RichTextLabel|>ListType; capitalize: Bool; bullet: String = "•") {.loadfrom("push_list", 4036303897).}
  proc pushMeta*(self: RichTextLabel; data: ptr Variant) {.loadfrom("push_meta", 1114965689).}
  proc pushHint*(self: RichTextLabel; description: String) {.loadfrom("push_hint", 83702148).}
  proc pushUnderline*(self: RichTextLabel) {.loadfrom("push_underline", 3218959716).}
  proc pushStrikethrough*(self: RichTextLabel) {.loadfrom("push_strikethrough", 3218959716).}
  proc pushTable*(self: RichTextLabel; columns: int32; inlineAlign: InlineAlignment = inlineAlignmentTopTo; alignToRow: int32 = -1) {.loadfrom("push_table", 1125058220).}
  proc pushDropcap*(self: RichTextLabel; string: String; font: Ref[Font]; size: int32; dropcapMargins: Rect2 = Rect2|>init(0, 0, 0, 0); color: Color = Color|>init(1, 1, 1, 1); outlineSize: int32 = 0; outlineColor: Color = Color|>init(0, 0, 0, 0)) {.loadfrom("push_dropcap", 311501835).}
  proc setTableColumnExpand*(self: RichTextLabel; column: int32; expand: Bool; ratio: int32) {.loadfrom("set_table_column_expand", 4258957458).}
  proc setCellRowBackgroundColor*(self: RichTextLabel; oddRowBg: Color; evenRowBg: Color) {.loadfrom("set_cell_row_background_color", 3465483165).}
  proc setCellBorderColor*(self: RichTextLabel; color: Color) {.loadfrom("set_cell_border_color", 2920490490).}
  proc setCellSizeOverride*(self: RichTextLabel; minSize: Vector2; maxSize: Vector2) {.loadfrom("set_cell_size_override", 3108078480).}
  proc setCellPadding*(self: RichTextLabel; padding: Rect2) {.loadfrom("set_cell_padding", 2046264180).}
  proc pushCell*(self: RichTextLabel) {.loadfrom("push_cell", 3218959716).}
  proc pushFgcolor*(self: RichTextLabel; fgcolor: Color) {.loadfrom("push_fgcolor", 2920490490).}
  proc pushBgcolor*(self: RichTextLabel; bgcolor: Color) {.loadfrom("push_bgcolor", 2920490490).}
  proc pushCustomfx*(self: RichTextLabel; effect: Ref[RichTextEffect]; env: Dictionary) {.loadfrom("push_customfx", 2337942958).}
  proc pop*(self: RichTextLabel) {.loadfrom("pop", 3218959716).}
  proc clear*(self: RichTextLabel) {.loadfrom("clear", 3218959716).}
  proc `structuredTextBidiOverride=`*(self: RichTextLabel; parser: TextServer|>StructuredTextParser) {.loadfrom("set_structured_text_bidi_override", 55961453).}
  proc structuredTextBidiOverride*(self: RichTextLabel): TextServer|>StructuredTextParser {.loadfrom("get_structured_text_bidi_override", 3385126229).}
  proc `structuredTextBidiOverrideOptions=`*(self: RichTextLabel; args: Array) {.loadfrom("set_structured_text_bidi_override_options", 381264803).}
  proc structuredTextBidiOverrideOptions*(self: RichTextLabel): Array {.loadfrom("get_structured_text_bidi_override_options", 3995934104).}
  proc `textDirection=`*(self: RichTextLabel; direction: Control|>TextDirection) {.loadfrom("set_text_direction", 119160795).}
  proc textDirection*(self: RichTextLabel): Control|>TextDirection {.loadfrom("get_text_direction", 797257663).}
  proc `language=`*(self: RichTextLabel; language: String) {.loadfrom("set_language", 83702148).}
  proc language*(self: RichTextLabel): String {.loadfrom("get_language", 201670096).}
  proc `autowrapMode=`*(self: RichTextLabel; autowrapMode: TextServer|>AutowrapMode) {.loadfrom("set_autowrap_mode", 3289138044).}
  proc autowrapMode*(self: RichTextLabel): TextServer|>AutowrapMode {.loadfrom("get_autowrap_mode", 1549071663).}
  proc `metaUnderline=`*(self: RichTextLabel; enable: Bool) {.loadfrom("set_meta_underline", 2586408642).}
  proc isMetaUnderlined*(self: RichTextLabel): Bool {.loadfrom("is_meta_underlined", 36873697).}
  proc `hintUnderline=`*(self: RichTextLabel; enable: Bool) {.loadfrom("set_hint_underline", 2586408642).}
  proc isHintUnderlined*(self: RichTextLabel): Bool {.loadfrom("is_hint_underlined", 36873697).}
  proc `scrollActive=`*(self: RichTextLabel; active: Bool) {.loadfrom("set_scroll_active", 2586408642).}
  proc isScrollActive*(self: RichTextLabel): Bool {.loadfrom("is_scroll_active", 36873697).}
  proc `scrollFollow=`*(self: RichTextLabel; follow: Bool) {.loadfrom("set_scroll_follow", 2586408642).}
  proc isScrollFollowing*(self: RichTextLabel): Bool {.loadfrom("is_scroll_following", 36873697).}
  proc getVScrollBar*(self: RichTextLabel): VScrollBar {.loadfrom("get_v_scroll_bar", 2630340773).}
  proc scrollToLine*(self: RichTextLabel; line: int32) {.loadfrom("scroll_to_line", 1286410249).}
  proc scrollToParagraph*(self: RichTextLabel; paragraph: int32) {.loadfrom("scroll_to_paragraph", 1286410249).}
  proc scrollToSelection*(self: RichTextLabel) {.loadfrom("scroll_to_selection", 3218959716).}
  proc `tabSize=`*(self: RichTextLabel; spaces: int32) {.loadfrom("set_tab_size", 1286410249).}
  proc tabSize*(self: RichTextLabel): int32 {.loadfrom("get_tab_size", 3905245786).}
  proc `fitContent=`*(self: RichTextLabel; enabled: Bool) {.loadfrom("set_fit_content", 2586408642).}
  proc isFitContentEnabled*(self: RichTextLabel): Bool {.loadfrom("is_fit_content_enabled", 36873697).}
  proc `selectionEnabled=`*(self: RichTextLabel; enabled: Bool) {.loadfrom("set_selection_enabled", 2586408642).}
  proc isSelectionEnabled*(self: RichTextLabel): Bool {.loadfrom("is_selection_enabled", 36873697).}
  proc `contextMenuEnabled=`*(self: RichTextLabel; enabled: Bool) {.loadfrom("set_context_menu_enabled", 2586408642).}
  proc isContextMenuEnabled*(self: RichTextLabel): Bool {.loadfrom("is_context_menu_enabled", 36873697).}
  proc `shortcutKeysEnabled=`*(self: RichTextLabel; enabled: Bool) {.loadfrom("set_shortcut_keys_enabled", 2586408642).}
  proc isShortcutKeysEnabled*(self: RichTextLabel): Bool {.loadfrom("is_shortcut_keys_enabled", 36873697).}
  proc `deselectOnFocusLossEnabled=`*(self: RichTextLabel; enable: Bool) {.loadfrom("set_deselect_on_focus_loss_enabled", 2586408642).}
  proc isDeselectOnFocusLossEnabled*(self: RichTextLabel): Bool {.loadfrom("is_deselect_on_focus_loss_enabled", 36873697).}
  proc getSelectionFrom*(self: RichTextLabel): int32 {.loadfrom("get_selection_from", 3905245786).}
  proc getSelectionTo*(self: RichTextLabel): int32 {.loadfrom("get_selection_to", 3905245786).}
  proc selectAll*(self: RichTextLabel) {.loadfrom("select_all", 3218959716).}
  proc getSelectedText*(self: RichTextLabel): String {.loadfrom("get_selected_text", 201670096).}
  proc deselect*(self: RichTextLabel) {.loadfrom("deselect", 3218959716).}
  proc parseBbcode*(self: RichTextLabel; bbcode: String) {.loadfrom("parse_bbcode", 83702148).}
  proc appendText*(self: RichTextLabel; bbcode: String) {.loadfrom("append_text", 83702148).}
  proc text*(self: RichTextLabel): String {.loadfrom("get_text", 201670096).}
  proc isReady*(self: RichTextLabel): Bool {.loadfrom("is_ready", 36873697).}
  proc `threaded=`*(self: RichTextLabel; threaded: Bool) {.loadfrom("set_threaded", 2586408642).}
  proc isThreaded*(self: RichTextLabel): Bool {.loadfrom("is_threaded", 36873697).}
  proc `progressBarDelay=`*(self: RichTextLabel; delayMs: int32) {.loadfrom("set_progress_bar_delay", 1286410249).}
  proc progressBarDelay*(self: RichTextLabel): int32 {.loadfrom("get_progress_bar_delay", 3905245786).}
  proc `visibleCharacters=`*(self: RichTextLabel; amount: int32) {.loadfrom("set_visible_characters", 1286410249).}
  proc visibleCharacters*(self: RichTextLabel): int32 {.loadfrom("get_visible_characters", 3905245786).}
  proc visibleCharactersBehavior*(self: RichTextLabel): TextServer|>VisibleCharactersBehavior {.loadfrom("get_visible_characters_behavior", 258789322).}
  proc `visibleCharactersBehavior=`*(self: RichTextLabel; behavior: TextServer|>VisibleCharactersBehavior) {.loadfrom("set_visible_characters_behavior", 3383839701).}
  proc `visibleRatio=`*(self: RichTextLabel; ratio: Float) {.loadfrom("set_visible_ratio", 373806689).}
  proc visibleRatio*(self: RichTextLabel): Float {.loadfrom("get_visible_ratio", 1740695150).}
  proc getCharacterLine*(self: RichTextLabel; character: int32): int32 {.loadfrom("get_character_line", 3744713108).}
  proc getCharacterParagraph*(self: RichTextLabel; character: int32): int32 {.loadfrom("get_character_paragraph", 3744713108).}
  proc getTotalCharacterCount*(self: RichTextLabel): int32 {.loadfrom("get_total_character_count", 3905245786).}
  proc `useBbcode=`*(self: RichTextLabel; enable: Bool) {.loadfrom("set_use_bbcode", 2586408642).}
  proc isUsingBbcode*(self: RichTextLabel): Bool {.loadfrom("is_using_bbcode", 36873697).}
  proc getLineCount*(self: RichTextLabel): int32 {.loadfrom("get_line_count", 3905245786).}
  proc getVisibleLineCount*(self: RichTextLabel): int32 {.loadfrom("get_visible_line_count", 3905245786).}
  proc getParagraphCount*(self: RichTextLabel): int32 {.loadfrom("get_paragraph_count", 3905245786).}
  proc getVisibleParagraphCount*(self: RichTextLabel): int32 {.loadfrom("get_visible_paragraph_count", 3905245786).}
  proc getContentHeight*(self: RichTextLabel): int32 {.loadfrom("get_content_height", 3905245786).}
  proc getContentWidth*(self: RichTextLabel): int32 {.loadfrom("get_content_width", 3905245786).}
  proc getLineOffset*(self: RichTextLabel; line: int32): Float {.loadfrom("get_line_offset", 4025615559).}
  proc getParagraphOffset*(self: RichTextLabel; paragraph: int32): Float {.loadfrom("get_paragraph_offset", 4025615559).}
  proc parseExpressionsForValues*(self: RichTextLabel; expressions: PackedStringArray): Dictionary {.loadfrom("parse_expressions_for_values", 1522900837).}
  proc `effects=`*(self: RichTextLabel; effects: Array) {.loadfrom("set_effects", 381264803).}
  proc effects*(self: RichTextLabel): Array {.loadfrom("get_effects", 2915620761).}
  proc installEffect*(self: RichTextLabel; effect: ptr Variant) {.loadfrom("install_effect", 1114965689).}
  proc getMenu*(self: RichTextLabel): PopupMenu {.loadfrom("get_menu", 229722558).}
  proc isMenuVisible*(self: RichTextLabel): Bool {.loadfrom("is_menu_visible", 36873697).}
  proc menuOption*(self: RichTextLabel; option: int32) {.loadfrom("menu_option", 1286410249).}

# Separator
define_godot_engine_class_essencials(Separator, Control)

# TabBar
define_godot_engine_class_essencials(TabBar, Control)
TabBar.memberProcs:
  proc `tabCount=`*(self: TabBar; count: int32) {.loadfrom("set_tab_count", 1286410249).}
  proc tabCount*(self: TabBar): int32 {.loadfrom("get_tab_count", 3905245786).}
  proc `currentTab=`*(self: TabBar; tabIdx: int32) {.loadfrom("set_current_tab", 1286410249).}
  proc currentTab*(self: TabBar): int32 {.loadfrom("get_current_tab", 3905245786).}
  proc getPreviousTab*(self: TabBar): int32 {.loadfrom("get_previous_tab", 3905245786).}
  proc setTabTitle*(self: TabBar; tabIdx: int32; title: String) {.loadfrom("set_tab_title", 501894301).}
  proc getTabTitle*(self: TabBar; tabIdx: int32): String {.loadfrom("get_tab_title", 844755477).}
  proc setTabTextDirection*(self: TabBar; tabIdx: int32; direction: Control|>TextDirection) {.loadfrom("set_tab_text_direction", 1707680378).}
  proc getTabTextDirection*(self: TabBar; tabIdx: int32): Control|>TextDirection {.loadfrom("get_tab_text_direction", 4235602388).}
  proc setTabLanguage*(self: TabBar; tabIdx: int32; language: String) {.loadfrom("set_tab_language", 501894301).}
  proc getTabLanguage*(self: TabBar; tabIdx: int32): String {.loadfrom("get_tab_language", 844755477).}
  proc setTabIcon*(self: TabBar; tabIdx: int32; icon: Ref[Texture2D]) {.loadfrom("set_tab_icon", 666127730).}
  proc getTabIcon*(self: TabBar; tabIdx: int32): Ref[Texture2D] {.loadfrom("get_tab_icon", 3536238170).}
  proc setTabIconMaxWidth*(self: TabBar; tabIdx: int32; width: int32) {.loadfrom("set_tab_icon_max_width", 3937882851).}
  proc getTabIconMaxWidth*(self: TabBar; tabIdx: int32): int32 {.loadfrom("get_tab_icon_max_width", 923996154).}
  proc setTabButtonIcon*(self: TabBar; tabIdx: int32; icon: Ref[Texture2D]) {.loadfrom("set_tab_button_icon", 666127730).}
  proc getTabButtonIcon*(self: TabBar; tabIdx: int32): Ref[Texture2D] {.loadfrom("get_tab_button_icon", 3536238170).}
  proc setTabDisabled*(self: TabBar; tabIdx: int32; disabled: Bool) {.loadfrom("set_tab_disabled", 300928843).}
  proc isTabDisabled*(self: TabBar; tabIdx: int32): Bool {.loadfrom("is_tab_disabled", 1116898809).}
  proc setTabHidden*(self: TabBar; tabIdx: int32; hidden: Bool) {.loadfrom("set_tab_hidden", 300928843).}
  proc isTabHidden*(self: TabBar; tabIdx: int32): Bool {.loadfrom("is_tab_hidden", 1116898809).}
  proc setTabMetadata*(self: TabBar; tabIdx: int32; metadata: ptr Variant) {.loadfrom("set_tab_metadata", 2152698145).}
  proc getTabMetadata*(self: TabBar; tabIdx: int32): Variant {.loadfrom("get_tab_metadata", 4227898402).}
  proc removeTab*(self: TabBar; tabIdx: int32) {.loadfrom("remove_tab", 1286410249).}
  proc addTab*(self: TabBar; title: String = ""; icon: Ref[Texture2D] = default Ref[Texture2D]) {.loadfrom("add_tab", 1465444425).}
  proc getTabIdxAtPoint*(self: TabBar; point: Vector2): int32 {.loadfrom("get_tab_idx_at_point", 3820158470).}
  proc `tabAlignment=`*(self: TabBar; alignment: TabBar|>AlignmentMode) {.loadfrom("set_tab_alignment", 2413632353).}
  proc tabAlignment*(self: TabBar): TabBar|>AlignmentMode {.loadfrom("get_tab_alignment", 2178122193).}
  proc `clipTabs=`*(self: TabBar; clipTabs: Bool) {.loadfrom("set_clip_tabs", 2586408642).}
  proc clipTabs*(self: TabBar): Bool {.loadfrom("get_clip_tabs", 36873697).}
  proc getTabOffset*(self: TabBar): int32 {.loadfrom("get_tab_offset", 3905245786).}
  proc getOffsetButtonsVisible*(self: TabBar): Bool {.loadfrom("get_offset_buttons_visible", 36873697).}
  proc ensureTabVisible*(self: TabBar; idx: int32) {.loadfrom("ensure_tab_visible", 1286410249).}
  proc getTabRect*(self: TabBar; tabIdx: int32): Rect2 {.loadfrom("get_tab_rect", 3327874267).}
  proc moveTab*(self: TabBar; `from`: int32; to: int32) {.loadfrom("move_tab", 3937882851).}
  proc `tabCloseDisplayPolicy=`*(self: TabBar; policy: TabBar|>CloseButtonDisplayPolicy) {.loadfrom("set_tab_close_display_policy", 2212906737).}
  proc tabCloseDisplayPolicy*(self: TabBar): TabBar|>CloseButtonDisplayPolicy {.loadfrom("get_tab_close_display_policy", 2956568028).}
  proc `maxTabWidth=`*(self: TabBar; width: int32) {.loadfrom("set_max_tab_width", 1286410249).}
  proc maxTabWidth*(self: TabBar): int32 {.loadfrom("get_max_tab_width", 3905245786).}
  proc `scrollingEnabled=`*(self: TabBar; enabled: Bool) {.loadfrom("set_scrolling_enabled", 2586408642).}
  proc scrollingEnabled*(self: TabBar): Bool {.loadfrom("get_scrolling_enabled", 36873697).}
  proc `dragToRearrangeEnabled=`*(self: TabBar; enabled: Bool) {.loadfrom("set_drag_to_rearrange_enabled", 2586408642).}
  proc dragToRearrangeEnabled*(self: TabBar): Bool {.loadfrom("get_drag_to_rearrange_enabled", 36873697).}
  proc `tabsRearrangeGroup=`*(self: TabBar; groupId: int32) {.loadfrom("set_tabs_rearrange_group", 1286410249).}
  proc tabsRearrangeGroup*(self: TabBar): int32 {.loadfrom("get_tabs_rearrange_group", 3905245786).}
  proc `scrollToSelected=`*(self: TabBar; enabled: Bool) {.loadfrom("set_scroll_to_selected", 2586408642).}
  proc scrollToSelected*(self: TabBar): Bool {.loadfrom("get_scroll_to_selected", 36873697).}
  proc `selectWithRmb=`*(self: TabBar; enabled: Bool) {.loadfrom("set_select_with_rmb", 2586408642).}
  proc selectWithRmb*(self: TabBar): Bool {.loadfrom("get_select_with_rmb", 36873697).}
  proc clearTabs*(self: TabBar) {.loadfrom("clear_tabs", 3218959716).}

# TextEdit
define_godot_engine_class_essencials(TextEdit, Control)
method handleUnicodeInput*(self: TextEdit; unicodeChar: int32; caretIndex: int32) {.base.} = (discard)
method backspace*(self: TextEdit; caretIndex: int32) {.base.} = (discard)
method cut*(self: TextEdit; caretIndex: int32) {.base.} = (discard)
method copy*(self: TextEdit; caretIndex: int32) {.base.} = (discard)
method paste*(self: TextEdit; caretIndex: int32) {.base.} = (discard)
method pastePrimaryClipboard*(self: TextEdit; caretIndex: int32) {.base.} = (discard)
TextEdit.memberProcs:
  proc hasImeText*(self: TextEdit): Bool {.loadfrom("has_ime_text", 36873697).}
  proc `editable=`*(self: TextEdit; enabled: Bool) {.loadfrom("set_editable", 2586408642).}
  proc isEditable*(self: TextEdit): Bool {.loadfrom("is_editable", 36873697).}
  proc `textDirection=`*(self: TextEdit; direction: Control|>TextDirection) {.loadfrom("set_text_direction", 119160795).}
  proc textDirection*(self: TextEdit): Control|>TextDirection {.loadfrom("get_text_direction", 797257663).}
  proc `language=`*(self: TextEdit; language: String) {.loadfrom("set_language", 83702148).}
  proc language*(self: TextEdit): String {.loadfrom("get_language", 201670096).}
  proc `structuredTextBidiOverride=`*(self: TextEdit; parser: TextServer|>StructuredTextParser) {.loadfrom("set_structured_text_bidi_override", 55961453).}
  proc structuredTextBidiOverride*(self: TextEdit): TextServer|>StructuredTextParser {.loadfrom("get_structured_text_bidi_override", 3385126229).}
  proc `structuredTextBidiOverrideOptions=`*(self: TextEdit; args: Array) {.loadfrom("set_structured_text_bidi_override_options", 381264803).}
  proc structuredTextBidiOverrideOptions*(self: TextEdit): Array {.loadfrom("get_structured_text_bidi_override_options", 3995934104).}
  proc setTabSize*(self: TextEdit; size: int32) {.loadfrom("set_tab_size", 1286410249).}
  proc getTabSize*(self: TextEdit): int32 {.loadfrom("get_tab_size", 3905245786).}
  proc setOvertypeModeEnabled*(self: TextEdit; enabled: Bool) {.loadfrom("set_overtype_mode_enabled", 2586408642).}
  proc isOvertypeModeEnabled*(self: TextEdit): Bool {.loadfrom("is_overtype_mode_enabled", 36873697).}
  proc `contextMenuEnabled=`*(self: TextEdit; enabled: Bool) {.loadfrom("set_context_menu_enabled", 2586408642).}
  proc isContextMenuEnabled*(self: TextEdit): Bool {.loadfrom("is_context_menu_enabled", 36873697).}
  proc `shortcutKeysEnabled=`*(self: TextEdit; enabled: Bool) {.loadfrom("set_shortcut_keys_enabled", 2586408642).}
  proc isShortcutKeysEnabled*(self: TextEdit): Bool {.loadfrom("is_shortcut_keys_enabled", 36873697).}
  proc `virtualKeyboardEnabled=`*(self: TextEdit; enabled: Bool) {.loadfrom("set_virtual_keyboard_enabled", 2586408642).}
  proc isVirtualKeyboardEnabled*(self: TextEdit): Bool {.loadfrom("is_virtual_keyboard_enabled", 36873697).}
  proc `middleMousePasteEnabled=`*(self: TextEdit; enabled: Bool) {.loadfrom("set_middle_mouse_paste_enabled", 2586408642).}
  proc isMiddleMousePasteEnabled*(self: TextEdit): Bool {.loadfrom("is_middle_mouse_paste_enabled", 36873697).}
  proc clear*(self: TextEdit) {.loadfrom("clear", 3218959716).}
  proc `text=`*(self: TextEdit; text: String) {.loadfrom("set_text", 83702148).}
  proc text*(self: TextEdit): String {.loadfrom("get_text", 201670096).}
  proc getLineCount*(self: TextEdit): int32 {.loadfrom("get_line_count", 3905245786).}
  proc `placeholder=`*(self: TextEdit; text: String) {.loadfrom("set_placeholder", 83702148).}
  proc placeholder*(self: TextEdit): String {.loadfrom("get_placeholder", 201670096).}
  proc setLine*(self: TextEdit; line: int32; newText: String) {.loadfrom("set_line", 501894301).}
  proc getLine*(self: TextEdit; line: int32): String {.loadfrom("get_line", 844755477).}
  proc getLineWidth*(self: TextEdit; line: int32; wrapIndex: int32 = -1): int32 {.loadfrom("get_line_width", 3294126239).}
  proc getLineHeight*(self: TextEdit): int32 {.loadfrom("get_line_height", 3905245786).}
  proc getIndentLevel*(self: TextEdit; line: int32): int32 {.loadfrom("get_indent_level", 923996154).}
  proc getFirstNonWhitespaceColumn*(self: TextEdit; line: int32): int32 {.loadfrom("get_first_non_whitespace_column", 923996154).}
  proc swapLines*(self: TextEdit; fromLine: int32; toLine: int32) {.loadfrom("swap_lines", 3937882851).}
  proc insertLineAt*(self: TextEdit; line: int32; text: String) {.loadfrom("insert_line_at", 501894301).}
  proc insertTextAtCaret*(self: TextEdit; text: String; caretIndex: int32 = -1) {.loadfrom("insert_text_at_caret", 3043792800).}
  proc removeText*(self: TextEdit; fromLine: int32; fromColumn: int32; toLine: int32; toColumn: int32) {.loadfrom("remove_text", 4275841770).}
  proc getLastUnhiddenLine*(self: TextEdit): int32 {.loadfrom("get_last_unhidden_line", 3905245786).}
  proc getNextVisibleLineOffsetFrom*(self: TextEdit; line: int32; visibleAmount: int32): int32 {.loadfrom("get_next_visible_line_offset_from", 3175239445).}
  proc getNextVisibleLineIndexOffsetFrom*(self: TextEdit; line: int32; wrapIndex: int32; visibleAmount: int32): Vector2i {.loadfrom("get_next_visible_line_index_offset_from", 3386475622).}
  proc backspace*(self: TextEdit; caretIndex: int32 = -1) {.loadfrom("backspace", 1025054187).}
  proc cut*(self: TextEdit; caretIndex: int32 = -1) {.loadfrom("cut", 1025054187).}
  proc copy*(self: TextEdit; caretIndex: int32 = -1) {.loadfrom("copy", 1025054187).}
  proc paste*(self: TextEdit; caretIndex: int32 = -1) {.loadfrom("paste", 1025054187).}
  proc pastePrimaryClipboard*(self: TextEdit; caretIndex: int32 = -1) {.loadfrom("paste_primary_clipboard", 1025054187).}
  proc startAction*(self: TextEdit; action: TextEdit|>EditAction) {.loadfrom("start_action", 2834827583).}
  proc endAction*(self: TextEdit) {.loadfrom("end_action", 3218959716).}
  proc beginComplexOperation*(self: TextEdit) {.loadfrom("begin_complex_operation", 3218959716).}
  proc endComplexOperation*(self: TextEdit) {.loadfrom("end_complex_operation", 3218959716).}
  proc hasUndo*(self: TextEdit): Bool {.loadfrom("has_undo", 36873697).}
  proc hasRedo*(self: TextEdit): Bool {.loadfrom("has_redo", 36873697).}
  proc undo*(self: TextEdit) {.loadfrom("undo", 3218959716).}
  proc redo*(self: TextEdit) {.loadfrom("redo", 3218959716).}
  proc clearUndoHistory*(self: TextEdit) {.loadfrom("clear_undo_history", 3218959716).}
  proc tagSavedVersion*(self: TextEdit) {.loadfrom("tag_saved_version", 3218959716).}
  proc getVersion*(self: TextEdit): uint32 {.loadfrom("get_version", 3905245786).}
  proc getSavedVersion*(self: TextEdit): uint32 {.loadfrom("get_saved_version", 3905245786).}
  proc setSearchText*(self: TextEdit; searchText: String) {.loadfrom("set_search_text", 83702148).}
  proc setSearchFlags*(self: TextEdit; flags: uint32) {.loadfrom("set_search_flags", 1286410249).}
  proc search*(self: TextEdit; text: String; flags: uint32; fromLine: int32; fromColum: int32): Vector2i {.loadfrom("search", 1203739136).}
  proc setTooltipRequestFunc*(self: TextEdit; callback: Callable) {.loadfrom("set_tooltip_request_func", 1611583062).}
  proc getLocalMousePos*(self: TextEdit): Vector2 {.loadfrom("get_local_mouse_pos", 3341600327).}
  proc getWordAtPos*(self: TextEdit; position: Vector2): String {.loadfrom("get_word_at_pos", 3674420000).}
  proc getLineColumnAtPos*(self: TextEdit; position: Vector2i; allowOutOfBounds: Bool = true): Vector2i {.loadfrom("get_line_column_at_pos", 850652858).}
  proc getPosAtLineColumn*(self: TextEdit; line: int32; column: int32): Vector2i {.loadfrom("get_pos_at_line_column", 410388347).}
  proc getRectAtLineColumn*(self: TextEdit; line: int32; column: int32): Rect2i {.loadfrom("get_rect_at_line_column", 3256618057).}
  proc getMinimapLineAtPos*(self: TextEdit; position: Vector2i): int32 {.loadfrom("get_minimap_line_at_pos", 2485466453).}
  proc isDraggingCursor*(self: TextEdit): Bool {.loadfrom("is_dragging_cursor", 36873697).}
  proc isMouseOverSelection*(self: TextEdit; edges: Bool; caretIndex: int32 = -1): Bool {.loadfrom("is_mouse_over_selection", 1099474134).}
  proc `caretType=`*(self: TextEdit; `type`: TextEdit|>CaretType) {.loadfrom("set_caret_type", 1211596914).}
  proc caretType*(self: TextEdit): TextEdit|>CaretType {.loadfrom("get_caret_type", 2830252959).}
  proc `caretBlinkEnabled=`*(self: TextEdit; enable: Bool) {.loadfrom("set_caret_blink_enabled", 2586408642).}
  proc isCaretBlinkEnabled*(self: TextEdit): Bool {.loadfrom("is_caret_blink_enabled", 36873697).}
  proc `caretBlinkInterval=`*(self: TextEdit; interval: Float) {.loadfrom("set_caret_blink_interval", 373806689).}
  proc caretBlinkInterval*(self: TextEdit): Float {.loadfrom("get_caret_blink_interval", 1740695150).}
  proc `drawCaretWhenEditableDisabled=`*(self: TextEdit; enable: Bool) {.loadfrom("set_draw_caret_when_editable_disabled", 2586408642).}
  proc isDrawingCaretWhenEditableDisabled*(self: TextEdit): Bool {.loadfrom("is_drawing_caret_when_editable_disabled", 36873697).}
  proc `moveCaretOnRightClickEnabled=`*(self: TextEdit; enable: Bool) {.loadfrom("set_move_caret_on_right_click_enabled", 2586408642).}
  proc isMoveCaretOnRightClickEnabled*(self: TextEdit): Bool {.loadfrom("is_move_caret_on_right_click_enabled", 36873697).}
  proc `caretMidGraphemeEnabled=`*(self: TextEdit; enabled: Bool) {.loadfrom("set_caret_mid_grapheme_enabled", 2586408642).}
  proc isCaretMidGraphemeEnabled*(self: TextEdit): Bool {.loadfrom("is_caret_mid_grapheme_enabled", 36873697).}
  proc `multipleCaretsEnabled=`*(self: TextEdit; enabled: Bool) {.loadfrom("set_multiple_carets_enabled", 2586408642).}
  proc isMultipleCaretsEnabled*(self: TextEdit): Bool {.loadfrom("is_multiple_carets_enabled", 36873697).}
  proc addCaret*(self: TextEdit; line: int32; col: int32): int32 {.loadfrom("add_caret", 50157827).}
  proc removeCaret*(self: TextEdit; caret: int32) {.loadfrom("remove_caret", 1286410249).}
  proc removeSecondaryCarets*(self: TextEdit) {.loadfrom("remove_secondary_carets", 3218959716).}
  proc mergeOverlappingCarets*(self: TextEdit) {.loadfrom("merge_overlapping_carets", 3218959716).}
  proc getCaretCount*(self: TextEdit): int32 {.loadfrom("get_caret_count", 3905245786).}
  proc addCaretAtCarets*(self: TextEdit; below: Bool) {.loadfrom("add_caret_at_carets", 2586408642).}
  proc getCaretIndexEditOrder*(self: TextEdit): PackedInt32Array {.loadfrom("get_caret_index_edit_order", 969006518).}
  proc adjustCaretsAfterEdit*(self: TextEdit; caret: int32; fromLine: int32; fromCol: int32; toLine: int32; toCol: int32) {.loadfrom("adjust_carets_after_edit", 1770277138).}
  proc isCaretVisible*(self: TextEdit; caretIndex: int32 = 0): Bool {.loadfrom("is_caret_visible", 1051549951).}
  proc getCaretDrawPos*(self: TextEdit; caretIndex: int32 = 0): Vector2 {.loadfrom("get_caret_draw_pos", 478253731).}
  proc setCaretLine*(self: TextEdit; line: int32; adjustViewport: Bool = true; canBeHidden: Bool = true; wrapIndex: int32 = 0; caretIndex: int32 = 0) {.loadfrom("set_caret_line", 1413195636).}
  proc getCaretLine*(self: TextEdit; caretIndex: int32 = 0): int32 {.loadfrom("get_caret_line", 1591665591).}
  proc setCaretColumn*(self: TextEdit; column: int32; adjustViewport: Bool = true; caretIndex: int32 = 0) {.loadfrom("set_caret_column", 1071284433).}
  proc getCaretColumn*(self: TextEdit; caretIndex: int32 = 0): int32 {.loadfrom("get_caret_column", 1591665591).}
  proc getCaretWrapIndex*(self: TextEdit; caretIndex: int32 = 0): int32 {.loadfrom("get_caret_wrap_index", 1591665591).}
  proc getWordUnderCaret*(self: TextEdit; caretIndex: int32 = -1): String {.loadfrom("get_word_under_caret", 3929349208).}
  proc `selectingEnabled=`*(self: TextEdit; enable: Bool) {.loadfrom("set_selecting_enabled", 2586408642).}
  proc isSelectingEnabled*(self: TextEdit): Bool {.loadfrom("is_selecting_enabled", 36873697).}
  proc `deselectOnFocusLossEnabled=`*(self: TextEdit; enable: Bool) {.loadfrom("set_deselect_on_focus_loss_enabled", 2586408642).}
  proc isDeselectOnFocusLossEnabled*(self: TextEdit): Bool {.loadfrom("is_deselect_on_focus_loss_enabled", 36873697).}
  proc `dragAndDropSelectionEnabled=`*(self: TextEdit; enable: Bool) {.loadfrom("set_drag_and_drop_selection_enabled", 2586408642).}
  proc isDragAndDropSelectionEnabled*(self: TextEdit): Bool {.loadfrom("is_drag_and_drop_selection_enabled", 36873697).}
  proc setSelectionMode*(self: TextEdit; mode: TextEdit|>SelectionMode; line: int32 = -1; column: int32 = -1; caretIndex: int32 = 0) {.loadfrom("set_selection_mode", 2920622473).}
  proc getSelectionMode*(self: TextEdit): TextEdit|>SelectionMode {.loadfrom("get_selection_mode", 3750106938).}
  proc selectAll*(self: TextEdit) {.loadfrom("select_all", 3218959716).}
  proc selectWordUnderCaret*(self: TextEdit; caretIndex: int32 = -1) {.loadfrom("select_word_under_caret", 1025054187).}
  proc addSelectionForNextOccurrence*(self: TextEdit) {.loadfrom("add_selection_for_next_occurrence", 3218959716).}
  proc select*(self: TextEdit; fromLine: int32; fromColumn: int32; toLine: int32; toColumn: int32; caretIndex: int32 = 0) {.loadfrom("select", 4269665324).}
  proc hasSelection*(self: TextEdit; caretIndex: int32 = -1): Bool {.loadfrom("has_selection", 2824505868).}
  proc getSelectedText*(self: TextEdit; caretIndex: int32 = -1): String {.loadfrom("get_selected_text", 2309358862).}
  proc getSelectionLine*(self: TextEdit; caretIndex: int32 = 0): int32 {.loadfrom("get_selection_line", 1591665591).}
  proc getSelectionColumn*(self: TextEdit; caretIndex: int32 = 0): int32 {.loadfrom("get_selection_column", 1591665591).}
  proc getSelectionFromLine*(self: TextEdit; caretIndex: int32 = 0): int32 {.loadfrom("get_selection_from_line", 1591665591).}
  proc getSelectionFromColumn*(self: TextEdit; caretIndex: int32 = 0): int32 {.loadfrom("get_selection_from_column", 1591665591).}
  proc getSelectionToLine*(self: TextEdit; caretIndex: int32 = 0): int32 {.loadfrom("get_selection_to_line", 1591665591).}
  proc getSelectionToColumn*(self: TextEdit; caretIndex: int32 = 0): int32 {.loadfrom("get_selection_to_column", 1591665591).}
  proc deselect*(self: TextEdit; caretIndex: int32 = -1) {.loadfrom("deselect", 1025054187).}
  proc deleteSelection*(self: TextEdit; caretIndex: int32 = -1) {.loadfrom("delete_selection", 1025054187).}
  proc `lineWrappingMode=`*(self: TextEdit; mode: TextEdit|>LineWrappingMode) {.loadfrom("set_line_wrapping_mode", 2525115309).}
  proc lineWrappingMode*(self: TextEdit): TextEdit|>LineWrappingMode {.loadfrom("get_line_wrapping_mode", 3562716114).}
  proc `autowrapMode=`*(self: TextEdit; autowrapMode: TextServer|>AutowrapMode) {.loadfrom("set_autowrap_mode", 3289138044).}
  proc autowrapMode*(self: TextEdit): TextServer|>AutowrapMode {.loadfrom("get_autowrap_mode", 1549071663).}
  proc isLineWrapped*(self: TextEdit; line: int32): Bool {.loadfrom("is_line_wrapped", 1116898809).}
  proc getLineWrapCount*(self: TextEdit; line: int32): int32 {.loadfrom("get_line_wrap_count", 923996154).}
  proc getLineWrapIndexAtColumn*(self: TextEdit; line: int32; column: int32): int32 {.loadfrom("get_line_wrap_index_at_column", 3175239445).}
  proc getLineWrappedText*(self: TextEdit; line: int32): PackedStringArray {.loadfrom("get_line_wrapped_text", 647634434).}
  proc `smoothScrollEnabled=`*(self: TextEdit; enable: Bool) {.loadfrom("set_smooth_scroll_enabled", 2586408642).}
  proc isSmoothScrollEnabled*(self: TextEdit): Bool {.loadfrom("is_smooth_scroll_enabled", 36873697).}
  proc getVScrollBar*(self: TextEdit): VScrollBar {.loadfrom("get_v_scroll_bar", 3226026593).}
  proc getHScrollBar*(self: TextEdit): HScrollBar {.loadfrom("get_h_scroll_bar", 3774687988).}
  proc `vScroll=`*(self: TextEdit; value: float64) {.loadfrom("set_v_scroll", 373806689).}
  proc vScroll*(self: TextEdit): float64 {.loadfrom("get_v_scroll", 1740695150).}
  proc `hScroll=`*(self: TextEdit; value: int32) {.loadfrom("set_h_scroll", 1286410249).}
  proc hScroll*(self: TextEdit): int32 {.loadfrom("get_h_scroll", 3905245786).}
  proc `scrollPastEndOfFileEnabled=`*(self: TextEdit; enable: Bool) {.loadfrom("set_scroll_past_end_of_file_enabled", 2586408642).}
  proc isScrollPastEndOfFileEnabled*(self: TextEdit): Bool {.loadfrom("is_scroll_past_end_of_file_enabled", 36873697).}
  proc `vScrollSpeed=`*(self: TextEdit; speed: Float) {.loadfrom("set_v_scroll_speed", 373806689).}
  proc vScrollSpeed*(self: TextEdit): Float {.loadfrom("get_v_scroll_speed", 1740695150).}
  proc `fitContentHeightEnabled=`*(self: TextEdit; enabled: Bool) {.loadfrom("set_fit_content_height_enabled", 2586408642).}
  proc isFitContentHeightEnabled*(self: TextEdit): Bool {.loadfrom("is_fit_content_height_enabled", 36873697).}
  proc getScrollPosForLine*(self: TextEdit; line: int32; wrapIndex: int32 = 0): float64 {.loadfrom("get_scroll_pos_for_line", 3274652423).}
  proc setLineAsFirstVisible*(self: TextEdit; line: int32; wrapIndex: int32 = 0) {.loadfrom("set_line_as_first_visible", 3023605688).}
  proc getFirstVisibleLine*(self: TextEdit): int32 {.loadfrom("get_first_visible_line", 3905245786).}
  proc setLineAsCenterVisible*(self: TextEdit; line: int32; wrapIndex: int32 = 0) {.loadfrom("set_line_as_center_visible", 3023605688).}
  proc setLineAsLastVisible*(self: TextEdit; line: int32; wrapIndex: int32 = 0) {.loadfrom("set_line_as_last_visible", 3023605688).}
  proc getLastFullVisibleLine*(self: TextEdit): int32 {.loadfrom("get_last_full_visible_line", 3905245786).}
  proc getLastFullVisibleLineWrapIndex*(self: TextEdit): int32 {.loadfrom("get_last_full_visible_line_wrap_index", 3905245786).}
  proc getVisibleLineCount*(self: TextEdit): int32 {.loadfrom("get_visible_line_count", 3905245786).}
  proc getVisibleLineCountInRange*(self: TextEdit; fromLine: int32; toLine: int32): int32 {.loadfrom("get_visible_line_count_in_range", 3175239445).}
  proc getTotalVisibleLineCount*(self: TextEdit): int32 {.loadfrom("get_total_visible_line_count", 3905245786).}
  proc adjustViewportToCaret*(self: TextEdit; caretIndex: int32 = 0) {.loadfrom("adjust_viewport_to_caret", 1995695955).}
  proc centerViewportToCaret*(self: TextEdit; caretIndex: int32 = 0) {.loadfrom("center_viewport_to_caret", 1995695955).}
  proc `drawMinimap=`*(self: TextEdit; enabled: Bool) {.loadfrom("set_draw_minimap", 2586408642).}
  proc isDrawingMinimap*(self: TextEdit): Bool {.loadfrom("is_drawing_minimap", 36873697).}
  proc `minimapWidth=`*(self: TextEdit; width: int32) {.loadfrom("set_minimap_width", 1286410249).}
  proc minimapWidth*(self: TextEdit): int32 {.loadfrom("get_minimap_width", 3905245786).}
  proc getMinimapVisibleLines*(self: TextEdit): int32 {.loadfrom("get_minimap_visible_lines", 3905245786).}
  proc addGutter*(self: TextEdit; at: int32 = -1) {.loadfrom("add_gutter", 1025054187).}
  proc removeGutter*(self: TextEdit; gutter: int32) {.loadfrom("remove_gutter", 1286410249).}
  proc getGutterCount*(self: TextEdit): int32 {.loadfrom("get_gutter_count", 3905245786).}
  proc setGutterName*(self: TextEdit; gutter: int32; name: String) {.loadfrom("set_gutter_name", 501894301).}
  proc getGutterName*(self: TextEdit; gutter: int32): String {.loadfrom("get_gutter_name", 844755477).}
  proc setGutterType*(self: TextEdit; gutter: int32; `type`: TextEdit|>GutterType) {.loadfrom("set_gutter_type", 1088959071).}
  proc getGutterType*(self: TextEdit; gutter: int32): TextEdit|>GutterType {.loadfrom("get_gutter_type", 1159699127).}
  proc setGutterWidth*(self: TextEdit; gutter: int32; width: int32) {.loadfrom("set_gutter_width", 3937882851).}
  proc getGutterWidth*(self: TextEdit; gutter: int32): int32 {.loadfrom("get_gutter_width", 923996154).}
  proc setGutterDraw*(self: TextEdit; gutter: int32; draw: Bool) {.loadfrom("set_gutter_draw", 300928843).}
  proc isGutterDrawn*(self: TextEdit; gutter: int32): Bool {.loadfrom("is_gutter_drawn", 1116898809).}
  proc setGutterClickable*(self: TextEdit; gutter: int32; clickable: Bool) {.loadfrom("set_gutter_clickable", 300928843).}
  proc isGutterClickable*(self: TextEdit; gutter: int32): Bool {.loadfrom("is_gutter_clickable", 1116898809).}
  proc setGutterOverwritable*(self: TextEdit; gutter: int32; overwritable: Bool) {.loadfrom("set_gutter_overwritable", 300928843).}
  proc isGutterOverwritable*(self: TextEdit; gutter: int32): Bool {.loadfrom("is_gutter_overwritable", 1116898809).}
  proc mergeGutters*(self: TextEdit; fromLine: int32; toLine: int32) {.loadfrom("merge_gutters", 3937882851).}
  proc setGutterCustomDraw*(self: TextEdit; column: int32; drawCallback: Callable) {.loadfrom("set_gutter_custom_draw", 957362965).}
  proc getTotalGutterWidth*(self: TextEdit): int32 {.loadfrom("get_total_gutter_width", 3905245786).}
  proc setLineGutterMetadata*(self: TextEdit; line: int32; gutter: int32; metadata: ptr Variant) {.loadfrom("set_line_gutter_metadata", 2060538656).}
  proc getLineGutterMetadata*(self: TextEdit; line: int32; gutter: int32): Variant {.loadfrom("get_line_gutter_metadata", 678354945).}
  proc setLineGutterText*(self: TextEdit; line: int32; gutter: int32; text: String) {.loadfrom("set_line_gutter_text", 2285447957).}
  proc getLineGutterText*(self: TextEdit; line: int32; gutter: int32): String {.loadfrom("get_line_gutter_text", 1391810591).}
  proc setLineGutterIcon*(self: TextEdit; line: int32; gutter: int32; icon: Ref[Texture2D]) {.loadfrom("set_line_gutter_icon", 176101966).}
  proc getLineGutterIcon*(self: TextEdit; line: int32; gutter: int32): Ref[Texture2D] {.loadfrom("get_line_gutter_icon", 2584904275).}
  proc setLineGutterItemColor*(self: TextEdit; line: int32; gutter: int32; color: Color) {.loadfrom("set_line_gutter_item_color", 3733378741).}
  proc getLineGutterItemColor*(self: TextEdit; line: int32; gutter: int32): Color {.loadfrom("get_line_gutter_item_color", 2165839948).}
  proc setLineGutterClickable*(self: TextEdit; line: int32; gutter: int32; clickable: Bool) {.loadfrom("set_line_gutter_clickable", 1383440665).}
  proc isLineGutterClickable*(self: TextEdit; line: int32; gutter: int32): Bool {.loadfrom("is_line_gutter_clickable", 2522259332).}
  proc setLineBackgroundColor*(self: TextEdit; line: int32; color: Color) {.loadfrom("set_line_background_color", 2878471219).}
  proc getLineBackgroundColor*(self: TextEdit; line: int32): Color {.loadfrom("get_line_background_color", 3457211756).}
  proc `syntaxHighlighter=`*(self: TextEdit; syntaxHighlighter: Ref[SyntaxHighlighter]) {.loadfrom("set_syntax_highlighter", 2765644541).}
  proc syntaxHighlighter*(self: TextEdit): Ref[SyntaxHighlighter] {.loadfrom("get_syntax_highlighter", 2721131626).}
  proc `highlightCurrentLine=`*(self: TextEdit; enabled: Bool) {.loadfrom("set_highlight_current_line", 2586408642).}
  proc isHighlightCurrentLineEnabled*(self: TextEdit): Bool {.loadfrom("is_highlight_current_line_enabled", 36873697).}
  proc `highlightAllOccurrences=`*(self: TextEdit; enabled: Bool) {.loadfrom("set_highlight_all_occurrences", 2586408642).}
  proc isHighlightAllOccurrencesEnabled*(self: TextEdit): Bool {.loadfrom("is_highlight_all_occurrences_enabled", 36873697).}
  proc drawControlChars*(self: TextEdit): Bool {.loadfrom("get_draw_control_chars", 36873697).}
  proc `drawControlChars=`*(self: TextEdit; enabled: Bool) {.loadfrom("set_draw_control_chars", 2586408642).}
  proc `drawTabs=`*(self: TextEdit; enabled: Bool) {.loadfrom("set_draw_tabs", 2586408642).}
  proc isDrawingTabs*(self: TextEdit): Bool {.loadfrom("is_drawing_tabs", 36873697).}
  proc `drawSpaces=`*(self: TextEdit; enabled: Bool) {.loadfrom("set_draw_spaces", 2586408642).}
  proc isDrawingSpaces*(self: TextEdit): Bool {.loadfrom("is_drawing_spaces", 36873697).}
  proc getMenu*(self: TextEdit): PopupMenu {.loadfrom("get_menu", 229722558).}
  proc isMenuVisible*(self: TextEdit): Bool {.loadfrom("is_menu_visible", 36873697).}
  proc menuOption*(self: TextEdit; option: int32) {.loadfrom("menu_option", 1286410249).}

# TextureRect
define_godot_engine_class_essencials(TextureRect, Control)
TextureRect.memberProcs:
  proc `texture=`*(self: TextureRect; texture: Ref[Texture2D]) {.loadfrom("set_texture", 4051416890).}
  proc texture*(self: TextureRect): Ref[Texture2D] {.loadfrom("get_texture", 3635182373).}
  proc `expandMode=`*(self: TextureRect; expandMode: TextureRect|>ExpandMode) {.loadfrom("set_expand_mode", 1870766882).}
  proc expandMode*(self: TextureRect): TextureRect|>ExpandMode {.loadfrom("get_expand_mode", 3863824733).}
  proc `flipH=`*(self: TextureRect; enable: Bool) {.loadfrom("set_flip_h", 2586408642).}
  proc isFlippedH*(self: TextureRect): Bool {.loadfrom("is_flipped_h", 36873697).}
  proc `flipV=`*(self: TextureRect; enable: Bool) {.loadfrom("set_flip_v", 2586408642).}
  proc isFlippedV*(self: TextureRect): Bool {.loadfrom("is_flipped_v", 36873697).}
  proc `stretchMode=`*(self: TextureRect; stretchMode: TextureRect|>StretchMode) {.loadfrom("set_stretch_mode", 58788729).}
  proc stretchMode*(self: TextureRect): TextureRect|>StretchMode {.loadfrom("get_stretch_mode", 346396079).}

# Tree
define_godot_engine_class_essencials(Tree, Control)
Tree.memberProcs:
  proc clear*(self: Tree) {.loadfrom("clear", 3218959716).}
  proc createItem*(self: Tree; parent: ptr TreeItem = nil; index: int32 = -1): TreeItem {.loadfrom("create_item", 528467046).}
  proc getRoot*(self: Tree): TreeItem {.loadfrom("get_root", 1514277247).}
  proc setColumnCustomMinimumWidth*(self: Tree; column: int32; minWidth: int32) {.loadfrom("set_column_custom_minimum_width", 3937882851).}
  proc setColumnExpand*(self: Tree; column: int32; expand: Bool) {.loadfrom("set_column_expand", 300928843).}
  proc setColumnExpandRatio*(self: Tree; column: int32; ratio: int32) {.loadfrom("set_column_expand_ratio", 3937882851).}
  proc setColumnClipContent*(self: Tree; column: int32; enable: Bool) {.loadfrom("set_column_clip_content", 300928843).}
  proc isColumnExpanding*(self: Tree; column: int32): Bool {.loadfrom("is_column_expanding", 1116898809).}
  proc isColumnClippingContent*(self: Tree; column: int32): Bool {.loadfrom("is_column_clipping_content", 1116898809).}
  proc getColumnExpandRatio*(self: Tree; column: int32): int32 {.loadfrom("get_column_expand_ratio", 923996154).}
  proc getColumnWidth*(self: Tree; column: int32): int32 {.loadfrom("get_column_width", 923996154).}
  proc `hideRoot=`*(self: Tree; enable: Bool) {.loadfrom("set_hide_root", 2586408642).}
  proc isRootHidden*(self: Tree): Bool {.loadfrom("is_root_hidden", 36873697).}
  proc getNextSelected*(self: Tree; `from`: ptr TreeItem): TreeItem {.loadfrom("get_next_selected", 873446299).}
  proc getSelected*(self: Tree): TreeItem {.loadfrom("get_selected", 1514277247).}
  proc setSelected*(self: Tree; item: ptr TreeItem; column: int32) {.loadfrom("set_selected", 2662547442).}
  proc getSelectedColumn*(self: Tree): int32 {.loadfrom("get_selected_column", 3905245786).}
  proc getPressedButton*(self: Tree): int32 {.loadfrom("get_pressed_button", 3905245786).}
  proc `selectMode=`*(self: Tree; mode: Tree|>SelectMode) {.loadfrom("set_select_mode", 3223887270).}
  proc selectMode*(self: Tree): Tree|>SelectMode {.loadfrom("get_select_mode", 100748571).}
  proc deselectAll*(self: Tree) {.loadfrom("deselect_all", 3218959716).}
  proc `columns=`*(self: Tree; amount: int32) {.loadfrom("set_columns", 1286410249).}
  proc columns*(self: Tree): int32 {.loadfrom("get_columns", 3905245786).}
  proc getEdited*(self: Tree): TreeItem {.loadfrom("get_edited", 1514277247).}
  proc getEditedColumn*(self: Tree): int32 {.loadfrom("get_edited_column", 3905245786).}
  proc editSelected*(self: Tree; forceEdit: Bool = false): Bool {.loadfrom("edit_selected", 2595650253).}
  proc getCustomPopupRect*(self: Tree): Rect2 {.loadfrom("get_custom_popup_rect", 1639390495).}
  proc getItemAreaRect*(self: Tree; item: ptr TreeItem; column: int32 = -1; buttonIndex: int32 = -1): Rect2 {.loadfrom("get_item_area_rect", 1235226180).}
  proc getItemAtPosition*(self: Tree; position: Vector2): TreeItem {.loadfrom("get_item_at_position", 4193340126).}
  proc getColumnAtPosition*(self: Tree; position: Vector2): int32 {.loadfrom("get_column_at_position", 3820158470).}
  proc getDropSectionAtPosition*(self: Tree; position: Vector2): int32 {.loadfrom("get_drop_section_at_position", 3820158470).}
  proc getButtonIdAtPosition*(self: Tree; position: Vector2): int32 {.loadfrom("get_button_id_at_position", 3820158470).}
  proc ensureCursorIsVisible*(self: Tree) {.loadfrom("ensure_cursor_is_visible", 3218959716).}
  proc `columnTitlesVisible=`*(self: Tree; visible: Bool) {.loadfrom("set_column_titles_visible", 2586408642).}
  proc areColumnTitlesVisible*(self: Tree): Bool {.loadfrom("are_column_titles_visible", 36873697).}
  proc setColumnTitle*(self: Tree; column: int32; title: String) {.loadfrom("set_column_title", 501894301).}
  proc getColumnTitle*(self: Tree; column: int32): String {.loadfrom("get_column_title", 844755477).}
  proc setColumnTitleAlignment*(self: Tree; column: int32; titleAlignment: HorizontalAlignment) {.loadfrom("set_column_title_alignment", 3276431499).}
  proc getColumnTitleAlignment*(self: Tree; column: int32): HorizontalAlignment {.loadfrom("get_column_title_alignment", 4171562184).}
  proc setColumnTitleDirection*(self: Tree; column: int32; direction: Control|>TextDirection) {.loadfrom("set_column_title_direction", 1707680378).}
  proc getColumnTitleDirection*(self: Tree; column: int32): Control|>TextDirection {.loadfrom("get_column_title_direction", 4235602388).}
  proc setColumnTitleLanguage*(self: Tree; column: int32; language: String) {.loadfrom("set_column_title_language", 501894301).}
  proc getColumnTitleLanguage*(self: Tree; column: int32): String {.loadfrom("get_column_title_language", 844755477).}
  proc getScroll*(self: Tree): Vector2 {.loadfrom("get_scroll", 3341600327).}
  proc scrollToItem*(self: Tree; item: ptr TreeItem; centerOnItem: Bool = false) {.loadfrom("scroll_to_item", 1314737213).}
  proc `hScrollEnabled=`*(self: Tree; hScroll: Bool) {.loadfrom("set_h_scroll_enabled", 2586408642).}
  proc isHScrollEnabled*(self: Tree): Bool {.loadfrom("is_h_scroll_enabled", 36873697).}
  proc `vScrollEnabled=`*(self: Tree; hScroll: Bool) {.loadfrom("set_v_scroll_enabled", 2586408642).}
  proc isVScrollEnabled*(self: Tree): Bool {.loadfrom("is_v_scroll_enabled", 36873697).}
  proc `hideFolding=`*(self: Tree; hide: Bool) {.loadfrom("set_hide_folding", 2586408642).}
  proc isFoldingHidden*(self: Tree): Bool {.loadfrom("is_folding_hidden", 36873697).}
  proc `enableRecursiveFolding=`*(self: Tree; enable: Bool) {.loadfrom("set_enable_recursive_folding", 2586408642).}
  proc isRecursiveFoldingEnabled*(self: Tree): Bool {.loadfrom("is_recursive_folding_enabled", 36873697).}
  proc `dropModeFlags=`*(self: Tree; flags: int32) {.loadfrom("set_drop_mode_flags", 1286410249).}
  proc dropModeFlags*(self: Tree): int32 {.loadfrom("get_drop_mode_flags", 3905245786).}
  proc `allowRmbSelect=`*(self: Tree; allow: Bool) {.loadfrom("set_allow_rmb_select", 2586408642).}
  proc allowRmbSelect*(self: Tree): Bool {.loadfrom("get_allow_rmb_select", 36873697).}
  proc `allowReselect=`*(self: Tree; allow: Bool) {.loadfrom("set_allow_reselect", 2586408642).}
  proc allowReselect*(self: Tree): Bool {.loadfrom("get_allow_reselect", 36873697).}
  proc `allowSearch=`*(self: Tree; allow: Bool) {.loadfrom("set_allow_search", 2586408642).}
  proc allowSearch*(self: Tree): Bool {.loadfrom("get_allow_search", 36873697).}

# VideoStreamPlayer
define_godot_engine_class_essencials(VideoStreamPlayer, Control)
VideoStreamPlayer.memberProcs:
  proc `stream=`*(self: VideoStreamPlayer; stream: Ref[VideoStream]) {.loadfrom("set_stream", 2317102564).}
  proc stream*(self: VideoStreamPlayer): Ref[VideoStream] {.loadfrom("get_stream", 438621487).}
  proc play*(self: VideoStreamPlayer) {.loadfrom("play", 3218959716).}
  proc stop*(self: VideoStreamPlayer) {.loadfrom("stop", 3218959716).}
  proc isPlaying*(self: VideoStreamPlayer): Bool {.loadfrom("is_playing", 36873697).}
  proc `paused=`*(self: VideoStreamPlayer; paused: Bool) {.loadfrom("set_paused", 2586408642).}
  proc isPaused*(self: VideoStreamPlayer): Bool {.loadfrom("is_paused", 36873697).}
  proc `volume=`*(self: VideoStreamPlayer; volume: Float) {.loadfrom("set_volume", 373806689).}
  proc volume*(self: VideoStreamPlayer): Float {.loadfrom("get_volume", 1740695150).}
  proc `volumeDb=`*(self: VideoStreamPlayer; db: Float) {.loadfrom("set_volume_db", 373806689).}
  proc volumeDb*(self: VideoStreamPlayer): Float {.loadfrom("get_volume_db", 1740695150).}
  proc `audioTrack=`*(self: VideoStreamPlayer; track: int32) {.loadfrom("set_audio_track", 1286410249).}
  proc audioTrack*(self: VideoStreamPlayer): int32 {.loadfrom("get_audio_track", 3905245786).}
  proc getStreamName*(self: VideoStreamPlayer): String {.loadfrom("get_stream_name", 201670096).}
  proc `streamPosition=`*(self: VideoStreamPlayer; position: float64) {.loadfrom("set_stream_position", 373806689).}
  proc streamPosition*(self: VideoStreamPlayer): float64 {.loadfrom("get_stream_position", 1740695150).}
  proc `autoplay=`*(self: VideoStreamPlayer; enabled: Bool) {.loadfrom("set_autoplay", 2586408642).}
  proc hasAutoplay*(self: VideoStreamPlayer): Bool {.loadfrom("has_autoplay", 36873697).}
  proc `expand=`*(self: VideoStreamPlayer; enable: Bool) {.loadfrom("set_expand", 2586408642).}
  proc hasExpand*(self: VideoStreamPlayer): Bool {.loadfrom("has_expand", 36873697).}
  proc `bufferingMsec=`*(self: VideoStreamPlayer; msec: int32) {.loadfrom("set_buffering_msec", 1286410249).}
  proc bufferingMsec*(self: VideoStreamPlayer): int32 {.loadfrom("get_buffering_msec", 3905245786).}
  proc `bus=`*(self: VideoStreamPlayer; bus: StringName) {.loadfrom("set_bus", 3304788590).}
  proc bus*(self: VideoStreamPlayer): StringName {.loadfrom("get_bus", 2002593661).}
  proc getVideoTexture*(self: VideoStreamPlayer): Ref[Texture2D] {.loadfrom("get_video_texture", 3635182373).}

# AnimatedSprite2D
define_godot_engine_class_essencials(AnimatedSprite2D, Node2D)
AnimatedSprite2D.memberProcs:
  proc `spriteFrames=`*(self: AnimatedSprite2D; spriteFrames: Ref[SpriteFrames]) {.loadfrom("set_sprite_frames", 905781144).}
  proc spriteFrames*(self: AnimatedSprite2D): Ref[SpriteFrames] {.loadfrom("get_sprite_frames", 3804851214).}
  proc `animation=`*(self: AnimatedSprite2D; name: StringName) {.loadfrom("set_animation", 3304788590).}
  proc animation*(self: AnimatedSprite2D): StringName {.loadfrom("get_animation", 2002593661).}
  proc `autoplay=`*(self: AnimatedSprite2D; name: String) {.loadfrom("set_autoplay", 83702148).}
  proc autoplay*(self: AnimatedSprite2D): String {.loadfrom("get_autoplay", 201670096).}
  proc isPlaying*(self: AnimatedSprite2D): Bool {.loadfrom("is_playing", 36873697).}
  proc play*(self: AnimatedSprite2D; name: StringName = ""; customSpeed: Float = 1.0; fromEnd: Bool = false) {.loadfrom("play", 2372066587).}
  proc playBackwards*(self: AnimatedSprite2D; name: StringName = "") {.loadfrom("play_backwards", 1421762485).}
  proc pause*(self: AnimatedSprite2D) {.loadfrom("pause", 3218959716).}
  proc stop*(self: AnimatedSprite2D) {.loadfrom("stop", 3218959716).}
  proc `centered=`*(self: AnimatedSprite2D; centered: Bool) {.loadfrom("set_centered", 2586408642).}
  proc isCentered*(self: AnimatedSprite2D): Bool {.loadfrom("is_centered", 36873697).}
  proc `offset=`*(self: AnimatedSprite2D; offset: Vector2) {.loadfrom("set_offset", 743155724).}
  proc offset*(self: AnimatedSprite2D): Vector2 {.loadfrom("get_offset", 3341600327).}
  proc `flipH=`*(self: AnimatedSprite2D; flipH: Bool) {.loadfrom("set_flip_h", 2586408642).}
  proc isFlippedH*(self: AnimatedSprite2D): Bool {.loadfrom("is_flipped_h", 36873697).}
  proc `flipV=`*(self: AnimatedSprite2D; flipV: Bool) {.loadfrom("set_flip_v", 2586408642).}
  proc isFlippedV*(self: AnimatedSprite2D): Bool {.loadfrom("is_flipped_v", 36873697).}
  proc `frame=`*(self: AnimatedSprite2D; frame: int32) {.loadfrom("set_frame", 1286410249).}
  proc frame*(self: AnimatedSprite2D): int32 {.loadfrom("get_frame", 3905245786).}
  proc `frameProgress=`*(self: AnimatedSprite2D; progress: Float) {.loadfrom("set_frame_progress", 373806689).}
  proc frameProgress*(self: AnimatedSprite2D): Float {.loadfrom("get_frame_progress", 1740695150).}
  proc setFrameAndProgress*(self: AnimatedSprite2D; frame: int32; progress: Float) {.loadfrom("set_frame_and_progress", 1602489585).}
  proc `speedScale=`*(self: AnimatedSprite2D; speedScale: Float) {.loadfrom("set_speed_scale", 373806689).}
  proc speedScale*(self: AnimatedSprite2D): Float {.loadfrom("get_speed_scale", 1740695150).}
  proc getPlayingSpeed*(self: AnimatedSprite2D): Float {.loadfrom("get_playing_speed", 1740695150).}

# AudioListener2D
define_godot_engine_class_essencials(AudioListener2D, Node2D)
AudioListener2D.memberProcs:
  proc makeCurrent*(self: AudioListener2D) {.loadfrom("make_current", 3218959716).}
  proc clearCurrent*(self: AudioListener2D) {.loadfrom("clear_current", 3218959716).}
  proc isCurrent*(self: AudioListener2D): Bool {.loadfrom("is_current", 36873697).}

# AudioStreamPlayer2D
define_godot_engine_class_essencials(AudioStreamPlayer2D, Node2D)
AudioStreamPlayer2D.memberProcs:
  proc `stream=`*(self: AudioStreamPlayer2D; stream: Ref[AudioStream]) {.loadfrom("set_stream", 2210767741).}
  proc stream*(self: AudioStreamPlayer2D): Ref[AudioStream] {.loadfrom("get_stream", 160907539).}
  proc `volumeDb=`*(self: AudioStreamPlayer2D; volumeDb: Float) {.loadfrom("set_volume_db", 373806689).}
  proc volumeDb*(self: AudioStreamPlayer2D): Float {.loadfrom("get_volume_db", 1740695150).}
  proc `pitchScale=`*(self: AudioStreamPlayer2D; pitchScale: Float) {.loadfrom("set_pitch_scale", 373806689).}
  proc pitchScale*(self: AudioStreamPlayer2D): Float {.loadfrom("get_pitch_scale", 1740695150).}
  proc play*(self: AudioStreamPlayer2D; fromPosition: Float = 0.0) {.loadfrom("play", 1958160172).}
  proc seek*(self: AudioStreamPlayer2D; toPosition: Float) {.loadfrom("seek", 373806689).}
  proc stop*(self: AudioStreamPlayer2D) {.loadfrom("stop", 3218959716).}
  proc isPlaying*(self: AudioStreamPlayer2D): Bool {.loadfrom("is_playing", 36873697).}
  proc getPlaybackPosition*(self: AudioStreamPlayer2D): Float {.loadfrom("get_playback_position", 191475506).}
  proc `bus=`*(self: AudioStreamPlayer2D; bus: StringName) {.loadfrom("set_bus", 3304788590).}
  proc bus*(self: AudioStreamPlayer2D): StringName {.loadfrom("get_bus", 2002593661).}
  proc `autoplay=`*(self: AudioStreamPlayer2D; enable: Bool) {.loadfrom("set_autoplay", 2586408642).}
  proc isAutoplayEnabled*(self: AudioStreamPlayer2D): Bool {.loadfrom("is_autoplay_enabled", 2240911060).}
  proc `maxDistance=`*(self: AudioStreamPlayer2D; pixels: Float) {.loadfrom("set_max_distance", 373806689).}
  proc maxDistance*(self: AudioStreamPlayer2D): Float {.loadfrom("get_max_distance", 1740695150).}
  proc `attenuation=`*(self: AudioStreamPlayer2D; curve: Float) {.loadfrom("set_attenuation", 373806689).}
  proc attenuation*(self: AudioStreamPlayer2D): Float {.loadfrom("get_attenuation", 1740695150).}
  proc `areaMask=`*(self: AudioStreamPlayer2D; mask: uint32) {.loadfrom("set_area_mask", 1286410249).}
  proc areaMask*(self: AudioStreamPlayer2D): uint32 {.loadfrom("get_area_mask", 3905245786).}
  proc `streamPaused=`*(self: AudioStreamPlayer2D; pause: Bool) {.loadfrom("set_stream_paused", 2586408642).}
  proc streamPaused*(self: AudioStreamPlayer2D): Bool {.loadfrom("get_stream_paused", 36873697).}
  proc `maxPolyphony=`*(self: AudioStreamPlayer2D; maxPolyphony: int32) {.loadfrom("set_max_polyphony", 1286410249).}
  proc maxPolyphony*(self: AudioStreamPlayer2D): int32 {.loadfrom("get_max_polyphony", 3905245786).}
  proc `panningStrength=`*(self: AudioStreamPlayer2D; panningStrength: Float) {.loadfrom("set_panning_strength", 373806689).}
  proc panningStrength*(self: AudioStreamPlayer2D): Float {.loadfrom("get_panning_strength", 1740695150).}
  proc hasStreamPlayback*(self: AudioStreamPlayer2D): Bool {.loadfrom("has_stream_playback", 2240911060).}
  proc getStreamPlayback*(self: AudioStreamPlayer2D): Ref[AudioStreamPlayback] {.loadfrom("get_stream_playback", 210135309).}

# BackBufferCopy
define_godot_engine_class_essencials(BackBufferCopy, Node2D)
BackBufferCopy.memberProcs:
  proc `rect=`*(self: BackBufferCopy; rect: Rect2) {.loadfrom("set_rect", 2046264180).}
  proc rect*(self: BackBufferCopy): Rect2 {.loadfrom("get_rect", 1639390495).}
  proc `copyMode=`*(self: BackBufferCopy; copyMode: BackBufferCopy|>CopyMode) {.loadfrom("set_copy_mode", 1713538590).}
  proc copyMode*(self: BackBufferCopy): BackBufferCopy|>CopyMode {.loadfrom("get_copy_mode", 3271169440).}

# Bone2D
define_godot_engine_class_essencials(Bone2D, Node2D)
Bone2D.memberProcs:
  proc `rest=`*(self: Bone2D; rest: Transform2D) {.loadfrom("set_rest", 2761652528).}
  proc rest*(self: Bone2D): Transform2D {.loadfrom("get_rest", 3814499831).}
  proc applyRest*(self: Bone2D) {.loadfrom("apply_rest", 3218959716).}
  proc getSkeletonRest*(self: Bone2D): Transform2D {.loadfrom("get_skeleton_rest", 3814499831).}
  proc getIndexInSkeleton*(self: Bone2D): int32 {.loadfrom("get_index_in_skeleton", 3905245786).}
  proc setAutocalculateLengthAndAngle*(self: Bone2D; autoCalculate: Bool) {.loadfrom("set_autocalculate_length_and_angle", 2586408642).}
  proc getAutocalculateLengthAndAngle*(self: Bone2D): Bool {.loadfrom("get_autocalculate_length_and_angle", 36873697).}
  proc setLength*(self: Bone2D; length: Float) {.loadfrom("set_length", 373806689).}
  proc getLength*(self: Bone2D): Float {.loadfrom("get_length", 1740695150).}
  proc setBoneAngle*(self: Bone2D; angle: Float) {.loadfrom("set_bone_angle", 373806689).}
  proc getBoneAngle*(self: Bone2D): Float {.loadfrom("get_bone_angle", 1740695150).}

# CPUParticles2D
define_godot_engine_class_essencials(CPUParticles2D, Node2D)
CPUParticles2D.memberProcs:
  proc `emitting=`*(self: CPUParticles2D; emitting: Bool) {.loadfrom("set_emitting", 2586408642).}
  proc `amount=`*(self: CPUParticles2D; amount: int32) {.loadfrom("set_amount", 1286410249).}
  proc `lifetime=`*(self: CPUParticles2D; secs: float64) {.loadfrom("set_lifetime", 373806689).}
  proc `oneShot=`*(self: CPUParticles2D; enable: Bool) {.loadfrom("set_one_shot", 2586408642).}
  proc `preProcessTime=`*(self: CPUParticles2D; secs: float64) {.loadfrom("set_pre_process_time", 373806689).}
  proc `explosivenessRatio=`*(self: CPUParticles2D; ratio: Float) {.loadfrom("set_explosiveness_ratio", 373806689).}
  proc `randomnessRatio=`*(self: CPUParticles2D; ratio: Float) {.loadfrom("set_randomness_ratio", 373806689).}
  proc `lifetimeRandomness=`*(self: CPUParticles2D; random: float64) {.loadfrom("set_lifetime_randomness", 373806689).}
  proc `useLocalCoordinates=`*(self: CPUParticles2D; enable: Bool) {.loadfrom("set_use_local_coordinates", 2586408642).}
  proc `fixedFps=`*(self: CPUParticles2D; fps: int32) {.loadfrom("set_fixed_fps", 1286410249).}
  proc `fractionalDelta=`*(self: CPUParticles2D; enable: Bool) {.loadfrom("set_fractional_delta", 2586408642).}
  proc `speedScale=`*(self: CPUParticles2D; scale: float64) {.loadfrom("set_speed_scale", 373806689).}
  proc isEmitting*(self: CPUParticles2D): Bool {.loadfrom("is_emitting", 36873697).}
  proc amount*(self: CPUParticles2D): int32 {.loadfrom("get_amount", 3905245786).}
  proc lifetime*(self: CPUParticles2D): float64 {.loadfrom("get_lifetime", 1740695150).}
  proc oneShot*(self: CPUParticles2D): Bool {.loadfrom("get_one_shot", 36873697).}
  proc preProcessTime*(self: CPUParticles2D): float64 {.loadfrom("get_pre_process_time", 1740695150).}
  proc explosivenessRatio*(self: CPUParticles2D): Float {.loadfrom("get_explosiveness_ratio", 1740695150).}
  proc randomnessRatio*(self: CPUParticles2D): Float {.loadfrom("get_randomness_ratio", 1740695150).}
  proc lifetimeRandomness*(self: CPUParticles2D): float64 {.loadfrom("get_lifetime_randomness", 1740695150).}
  proc useLocalCoordinates*(self: CPUParticles2D): Bool {.loadfrom("get_use_local_coordinates", 36873697).}
  proc fixedFps*(self: CPUParticles2D): int32 {.loadfrom("get_fixed_fps", 3905245786).}
  proc fractionalDelta*(self: CPUParticles2D): Bool {.loadfrom("get_fractional_delta", 36873697).}
  proc speedScale*(self: CPUParticles2D): float64 {.loadfrom("get_speed_scale", 1740695150).}
  proc `drawOrder=`*(self: CPUParticles2D; order: CPUParticles2D|>DrawOrder) {.loadfrom("set_draw_order", 4183193490).}
  proc drawOrder*(self: CPUParticles2D): CPUParticles2D|>DrawOrder {.loadfrom("get_draw_order", 1668655735).}
  proc `texture=`*(self: CPUParticles2D; texture: Ref[Texture2D]) {.loadfrom("set_texture", 4051416890).}
  proc texture*(self: CPUParticles2D): Ref[Texture2D] {.loadfrom("get_texture", 3635182373).}
  proc restart*(self: CPUParticles2D) {.loadfrom("restart", 3218959716).}
  proc `direction=`*(self: CPUParticles2D; direction: Vector2) {.loadfrom("set_direction", 743155724).}
  proc direction*(self: CPUParticles2D): Vector2 {.loadfrom("get_direction", 3341600327).}
  proc `spread=`*(self: CPUParticles2D; spread: Float) {.loadfrom("set_spread", 373806689).}
  proc spread*(self: CPUParticles2D): Float {.loadfrom("get_spread", 1740695150).}
  proc `paramMin=`*(self: CPUParticles2D; param: CPUParticles2D|>Parameter; value: Float) {.loadfrom("set_param_min", 3320615296).}
  proc paramMin*(self: CPUParticles2D; param: CPUParticles2D|>Parameter): Float {.loadfrom("get_param_min", 2038050600).}
  proc `paramMax=`*(self: CPUParticles2D; param: CPUParticles2D|>Parameter; value: Float) {.loadfrom("set_param_max", 3320615296).}
  proc paramMax*(self: CPUParticles2D; param: CPUParticles2D|>Parameter): Float {.loadfrom("get_param_max", 2038050600).}
  proc `paramCurve=`*(self: CPUParticles2D; param: CPUParticles2D|>Parameter; curve: Ref[Curve]) {.loadfrom("set_param_curve", 2959350143).}
  proc paramCurve*(self: CPUParticles2D; param: CPUParticles2D|>Parameter): Ref[Curve] {.loadfrom("get_param_curve", 2603158474).}
  proc `color=`*(self: CPUParticles2D; color: Color) {.loadfrom("set_color", 2920490490).}
  proc color*(self: CPUParticles2D): Color {.loadfrom("get_color", 3444240500).}
  proc `colorRamp=`*(self: CPUParticles2D; ramp: Ref[Gradient]) {.loadfrom("set_color_ramp", 2756054477).}
  proc colorRamp*(self: CPUParticles2D): Ref[Gradient] {.loadfrom("get_color_ramp", 132272999).}
  proc `colorInitialRamp=`*(self: CPUParticles2D; ramp: Ref[Gradient]) {.loadfrom("set_color_initial_ramp", 2756054477).}
  proc colorInitialRamp*(self: CPUParticles2D): Ref[Gradient] {.loadfrom("get_color_initial_ramp", 132272999).}
  proc `particleFlag=`*(self: CPUParticles2D; particleFlag: CPUParticles2D|>ParticleFlags; enable: Bool) {.loadfrom("set_particle_flag", 4178137949).}
  proc particleFlag*(self: CPUParticles2D; particleFlag: CPUParticles2D|>ParticleFlags): Bool {.loadfrom("get_particle_flag", 2829976507).}
  proc `emissionShape=`*(self: CPUParticles2D; shape: CPUParticles2D|>EmissionShape) {.loadfrom("set_emission_shape", 393763892).}
  proc emissionShape*(self: CPUParticles2D): CPUParticles2D|>EmissionShape {.loadfrom("get_emission_shape", 1740246024).}
  proc `emissionSphereRadius=`*(self: CPUParticles2D; radius: Float) {.loadfrom("set_emission_sphere_radius", 373806689).}
  proc emissionSphereRadius*(self: CPUParticles2D): Float {.loadfrom("get_emission_sphere_radius", 1740695150).}
  proc `emissionRectExtents=`*(self: CPUParticles2D; extents: Vector2) {.loadfrom("set_emission_rect_extents", 743155724).}
  proc emissionRectExtents*(self: CPUParticles2D): Vector2 {.loadfrom("get_emission_rect_extents", 3341600327).}
  proc `emissionPoints=`*(self: CPUParticles2D; array: PackedVector2Array) {.loadfrom("set_emission_points", 1509147220).}
  proc emissionPoints*(self: CPUParticles2D): PackedVector2Array {.loadfrom("get_emission_points", 2961356807).}
  proc `emissionNormals=`*(self: CPUParticles2D; array: PackedVector2Array) {.loadfrom("set_emission_normals", 1509147220).}
  proc emissionNormals*(self: CPUParticles2D): PackedVector2Array {.loadfrom("get_emission_normals", 2961356807).}
  proc `emissionColors=`*(self: CPUParticles2D; array: PackedColorArray) {.loadfrom("set_emission_colors", 3546319833).}
  proc emissionColors*(self: CPUParticles2D): PackedColorArray {.loadfrom("get_emission_colors", 1392750486).}
  proc gravity*(self: CPUParticles2D): Vector2 {.loadfrom("get_gravity", 3341600327).}
  proc `gravity=`*(self: CPUParticles2D; accelVec: Vector2) {.loadfrom("set_gravity", 743155724).}
  proc splitScale*(self: CPUParticles2D): Bool {.loadfrom("get_split_scale", 2240911060).}
  proc `splitScale=`*(self: CPUParticles2D; splitScale: Bool) {.loadfrom("set_split_scale", 2586408642).}
  proc scaleCurveX*(self: CPUParticles2D): Ref[Curve] {.loadfrom("get_scale_curve_x", 2460114913).}
  proc `scaleCurveX=`*(self: CPUParticles2D; scaleCurve: Ref[Curve]) {.loadfrom("set_scale_curve_x", 270443179).}
  proc scaleCurveY*(self: CPUParticles2D): Ref[Curve] {.loadfrom("get_scale_curve_y", 2460114913).}
  proc `scaleCurveY=`*(self: CPUParticles2D; scaleCurve: Ref[Curve]) {.loadfrom("set_scale_curve_y", 270443179).}
  proc convertFromParticles*(self: CPUParticles2D; particles: ptr Node) {.loadfrom("convert_from_particles", 1078189570).}

# Camera2D
define_godot_engine_class_essencials(Camera2D, Node2D)
Camera2D.memberProcs:
  proc `offset=`*(self: Camera2D; offset: Vector2) {.loadfrom("set_offset", 743155724).}
  proc offset*(self: Camera2D): Vector2 {.loadfrom("get_offset", 3341600327).}
  proc `anchorMode=`*(self: Camera2D; anchorMode: Camera2D|>AnchorMode) {.loadfrom("set_anchor_mode", 2050398218).}
  proc anchorMode*(self: Camera2D): Camera2D|>AnchorMode {.loadfrom("get_anchor_mode", 155978067).}
  proc `ignoreRotation=`*(self: Camera2D; ignore: Bool) {.loadfrom("set_ignore_rotation", 2586408642).}
  proc isIgnoringRotation*(self: Camera2D): Bool {.loadfrom("is_ignoring_rotation", 36873697).}
  proc `processCallback=`*(self: Camera2D; mode: Camera2D|>Camera2DProcessCallback) {.loadfrom("set_process_callback", 4201947462).}
  proc processCallback*(self: Camera2D): Camera2D|>Camera2DProcessCallback {.loadfrom("get_process_callback", 2325344499).}
  proc `enabled=`*(self: Camera2D; enabled: Bool) {.loadfrom("set_enabled", 2586408642).}
  proc isEnabled*(self: Camera2D): Bool {.loadfrom("is_enabled", 36873697).}
  proc makeCurrent*(self: Camera2D) {.loadfrom("make_current", 3218959716).}
  proc isCurrent*(self: Camera2D): Bool {.loadfrom("is_current", 36873697).}
  proc `limit=`*(self: Camera2D; margin: Side; limit: int32) {.loadfrom("set_limit", 437707142).}
  proc limit*(self: Camera2D; margin: Side): int32 {.loadfrom("get_limit", 1983885014).}
  proc `limitSmoothingEnabled=`*(self: Camera2D; limitSmoothingEnabled: Bool) {.loadfrom("set_limit_smoothing_enabled", 2586408642).}
  proc isLimitSmoothingEnabled*(self: Camera2D): Bool {.loadfrom("is_limit_smoothing_enabled", 36873697).}
  proc `dragVerticalEnabled=`*(self: Camera2D; enabled: Bool) {.loadfrom("set_drag_vertical_enabled", 2586408642).}
  proc isDragVerticalEnabled*(self: Camera2D): Bool {.loadfrom("is_drag_vertical_enabled", 36873697).}
  proc `dragHorizontalEnabled=`*(self: Camera2D; enabled: Bool) {.loadfrom("set_drag_horizontal_enabled", 2586408642).}
  proc isDragHorizontalEnabled*(self: Camera2D): Bool {.loadfrom("is_drag_horizontal_enabled", 36873697).}
  proc `dragVerticalOffset=`*(self: Camera2D; offset: Float) {.loadfrom("set_drag_vertical_offset", 373806689).}
  proc dragVerticalOffset*(self: Camera2D): Float {.loadfrom("get_drag_vertical_offset", 1740695150).}
  proc `dragHorizontalOffset=`*(self: Camera2D; offset: Float) {.loadfrom("set_drag_horizontal_offset", 373806689).}
  proc dragHorizontalOffset*(self: Camera2D): Float {.loadfrom("get_drag_horizontal_offset", 1740695150).}
  proc `dragMargin=`*(self: Camera2D; margin: Side; dragMargin: Float) {.loadfrom("set_drag_margin", 4290182280).}
  proc dragMargin*(self: Camera2D; margin: Side): Float {.loadfrom("get_drag_margin", 2869120046).}
  proc getTargetPosition*(self: Camera2D): Vector2 {.loadfrom("get_target_position", 3341600327).}
  proc getScreenCenterPosition*(self: Camera2D): Vector2 {.loadfrom("get_screen_center_position", 3341600327).}
  proc `zoom=`*(self: Camera2D; zoom: Vector2) {.loadfrom("set_zoom", 743155724).}
  proc zoom*(self: Camera2D): Vector2 {.loadfrom("get_zoom", 3341600327).}
  proc `customViewport=`*(self: Camera2D; viewport: ptr Node) {.loadfrom("set_custom_viewport", 1078189570).}
  proc customViewport*(self: Camera2D): Node {.loadfrom("get_custom_viewport", 3160264692).}
  proc `positionSmoothingSpeed=`*(self: Camera2D; positionSmoothingSpeed: Float) {.loadfrom("set_position_smoothing_speed", 373806689).}
  proc positionSmoothingSpeed*(self: Camera2D): Float {.loadfrom("get_position_smoothing_speed", 1740695150).}
  proc `positionSmoothingEnabled=`*(self: Camera2D; positionSmoothingSpeed: Bool) {.loadfrom("set_position_smoothing_enabled", 2586408642).}
  proc isPositionSmoothingEnabled*(self: Camera2D): Bool {.loadfrom("is_position_smoothing_enabled", 36873697).}
  proc `rotationSmoothingEnabled=`*(self: Camera2D; enabled: Bool) {.loadfrom("set_rotation_smoothing_enabled", 2586408642).}
  proc isRotationSmoothingEnabled*(self: Camera2D): Bool {.loadfrom("is_rotation_smoothing_enabled", 36873697).}
  proc `rotationSmoothingSpeed=`*(self: Camera2D; speed: Float) {.loadfrom("set_rotation_smoothing_speed", 373806689).}
  proc rotationSmoothingSpeed*(self: Camera2D): Float {.loadfrom("get_rotation_smoothing_speed", 1740695150).}
  proc forceUpdateScroll*(self: Camera2D) {.loadfrom("force_update_scroll", 3218959716).}
  proc resetSmoothing*(self: Camera2D) {.loadfrom("reset_smoothing", 3218959716).}
  proc align*(self: Camera2D) {.loadfrom("align", 3218959716).}
  proc `screenDrawingEnabled=`*(self: Camera2D; screenDrawingEnabled: Bool) {.loadfrom("set_screen_drawing_enabled", 2586408642).}
  proc isScreenDrawingEnabled*(self: Camera2D): Bool {.loadfrom("is_screen_drawing_enabled", 36873697).}
  proc `limitDrawingEnabled=`*(self: Camera2D; limitDrawingEnabled: Bool) {.loadfrom("set_limit_drawing_enabled", 2586408642).}
  proc isLimitDrawingEnabled*(self: Camera2D): Bool {.loadfrom("is_limit_drawing_enabled", 36873697).}
  proc `marginDrawingEnabled=`*(self: Camera2D; marginDrawingEnabled: Bool) {.loadfrom("set_margin_drawing_enabled", 2586408642).}
  proc isMarginDrawingEnabled*(self: Camera2D): Bool {.loadfrom("is_margin_drawing_enabled", 36873697).}

# CanvasGroup
define_godot_engine_class_essencials(CanvasGroup, Node2D)
CanvasGroup.memberProcs:
  proc `fitMargin=`*(self: CanvasGroup; fitMargin: Float) {.loadfrom("set_fit_margin", 373806689).}
  proc fitMargin*(self: CanvasGroup): Float {.loadfrom("get_fit_margin", 1740695150).}
  proc `clearMargin=`*(self: CanvasGroup; clearMargin: Float) {.loadfrom("set_clear_margin", 373806689).}
  proc clearMargin*(self: CanvasGroup): Float {.loadfrom("get_clear_margin", 1740695150).}
  proc `useMipmaps=`*(self: CanvasGroup; useMipmaps: Bool) {.loadfrom("set_use_mipmaps", 2586408642).}
  proc isUsingMipmaps*(self: CanvasGroup): Bool {.loadfrom("is_using_mipmaps", 36873697).}

# CanvasModulate
define_godot_engine_class_essencials(CanvasModulate, Node2D)
CanvasModulate.memberProcs:
  proc `color=`*(self: CanvasModulate; color: Color) {.loadfrom("set_color", 2920490490).}
  proc color*(self: CanvasModulate): Color {.loadfrom("get_color", 3444240500).}

# CollisionObject2D
define_godot_engine_class_essencials(CollisionObject2D, Node2D)
method inputEvent*(self: CollisionObject2D; viewport: Viewport; event: Ref[InputEvent]; shapeIdx: int32) {.base.} = (discard)
method mouseEnter*(self: CollisionObject2D) {.base.} = (discard)
method mouseExit*(self: CollisionObject2D) {.base.} = (discard)
method mouseShapeEnter*(self: CollisionObject2D; shapeIdx: int32) {.base.} = (discard)
method mouseShapeExit*(self: CollisionObject2D; shapeIdx: int32) {.base.} = (discard)
CollisionObject2D.memberProcs:
  proc getRid*(self: CollisionObject2D): RID {.loadfrom("get_rid", 2944877500).}
  proc `collisionLayer=`*(self: CollisionObject2D; layer: uint32) {.loadfrom("set_collision_layer", 1286410249).}
  proc collisionLayer*(self: CollisionObject2D): uint32 {.loadfrom("get_collision_layer", 3905245786).}
  proc `collisionMask=`*(self: CollisionObject2D; mask: uint32) {.loadfrom("set_collision_mask", 1286410249).}
  proc collisionMask*(self: CollisionObject2D): uint32 {.loadfrom("get_collision_mask", 3905245786).}
  proc setCollisionLayerValue*(self: CollisionObject2D; layerNumber: int32; value: Bool) {.loadfrom("set_collision_layer_value", 300928843).}
  proc getCollisionLayerValue*(self: CollisionObject2D; layerNumber: int32): Bool {.loadfrom("get_collision_layer_value", 1116898809).}
  proc setCollisionMaskValue*(self: CollisionObject2D; layerNumber: int32; value: Bool) {.loadfrom("set_collision_mask_value", 300928843).}
  proc getCollisionMaskValue*(self: CollisionObject2D; layerNumber: int32): Bool {.loadfrom("get_collision_mask_value", 1116898809).}
  proc `collisionPriority=`*(self: CollisionObject2D; priority: Float) {.loadfrom("set_collision_priority", 373806689).}
  proc collisionPriority*(self: CollisionObject2D): Float {.loadfrom("get_collision_priority", 1740695150).}
  proc `disableMode=`*(self: CollisionObject2D; mode: CollisionObject2D|>DisableMode) {.loadfrom("set_disable_mode", 1919204045).}
  proc disableMode*(self: CollisionObject2D): CollisionObject2D|>DisableMode {.loadfrom("get_disable_mode", 3172846349).}
  proc `pickable=`*(self: CollisionObject2D; enabled: Bool) {.loadfrom("set_pickable", 2586408642).}
  proc isPickable*(self: CollisionObject2D): Bool {.loadfrom("is_pickable", 36873697).}
  proc createShapeOwner*(self: CollisionObject2D; owner: ptr Object): uint32 {.loadfrom("create_shape_owner", 3429307534).}
  proc removeShapeOwner*(self: CollisionObject2D; ownerId: uint32) {.loadfrom("remove_shape_owner", 1286410249).}
  proc getShapeOwners*(self: CollisionObject2D): PackedInt32Array {.loadfrom("get_shape_owners", 969006518).}
  proc shapeOwnerSetTransform*(self: CollisionObject2D; ownerId: uint32; transform: Transform2D) {.loadfrom("shape_owner_set_transform", 30160968).}
  proc shapeOwnerGetTransform*(self: CollisionObject2D; ownerId: uint32): Transform2D {.loadfrom("shape_owner_get_transform", 3836996910).}
  proc shapeOwnerGetOwner*(self: CollisionObject2D; ownerId: uint32): Object {.loadfrom("shape_owner_get_owner", 3332903315).}
  proc shapeOwnerSetDisabled*(self: CollisionObject2D; ownerId: uint32; disabled: Bool) {.loadfrom("shape_owner_set_disabled", 300928843).}
  proc isShapeOwnerDisabled*(self: CollisionObject2D; ownerId: uint32): Bool {.loadfrom("is_shape_owner_disabled", 1116898809).}
  proc shapeOwnerSetOneWayCollision*(self: CollisionObject2D; ownerId: uint32; enable: Bool) {.loadfrom("shape_owner_set_one_way_collision", 300928843).}
  proc isShapeOwnerOneWayCollisionEnabled*(self: CollisionObject2D; ownerId: uint32): Bool {.loadfrom("is_shape_owner_one_way_collision_enabled", 1116898809).}
  proc shapeOwnerSetOneWayCollisionMargin*(self: CollisionObject2D; ownerId: uint32; margin: Float) {.loadfrom("shape_owner_set_one_way_collision_margin", 1602489585).}
  proc getShapeOwnerOneWayCollisionMargin*(self: CollisionObject2D; ownerId: uint32): Float {.loadfrom("get_shape_owner_one_way_collision_margin", 2339986948).}
  proc shapeOwnerAddShape*(self: CollisionObject2D; ownerId: uint32; shape: Ref[Shape2D]) {.loadfrom("shape_owner_add_shape", 2077425081).}
  proc shapeOwnerGetShapeCount*(self: CollisionObject2D; ownerId: uint32): int32 {.loadfrom("shape_owner_get_shape_count", 923996154).}
  proc shapeOwnerGetShape*(self: CollisionObject2D; ownerId: uint32; shapeId: int32): Ref[Shape2D] {.loadfrom("shape_owner_get_shape", 3106725749).}
  proc shapeOwnerGetShapeIndex*(self: CollisionObject2D; ownerId: uint32; shapeId: int32): int32 {.loadfrom("shape_owner_get_shape_index", 3175239445).}
  proc shapeOwnerRemoveShape*(self: CollisionObject2D; ownerId: uint32; shapeId: int32) {.loadfrom("shape_owner_remove_shape", 3937882851).}
  proc shapeOwnerClearShapes*(self: CollisionObject2D; ownerId: uint32) {.loadfrom("shape_owner_clear_shapes", 1286410249).}
  proc shapeFindOwner*(self: CollisionObject2D; shapeIndex: int32): uint32 {.loadfrom("shape_find_owner", 923996154).}

# CollisionPolygon2D
define_godot_engine_class_essencials(CollisionPolygon2D, Node2D)
CollisionPolygon2D.memberProcs:
  proc `polygon=`*(self: CollisionPolygon2D; polygon: PackedVector2Array) {.loadfrom("set_polygon", 1509147220).}
  proc polygon*(self: CollisionPolygon2D): PackedVector2Array {.loadfrom("get_polygon", 2961356807).}
  proc `buildMode=`*(self: CollisionPolygon2D; buildMode: CollisionPolygon2D|>BuildMode) {.loadfrom("set_build_mode", 2780803135).}
  proc buildMode*(self: CollisionPolygon2D): CollisionPolygon2D|>BuildMode {.loadfrom("get_build_mode", 3044948800).}
  proc `disabled=`*(self: CollisionPolygon2D; disabled: Bool) {.loadfrom("set_disabled", 2586408642).}
  proc isDisabled*(self: CollisionPolygon2D): Bool {.loadfrom("is_disabled", 36873697).}
  proc `oneWayCollision=`*(self: CollisionPolygon2D; enabled: Bool) {.loadfrom("set_one_way_collision", 2586408642).}
  proc isOneWayCollisionEnabled*(self: CollisionPolygon2D): Bool {.loadfrom("is_one_way_collision_enabled", 36873697).}
  proc `oneWayCollisionMargin=`*(self: CollisionPolygon2D; margin: Float) {.loadfrom("set_one_way_collision_margin", 373806689).}
  proc oneWayCollisionMargin*(self: CollisionPolygon2D): Float {.loadfrom("get_one_way_collision_margin", 1740695150).}

# CollisionShape2D
define_godot_engine_class_essencials(CollisionShape2D, Node2D)
CollisionShape2D.memberProcs:
  proc `shape=`*(self: CollisionShape2D; shape: Ref[Shape2D]) {.loadfrom("set_shape", 771364740).}
  proc shape*(self: CollisionShape2D): Ref[Shape2D] {.loadfrom("get_shape", 522005891).}
  proc `disabled=`*(self: CollisionShape2D; disabled: Bool) {.loadfrom("set_disabled", 2586408642).}
  proc isDisabled*(self: CollisionShape2D): Bool {.loadfrom("is_disabled", 36873697).}
  proc `oneWayCollision=`*(self: CollisionShape2D; enabled: Bool) {.loadfrom("set_one_way_collision", 2586408642).}
  proc isOneWayCollisionEnabled*(self: CollisionShape2D): Bool {.loadfrom("is_one_way_collision_enabled", 36873697).}
  proc `oneWayCollisionMargin=`*(self: CollisionShape2D; margin: Float) {.loadfrom("set_one_way_collision_margin", 373806689).}
  proc oneWayCollisionMargin*(self: CollisionShape2D): Float {.loadfrom("get_one_way_collision_margin", 1740695150).}
  proc `debugColor=`*(self: CollisionShape2D; color: Color) {.loadfrom("set_debug_color", 2920490490).}
  proc debugColor*(self: CollisionShape2D): Color {.loadfrom("get_debug_color", 3444240500).}

# GPUParticles2D
define_godot_engine_class_essencials(GPUParticles2D, Node2D)
GPUParticles2D.memberProcs:
  proc `emitting=`*(self: GPUParticles2D; emitting: Bool) {.loadfrom("set_emitting", 2586408642).}
  proc `amount=`*(self: GPUParticles2D; amount: int32) {.loadfrom("set_amount", 1286410249).}
  proc `lifetime=`*(self: GPUParticles2D; secs: float64) {.loadfrom("set_lifetime", 373806689).}
  proc `oneShot=`*(self: GPUParticles2D; secs: Bool) {.loadfrom("set_one_shot", 2586408642).}
  proc `preProcessTime=`*(self: GPUParticles2D; secs: float64) {.loadfrom("set_pre_process_time", 373806689).}
  proc `explosivenessRatio=`*(self: GPUParticles2D; ratio: Float) {.loadfrom("set_explosiveness_ratio", 373806689).}
  proc `randomnessRatio=`*(self: GPUParticles2D; ratio: Float) {.loadfrom("set_randomness_ratio", 373806689).}
  proc `visibilityRect=`*(self: GPUParticles2D; visibilityRect: Rect2) {.loadfrom("set_visibility_rect", 2046264180).}
  proc `useLocalCoordinates=`*(self: GPUParticles2D; enable: Bool) {.loadfrom("set_use_local_coordinates", 2586408642).}
  proc `fixedFps=`*(self: GPUParticles2D; fps: int32) {.loadfrom("set_fixed_fps", 1286410249).}
  proc `fractionalDelta=`*(self: GPUParticles2D; enable: Bool) {.loadfrom("set_fractional_delta", 2586408642).}
  proc `interpolate=`*(self: GPUParticles2D; enable: Bool) {.loadfrom("set_interpolate", 2586408642).}
  proc `processMaterial=`*(self: GPUParticles2D; material: Ref[Material]) {.loadfrom("set_process_material", 2757459619).}
  proc `speedScale=`*(self: GPUParticles2D; scale: float64) {.loadfrom("set_speed_scale", 373806689).}
  proc `collisionBaseSize=`*(self: GPUParticles2D; size: Float) {.loadfrom("set_collision_base_size", 373806689).}
  proc isEmitting*(self: GPUParticles2D): Bool {.loadfrom("is_emitting", 36873697).}
  proc amount*(self: GPUParticles2D): int32 {.loadfrom("get_amount", 3905245786).}
  proc lifetime*(self: GPUParticles2D): float64 {.loadfrom("get_lifetime", 1740695150).}
  proc oneShot*(self: GPUParticles2D): Bool {.loadfrom("get_one_shot", 36873697).}
  proc preProcessTime*(self: GPUParticles2D): float64 {.loadfrom("get_pre_process_time", 1740695150).}
  proc explosivenessRatio*(self: GPUParticles2D): Float {.loadfrom("get_explosiveness_ratio", 1740695150).}
  proc randomnessRatio*(self: GPUParticles2D): Float {.loadfrom("get_randomness_ratio", 1740695150).}
  proc visibilityRect*(self: GPUParticles2D): Rect2 {.loadfrom("get_visibility_rect", 1639390495).}
  proc useLocalCoordinates*(self: GPUParticles2D): Bool {.loadfrom("get_use_local_coordinates", 36873697).}
  proc fixedFps*(self: GPUParticles2D): int32 {.loadfrom("get_fixed_fps", 3905245786).}
  proc fractionalDelta*(self: GPUParticles2D): Bool {.loadfrom("get_fractional_delta", 36873697).}
  proc interpolate*(self: GPUParticles2D): Bool {.loadfrom("get_interpolate", 36873697).}
  proc processMaterial*(self: GPUParticles2D): Ref[Material] {.loadfrom("get_process_material", 5934680).}
  proc speedScale*(self: GPUParticles2D): float64 {.loadfrom("get_speed_scale", 1740695150).}
  proc collisionBaseSize*(self: GPUParticles2D): Float {.loadfrom("get_collision_base_size", 1740695150).}
  proc `drawOrder=`*(self: GPUParticles2D; order: GPUParticles2D|>DrawOrder) {.loadfrom("set_draw_order", 1939677959).}
  proc drawOrder*(self: GPUParticles2D): GPUParticles2D|>DrawOrder {.loadfrom("get_draw_order", 941479095).}
  proc `texture=`*(self: GPUParticles2D; texture: Ref[Texture2D]) {.loadfrom("set_texture", 4051416890).}
  proc texture*(self: GPUParticles2D): Ref[Texture2D] {.loadfrom("get_texture", 3635182373).}
  proc captureRect*(self: GPUParticles2D): Rect2 {.loadfrom("capture_rect", 1639390495).}
  proc restart*(self: GPUParticles2D) {.loadfrom("restart", 3218959716).}
  proc `subEmitter=`*(self: GPUParticles2D; path: NodePath) {.loadfrom("set_sub_emitter", 1348162250).}
  proc subEmitter*(self: GPUParticles2D): NodePath {.loadfrom("get_sub_emitter", 4075236667).}
  proc emitParticle*(self: GPUParticles2D; xform: Transform2D; velocity: Vector2; color: Color; custom: Color; flags: uint32) {.loadfrom("emit_particle", 2179202058).}
  proc `trailEnabled=`*(self: GPUParticles2D; enabled: Bool) {.loadfrom("set_trail_enabled", 2586408642).}
  proc `trailLifetime=`*(self: GPUParticles2D; secs: float64) {.loadfrom("set_trail_lifetime", 373806689).}
  proc isTrailEnabled*(self: GPUParticles2D): Bool {.loadfrom("is_trail_enabled", 36873697).}
  proc trailLifetime*(self: GPUParticles2D): float64 {.loadfrom("get_trail_lifetime", 1740695150).}
  proc `trailSections=`*(self: GPUParticles2D; sections: int32) {.loadfrom("set_trail_sections", 1286410249).}
  proc trailSections*(self: GPUParticles2D): int32 {.loadfrom("get_trail_sections", 3905245786).}
  proc `trailSectionSubdivisions=`*(self: GPUParticles2D; subdivisions: int32) {.loadfrom("set_trail_section_subdivisions", 1286410249).}
  proc trailSectionSubdivisions*(self: GPUParticles2D): int32 {.loadfrom("get_trail_section_subdivisions", 3905245786).}

# Joint2D
define_godot_engine_class_essencials(Joint2D, Node2D)
Joint2D.memberProcs:
  proc `nodeA=`*(self: Joint2D; node: NodePath) {.loadfrom("set_node_a", 1348162250).}
  proc nodeA*(self: Joint2D): NodePath {.loadfrom("get_node_a", 4075236667).}
  proc `nodeB=`*(self: Joint2D; node: NodePath) {.loadfrom("set_node_b", 1348162250).}
  proc nodeB*(self: Joint2D): NodePath {.loadfrom("get_node_b", 4075236667).}
  proc `bias=`*(self: Joint2D; bias: Float) {.loadfrom("set_bias", 373806689).}
  proc bias*(self: Joint2D): Float {.loadfrom("get_bias", 1740695150).}
  proc `excludeNodesFromCollision=`*(self: Joint2D; enable: Bool) {.loadfrom("set_exclude_nodes_from_collision", 2586408642).}
  proc excludeNodesFromCollision*(self: Joint2D): Bool {.loadfrom("get_exclude_nodes_from_collision", 36873697).}

# Light2D
define_godot_engine_class_essencials(Light2D, Node2D)
Light2D.memberProcs:
  proc `enabled=`*(self: Light2D; enabled: Bool) {.loadfrom("set_enabled", 2586408642).}
  proc isEnabled*(self: Light2D): Bool {.loadfrom("is_enabled", 36873697).}
  proc `editorOnly=`*(self: Light2D; editorOnly: Bool) {.loadfrom("set_editor_only", 2586408642).}
  proc isEditorOnly*(self: Light2D): Bool {.loadfrom("is_editor_only", 36873697).}
  proc `color=`*(self: Light2D; color: Color) {.loadfrom("set_color", 2920490490).}
  proc color*(self: Light2D): Color {.loadfrom("get_color", 3444240500).}
  proc `energy=`*(self: Light2D; energy: Float) {.loadfrom("set_energy", 373806689).}
  proc energy*(self: Light2D): Float {.loadfrom("get_energy", 1740695150).}
  proc `zRangeMin=`*(self: Light2D; z: int32) {.loadfrom("set_z_range_min", 1286410249).}
  proc zRangeMin*(self: Light2D): int32 {.loadfrom("get_z_range_min", 3905245786).}
  proc `zRangeMax=`*(self: Light2D; z: int32) {.loadfrom("set_z_range_max", 1286410249).}
  proc zRangeMax*(self: Light2D): int32 {.loadfrom("get_z_range_max", 3905245786).}
  proc `layerRangeMin=`*(self: Light2D; layer: int32) {.loadfrom("set_layer_range_min", 1286410249).}
  proc layerRangeMin*(self: Light2D): int32 {.loadfrom("get_layer_range_min", 3905245786).}
  proc `layerRangeMax=`*(self: Light2D; layer: int32) {.loadfrom("set_layer_range_max", 1286410249).}
  proc layerRangeMax*(self: Light2D): int32 {.loadfrom("get_layer_range_max", 3905245786).}
  proc `itemCullMask=`*(self: Light2D; itemCullMask: int32) {.loadfrom("set_item_cull_mask", 1286410249).}
  proc itemCullMask*(self: Light2D): int32 {.loadfrom("get_item_cull_mask", 3905245786).}
  proc `itemShadowCullMask=`*(self: Light2D; itemShadowCullMask: int32) {.loadfrom("set_item_shadow_cull_mask", 1286410249).}
  proc itemShadowCullMask*(self: Light2D): int32 {.loadfrom("get_item_shadow_cull_mask", 3905245786).}
  proc `shadowEnabled=`*(self: Light2D; enabled: Bool) {.loadfrom("set_shadow_enabled", 2586408642).}
  proc isShadowEnabled*(self: Light2D): Bool {.loadfrom("is_shadow_enabled", 36873697).}
  proc `shadowSmooth=`*(self: Light2D; smooth: Float) {.loadfrom("set_shadow_smooth", 373806689).}
  proc shadowSmooth*(self: Light2D): Float {.loadfrom("get_shadow_smooth", 1740695150).}
  proc `shadowFilter=`*(self: Light2D; filter: Light2D|>ShadowFilter) {.loadfrom("set_shadow_filter", 3209356555).}
  proc shadowFilter*(self: Light2D): Light2D|>ShadowFilter {.loadfrom("get_shadow_filter", 1973619177).}
  proc `shadowColor=`*(self: Light2D; shadowColor: Color) {.loadfrom("set_shadow_color", 2920490490).}
  proc shadowColor*(self: Light2D): Color {.loadfrom("get_shadow_color", 3444240500).}
  proc `blendMode=`*(self: Light2D; mode: Light2D|>BlendMode) {.loadfrom("set_blend_mode", 2916638796).}
  proc blendMode*(self: Light2D): Light2D|>BlendMode {.loadfrom("get_blend_mode", 936255250).}
  proc setHeight*(self: Light2D; height: Float) {.loadfrom("set_height", 373806689).}
  proc getHeight*(self: Light2D): Float {.loadfrom("get_height", 1740695150).}

# LightOccluder2D
define_godot_engine_class_essencials(LightOccluder2D, Node2D)
LightOccluder2D.memberProcs:
  proc `occluderPolygon=`*(self: LightOccluder2D; polygon: Ref[OccluderPolygon2D]) {.loadfrom("set_occluder_polygon", 3258315893).}
  proc occluderPolygon*(self: LightOccluder2D): Ref[OccluderPolygon2D] {.loadfrom("get_occluder_polygon", 3962317075).}
  proc `occluderLightMask=`*(self: LightOccluder2D; mask: int32) {.loadfrom("set_occluder_light_mask", 1286410249).}
  proc occluderLightMask*(self: LightOccluder2D): int32 {.loadfrom("get_occluder_light_mask", 3905245786).}
  proc `asSdfCollision=`*(self: LightOccluder2D; enable: Bool) {.loadfrom("set_as_sdf_collision", 2586408642).}
  proc isSetAsSdfCollision*(self: LightOccluder2D): Bool {.loadfrom("is_set_as_sdf_collision", 36873697).}

# Line2D
define_godot_engine_class_essencials(Line2D, Node2D)
Line2D.memberProcs:
  proc `points=`*(self: Line2D; points: PackedVector2Array) {.loadfrom("set_points", 1509147220).}
  proc points*(self: Line2D): PackedVector2Array {.loadfrom("get_points", 2961356807).}
  proc setPointPosition*(self: Line2D; index: int32; position: Vector2) {.loadfrom("set_point_position", 163021252).}
  proc getPointPosition*(self: Line2D; index: int32): Vector2 {.loadfrom("get_point_position", 2299179447).}
  proc getPointCount*(self: Line2D): int32 {.loadfrom("get_point_count", 3905245786).}
  proc addPoint*(self: Line2D; position: Vector2; index: int32 = -1) {.loadfrom("add_point", 468506575).}
  proc removePoint*(self: Line2D; index: int32) {.loadfrom("remove_point", 1286410249).}
  proc clearPoints*(self: Line2D) {.loadfrom("clear_points", 3218959716).}
  proc `width=`*(self: Line2D; width: Float) {.loadfrom("set_width", 373806689).}
  proc width*(self: Line2D): Float {.loadfrom("get_width", 1740695150).}
  proc `curve=`*(self: Line2D; curve: Ref[Curve]) {.loadfrom("set_curve", 270443179).}
  proc curve*(self: Line2D): Ref[Curve] {.loadfrom("get_curve", 2460114913).}
  proc `defaultColor=`*(self: Line2D; color: Color) {.loadfrom("set_default_color", 2920490490).}
  proc defaultColor*(self: Line2D): Color {.loadfrom("get_default_color", 3444240500).}
  proc `gradient=`*(self: Line2D; color: Ref[Gradient]) {.loadfrom("set_gradient", 2756054477).}
  proc gradient*(self: Line2D): Ref[Gradient] {.loadfrom("get_gradient", 132272999).}
  proc `texture=`*(self: Line2D; texture: Ref[Texture2D]) {.loadfrom("set_texture", 4051416890).}
  proc texture*(self: Line2D): Ref[Texture2D] {.loadfrom("get_texture", 3635182373).}
  proc `textureMode=`*(self: Line2D; mode: Line2D|>LineTextureMode) {.loadfrom("set_texture_mode", 1952559516).}
  proc textureMode*(self: Line2D): Line2D|>LineTextureMode {.loadfrom("get_texture_mode", 2341040722).}
  proc `jointMode=`*(self: Line2D; mode: Line2D|>LineJointMode) {.loadfrom("set_joint_mode", 604292979).}
  proc jointMode*(self: Line2D): Line2D|>LineJointMode {.loadfrom("get_joint_mode", 2546544037).}
  proc `beginCapMode=`*(self: Line2D; mode: Line2D|>LineCapMode) {.loadfrom("set_begin_cap_mode", 1669024546).}
  proc beginCapMode*(self: Line2D): Line2D|>LineCapMode {.loadfrom("get_begin_cap_mode", 1107511441).}
  proc `endCapMode=`*(self: Line2D; mode: Line2D|>LineCapMode) {.loadfrom("set_end_cap_mode", 1669024546).}
  proc endCapMode*(self: Line2D): Line2D|>LineCapMode {.loadfrom("get_end_cap_mode", 1107511441).}
  proc `sharpLimit=`*(self: Line2D; limit: Float) {.loadfrom("set_sharp_limit", 373806689).}
  proc sharpLimit*(self: Line2D): Float {.loadfrom("get_sharp_limit", 1740695150).}
  proc `roundPrecision=`*(self: Line2D; precision: int32) {.loadfrom("set_round_precision", 1286410249).}
  proc roundPrecision*(self: Line2D): int32 {.loadfrom("get_round_precision", 3905245786).}
  proc `antialiased=`*(self: Line2D; antialiased: Bool) {.loadfrom("set_antialiased", 2586408642).}
  proc antialiased*(self: Line2D): Bool {.loadfrom("get_antialiased", 36873697).}

# Marker2D
define_godot_engine_class_essencials(Marker2D, Node2D)
Marker2D.memberProcs:
  proc `gizmoExtents=`*(self: Marker2D; extents: Float) {.loadfrom("set_gizmo_extents", 373806689).}
  proc gizmoExtents*(self: Marker2D): Float {.loadfrom("get_gizmo_extents", 1740695150).}

# MeshInstance2D
define_godot_engine_class_essencials(MeshInstance2D, Node2D)
MeshInstance2D.memberProcs:
  proc `mesh=`*(self: MeshInstance2D; mesh: Ref[Mesh]) {.loadfrom("set_mesh", 194775623).}
  proc mesh*(self: MeshInstance2D): Ref[Mesh] {.loadfrom("get_mesh", 1808005922).}
  proc `texture=`*(self: MeshInstance2D; texture: Ref[Texture2D]) {.loadfrom("set_texture", 4051416890).}
  proc texture*(self: MeshInstance2D): Ref[Texture2D] {.loadfrom("get_texture", 3635182373).}

# MultiMeshInstance2D
define_godot_engine_class_essencials(MultiMeshInstance2D, Node2D)
MultiMeshInstance2D.memberProcs:
  proc `multimesh=`*(self: MultiMeshInstance2D; multimesh: Ref[MultiMesh]) {.loadfrom("set_multimesh", 2246127404).}
  proc multimesh*(self: MultiMeshInstance2D): Ref[MultiMesh] {.loadfrom("get_multimesh", 1385450523).}
  proc `texture=`*(self: MultiMeshInstance2D; texture: Ref[Texture2D]) {.loadfrom("set_texture", 4051416890).}
  proc texture*(self: MultiMeshInstance2D): Ref[Texture2D] {.loadfrom("get_texture", 3635182373).}

# NavigationLink2D
define_godot_engine_class_essencials(NavigationLink2D, Node2D)
NavigationLink2D.memberProcs:
  proc `enabled=`*(self: NavigationLink2D; enabled: Bool) {.loadfrom("set_enabled", 2586408642).}
  proc isEnabled*(self: NavigationLink2D): Bool {.loadfrom("is_enabled", 36873697).}
  proc `bidirectional=`*(self: NavigationLink2D; bidirectional: Bool) {.loadfrom("set_bidirectional", 2586408642).}
  proc isBidirectional*(self: NavigationLink2D): Bool {.loadfrom("is_bidirectional", 36873697).}
  proc `navigationLayers=`*(self: NavigationLink2D; navigationLayers: uint32) {.loadfrom("set_navigation_layers", 1286410249).}
  proc navigationLayers*(self: NavigationLink2D): uint32 {.loadfrom("get_navigation_layers", 3905245786).}
  proc setNavigationLayerValue*(self: NavigationLink2D; layerNumber: int32; value: Bool) {.loadfrom("set_navigation_layer_value", 300928843).}
  proc getNavigationLayerValue*(self: NavigationLink2D; layerNumber: int32): Bool {.loadfrom("get_navigation_layer_value", 1116898809).}
  proc `startPosition=`*(self: NavigationLink2D; position: Vector2) {.loadfrom("set_start_position", 743155724).}
  proc startPosition*(self: NavigationLink2D): Vector2 {.loadfrom("get_start_position", 3341600327).}
  proc `endPosition=`*(self: NavigationLink2D; position: Vector2) {.loadfrom("set_end_position", 743155724).}
  proc endPosition*(self: NavigationLink2D): Vector2 {.loadfrom("get_end_position", 3341600327).}
  proc setGlobalStartPosition*(self: NavigationLink2D; position: Vector2) {.loadfrom("set_global_start_position", 743155724).}
  proc getGlobalStartPosition*(self: NavigationLink2D): Vector2 {.loadfrom("get_global_start_position", 3341600327).}
  proc setGlobalEndPosition*(self: NavigationLink2D; position: Vector2) {.loadfrom("set_global_end_position", 743155724).}
  proc getGlobalEndPosition*(self: NavigationLink2D): Vector2 {.loadfrom("get_global_end_position", 3341600327).}
  proc `enterCost=`*(self: NavigationLink2D; enterCost: Float) {.loadfrom("set_enter_cost", 373806689).}
  proc enterCost*(self: NavigationLink2D): Float {.loadfrom("get_enter_cost", 1740695150).}
  proc `travelCost=`*(self: NavigationLink2D; travelCost: Float) {.loadfrom("set_travel_cost", 373806689).}
  proc travelCost*(self: NavigationLink2D): Float {.loadfrom("get_travel_cost", 1740695150).}

# NavigationObstacle2D
define_godot_engine_class_essencials(NavigationObstacle2D, Node2D)
NavigationObstacle2D.memberProcs:
  proc getRid*(self: NavigationObstacle2D): RID {.loadfrom("get_rid", 2944877500).}
  proc `avoidanceEnabled=`*(self: NavigationObstacle2D; enabled: Bool) {.loadfrom("set_avoidance_enabled", 2586408642).}
  proc avoidanceEnabled*(self: NavigationObstacle2D): Bool {.loadfrom("get_avoidance_enabled", 36873697).}
  proc setNavigationMap*(self: NavigationObstacle2D; navigationMap: RID) {.loadfrom("set_navigation_map", 2722037293).}
  proc getNavigationMap*(self: NavigationObstacle2D): RID {.loadfrom("get_navigation_map", 2944877500).}
  proc `radius=`*(self: NavigationObstacle2D; radius: Float) {.loadfrom("set_radius", 373806689).}
  proc radius*(self: NavigationObstacle2D): Float {.loadfrom("get_radius", 1740695150).}
  proc `velocity=`*(self: NavigationObstacle2D; velocity: Vector2) {.loadfrom("set_velocity", 743155724).}
  proc velocity*(self: NavigationObstacle2D): Vector2 {.loadfrom("get_velocity", 3341600327).}
  proc `vertices=`*(self: NavigationObstacle2D; vertices: PackedVector2Array) {.loadfrom("set_vertices", 1509147220).}
  proc vertices*(self: NavigationObstacle2D): PackedVector2Array {.loadfrom("get_vertices", 2961356807).}
  proc `avoidanceLayers=`*(self: NavigationObstacle2D; layers: uint32) {.loadfrom("set_avoidance_layers", 1286410249).}
  proc avoidanceLayers*(self: NavigationObstacle2D): uint32 {.loadfrom("get_avoidance_layers", 3905245786).}
  proc setAvoidanceLayerValue*(self: NavigationObstacle2D; layerNumber: int32; value: Bool) {.loadfrom("set_avoidance_layer_value", 300928843).}
  proc getAvoidanceLayerValue*(self: NavigationObstacle2D; layerNumber: int32): Bool {.loadfrom("get_avoidance_layer_value", 1116898809).}

# NavigationRegion2D
define_godot_engine_class_essencials(NavigationRegion2D, Node2D)
NavigationRegion2D.memberProcs:
  proc `navigationPolygon=`*(self: NavigationRegion2D; navigationPolygon: Ref[NavigationPolygon]) {.loadfrom("set_navigation_polygon", 1515040758).}
  proc navigationPolygon*(self: NavigationRegion2D): Ref[NavigationPolygon] {.loadfrom("get_navigation_polygon", 1046532237).}
  proc `enabled=`*(self: NavigationRegion2D; enabled: Bool) {.loadfrom("set_enabled", 2586408642).}
  proc isEnabled*(self: NavigationRegion2D): Bool {.loadfrom("is_enabled", 36873697).}
  proc `useEdgeConnections=`*(self: NavigationRegion2D; enabled: Bool) {.loadfrom("set_use_edge_connections", 2586408642).}
  proc useEdgeConnections*(self: NavigationRegion2D): Bool {.loadfrom("get_use_edge_connections", 36873697).}
  proc `navigationLayers=`*(self: NavigationRegion2D; navigationLayers: uint32) {.loadfrom("set_navigation_layers", 1286410249).}
  proc navigationLayers*(self: NavigationRegion2D): uint32 {.loadfrom("get_navigation_layers", 3905245786).}
  proc setNavigationLayerValue*(self: NavigationRegion2D; layerNumber: int32; value: Bool) {.loadfrom("set_navigation_layer_value", 300928843).}
  proc getNavigationLayerValue*(self: NavigationRegion2D; layerNumber: int32): Bool {.loadfrom("get_navigation_layer_value", 1116898809).}
  proc `constrainAvoidance=`*(self: NavigationRegion2D; enabled: Bool) {.loadfrom("set_constrain_avoidance", 2586408642).}
  proc constrainAvoidance*(self: NavigationRegion2D): Bool {.loadfrom("get_constrain_avoidance", 36873697).}
  proc `avoidanceLayers=`*(self: NavigationRegion2D; layers: uint32) {.loadfrom("set_avoidance_layers", 1286410249).}
  proc avoidanceLayers*(self: NavigationRegion2D): uint32 {.loadfrom("get_avoidance_layers", 3905245786).}
  proc setAvoidanceLayerValue*(self: NavigationRegion2D; layerNumber: int32; value: Bool) {.loadfrom("set_avoidance_layer_value", 300928843).}
  proc getAvoidanceLayerValue*(self: NavigationRegion2D; layerNumber: int32): Bool {.loadfrom("get_avoidance_layer_value", 1116898809).}
  proc getRegionRid*(self: NavigationRegion2D): RID {.loadfrom("get_region_rid", 2944877500).}
  proc `enterCost=`*(self: NavigationRegion2D; enterCost: Float) {.loadfrom("set_enter_cost", 373806689).}
  proc enterCost*(self: NavigationRegion2D): Float {.loadfrom("get_enter_cost", 1740695150).}
  proc `travelCost=`*(self: NavigationRegion2D; travelCost: Float) {.loadfrom("set_travel_cost", 373806689).}
  proc travelCost*(self: NavigationRegion2D): Float {.loadfrom("get_travel_cost", 1740695150).}

# ParallaxLayer
define_godot_engine_class_essencials(ParallaxLayer, Node2D)
ParallaxLayer.memberProcs:
  proc `motionScale=`*(self: ParallaxLayer; scale: Vector2) {.loadfrom("set_motion_scale", 743155724).}
  proc motionScale*(self: ParallaxLayer): Vector2 {.loadfrom("get_motion_scale", 3341600327).}
  proc `motionOffset=`*(self: ParallaxLayer; offset: Vector2) {.loadfrom("set_motion_offset", 743155724).}
  proc motionOffset*(self: ParallaxLayer): Vector2 {.loadfrom("get_motion_offset", 3341600327).}
  proc `mirroring=`*(self: ParallaxLayer; mirror: Vector2) {.loadfrom("set_mirroring", 743155724).}
  proc mirroring*(self: ParallaxLayer): Vector2 {.loadfrom("get_mirroring", 3341600327).}

# Path2D
define_godot_engine_class_essencials(Path2D, Node2D)
Path2D.memberProcs:
  proc `curve=`*(self: Path2D; curve: Ref[Curve2D]) {.loadfrom("set_curve", 659985499).}
  proc curve*(self: Path2D): Ref[Curve2D] {.loadfrom("get_curve", 660369445).}

# PathFollow2D
define_godot_engine_class_essencials(PathFollow2D, Node2D)
PathFollow2D.memberProcs:
  proc `progress=`*(self: PathFollow2D; progress: Float) {.loadfrom("set_progress", 373806689).}
  proc progress*(self: PathFollow2D): Float {.loadfrom("get_progress", 1740695150).}
  proc `hOffset=`*(self: PathFollow2D; hOffset: Float) {.loadfrom("set_h_offset", 373806689).}
  proc hOffset*(self: PathFollow2D): Float {.loadfrom("get_h_offset", 1740695150).}
  proc `vOffset=`*(self: PathFollow2D; vOffset: Float) {.loadfrom("set_v_offset", 373806689).}
  proc vOffset*(self: PathFollow2D): Float {.loadfrom("get_v_offset", 1740695150).}
  proc `progressRatio=`*(self: PathFollow2D; ratio: Float) {.loadfrom("set_progress_ratio", 373806689).}
  proc progressRatio*(self: PathFollow2D): Float {.loadfrom("get_progress_ratio", 1740695150).}
  proc `rotates=`*(self: PathFollow2D; enabled: Bool) {.loadfrom("set_rotates", 2586408642).}
  proc isRotating*(self: PathFollow2D): Bool {.loadfrom("is_rotating", 36873697).}
  proc `cubicInterpolation=`*(self: PathFollow2D; enabled: Bool) {.loadfrom("set_cubic_interpolation", 2586408642).}
  proc cubicInterpolation*(self: PathFollow2D): Bool {.loadfrom("get_cubic_interpolation", 36873697).}
  proc `loop=`*(self: PathFollow2D; loop: Bool) {.loadfrom("set_loop", 2586408642).}
  proc hasLoop*(self: PathFollow2D): Bool {.loadfrom("has_loop", 36873697).}

# Polygon2D
define_godot_engine_class_essencials(Polygon2D, Node2D)
Polygon2D.memberProcs:
  proc `polygon=`*(self: Polygon2D; polygon: PackedVector2Array) {.loadfrom("set_polygon", 1509147220).}
  proc polygon*(self: Polygon2D): PackedVector2Array {.loadfrom("get_polygon", 2961356807).}
  proc `uv=`*(self: Polygon2D; uv: PackedVector2Array) {.loadfrom("set_uv", 1509147220).}
  proc uv*(self: Polygon2D): PackedVector2Array {.loadfrom("get_uv", 2961356807).}
  proc `color=`*(self: Polygon2D; color: Color) {.loadfrom("set_color", 2920490490).}
  proc color*(self: Polygon2D): Color {.loadfrom("get_color", 3444240500).}
  proc `polygons=`*(self: Polygon2D; polygons: Array) {.loadfrom("set_polygons", 381264803).}
  proc polygons*(self: Polygon2D): Array {.loadfrom("get_polygons", 3995934104).}
  proc `vertexColors=`*(self: Polygon2D; vertexColors: PackedColorArray) {.loadfrom("set_vertex_colors", 3546319833).}
  proc vertexColors*(self: Polygon2D): PackedColorArray {.loadfrom("get_vertex_colors", 1392750486).}
  proc `texture=`*(self: Polygon2D; texture: Ref[Texture2D]) {.loadfrom("set_texture", 4051416890).}
  proc texture*(self: Polygon2D): Ref[Texture2D] {.loadfrom("get_texture", 3635182373).}
  proc `textureOffset=`*(self: Polygon2D; textureOffset: Vector2) {.loadfrom("set_texture_offset", 743155724).}
  proc textureOffset*(self: Polygon2D): Vector2 {.loadfrom("get_texture_offset", 3341600327).}
  proc `textureRotation=`*(self: Polygon2D; textureRotation: Float) {.loadfrom("set_texture_rotation", 373806689).}
  proc textureRotation*(self: Polygon2D): Float {.loadfrom("get_texture_rotation", 1740695150).}
  proc `textureScale=`*(self: Polygon2D; textureScale: Vector2) {.loadfrom("set_texture_scale", 743155724).}
  proc textureScale*(self: Polygon2D): Vector2 {.loadfrom("get_texture_scale", 3341600327).}
  proc `invertEnabled=`*(self: Polygon2D; invert: Bool) {.loadfrom("set_invert_enabled", 2586408642).}
  proc invertEnabled*(self: Polygon2D): Bool {.loadfrom("get_invert_enabled", 36873697).}
  proc `antialiased=`*(self: Polygon2D; antialiased: Bool) {.loadfrom("set_antialiased", 2586408642).}
  proc antialiased*(self: Polygon2D): Bool {.loadfrom("get_antialiased", 36873697).}
  proc `invertBorder=`*(self: Polygon2D; invertBorder: Float) {.loadfrom("set_invert_border", 373806689).}
  proc invertBorder*(self: Polygon2D): Float {.loadfrom("get_invert_border", 1740695150).}
  proc `offset=`*(self: Polygon2D; offset: Vector2) {.loadfrom("set_offset", 743155724).}
  proc offset*(self: Polygon2D): Vector2 {.loadfrom("get_offset", 3341600327).}
  proc addBone*(self: Polygon2D; path: NodePath; weights: PackedFloat32Array) {.loadfrom("add_bone", 703042815).}
  proc getBoneCount*(self: Polygon2D): int32 {.loadfrom("get_bone_count", 3905245786).}
  proc getBonePath*(self: Polygon2D; index: int32): NodePath {.loadfrom("get_bone_path", 408788394).}
  proc getBoneWeights*(self: Polygon2D; index: int32): PackedFloat32Array {.loadfrom("get_bone_weights", 1542882410).}
  proc eraseBone*(self: Polygon2D; index: int32) {.loadfrom("erase_bone", 1286410249).}
  proc clearBones*(self: Polygon2D) {.loadfrom("clear_bones", 3218959716).}
  proc setBonePath*(self: Polygon2D; index: int32; path: NodePath) {.loadfrom("set_bone_path", 2761262315).}
  proc setBoneWeights*(self: Polygon2D; index: int32; weights: PackedFloat32Array) {.loadfrom("set_bone_weights", 1345852415).}
  proc `skeleton=`*(self: Polygon2D; skeleton: NodePath) {.loadfrom("set_skeleton", 1348162250).}
  proc skeleton*(self: Polygon2D): NodePath {.loadfrom("get_skeleton", 4075236667).}
  proc `internalVertexCount=`*(self: Polygon2D; internalVertexCount: int32) {.loadfrom("set_internal_vertex_count", 1286410249).}
  proc internalVertexCount*(self: Polygon2D): int32 {.loadfrom("get_internal_vertex_count", 3905245786).}

# RayCast2D
define_godot_engine_class_essencials(RayCast2D, Node2D)
RayCast2D.memberProcs:
  proc `enabled=`*(self: RayCast2D; enabled: Bool) {.loadfrom("set_enabled", 2586408642).}
  proc isEnabled*(self: RayCast2D): Bool {.loadfrom("is_enabled", 36873697).}
  proc `targetPosition=`*(self: RayCast2D; localPoint: Vector2) {.loadfrom("set_target_position", 743155724).}
  proc tarposition*(self: RayCast2D): Vector2 {.loadfrom("get_target_position", 3341600327).}
  proc isColliding*(self: RayCast2D): Bool {.loadfrom("is_colliding", 36873697).}
  proc forceRaycastUpdate*(self: RayCast2D) {.loadfrom("force_raycast_update", 3218959716).}
  proc getCollider*(self: RayCast2D): Object {.loadfrom("get_collider", 1981248198).}
  proc getColliderRid*(self: RayCast2D): RID {.loadfrom("get_collider_rid", 2944877500).}
  proc getColliderShape*(self: RayCast2D): int32 {.loadfrom("get_collider_shape", 3905245786).}
  proc getCollisionPoint*(self: RayCast2D): Vector2 {.loadfrom("get_collision_point", 3341600327).}
  proc getCollisionNormal*(self: RayCast2D): Vector2 {.loadfrom("get_collision_normal", 3341600327).}
  proc addExceptionRid*(self: RayCast2D; rid: RID) {.loadfrom("add_exception_rid", 2722037293).}
  proc addException*(self: RayCast2D; node: CollisionObject2D) {.loadfrom("add_exception", 3090941106).}
  proc removeExceptionRid*(self: RayCast2D; rid: RID) {.loadfrom("remove_exception_rid", 2722037293).}
  proc removeException*(self: RayCast2D; node: CollisionObject2D) {.loadfrom("remove_exception", 3090941106).}
  proc clearExceptions*(self: RayCast2D) {.loadfrom("clear_exceptions", 3218959716).}
  proc `collisionMask=`*(self: RayCast2D; mask: uint32) {.loadfrom("set_collision_mask", 1286410249).}
  proc collisionMask*(self: RayCast2D): uint32 {.loadfrom("get_collision_mask", 3905245786).}
  proc setCollisionMaskValue*(self: RayCast2D; layerNumber: int32; value: Bool) {.loadfrom("set_collision_mask_value", 300928843).}
  proc getCollisionMaskValue*(self: RayCast2D; layerNumber: int32): Bool {.loadfrom("get_collision_mask_value", 1116898809).}
  proc `excludeParentBody=`*(self: RayCast2D; mask: Bool) {.loadfrom("set_exclude_parent_body", 2586408642).}
  proc excludeParentBody*(self: RayCast2D): Bool {.loadfrom("get_exclude_parent_body", 36873697).}
  proc `collideWithAreas=`*(self: RayCast2D; enable: Bool) {.loadfrom("set_collide_with_areas", 2586408642).}
  proc isCollideWithAreasEnabled*(self: RayCast2D): Bool {.loadfrom("is_collide_with_areas_enabled", 36873697).}
  proc `collideWithBodies=`*(self: RayCast2D; enable: Bool) {.loadfrom("set_collide_with_bodies", 2586408642).}
  proc isCollideWithBodiesEnabled*(self: RayCast2D): Bool {.loadfrom("is_collide_with_bodies_enabled", 36873697).}
  proc `hitFromInside=`*(self: RayCast2D; enable: Bool) {.loadfrom("set_hit_from_inside", 2586408642).}
  proc isHitFromInsideEnabled*(self: RayCast2D): Bool {.loadfrom("is_hit_from_inside_enabled", 36873697).}

# RemoteTransform2D
define_godot_engine_class_essencials(RemoteTransform2D, Node2D)
RemoteTransform2D.memberProcs:
  proc `remoteNode=`*(self: RemoteTransform2D; path: NodePath) {.loadfrom("set_remote_node", 1348162250).}
  proc remoteNode*(self: RemoteTransform2D): NodePath {.loadfrom("get_remote_node", 4075236667).}
  proc forceUpdateCache*(self: RemoteTransform2D) {.loadfrom("force_update_cache", 3218959716).}
  proc `useGlobalCoordinates=`*(self: RemoteTransform2D; useGlobalCoordinates: Bool) {.loadfrom("set_use_global_coordinates", 2586408642).}
  proc useGlobalCoordinates*(self: RemoteTransform2D): Bool {.loadfrom("get_use_global_coordinates", 36873697).}
  proc `updatePosition=`*(self: RemoteTransform2D; updateRemotePosition: Bool) {.loadfrom("set_update_position", 2586408642).}
  proc updatePosition*(self: RemoteTransform2D): Bool {.loadfrom("get_update_position", 36873697).}
  proc `updateRotation=`*(self: RemoteTransform2D; updateRemoteRotation: Bool) {.loadfrom("set_update_rotation", 2586408642).}
  proc updateRotation*(self: RemoteTransform2D): Bool {.loadfrom("get_update_rotation", 36873697).}
  proc `updateScale=`*(self: RemoteTransform2D; updateRemoteScale: Bool) {.loadfrom("set_update_scale", 2586408642).}
  proc updateScale*(self: RemoteTransform2D): Bool {.loadfrom("get_update_scale", 36873697).}

# ShapeCast2D
define_godot_engine_class_essencials(ShapeCast2D, Node2D)
ShapeCast2D.memberProcs:
  proc `enabled=`*(self: ShapeCast2D; enabled: Bool) {.loadfrom("set_enabled", 2586408642).}
  proc isEnabled*(self: ShapeCast2D): Bool {.loadfrom("is_enabled", 36873697).}
  proc `shape=`*(self: ShapeCast2D; shape: Ref[Shape2D]) {.loadfrom("set_shape", 771364740).}
  proc shape*(self: ShapeCast2D): Ref[Shape2D] {.loadfrom("get_shape", 522005891).}
  proc `targetPosition=`*(self: ShapeCast2D; localPoint: Vector2) {.loadfrom("set_target_position", 743155724).}
  proc tarposition*(self: ShapeCast2D): Vector2 {.loadfrom("get_target_position", 3341600327).}
  proc `margin=`*(self: ShapeCast2D; margin: Float) {.loadfrom("set_margin", 373806689).}
  proc margin*(self: ShapeCast2D): Float {.loadfrom("get_margin", 1740695150).}
  proc `maxResults=`*(self: ShapeCast2D; maxRetvals: int32) {.loadfrom("set_max_results", 1286410249).}
  proc maxResults*(self: ShapeCast2D): int32 {.loadfrom("get_max_results", 3905245786).}
  proc isColliding*(self: ShapeCast2D): Bool {.loadfrom("is_colliding", 36873697).}
  proc getCollisionCount*(self: ShapeCast2D): int32 {.loadfrom("get_collision_count", 3905245786).}
  proc forceShapecastUpdate*(self: ShapeCast2D) {.loadfrom("force_shapecast_update", 3218959716).}
  proc getCollider*(self: ShapeCast2D; index: int32): Object {.loadfrom("get_collider", 3332903315).}
  proc getColliderRid*(self: ShapeCast2D; index: int32): RID {.loadfrom("get_collider_rid", 495598643).}
  proc getColliderShape*(self: ShapeCast2D; index: int32): int32 {.loadfrom("get_collider_shape", 923996154).}
  proc getCollisionPoint*(self: ShapeCast2D; index: int32): Vector2 {.loadfrom("get_collision_point", 2299179447).}
  proc getCollisionNormal*(self: ShapeCast2D; index: int32): Vector2 {.loadfrom("get_collision_normal", 2299179447).}
  proc getClosestCollisionSafeFraction*(self: ShapeCast2D): Float {.loadfrom("get_closest_collision_safe_fraction", 1740695150).}
  proc getClosestCollisionUnsafeFraction*(self: ShapeCast2D): Float {.loadfrom("get_closest_collision_unsafe_fraction", 1740695150).}
  proc addExceptionRid*(self: ShapeCast2D; rid: RID) {.loadfrom("add_exception_rid", 2722037293).}
  proc addException*(self: ShapeCast2D; node: CollisionObject2D) {.loadfrom("add_exception", 3090941106).}
  proc removeExceptionRid*(self: ShapeCast2D; rid: RID) {.loadfrom("remove_exception_rid", 2722037293).}
  proc removeException*(self: ShapeCast2D; node: CollisionObject2D) {.loadfrom("remove_exception", 3090941106).}
  proc clearExceptions*(self: ShapeCast2D) {.loadfrom("clear_exceptions", 3218959716).}
  proc `collisionMask=`*(self: ShapeCast2D; mask: uint32) {.loadfrom("set_collision_mask", 1286410249).}
  proc collisionMask*(self: ShapeCast2D): uint32 {.loadfrom("get_collision_mask", 3905245786).}
  proc setCollisionMaskValue*(self: ShapeCast2D; layerNumber: int32; value: Bool) {.loadfrom("set_collision_mask_value", 300928843).}
  proc getCollisionMaskValue*(self: ShapeCast2D; layerNumber: int32): Bool {.loadfrom("get_collision_mask_value", 1116898809).}
  proc `excludeParentBody=`*(self: ShapeCast2D; mask: Bool) {.loadfrom("set_exclude_parent_body", 2586408642).}
  proc excludeParentBody*(self: ShapeCast2D): Bool {.loadfrom("get_exclude_parent_body", 36873697).}
  proc `collideWithAreas=`*(self: ShapeCast2D; enable: Bool) {.loadfrom("set_collide_with_areas", 2586408642).}
  proc isCollideWithAreasEnabled*(self: ShapeCast2D): Bool {.loadfrom("is_collide_with_areas_enabled", 36873697).}
  proc `collideWithBodies=`*(self: ShapeCast2D; enable: Bool) {.loadfrom("set_collide_with_bodies", 2586408642).}
  proc isCollideWithBodiesEnabled*(self: ShapeCast2D): Bool {.loadfrom("is_collide_with_bodies_enabled", 36873697).}

# Skeleton2D
define_godot_engine_class_essencials(Skeleton2D, Node2D)
Skeleton2D.memberProcs:
  proc getBoneCount*(self: Skeleton2D): int32 {.loadfrom("get_bone_count", 3905245786).}
  proc getBone*(self: Skeleton2D; idx: int32): Bone2D {.loadfrom("get_bone", 2556267111).}
  proc getSkeleton*(self: Skeleton2D): RID {.loadfrom("get_skeleton", 2944877500).}
  proc setModificationStack*(self: Skeleton2D; modificationStack: Ref[SkeletonModificationStack2D]) {.loadfrom("set_modification_stack", 3907307132).}
  proc getModificationStack*(self: Skeleton2D): Ref[SkeletonModificationStack2D] {.loadfrom("get_modification_stack", 2107508396).}
  proc executeModifications*(self: Skeleton2D; delta: Float; executionMode: int32) {.loadfrom("execute_modifications", 1005356550).}
  proc setBoneLocalPoseOverride*(self: Skeleton2D; boneIdx: int32; overridePose: Transform2D; strength: Float; persistent: Bool) {.loadfrom("set_bone_local_pose_override", 555457532).}
  proc getBoneLocalPoseOverride*(self: Skeleton2D; boneIdx: int32): Transform2D {.loadfrom("get_bone_local_pose_override", 2995540667).}

# Sprite2D
define_godot_engine_class_essencials(Sprite2D, Node2D)
Sprite2D.memberProcs:
  proc `texture=`*(self: Sprite2D; texture: Ref[Texture2D]) {.loadfrom("set_texture", 4051416890).}
  proc texture*(self: Sprite2D): Ref[Texture2D] {.loadfrom("get_texture", 3635182373).}
  proc `centered=`*(self: Sprite2D; centered: Bool) {.loadfrom("set_centered", 2586408642).}
  proc isCentered*(self: Sprite2D): Bool {.loadfrom("is_centered", 36873697).}
  proc `offset=`*(self: Sprite2D; offset: Vector2) {.loadfrom("set_offset", 743155724).}
  proc offset*(self: Sprite2D): Vector2 {.loadfrom("get_offset", 3341600327).}
  proc `flipH=`*(self: Sprite2D; flipH: Bool) {.loadfrom("set_flip_h", 2586408642).}
  proc isFlippedH*(self: Sprite2D): Bool {.loadfrom("is_flipped_h", 36873697).}
  proc `flipV=`*(self: Sprite2D; flipV: Bool) {.loadfrom("set_flip_v", 2586408642).}
  proc isFlippedV*(self: Sprite2D): Bool {.loadfrom("is_flipped_v", 36873697).}
  proc `regionEnabled=`*(self: Sprite2D; enabled: Bool) {.loadfrom("set_region_enabled", 2586408642).}
  proc isRegionEnabled*(self: Sprite2D): Bool {.loadfrom("is_region_enabled", 36873697).}
  proc isPixelOpaque*(self: Sprite2D; pos: Vector2): Bool {.loadfrom("is_pixel_opaque", 556197845).}
  proc `regionRect=`*(self: Sprite2D; rect: Rect2) {.loadfrom("set_region_rect", 2046264180).}
  proc regionRect*(self: Sprite2D): Rect2 {.loadfrom("get_region_rect", 1639390495).}
  proc `regionFilterClipEnabled=`*(self: Sprite2D; enabled: Bool) {.loadfrom("set_region_filter_clip_enabled", 2586408642).}
  proc isRegionFilterClipEnabled*(self: Sprite2D): Bool {.loadfrom("is_region_filter_clip_enabled", 36873697).}
  proc `frame=`*(self: Sprite2D; frame: int32) {.loadfrom("set_frame", 1286410249).}
  proc frame*(self: Sprite2D): int32 {.loadfrom("get_frame", 3905245786).}
  proc `frameCoords=`*(self: Sprite2D; coords: Vector2i) {.loadfrom("set_frame_coords", 1130785943).}
  proc frameCoords*(self: Sprite2D): Vector2i {.loadfrom("get_frame_coords", 3690982128).}
  proc `vframes=`*(self: Sprite2D; vframes: int32) {.loadfrom("set_vframes", 1286410249).}
  proc vframes*(self: Sprite2D): int32 {.loadfrom("get_vframes", 3905245786).}
  proc `hframes=`*(self: Sprite2D; hframes: int32) {.loadfrom("set_hframes", 1286410249).}
  proc hframes*(self: Sprite2D): int32 {.loadfrom("get_hframes", 3905245786).}
  proc getRect*(self: Sprite2D): Rect2 {.loadfrom("get_rect", 1639390495).}

# TileMap
define_godot_engine_class_essencials(TileMap, Node2D)
method useTileDataRuntimeUpdate*(self: TileMap; layer: int32; coords: Vector2i): Bool {.base.} = (discard)
method tileDataRuntimeUpdate*(self: TileMap; layer: int32; coords: Vector2i; tileData: TileData) {.base.} = (discard)
TileMap.memberProcs:
  proc `tileset=`*(self: TileMap; tileset: Ref[TileSet]) {.loadfrom("set_tileset", 774531446).}
  proc tileset*(self: TileMap): Ref[TileSet] {.loadfrom("get_tileset", 2678226422).}
  proc `quadrantSize=`*(self: TileMap; size: int32) {.loadfrom("set_quadrant_size", 1286410249).}
  proc quadrantSize*(self: TileMap): int32 {.loadfrom("get_quadrant_size", 3905245786).}
  proc getLayersCount*(self: TileMap): int32 {.loadfrom("get_layers_count", 3905245786).}
  proc addLayer*(self: TileMap; toPosition: int32) {.loadfrom("add_layer", 1286410249).}
  proc moveLayer*(self: TileMap; layer: int32; toPosition: int32) {.loadfrom("move_layer", 3937882851).}
  proc removeLayer*(self: TileMap; layer: int32) {.loadfrom("remove_layer", 1286410249).}
  proc setLayerName*(self: TileMap; layer: int32; name: String) {.loadfrom("set_layer_name", 501894301).}
  proc getLayerName*(self: TileMap; layer: int32): String {.loadfrom("get_layer_name", 844755477).}
  proc setLayerEnabled*(self: TileMap; layer: int32; enabled: Bool) {.loadfrom("set_layer_enabled", 300928843).}
  proc isLayerEnabled*(self: TileMap; layer: int32): Bool {.loadfrom("is_layer_enabled", 1116898809).}
  proc setLayerModulate*(self: TileMap; layer: int32; modulate: Color) {.loadfrom("set_layer_modulate", 2878471219).}
  proc getLayerModulate*(self: TileMap; layer: int32): Color {.loadfrom("get_layer_modulate", 3457211756).}
  proc setLayerYSortEnabled*(self: TileMap; layer: int32; ySortEnabled: Bool) {.loadfrom("set_layer_y_sort_enabled", 300928843).}
  proc isLayerYSortEnabled*(self: TileMap; layer: int32): Bool {.loadfrom("is_layer_y_sort_enabled", 1116898809).}
  proc setLayerYSortOrigin*(self: TileMap; layer: int32; ySortOrigin: int32) {.loadfrom("set_layer_y_sort_origin", 3937882851).}
  proc getLayerYSortOrigin*(self: TileMap; layer: int32): int32 {.loadfrom("get_layer_y_sort_origin", 923996154).}
  proc setLayerZIndex*(self: TileMap; layer: int32; zIndex: int32) {.loadfrom("set_layer_z_index", 3937882851).}
  proc getLayerZIndex*(self: TileMap; layer: int32): int32 {.loadfrom("get_layer_z_index", 923996154).}
  proc `collisionAnimatable=`*(self: TileMap; enabled: Bool) {.loadfrom("set_collision_animatable", 2586408642).}
  proc isCollisionAnimatable*(self: TileMap): Bool {.loadfrom("is_collision_animatable", 36873697).}
  proc `collisionVisibilityMode=`*(self: TileMap; collisionVisibilityMode: TileMap|>VisibilityMode) {.loadfrom("set_collision_visibility_mode", 3193440636).}
  proc collisionVisibilityMode*(self: TileMap): TileMap|>VisibilityMode {.loadfrom("get_collision_visibility_mode", 2026313073).}
  proc `navigationVisibilityMode=`*(self: TileMap; navigationVisibilityMode: TileMap|>VisibilityMode) {.loadfrom("set_navigation_visibility_mode", 3193440636).}
  proc navigationVisibilityMode*(self: TileMap): TileMap|>VisibilityMode {.loadfrom("get_navigation_visibility_mode", 2026313073).}
  proc setNavigationMap*(self: TileMap; layer: int32; map: RID) {.loadfrom("set_navigation_map", 4040184819).}
  proc getNavigationMap*(self: TileMap; layer: int32): RID {.loadfrom("get_navigation_map", 495598643).}
  proc setCell*(self: TileMap; layer: int32; coords: Vector2i; sourceId: int32 = -1; atlasCoords: Vector2i = gdveci(-1, -1); alternativeTile: int32 = 0) {.loadfrom("set_cell", 1732664643).}
  proc eraseCell*(self: TileMap; layer: int32; coords: Vector2i) {.loadfrom("erase_cell", 2311374912).}
  proc getCellSourceId*(self: TileMap; layer: int32; coords: Vector2i; useProxies: Bool = false): int32 {.loadfrom("get_cell_source_id", 551761942).}
  proc getCellAtlasCoords*(self: TileMap; layer: int32; coords: Vector2i; useProxies: Bool = false): Vector2i {.loadfrom("get_cell_atlas_coords", 1869815066).}
  proc getCellAlternativeTile*(self: TileMap; layer: int32; coords: Vector2i; useProxies: Bool = false): int32 {.loadfrom("get_cell_alternative_tile", 551761942).}
  proc getCellTileData*(self: TileMap; layer: int32; coords: Vector2i; useProxies: Bool = false): TileData {.loadfrom("get_cell_tile_data", 2849631287).}
  proc getCoordsForBodyRid*(self: TileMap; body: RID): Vector2i {.loadfrom("get_coords_for_body_rid", 291584212).}
  proc getLayerForBodyRid*(self: TileMap; body: RID): int32 {.loadfrom("get_layer_for_body_rid", 3917799429).}
  proc getPattern*(self: TileMap; layer: int32; coordsArray: TypedArray[Vector2i]): Ref[TileMapPattern] {.loadfrom("get_pattern", 2833570986).}
  proc mapPattern*(self: TileMap; positionInTilemap: Vector2i; coordsInPattern: Vector2i; pattern: Ref[TileMapPattern]): Vector2i {.loadfrom("map_pattern", 1864516957).}
  proc setPattern*(self: TileMap; layer: int32; position: Vector2i; pattern: Ref[TileMapPattern]) {.loadfrom("set_pattern", 1195853946).}
  proc setCellsTerrainConnect*(self: TileMap; layer: int32; cells: TypedArray[Vector2i]; terrainSet: int32; terrain: int32; ignoreEmptyTerrains: Bool = true) {.loadfrom("set_cells_terrain_connect", 3072115677).}
  proc setCellsTerrainPath*(self: TileMap; layer: int32; path: TypedArray[Vector2i]; terrainSet: int32; terrain: int32; ignoreEmptyTerrains: Bool = true) {.loadfrom("set_cells_terrain_path", 3072115677).}
  proc fixInvalidTiles*(self: TileMap) {.loadfrom("fix_invalid_tiles", 3218959716).}
  proc clearLayer*(self: TileMap; layer: int32) {.loadfrom("clear_layer", 1286410249).}
  proc clear*(self: TileMap) {.loadfrom("clear", 3218959716).}
  proc forceUpdate*(self: TileMap; layer: int32 = -1) {.loadfrom("force_update", 1025054187).}
  proc getSurroundingCells*(self: TileMap; coords: Vector2i): TypedArray[Vector2i] {.loadfrom("get_surrounding_cells", 2673526557).}
  proc getUsedCells*(self: TileMap; layer: int32): TypedArray[Vector2i] {.loadfrom("get_used_cells", 663333327).}
  proc getUsedCellsById*(self: TileMap; layer: int32; sourceId: int32 = -1; atlasCoords: Vector2i = gdveci(-1, -1); alternativeTile: int32 = -1): TypedArray[Vector2i] {.loadfrom("get_used_cells_by_id", 4152068407).}
  proc getUsedRect*(self: TileMap): Rect2i {.loadfrom("get_used_rect", 2024035737).}
  proc mapToLocal*(self: TileMap; mapPosition: Vector2i): Vector2 {.loadfrom("map_to_local", 108438297).}
  proc localToMap*(self: TileMap; localPosition: Vector2): Vector2i {.loadfrom("local_to_map", 837806996).}
  proc getNeighborCell*(self: TileMap; coords: Vector2i; neighbor: TileSet|>CellNeighbor): Vector2i {.loadfrom("get_neighbor_cell", 986575103).}

# TouchScreenButton
define_godot_engine_class_essencials(TouchScreenButton, Node2D)
TouchScreenButton.memberProcs:
  proc `textureNormal=`*(self: TouchScreenButton; texture: Ref[Texture2D]) {.loadfrom("set_texture_normal", 4051416890).}
  proc textureNormal*(self: TouchScreenButton): Ref[Texture2D] {.loadfrom("get_texture_normal", 3635182373).}
  proc `texturePressed=`*(self: TouchScreenButton; texture: Ref[Texture2D]) {.loadfrom("set_texture_pressed", 4051416890).}
  proc texturePressed*(self: TouchScreenButton): Ref[Texture2D] {.loadfrom("get_texture_pressed", 3635182373).}
  proc `bitmask=`*(self: TouchScreenButton; bitmask: Ref[BitMap]) {.loadfrom("set_bitmask", 698588216).}
  proc bitmask*(self: TouchScreenButton): Ref[BitMap] {.loadfrom("get_bitmask", 2459671998).}
  proc `shape=`*(self: TouchScreenButton; shape: Ref[Shape2D]) {.loadfrom("set_shape", 771364740).}
  proc shape*(self: TouchScreenButton): Ref[Shape2D] {.loadfrom("get_shape", 522005891).}
  proc `shapeCentered=`*(self: TouchScreenButton; bool: Bool) {.loadfrom("set_shape_centered", 2586408642).}
  proc isShapeCentered*(self: TouchScreenButton): Bool {.loadfrom("is_shape_centered", 36873697).}
  proc `shapeVisible=`*(self: TouchScreenButton; bool: Bool) {.loadfrom("set_shape_visible", 2586408642).}
  proc isShapeVisible*(self: TouchScreenButton): Bool {.loadfrom("is_shape_visible", 36873697).}
  proc `action=`*(self: TouchScreenButton; action: String) {.loadfrom("set_action", 83702148).}
  proc action*(self: TouchScreenButton): String {.loadfrom("get_action", 201670096).}
  proc `visibilityMode=`*(self: TouchScreenButton; mode: TouchScreenButton|>VisibilityMode) {.loadfrom("set_visibility_mode", 3031128463).}
  proc visibilityMode*(self: TouchScreenButton): TouchScreenButton|>VisibilityMode {.loadfrom("get_visibility_mode", 2558996468).}
  proc `passbyPress=`*(self: TouchScreenButton; enabled: Bool) {.loadfrom("set_passby_press", 2586408642).}
  proc isPassbyPressEnabled*(self: TouchScreenButton): Bool {.loadfrom("is_passby_press_enabled", 36873697).}
  proc isPressed*(self: TouchScreenButton): Bool {.loadfrom("is_pressed", 36873697).}

# VisibleOnScreenNotifier2D
define_godot_engine_class_essencials(VisibleOnScreenNotifier2D, Node2D)
VisibleOnScreenNotifier2D.memberProcs:
  proc `rect=`*(self: VisibleOnScreenNotifier2D; rect: Rect2) {.loadfrom("set_rect", 2046264180).}
  proc rect*(self: VisibleOnScreenNotifier2D): Rect2 {.loadfrom("get_rect", 1639390495).}
  proc isOnScreen*(self: VisibleOnScreenNotifier2D): Bool {.loadfrom("is_on_screen", 36873697).}

# XRCamera3D
define_godot_engine_class_essencials(XRCamera3D, Camera3D)

# Area3D
define_godot_engine_class_essencials(Area3D, CollisionObject3D)
Area3D.memberProcs:
  proc `gravitySpaceOverrideMode=`*(self: Area3D; spaceOverrideMode: Area3D|>SpaceOverride) {.loadfrom("set_gravity_space_override_mode", 2311433571).}
  proc gravitySpaceOverrideMode*(self: Area3D): Area3D|>SpaceOverride {.loadfrom("get_gravity_space_override_mode", 958191869).}
  proc `gravityIsPoint=`*(self: Area3D; enable: Bool) {.loadfrom("set_gravity_is_point", 2586408642).}
  proc isGravityAPoint*(self: Area3D): Bool {.loadfrom("is_gravity_a_point", 36873697).}
  proc `gravityPointUnitDistance=`*(self: Area3D; distanceScale: Float) {.loadfrom("set_gravity_point_unit_distance", 373806689).}
  proc gravityPointUnitDistance*(self: Area3D): Float {.loadfrom("get_gravity_point_unit_distance", 1740695150).}
  proc `gravityPointCenter=`*(self: Area3D; center: Vector3) {.loadfrom("set_gravity_point_center", 3460891852).}
  proc gravityPointCenter*(self: Area3D): Vector3 {.loadfrom("get_gravity_point_center", 3360562783).}
  proc `gravityDirection=`*(self: Area3D; direction: Vector3) {.loadfrom("set_gravity_direction", 3460891852).}
  proc gravityDirection*(self: Area3D): Vector3 {.loadfrom("get_gravity_direction", 3360562783).}
  proc `gravity=`*(self: Area3D; gravity: Float) {.loadfrom("set_gravity", 373806689).}
  proc gravity*(self: Area3D): Float {.loadfrom("get_gravity", 1740695150).}
  proc `linearDampSpaceOverrideMode=`*(self: Area3D; spaceOverrideMode: Area3D|>SpaceOverride) {.loadfrom("set_linear_damp_space_override_mode", 2311433571).}
  proc linearDampSpaceOverrideMode*(self: Area3D): Area3D|>SpaceOverride {.loadfrom("get_linear_damp_space_override_mode", 958191869).}
  proc `angularDampSpaceOverrideMode=`*(self: Area3D; spaceOverrideMode: Area3D|>SpaceOverride) {.loadfrom("set_angular_damp_space_override_mode", 2311433571).}
  proc angularDampSpaceOverrideMode*(self: Area3D): Area3D|>SpaceOverride {.loadfrom("get_angular_damp_space_override_mode", 958191869).}
  proc `angularDamp=`*(self: Area3D; angularDamp: Float) {.loadfrom("set_angular_damp", 373806689).}
  proc angularDamp*(self: Area3D): Float {.loadfrom("get_angular_damp", 1740695150).}
  proc `linearDamp=`*(self: Area3D; linearDamp: Float) {.loadfrom("set_linear_damp", 373806689).}
  proc linearDamp*(self: Area3D): Float {.loadfrom("get_linear_damp", 1740695150).}
  proc `priority=`*(self: Area3D; priority: int32) {.loadfrom("set_priority", 1286410249).}
  proc priority*(self: Area3D): int32 {.loadfrom("get_priority", 3905245786).}
  proc `windForceMagnitude=`*(self: Area3D; windForceMagnitude: Float) {.loadfrom("set_wind_force_magnitude", 373806689).}
  proc windForceMagnitude*(self: Area3D): Float {.loadfrom("get_wind_force_magnitude", 1740695150).}
  proc `windAttenuationFactor=`*(self: Area3D; windAttenuationFactor: Float) {.loadfrom("set_wind_attenuation_factor", 373806689).}
  proc windAttenuationFactor*(self: Area3D): Float {.loadfrom("get_wind_attenuation_factor", 1740695150).}
  proc `windSourcePath=`*(self: Area3D; windSourcePath: NodePath) {.loadfrom("set_wind_source_path", 1348162250).}
  proc windSourcePath*(self: Area3D): NodePath {.loadfrom("get_wind_source_path", 4075236667).}
  proc `monitorable=`*(self: Area3D; enable: Bool) {.loadfrom("set_monitorable", 2586408642).}
  proc isMonitorable*(self: Area3D): Bool {.loadfrom("is_monitorable", 36873697).}
  proc `monitoring=`*(self: Area3D; enable: Bool) {.loadfrom("set_monitoring", 2586408642).}
  proc isMonitoring*(self: Area3D): Bool {.loadfrom("is_monitoring", 36873697).}
  proc getOverlappingBodies*(self: Area3D): TypedArray[Node3D] {.loadfrom("get_overlapping_bodies", 3995934104).}
  proc getOverlappingAreas*(self: Area3D): TypedArray[Area3D] {.loadfrom("get_overlapping_areas", 3995934104).}
  proc hasOverlappingBodies*(self: Area3D): Bool {.loadfrom("has_overlapping_bodies", 36873697).}
  proc hasOverlappingAreas*(self: Area3D): Bool {.loadfrom("has_overlapping_areas", 36873697).}
  proc overlapsBody*(self: Area3D; body: ptr Node): Bool {.loadfrom("overlaps_body", 3093956946).}
  proc overlapsArea*(self: Area3D; area: ptr Node): Bool {.loadfrom("overlaps_area", 3093956946).}
  proc `audioBusOverride=`*(self: Area3D; enable: Bool) {.loadfrom("set_audio_bus_override", 2586408642).}
  proc isOverridingAudioBus*(self: Area3D): Bool {.loadfrom("is_overriding_audio_bus", 36873697).}
  proc `audioBusName=`*(self: Area3D; name: StringName) {.loadfrom("set_audio_bus_name", 3304788590).}
  proc audioBusName*(self: Area3D): StringName {.loadfrom("get_audio_bus_name", 2002593661).}
  proc `useReverbBus=`*(self: Area3D; enable: Bool) {.loadfrom("set_use_reverb_bus", 2586408642).}
  proc isUsingReverbBus*(self: Area3D): Bool {.loadfrom("is_using_reverb_bus", 36873697).}
  proc `reverbBusName=`*(self: Area3D; name: StringName) {.loadfrom("set_reverb_bus_name", 3304788590).}
  proc reverbBusName*(self: Area3D): StringName {.loadfrom("get_reverb_bus_name", 2002593661).}
  proc `reverbAmount=`*(self: Area3D; amount: Float) {.loadfrom("set_reverb_amount", 373806689).}
  proc reverbAmount*(self: Area3D): Float {.loadfrom("get_reverb_amount", 1740695150).}
  proc `reverbUniformity=`*(self: Area3D; amount: Float) {.loadfrom("set_reverb_uniformity", 373806689).}
  proc reverbUniformity*(self: Area3D): Float {.loadfrom("get_reverb_uniformity", 1740695150).}

# PhysicsBody3D
define_godot_engine_class_essencials(PhysicsBody3D, CollisionObject3D)
PhysicsBody3D.memberProcs:
  proc moveAndCollide*(self: PhysicsBody3D; motion: Vector3; testOnly: Bool = false; safeMargin: Float = 0.001; recoveryAsCollision: Bool = false; maxCollisions: int32 = 1): Ref[KinematicCollision3D] {.loadfrom("move_and_collide", 2825704414).}
  proc testMove*(self: PhysicsBody3D; `from`: Transform3D; motion: Vector3; collision: Ref[KinematicCollision3D] = default Ref[KinematicCollision3D]; safeMargin: Float = 0.001; recoveryAsCollision: Bool = false; maxCollisions: int32 = 1): Bool {.loadfrom("test_move", 680299713).}
  proc `axisLock=`*(self: PhysicsBody3D; axis: PhysicsServer3D|>BodyAxis; lock: Bool) {.loadfrom("set_axis_lock", 1787895195).}
  proc axisLock*(self: PhysicsBody3D; axis: PhysicsServer3D|>BodyAxis): Bool {.loadfrom("get_axis_lock", 2264617709).}
  proc getCollisionExceptions*(self: PhysicsBody3D): TypedArray[PhysicsBody3D] {.loadfrom("get_collision_exceptions", 2915620761).}
  proc addCollisionExceptionWith*(self: PhysicsBody3D; body: ptr Node) {.loadfrom("add_collision_exception_with", 1078189570).}
  proc removeCollisionExceptionWith*(self: PhysicsBody3D; body: ptr Node) {.loadfrom("remove_collision_exception_with", 1078189570).}

# ConeTwistJoint3D
define_godot_engine_class_essencials(ConeTwistJoint3D, Joint3D)
ConeTwistJoint3D.memberProcs:
  proc `param=`*(self: ConeTwistJoint3D; param: ConeTwistJoint3D|>Param; value: Float) {.loadfrom("set_param", 1062470226).}
  proc param*(self: ConeTwistJoint3D; param: ConeTwistJoint3D|>Param): Float {.loadfrom("get_param", 2928790850).}

# Generic6DOFJoint3D
define_godot_engine_class_essencials(Generic6DOFJoint3D, Joint3D)
Generic6DOFJoint3D.memberProcs:
  proc setParamX*(self: Generic6DOFJoint3D; param: Generic6DOFJoint3D|>Param; value: Float) {.loadfrom("set_param_x", 2018184242).}
  proc getParamX*(self: Generic6DOFJoint3D; param: Generic6DOFJoint3D|>Param): Float {.loadfrom("get_param_x", 2599835054).}
  proc setParamY*(self: Generic6DOFJoint3D; param: Generic6DOFJoint3D|>Param; value: Float) {.loadfrom("set_param_y", 2018184242).}
  proc getParamY*(self: Generic6DOFJoint3D; param: Generic6DOFJoint3D|>Param): Float {.loadfrom("get_param_y", 2599835054).}
  proc setParamZ*(self: Generic6DOFJoint3D; param: Generic6DOFJoint3D|>Param; value: Float) {.loadfrom("set_param_z", 2018184242).}
  proc getParamZ*(self: Generic6DOFJoint3D; param: Generic6DOFJoint3D|>Param): Float {.loadfrom("get_param_z", 2599835054).}
  proc setFlagX*(self: Generic6DOFJoint3D; flag: Generic6DOFJoint3D|>Flag; value: Bool) {.loadfrom("set_flag_x", 2451594564).}
  proc getFlagX*(self: Generic6DOFJoint3D; flag: Generic6DOFJoint3D|>Flag): Bool {.loadfrom("get_flag_x", 2122427807).}
  proc setFlagY*(self: Generic6DOFJoint3D; flag: Generic6DOFJoint3D|>Flag; value: Bool) {.loadfrom("set_flag_y", 2451594564).}
  proc getFlagY*(self: Generic6DOFJoint3D; flag: Generic6DOFJoint3D|>Flag): Bool {.loadfrom("get_flag_y", 2122427807).}
  proc setFlagZ*(self: Generic6DOFJoint3D; flag: Generic6DOFJoint3D|>Flag; value: Bool) {.loadfrom("set_flag_z", 2451594564).}
  proc getFlagZ*(self: Generic6DOFJoint3D; flag: Generic6DOFJoint3D|>Flag): Bool {.loadfrom("get_flag_z", 2122427807).}

# HingeJoint3D
define_godot_engine_class_essencials(HingeJoint3D, Joint3D)
HingeJoint3D.memberProcs:
  proc setParam*(self: HingeJoint3D; param: HingeJoint3D|>Param; value: Float) {.loadfrom("set_param", 3082977519).}
  proc getParam*(self: HingeJoint3D; param: HingeJoint3D|>Param): Float {.loadfrom("get_param", 4066002676).}
  proc setFlag*(self: HingeJoint3D; flag: HingeJoint3D|>Flag; enabled: Bool) {.loadfrom("set_flag", 1083494620).}
  proc getFlag*(self: HingeJoint3D; flag: HingeJoint3D|>Flag): Bool {.loadfrom("get_flag", 2841369610).}

# PinJoint3D
define_godot_engine_class_essencials(PinJoint3D, Joint3D)
PinJoint3D.memberProcs:
  proc setParam*(self: PinJoint3D; param: PinJoint3D|>Param; value: Float) {.loadfrom("set_param", 2059913726).}
  proc getParam*(self: PinJoint3D; param: PinJoint3D|>Param): Float {.loadfrom("get_param", 1758438771).}

# SliderJoint3D
define_godot_engine_class_essencials(SliderJoint3D, Joint3D)
SliderJoint3D.memberProcs:
  proc setParam*(self: SliderJoint3D; param: SliderJoint3D|>Param; value: Float) {.loadfrom("set_param", 918243683).}
  proc getParam*(self: SliderJoint3D; param: SliderJoint3D|>Param): Float {.loadfrom("get_param", 959925627).}

# Decal
define_godot_engine_class_essencials(Decal, VisualInstance3D)
Decal.memberProcs:
  proc `size=`*(self: Decal; size: Vector3) {.loadfrom("set_size", 3460891852).}
  proc size*(self: Decal): Vector3 {.loadfrom("get_size", 3360562783).}
  proc `texture=`*(self: Decal; `type`: Decal|>DecalTexture; texture: Ref[Texture2D]) {.loadfrom("set_texture", 2086764391).}
  proc texture*(self: Decal; `type`: Decal|>DecalTexture): Ref[Texture2D] {.loadfrom("get_texture", 3244119503).}
  proc `emissionEnergy=`*(self: Decal; energy: Float) {.loadfrom("set_emission_energy", 373806689).}
  proc emissionEnergy*(self: Decal): Float {.loadfrom("get_emission_energy", 1740695150).}
  proc `albedoMix=`*(self: Decal; energy: Float) {.loadfrom("set_albedo_mix", 373806689).}
  proc albedoMix*(self: Decal): Float {.loadfrom("get_albedo_mix", 1740695150).}
  proc `modulate=`*(self: Decal; color: Color) {.loadfrom("set_modulate", 2920490490).}
  proc modulate*(self: Decal): Color {.loadfrom("get_modulate", 3444240500).}
  proc `upperFade=`*(self: Decal; fade: Float) {.loadfrom("set_upper_fade", 373806689).}
  proc upperFade*(self: Decal): Float {.loadfrom("get_upper_fade", 1740695150).}
  proc `lowerFade=`*(self: Decal; fade: Float) {.loadfrom("set_lower_fade", 373806689).}
  proc lowerFade*(self: Decal): Float {.loadfrom("get_lower_fade", 1740695150).}
  proc `normalFade=`*(self: Decal; fade: Float) {.loadfrom("set_normal_fade", 373806689).}
  proc normalFade*(self: Decal): Float {.loadfrom("get_normal_fade", 1740695150).}
  proc `enableDistanceFade=`*(self: Decal; enable: Bool) {.loadfrom("set_enable_distance_fade", 2586408642).}
  proc isDistanceFadeEnabled*(self: Decal): Bool {.loadfrom("is_distance_fade_enabled", 36873697).}
  proc `distanceFadeBegin=`*(self: Decal; distance: Float) {.loadfrom("set_distance_fade_begin", 373806689).}
  proc distanceFadeBegin*(self: Decal): Float {.loadfrom("get_distance_fade_begin", 1740695150).}
  proc `distanceFadeLength=`*(self: Decal; distance: Float) {.loadfrom("set_distance_fade_length", 373806689).}
  proc distanceFadeLength*(self: Decal): Float {.loadfrom("get_distance_fade_length", 1740695150).}
  proc `cullMask=`*(self: Decal; mask: uint32) {.loadfrom("set_cull_mask", 1286410249).}
  proc cullMask*(self: Decal): uint32 {.loadfrom("get_cull_mask", 3905245786).}

# FogVolume
define_godot_engine_class_essencials(FogVolume, VisualInstance3D)
FogVolume.memberProcs:
  proc `size=`*(self: FogVolume; size: Vector3) {.loadfrom("set_size", 3460891852).}
  proc size*(self: FogVolume): Vector3 {.loadfrom("get_size", 3360562783).}
  proc `shape=`*(self: FogVolume; shape: RenderingServer|>FogVolumeShape) {.loadfrom("set_shape", 1416323362).}
  proc shape*(self: FogVolume): RenderingServer|>FogVolumeShape {.loadfrom("get_shape", 3920334604).}
  proc `material=`*(self: FogVolume; material: Ref[Material]) {.loadfrom("set_material", 2757459619).}
  proc material*(self: FogVolume): Ref[Material] {.loadfrom("get_material", 5934680).}

# GPUParticlesAttractor3D
define_godot_engine_class_essencials(GPUParticlesAttractor3D, VisualInstance3D)
GPUParticlesAttractor3D.memberProcs:
  proc `cullMask=`*(self: GPUParticlesAttractor3D; mask: uint32) {.loadfrom("set_cull_mask", 1286410249).}
  proc cullMask*(self: GPUParticlesAttractor3D): uint32 {.loadfrom("get_cull_mask", 3905245786).}
  proc `strength=`*(self: GPUParticlesAttractor3D; strength: Float) {.loadfrom("set_strength", 373806689).}
  proc strength*(self: GPUParticlesAttractor3D): Float {.loadfrom("get_strength", 1740695150).}
  proc `attenuation=`*(self: GPUParticlesAttractor3D; attenuation: Float) {.loadfrom("set_attenuation", 373806689).}
  proc attenuation*(self: GPUParticlesAttractor3D): Float {.loadfrom("get_attenuation", 1740695150).}
  proc `directionality=`*(self: GPUParticlesAttractor3D; amount: Float) {.loadfrom("set_directionality", 373806689).}
  proc directionality*(self: GPUParticlesAttractor3D): Float {.loadfrom("get_directionality", 1740695150).}

# GPUParticlesCollision3D
define_godot_engine_class_essencials(GPUParticlesCollision3D, VisualInstance3D)
GPUParticlesCollision3D.memberProcs:
  proc `cullMask=`*(self: GPUParticlesCollision3D; mask: uint32) {.loadfrom("set_cull_mask", 1286410249).}
  proc cullMask*(self: GPUParticlesCollision3D): uint32 {.loadfrom("get_cull_mask", 3905245786).}

# GeometryInstance3D
define_godot_engine_class_essencials(GeometryInstance3D, VisualInstance3D)
GeometryInstance3D.memberProcs:
  proc `materialOverride=`*(self: GeometryInstance3D; material: Ref[Material]) {.loadfrom("set_material_override", 2757459619).}
  proc materialOverride*(self: GeometryInstance3D): Ref[Material] {.loadfrom("get_material_override", 5934680).}
  proc `materialOverlay=`*(self: GeometryInstance3D; material: Ref[Material]) {.loadfrom("set_material_overlay", 2757459619).}
  proc materialOverlay*(self: GeometryInstance3D): Ref[Material] {.loadfrom("get_material_overlay", 5934680).}
  proc `castShadowsSetting=`*(self: GeometryInstance3D; shadowCastingSetting: GeometryInstance3D|>ShadowCastingSetting) {.loadfrom("set_cast_shadows_setting", 856677339).}
  proc castShadowsSetting*(self: GeometryInstance3D): GeometryInstance3D|>ShadowCastingSetting {.loadfrom("get_cast_shadows_setting", 3383019359).}
  proc `lodBias=`*(self: GeometryInstance3D; bias: Float) {.loadfrom("set_lod_bias", 373806689).}
  proc lodBias*(self: GeometryInstance3D): Float {.loadfrom("get_lod_bias", 1740695150).}
  proc `transparency=`*(self: GeometryInstance3D; transparency: Float) {.loadfrom("set_transparency", 373806689).}
  proc transparency*(self: GeometryInstance3D): Float {.loadfrom("get_transparency", 1740695150).}
  proc `visibilityRangeEndMargin=`*(self: GeometryInstance3D; distance: Float) {.loadfrom("set_visibility_range_end_margin", 373806689).}
  proc visibilityRangeEndMargin*(self: GeometryInstance3D): Float {.loadfrom("get_visibility_range_end_margin", 1740695150).}
  proc `visibilityRangeEnd=`*(self: GeometryInstance3D; distance: Float) {.loadfrom("set_visibility_range_end", 373806689).}
  proc visibilityRangeEnd*(self: GeometryInstance3D): Float {.loadfrom("get_visibility_range_end", 1740695150).}
  proc `visibilityRangeBeginMargin=`*(self: GeometryInstance3D; distance: Float) {.loadfrom("set_visibility_range_begin_margin", 373806689).}
  proc visibilityRangeBeginMargin*(self: GeometryInstance3D): Float {.loadfrom("get_visibility_range_begin_margin", 1740695150).}
  proc `visibilityRangeBegin=`*(self: GeometryInstance3D; distance: Float) {.loadfrom("set_visibility_range_begin", 373806689).}
  proc visibilityRangeBegin*(self: GeometryInstance3D): Float {.loadfrom("get_visibility_range_begin", 1740695150).}
  proc `visibilityRangeFadeMode=`*(self: GeometryInstance3D; mode: GeometryInstance3D|>VisibilityRangeFadeMode) {.loadfrom("set_visibility_range_fade_mode", 1440117808).}
  proc visibilityRangeFadeMode*(self: GeometryInstance3D): GeometryInstance3D|>VisibilityRangeFadeMode {.loadfrom("get_visibility_range_fade_mode", 2067221882).}
  proc setInstanceShaderParameter*(self: GeometryInstance3D; name: StringName; value: ptr Variant) {.loadfrom("set_instance_shader_parameter", 3776071444).}
  proc getInstanceShaderParameter*(self: GeometryInstance3D; name: StringName): Variant {.loadfrom("get_instance_shader_parameter", 2760726917).}
  proc `extraCullMargin=`*(self: GeometryInstance3D; margin: Float) {.loadfrom("set_extra_cull_margin", 373806689).}
  proc extraCullMargin*(self: GeometryInstance3D): Float {.loadfrom("get_extra_cull_margin", 1740695150).}
  proc `lightmapScale=`*(self: GeometryInstance3D; scale: GeometryInstance3D|>LightmapScale) {.loadfrom("set_lightmap_scale", 2462696582).}
  proc lightmapScale*(self: GeometryInstance3D): GeometryInstance3D|>LightmapScale {.loadfrom("get_lightmap_scale", 798767852).}
  proc `giMode=`*(self: GeometryInstance3D; mode: GeometryInstance3D|>GIMode) {.loadfrom("set_gi_mode", 2548557163).}
  proc giMode*(self: GeometryInstance3D): GeometryInstance3D|>GIMode {.loadfrom("get_gi_mode", 2188566509).}
  proc `ignoreOcclusionCulling=`*(self: GeometryInstance3D; ignoreCulling: Bool) {.loadfrom("set_ignore_occlusion_culling", 2586408642).}
  proc isIgnoringOcclusionCulling*(self: GeometryInstance3D): Bool {.loadfrom("is_ignoring_occlusion_culling", 2240911060).}
  proc `customAabb=`*(self: GeometryInstance3D; aabb: AABB) {.loadfrom("set_custom_aabb", 259215842).}
  proc customAabb*(self: GeometryInstance3D): AABB {.loadfrom("get_custom_aabb", 1068685055).}

# Light3D
define_godot_engine_class_essencials(Light3D, VisualInstance3D)
Light3D.memberProcs:
  proc `editorOnly=`*(self: Light3D; editorOnly: Bool) {.loadfrom("set_editor_only", 2586408642).}
  proc isEditorOnly*(self: Light3D): Bool {.loadfrom("is_editor_only", 36873697).}
  proc `param=`*(self: Light3D; param: Light3D|>Param; value: Float) {.loadfrom("set_param", 1722734213).}
  proc param*(self: Light3D; param: Light3D|>Param): Float {.loadfrom("get_param", 1844084987).}
  proc `shadow=`*(self: Light3D; enabled: Bool) {.loadfrom("set_shadow", 2586408642).}
  proc hasShadow*(self: Light3D): Bool {.loadfrom("has_shadow", 36873697).}
  proc `negative=`*(self: Light3D; enabled: Bool) {.loadfrom("set_negative", 2586408642).}
  proc isNegative*(self: Light3D): Bool {.loadfrom("is_negative", 36873697).}
  proc `cullMask=`*(self: Light3D; cullMask: uint32) {.loadfrom("set_cull_mask", 1286410249).}
  proc cullMask*(self: Light3D): uint32 {.loadfrom("get_cull_mask", 3905245786).}
  proc `enableDistanceFade=`*(self: Light3D; enable: Bool) {.loadfrom("set_enable_distance_fade", 2586408642).}
  proc isDistanceFadeEnabled*(self: Light3D): Bool {.loadfrom("is_distance_fade_enabled", 36873697).}
  proc `distanceFadeBegin=`*(self: Light3D; distance: Float) {.loadfrom("set_distance_fade_begin", 373806689).}
  proc distanceFadeBegin*(self: Light3D): Float {.loadfrom("get_distance_fade_begin", 1740695150).}
  proc `distanceFadeShadow=`*(self: Light3D; distance: Float) {.loadfrom("set_distance_fade_shadow", 373806689).}
  proc distanceFadeShadow*(self: Light3D): Float {.loadfrom("get_distance_fade_shadow", 1740695150).}
  proc `distanceFadeLength=`*(self: Light3D; distance: Float) {.loadfrom("set_distance_fade_length", 373806689).}
  proc distanceFadeLength*(self: Light3D): Float {.loadfrom("get_distance_fade_length", 1740695150).}
  proc `color=`*(self: Light3D; color: Color) {.loadfrom("set_color", 2920490490).}
  proc color*(self: Light3D): Color {.loadfrom("get_color", 3444240500).}
  proc `shadowReverseCullFace=`*(self: Light3D; enable: Bool) {.loadfrom("set_shadow_reverse_cull_face", 2586408642).}
  proc shadowReverseCullFace*(self: Light3D): Bool {.loadfrom("get_shadow_reverse_cull_face", 36873697).}
  proc `bakeMode=`*(self: Light3D; bakeMode: Light3D|>BakeMode) {.loadfrom("set_bake_mode", 37739303).}
  proc bakeMode*(self: Light3D): Light3D|>BakeMode {.loadfrom("get_bake_mode", 371737608).}
  proc `projector=`*(self: Light3D; projector: Ref[Texture2D]) {.loadfrom("set_projector", 4051416890).}
  proc projector*(self: Light3D): Ref[Texture2D] {.loadfrom("get_projector", 3635182373).}
  proc `temperature=`*(self: Light3D; temperature: Float) {.loadfrom("set_temperature", 373806689).}
  proc temperature*(self: Light3D): Float {.loadfrom("get_temperature", 1740695150).}
  proc getCorrelatedColor*(self: Light3D): Color {.loadfrom("get_correlated_color", 3444240500).}

# LightmapGI
define_godot_engine_class_essencials(LightmapGI, VisualInstance3D)
LightmapGI.memberProcs:
  proc `lightData=`*(self: LightmapGI; data: Ref[LightmapGIData]) {.loadfrom("set_light_data", 1790597277).}
  proc lightData*(self: LightmapGI): Ref[LightmapGIData] {.loadfrom("get_light_data", 290354153).}
  proc `bakeQuality=`*(self: LightmapGI; bakeQuality: LightmapGI|>BakeQuality) {.loadfrom("set_bake_quality", 1192215803).}
  proc bakeQuality*(self: LightmapGI): LightmapGI|>BakeQuality {.loadfrom("get_bake_quality", 688832735).}
  proc `bounces=`*(self: LightmapGI; bounces: int32) {.loadfrom("set_bounces", 1286410249).}
  proc bounces*(self: LightmapGI): int32 {.loadfrom("get_bounces", 3905245786).}
  proc `generateProbes=`*(self: LightmapGI; subdivision: LightmapGI|>GenerateProbes) {.loadfrom("set_generate_probes", 549981046).}
  proc generateProbes*(self: LightmapGI): LightmapGI|>GenerateProbes {.loadfrom("get_generate_probes", 3930596226).}
  proc `bias=`*(self: LightmapGI; bias: Float) {.loadfrom("set_bias", 373806689).}
  proc bias*(self: LightmapGI): Float {.loadfrom("get_bias", 1740695150).}
  proc `environmentMode=`*(self: LightmapGI; mode: LightmapGI|>EnvironmentMode) {.loadfrom("set_environment_mode", 2282650285).}
  proc environmentMode*(self: LightmapGI): LightmapGI|>EnvironmentMode {.loadfrom("get_environment_mode", 4128646479).}
  proc `environmentCustomSky=`*(self: LightmapGI; sky: Ref[Sky]) {.loadfrom("set_environment_custom_sky", 3336722921).}
  proc environmentCustomSky*(self: LightmapGI): Ref[Sky] {.loadfrom("get_environment_custom_sky", 1177136966).}
  proc `environmentCustomColor=`*(self: LightmapGI; color: Color) {.loadfrom("set_environment_custom_color", 2920490490).}
  proc environmentCustomColor*(self: LightmapGI): Color {.loadfrom("get_environment_custom_color", 3444240500).}
  proc `environmentCustomEnergy=`*(self: LightmapGI; energy: Float) {.loadfrom("set_environment_custom_energy", 373806689).}
  proc environmentCustomEnergy*(self: LightmapGI): Float {.loadfrom("get_environment_custom_energy", 1740695150).}
  proc `maxTextureSize=`*(self: LightmapGI; maxTextureSize: int32) {.loadfrom("set_max_texture_size", 1286410249).}
  proc maxTextureSize*(self: LightmapGI): int32 {.loadfrom("get_max_texture_size", 3905245786).}
  proc `useDenoiser=`*(self: LightmapGI; useDenoiser: Bool) {.loadfrom("set_use_denoiser", 2586408642).}
  proc isUsingDenoiser*(self: LightmapGI): Bool {.loadfrom("is_using_denoiser", 36873697).}
  proc `interior=`*(self: LightmapGI; enable: Bool) {.loadfrom("set_interior", 2586408642).}
  proc isInterior*(self: LightmapGI): Bool {.loadfrom("is_interior", 36873697).}
  proc `directional=`*(self: LightmapGI; directional: Bool) {.loadfrom("set_directional", 2586408642).}
  proc isDirectional*(self: LightmapGI): Bool {.loadfrom("is_directional", 36873697).}
  proc `cameraAttributes=`*(self: LightmapGI; cameraAttributes: Ref[CameraAttributes]) {.loadfrom("set_camera_attributes", 2817810567).}
  proc cameraAttributes*(self: LightmapGI): Ref[CameraAttributes] {.loadfrom("get_camera_attributes", 3921283215).}

# ReflectionProbe
define_godot_engine_class_essencials(ReflectionProbe, VisualInstance3D)
ReflectionProbe.memberProcs:
  proc `intensity=`*(self: ReflectionProbe; intensity: Float) {.loadfrom("set_intensity", 373806689).}
  proc intensity*(self: ReflectionProbe): Float {.loadfrom("get_intensity", 1740695150).}
  proc `ambientMode=`*(self: ReflectionProbe; ambient: ReflectionProbe|>AmbientMode) {.loadfrom("set_ambient_mode", 1748981278).}
  proc ambientMode*(self: ReflectionProbe): ReflectionProbe|>AmbientMode {.loadfrom("get_ambient_mode", 1014607621).}
  proc `ambientColor=`*(self: ReflectionProbe; ambient: Color) {.loadfrom("set_ambient_color", 2920490490).}
  proc ambientColor*(self: ReflectionProbe): Color {.loadfrom("get_ambient_color", 3444240500).}
  proc `ambientColorEnergy=`*(self: ReflectionProbe; ambientEnergy: Float) {.loadfrom("set_ambient_color_energy", 373806689).}
  proc ambientColorEnergy*(self: ReflectionProbe): Float {.loadfrom("get_ambient_color_energy", 1740695150).}
  proc `maxDistance=`*(self: ReflectionProbe; maxDistance: Float) {.loadfrom("set_max_distance", 373806689).}
  proc maxDistance*(self: ReflectionProbe): Float {.loadfrom("get_max_distance", 1740695150).}
  proc `meshLodThreshold=`*(self: ReflectionProbe; ratio: Float) {.loadfrom("set_mesh_lod_threshold", 373806689).}
  proc meshLodThreshold*(self: ReflectionProbe): Float {.loadfrom("get_mesh_lod_threshold", 1740695150).}
  proc `size=`*(self: ReflectionProbe; size: Vector3) {.loadfrom("set_size", 3460891852).}
  proc size*(self: ReflectionProbe): Vector3 {.loadfrom("get_size", 3360562783).}
  proc `originOffset=`*(self: ReflectionProbe; originOffset: Vector3) {.loadfrom("set_origin_offset", 3460891852).}
  proc originOffset*(self: ReflectionProbe): Vector3 {.loadfrom("get_origin_offset", 3360562783).}
  proc `asInterior=`*(self: ReflectionProbe; enable: Bool) {.loadfrom("set_as_interior", 2586408642).}
  proc isSetAsInterior*(self: ReflectionProbe): Bool {.loadfrom("is_set_as_interior", 36873697).}
  proc `enableBoxProjection=`*(self: ReflectionProbe; enable: Bool) {.loadfrom("set_enable_box_projection", 2586408642).}
  proc isBoxProjectionEnabled*(self: ReflectionProbe): Bool {.loadfrom("is_box_projection_enabled", 36873697).}
  proc `enableShadows=`*(self: ReflectionProbe; enable: Bool) {.loadfrom("set_enable_shadows", 2586408642).}
  proc areShadowsEnabled*(self: ReflectionProbe): Bool {.loadfrom("are_shadows_enabled", 36873697).}
  proc `cullMask=`*(self: ReflectionProbe; layers: uint32) {.loadfrom("set_cull_mask", 1286410249).}
  proc cullMask*(self: ReflectionProbe): uint32 {.loadfrom("get_cull_mask", 3905245786).}
  proc `updateMode=`*(self: ReflectionProbe; mode: ReflectionProbe|>UpdateMode) {.loadfrom("set_update_mode", 4090221187).}
  proc updateMode*(self: ReflectionProbe): ReflectionProbe|>UpdateMode {.loadfrom("get_update_mode", 2367550552).}

# RootMotionView
define_godot_engine_class_essencials(RootMotionView, VisualInstance3D)
RootMotionView.memberProcs:
  proc `animationPath=`*(self: RootMotionView; path: NodePath) {.loadfrom("set_animation_path", 1348162250).}
  proc animationPath*(self: RootMotionView): NodePath {.loadfrom("get_animation_path", 4075236667).}
  proc `color=`*(self: RootMotionView; color: Color) {.loadfrom("set_color", 2920490490).}
  proc color*(self: RootMotionView): Color {.loadfrom("get_color", 3444240500).}
  proc `cellSize=`*(self: RootMotionView; size: Float) {.loadfrom("set_cell_size", 373806689).}
  proc cellSize*(self: RootMotionView): Float {.loadfrom("get_cell_size", 1740695150).}
  proc `radius=`*(self: RootMotionView; size: Float) {.loadfrom("set_radius", 373806689).}
  proc radius*(self: RootMotionView): Float {.loadfrom("get_radius", 1740695150).}
  proc `zeroY=`*(self: RootMotionView; enable: Bool) {.loadfrom("set_zero_y", 2586408642).}
  proc zeroY*(self: RootMotionView): Bool {.loadfrom("get_zero_y", 36873697).}

# VisibleOnScreenNotifier3D
define_godot_engine_class_essencials(VisibleOnScreenNotifier3D, VisualInstance3D)
VisibleOnScreenNotifier3D.memberProcs:
  proc `aabb=`*(self: VisibleOnScreenNotifier3D; rect: AABB) {.loadfrom("set_aabb", 259215842).}
  proc isOnScreen*(self: VisibleOnScreenNotifier3D): Bool {.loadfrom("is_on_screen", 36873697).}

# VoxelGI
define_godot_engine_class_essencials(VoxelGI, VisualInstance3D)
VoxelGI.memberProcs:
  proc `probeData=`*(self: VoxelGI; data: Ref[VoxelGIData]) {.loadfrom("set_probe_data", 1637849675).}
  proc probeData*(self: VoxelGI): Ref[VoxelGIData] {.loadfrom("get_probe_data", 1730645405).}
  proc `subdiv=`*(self: VoxelGI; subdiv: VoxelGI|>Subdiv) {.loadfrom("set_subdiv", 2240898472).}
  proc subdiv*(self: VoxelGI): VoxelGI|>Subdiv {.loadfrom("get_subdiv", 4261647950).}
  proc `size=`*(self: VoxelGI; size: Vector3) {.loadfrom("set_size", 3460891852).}
  proc size*(self: VoxelGI): Vector3 {.loadfrom("get_size", 3360562783).}
  proc `cameraAttributes=`*(self: VoxelGI; cameraAttributes: Ref[CameraAttributes]) {.loadfrom("set_camera_attributes", 2817810567).}
  proc cameraAttributes*(self: VoxelGI): Ref[CameraAttributes] {.loadfrom("get_camera_attributes", 3921283215).}
  proc bake*(self: VoxelGI; fromNode: ptr Node = nil; createVisualDebug: Bool = false) {.loadfrom("bake", 2781551026).}
  proc debugBake*(self: VoxelGI) {.loadfrom("debug_bake", 3218959716).}

# XRAnchor3D
define_godot_engine_class_essencials(XRAnchor3D, XRNode3D)
XRAnchor3D.memberProcs:
  proc getSize*(self: XRAnchor3D): Vector3 {.loadfrom("get_size", 3360562783).}
  proc getPlane*(self: XRAnchor3D): Plane {.loadfrom("get_plane", 2753500971).}

# XRController3D
define_godot_engine_class_essencials(XRController3D, XRNode3D)
XRController3D.memberProcs:
  proc isButtonPressed*(self: XRController3D; name: StringName): Bool {.loadfrom("is_button_pressed", 2619796661).}
  proc getInput*(self: XRController3D; name: StringName): Variant {.loadfrom("get_input", 2760726917).}
  proc getFloat*(self: XRController3D; name: StringName): Float {.loadfrom("get_float", 2349060816).}
  proc getVector2*(self: XRController3D; name: StringName): Vector2 {.loadfrom("get_vector2", 3100822709).}
  proc getTrackerHand*(self: XRController3D): XRPositionalTracker|>TrackerHand {.loadfrom("get_tracker_hand", 4181770860).}

# AcceptDialog
define_godot_engine_class_essencials(AcceptDialog, Window)
AcceptDialog.memberProcs:
  proc getOkButton*(self: AcceptDialog): Button {.loadfrom("get_ok_button", 1856205918).}
  proc getLabel*(self: AcceptDialog): Label {.loadfrom("get_label", 566733104).}
  proc `hideOnOk=`*(self: AcceptDialog; enabled: Bool) {.loadfrom("set_hide_on_ok", 2586408642).}
  proc hideOnOk*(self: AcceptDialog): Bool {.loadfrom("get_hide_on_ok", 36873697).}
  proc `closeOnEscape=`*(self: AcceptDialog; enabled: Bool) {.loadfrom("set_close_on_escape", 2586408642).}
  proc closeOnEscape*(self: AcceptDialog): Bool {.loadfrom("get_close_on_escape", 36873697).}
  proc addButton*(self: AcceptDialog; text: String; right: Bool = false; action: String = ""): Button {.loadfrom("add_button", 4158837846).}
  proc addCancelButton*(self: AcceptDialog; name: String): Button {.loadfrom("add_cancel_button", 242045556).}
  proc removeButton*(self: AcceptDialog; button: Control) {.loadfrom("remove_button", 1496901182).}
  proc registerTextEnter*(self: AcceptDialog; lineEdit: Control) {.loadfrom("register_text_enter", 1496901182).}
  proc `text=`*(self: AcceptDialog; text: String) {.loadfrom("set_text", 83702148).}
  proc text*(self: AcceptDialog): String {.loadfrom("get_text", 201670096).}
  proc `autowrap=`*(self: AcceptDialog; autowrap: Bool) {.loadfrom("set_autowrap", 2586408642).}
  proc hasAutowrap*(self: AcceptDialog): Bool {.loadfrom("has_autowrap", 2240911060).}
  proc `okButtonText=`*(self: AcceptDialog; text: String) {.loadfrom("set_ok_button_text", 83702148).}
  proc okButtonText*(self: AcceptDialog): String {.loadfrom("get_ok_button_text", 201670096).}

# Popup
define_godot_engine_class_essencials(Popup, Window)

# AudioStreamGeneratorPlayback
define_godot_engine_class_essencials(AudioStreamGeneratorPlayback, AudioStreamPlaybackResampled)
AudioStreamGeneratorPlayback.memberProcs:
  proc pushFrame*(self: Ref[AudioStreamGeneratorPlayback]; frame: Vector2): Bool {.loadfrom("push_frame", 3975407249).}
  proc canPushBuffer*(self: Ref[AudioStreamGeneratorPlayback]; amount: int32): Bool {.loadfrom("can_push_buffer", 1116898809).}
  proc pushBuffer*(self: Ref[AudioStreamGeneratorPlayback]; frames: PackedVector2Array): Bool {.loadfrom("push_buffer", 1361156557).}
  proc getFramesAvailable*(self: Ref[AudioStreamGeneratorPlayback]): int32 {.loadfrom("get_frames_available", 3905245786).}
  proc getSkips*(self: Ref[AudioStreamGeneratorPlayback]): int32 {.loadfrom("get_skips", 3905245786).}
  proc clearBuffer*(self: Ref[AudioStreamGeneratorPlayback]) {.loadfrom("clear_buffer", 3218959716).}

# AudioStreamPlaybackOggVorbis
define_godot_engine_class_essencials(AudioStreamPlaybackOggVorbis, AudioStreamPlaybackResampled)

# EditorExportPlatformLinuxBSD
define_godot_engine_class_essencials(EditorExportPlatformLinuxBSD, EditorExportPlatformPC)

# EditorExportPlatformWindows
define_godot_engine_class_essencials(EditorExportPlatformWindows, EditorExportPlatformPC)

# ENetMultiplayerPeer
define_godot_engine_class_essencials(ENetMultiplayerPeer, MultiplayerPeer)
ENetMultiplayerPeer.memberProcs:
  proc createServer*(self: Ref[ENetMultiplayerPeer]; port: int32; maxClients: int32 = 32; maxChannels: int32 = 0; inBandwidth: int32 = 0; outBandwidth: int32 = 0): Error {.loadfrom("create_server", 1616151701).}
  proc createClient*(self: Ref[ENetMultiplayerPeer]; address: String; port: int32; channelCount: int32 = 0; inBandwidth: int32 = 0; outBandwidth: int32 = 0; localPort: int32 = 0): Error {.loadfrom("create_client", 920217784).}
  proc createMesh*(self: Ref[ENetMultiplayerPeer]; uniqueId: int32): Error {.loadfrom("create_mesh", 844576869).}
  proc addMeshPeer*(self: Ref[ENetMultiplayerPeer]; peerId: int32; host: Ref[ENetConnection]): Error {.loadfrom("add_mesh_peer", 1293458335).}
  proc setBindIp*(self: Ref[ENetMultiplayerPeer]; ip: String) {.loadfrom("set_bind_ip", 83702148).}
  proc host*(self: Ref[ENetMultiplayerPeer]): Ref[ENetConnection] {.loadfrom("get_host", 4103238886).}
  proc getPeer*(self: Ref[ENetMultiplayerPeer]; id: int32): Ref[ENetPacketPeer] {.loadfrom("get_peer", 3793311544).}

# MultiplayerPeerExtension
define_godot_engine_class_essencials(MultiplayerPeerExtension, MultiplayerPeer)
method getPacket*(self: Ref[MultiplayerPeerExtension]; rBuffer: ptr ptr uint8; rBufferSize: ptr int32): Error {.base.} = (discard)
method putPacket*(self: Ref[MultiplayerPeerExtension]; pBuffer: ptr uint8; pBufferSize: int32): Error {.base.} = (discard)
method getAvailablePacketCount*(self: Ref[MultiplayerPeerExtension]): int32 {.base.} = (discard)
method getMaxPacketSize*(self: Ref[MultiplayerPeerExtension]): int32 {.base.} = (discard)
method getPacketScript*(self: Ref[MultiplayerPeerExtension]): PackedByteArray {.base.} = (discard)
method putPacketScript*(self: Ref[MultiplayerPeerExtension]; pBuffer: PackedByteArray): Error {.base.} = (discard)
method getPacketChannel*(self: Ref[MultiplayerPeerExtension]): int32 {.base.} = (discard)
method getPacketMode*(self: Ref[MultiplayerPeerExtension]): MultiplayerPeer|>TransferMode {.base.} = (discard)
method setTransferChannel*(self: Ref[MultiplayerPeerExtension]; pChannel: int32) {.base.} = (discard)
method getTransferChannel*(self: Ref[MultiplayerPeerExtension]): int32 {.base.} = (discard)
method setTransferMode*(self: Ref[MultiplayerPeerExtension]; pMode: MultiplayerPeer|>TransferMode) {.base.} = (discard)
method getTransferMode*(self: Ref[MultiplayerPeerExtension]): MultiplayerPeer|>TransferMode {.base.} = (discard)
method setTargetPeer*(self: Ref[MultiplayerPeerExtension]; pPeer: int32) {.base.} = (discard)
method getPacketPeer*(self: Ref[MultiplayerPeerExtension]): int32 {.base.} = (discard)
method isServer*(self: Ref[MultiplayerPeerExtension]): Bool {.base.} = (discard)
method poll*(self: Ref[MultiplayerPeerExtension]) {.base.} = (discard)
method close*(self: Ref[MultiplayerPeerExtension]) {.base.} = (discard)
method disconnectPeer*(self: Ref[MultiplayerPeerExtension]; pPeer: int32; pForce: Bool) {.base.} = (discard)
method getUniqueId*(self: Ref[MultiplayerPeerExtension]): int32 {.base.} = (discard)
method setRefuseNewConnections*(self: Ref[MultiplayerPeerExtension]; pEnable: Bool) {.base.} = (discard)
method isRefusingNewConnections*(self: Ref[MultiplayerPeerExtension]): Bool {.base.} = (discard)
method isServerRelaySupported*(self: Ref[MultiplayerPeerExtension]): Bool {.base.} = (discard)
method getConnectionStatus*(self: Ref[MultiplayerPeerExtension]): MultiplayerPeer|>ConnectionStatus {.base.} = (discard)

# OfflineMultiplayerPeer
define_godot_engine_class_essencials(OfflineMultiplayerPeer, MultiplayerPeer)

# WebRTCMultiplayerPeer
define_godot_engine_class_essencials(WebRTCMultiplayerPeer, MultiplayerPeer)
WebRTCMultiplayerPeer.memberProcs:
  proc createServer*(self: Ref[WebRTCMultiplayerPeer]; channelsConfig: Array = Array|>init()): Error {.loadfrom("create_server", 2865356025).}
  proc createClient*(self: Ref[WebRTCMultiplayerPeer]; peerId: int32; channelsConfig: Array = Array|>init()): Error {.loadfrom("create_client", 1777354631).}
  proc createMesh*(self: Ref[WebRTCMultiplayerPeer]; peerId: int32; channelsConfig: Array = Array|>init()): Error {.loadfrom("create_mesh", 1777354631).}
  proc addPeer*(self: Ref[WebRTCMultiplayerPeer]; peer: Ref[WebRTCPeerConnection]; peerId: int32; unreliableLifetime: int32 = 1): Error {.loadfrom("add_peer", 2555866323).}
  proc removePeer*(self: Ref[WebRTCMultiplayerPeer]; peerId: int32) {.loadfrom("remove_peer", 1286410249).}
  proc hasPeer*(self: Ref[WebRTCMultiplayerPeer]; peerId: int32): Bool {.loadfrom("has_peer", 3067735520).}
  proc getPeer*(self: Ref[WebRTCMultiplayerPeer]; peerId: int32): Dictionary {.loadfrom("get_peer", 3554694381).}
  proc getPeers*(self: Ref[WebRTCMultiplayerPeer]): Dictionary {.loadfrom("get_peers", 2382534195).}

# WebSocketMultiplayerPeer
define_godot_engine_class_essencials(WebSocketMultiplayerPeer, MultiplayerPeer)
WebSocketMultiplayerPeer.memberProcs:
  proc createClient*(self: Ref[WebSocketMultiplayerPeer]; url: String; tlsClientOptions: Ref[TLSOptions] = default Ref[TLSOptions]): Error {.loadfrom("create_client", 3097527179).}
  proc createServer*(self: Ref[WebSocketMultiplayerPeer]; port: int32; bindAddress: String = "*"; tlsServerOptions: Ref[TLSOptions] = default Ref[TLSOptions]): Error {.loadfrom("create_server", 337374795).}
  proc getPeer*(self: Ref[WebSocketMultiplayerPeer]; peerId: int32): Ref[WebSocketPeer] {.loadfrom("get_peer", 1381378851).}
  proc getPeerAddress*(self: Ref[WebSocketMultiplayerPeer]; id: int32): String {.loadfrom("get_peer_address", 844755477).}
  proc getPeerPort*(self: Ref[WebSocketMultiplayerPeer]; id: int32): int32 {.loadfrom("get_peer_port", 923996154).}
  proc supportedProtocols*(self: Ref[WebSocketMultiplayerPeer]): PackedStringArray {.loadfrom("get_supported_protocols", 1139954409).}
  proc `supportedProtocols=`*(self: Ref[WebSocketMultiplayerPeer]; protocols: PackedStringArray) {.loadfrom("set_supported_protocols", 4015028928).}
  proc handshakeHeaders*(self: Ref[WebSocketMultiplayerPeer]): PackedStringArray {.loadfrom("get_handshake_headers", 1139954409).}
  proc `handshakeHeaders=`*(self: Ref[WebSocketMultiplayerPeer]; protocols: PackedStringArray) {.loadfrom("set_handshake_headers", 4015028928).}
  proc inboundBufferSize*(self: Ref[WebSocketMultiplayerPeer]): int32 {.loadfrom("get_inbound_buffer_size", 3905245786).}
  proc `inboundBufferSize=`*(self: Ref[WebSocketMultiplayerPeer]; bufferSize: int32) {.loadfrom("set_inbound_buffer_size", 1286410249).}
  proc outboundBufferSize*(self: Ref[WebSocketMultiplayerPeer]): int32 {.loadfrom("get_outbound_buffer_size", 3905245786).}
  proc `outboundBufferSize=`*(self: Ref[WebSocketMultiplayerPeer]; bufferSize: int32) {.loadfrom("set_outbound_buffer_size", 1286410249).}
  proc handshakeTimeout*(self: Ref[WebSocketMultiplayerPeer]): Float {.loadfrom("get_handshake_timeout", 1740695150).}
  proc `handshakeTimeout=`*(self: Ref[WebSocketMultiplayerPeer]; timeout: Float) {.loadfrom("set_handshake_timeout", 373806689).}
  proc `maxQueuedPackets=`*(self: Ref[WebSocketMultiplayerPeer]; maxQueuedPackets: int32) {.loadfrom("set_max_queued_packets", 1286410249).}
  proc maxQueuedPackets*(self: Ref[WebSocketMultiplayerPeer]): int32 {.loadfrom("get_max_queued_packets", 3905245786).}

# WebRTCDataChannelExtension
define_godot_engine_class_essencials(WebRTCDataChannelExtension, WebRTCDataChannel)
method getPacket*(self: Ref[WebRTCDataChannelExtension]; rBuffer: ptr ptr uint8; rBufferSize: ptr int32): Error {.base.} = (discard)
method putPacket*(self: Ref[WebRTCDataChannelExtension]; pBuffer: ptr uint8; pBufferSize: int32): Error {.base.} = (discard)
method getAvailablePacketCount*(self: Ref[WebRTCDataChannelExtension]): int32 {.base.} = (discard)
method getMaxPacketSize*(self: Ref[WebRTCDataChannelExtension]): int32 {.base.} = (discard)
method poll*(self: Ref[WebRTCDataChannelExtension]): Error {.base.} = (discard)
method close*(self: Ref[WebRTCDataChannelExtension]) {.base.} = (discard)
method setWriteMode*(self: Ref[WebRTCDataChannelExtension]; pWriteMode: WebRTCDataChannel|>WriteMode) {.base.} = (discard)
method getWriteMode*(self: Ref[WebRTCDataChannelExtension]): WebRTCDataChannel|>WriteMode {.base.} = (discard)
method wasStringPacket*(self: Ref[WebRTCDataChannelExtension]): Bool {.base.} = (discard)
method getReadyState*(self: Ref[WebRTCDataChannelExtension]): WebRTCDataChannel|>ChannelState {.base.} = (discard)
method getLabel*(self: Ref[WebRTCDataChannelExtension]): String {.base.} = (discard)
method isOrdered*(self: Ref[WebRTCDataChannelExtension]): Bool {.base.} = (discard)
method getId*(self: Ref[WebRTCDataChannelExtension]): int32 {.base.} = (discard)
method getMaxPacketLifeTime*(self: Ref[WebRTCDataChannelExtension]): int32 {.base.} = (discard)
method getMaxRetransmits*(self: Ref[WebRTCDataChannelExtension]): int32 {.base.} = (discard)
method getProtocol*(self: Ref[WebRTCDataChannelExtension]): String {.base.} = (discard)
method isNegotiated*(self: Ref[WebRTCDataChannelExtension]): Bool {.base.} = (discard)
method getBufferedAmount*(self: Ref[WebRTCDataChannelExtension]): int32 {.base.} = (discard)

# AnimationNodeOutput
define_godot_engine_class_essencials(AnimationNodeOutput, AnimationNode)

# AnimationNodeSync
define_godot_engine_class_essencials(AnimationNodeSync, AnimationNode)
AnimationNodeSync.memberProcs:
  proc `useSync=`*(self: Ref[AnimationNodeSync]; enable: Bool) {.loadfrom("set_use_sync", 2586408642).}
  proc isUsingSync*(self: Ref[AnimationNodeSync]): Bool {.loadfrom("is_using_sync", 36873697).}

# AnimationNodeTimeScale
define_godot_engine_class_essencials(AnimationNodeTimeScale, AnimationNode)

# AnimationNodeTimeSeek
define_godot_engine_class_essencials(AnimationNodeTimeSeek, AnimationNode)

# AnimationRootNode
define_godot_engine_class_essencials(AnimationRootNode, AnimationNode)

# AudioEffectAmplify
define_godot_engine_class_essencials(AudioEffectAmplify, AudioEffect)
AudioEffectAmplify.memberProcs:
  proc `volumeDb=`*(self: Ref[AudioEffectAmplify]; volume: Float) {.loadfrom("set_volume_db", 373806689).}
  proc volumeDb*(self: Ref[AudioEffectAmplify]): Float {.loadfrom("get_volume_db", 1740695150).}

# AudioEffectCapture
define_godot_engine_class_essencials(AudioEffectCapture, AudioEffect)
AudioEffectCapture.memberProcs:
  proc canGetBuffer*(self: Ref[AudioEffectCapture]; frames: int32): Bool {.loadfrom("can_get_buffer", 1116898809).}
  proc getBuffer*(self: Ref[AudioEffectCapture]; frames: int32): PackedVector2Array {.loadfrom("get_buffer", 2649534757).}
  proc clearBuffer*(self: Ref[AudioEffectCapture]) {.loadfrom("clear_buffer", 3218959716).}
  proc `bufferLength=`*(self: Ref[AudioEffectCapture]; bufferLengthSeconds: Float) {.loadfrom("set_buffer_length", 373806689).}
  proc bufferLength*(self: Ref[AudioEffectCapture]): Float {.loadfrom("get_buffer_length", 191475506).}
  proc getFramesAvailable*(self: Ref[AudioEffectCapture]): int32 {.loadfrom("get_frames_available", 3905245786).}
  proc getDiscardedFrames*(self: Ref[AudioEffectCapture]): int64 {.loadfrom("get_discarded_frames", 3905245786).}
  proc getBufferLengthFrames*(self: Ref[AudioEffectCapture]): int32 {.loadfrom("get_buffer_length_frames", 3905245786).}
  proc getPushedFrames*(self: Ref[AudioEffectCapture]): int64 {.loadfrom("get_pushed_frames", 3905245786).}

# AudioEffectChorus
define_godot_engine_class_essencials(AudioEffectChorus, AudioEffect)
AudioEffectChorus.memberProcs:
  proc `voiceCount=`*(self: Ref[AudioEffectChorus]; voices: int32) {.loadfrom("set_voice_count", 1286410249).}
  proc voiceCount*(self: Ref[AudioEffectChorus]): int32 {.loadfrom("get_voice_count", 3905245786).}
  proc setVoiceDelayMs*(self: Ref[AudioEffectChorus]; voiceIdx: int32; delayMs: Float) {.loadfrom("set_voice_delay_ms", 1602489585).}
  proc getVoiceDelayMs*(self: Ref[AudioEffectChorus]; voiceIdx: int32): Float {.loadfrom("get_voice_delay_ms", 2339986948).}
  proc setVoiceRateHz*(self: Ref[AudioEffectChorus]; voiceIdx: int32; rateHz: Float) {.loadfrom("set_voice_rate_hz", 1602489585).}
  proc getVoiceRateHz*(self: Ref[AudioEffectChorus]; voiceIdx: int32): Float {.loadfrom("get_voice_rate_hz", 2339986948).}
  proc setVoiceDepthMs*(self: Ref[AudioEffectChorus]; voiceIdx: int32; depthMs: Float) {.loadfrom("set_voice_depth_ms", 1602489585).}
  proc getVoiceDepthMs*(self: Ref[AudioEffectChorus]; voiceIdx: int32): Float {.loadfrom("get_voice_depth_ms", 2339986948).}
  proc setVoiceLevelDb*(self: Ref[AudioEffectChorus]; voiceIdx: int32; levelDb: Float) {.loadfrom("set_voice_level_db", 1602489585).}
  proc getVoiceLevelDb*(self: Ref[AudioEffectChorus]; voiceIdx: int32): Float {.loadfrom("get_voice_level_db", 2339986948).}
  proc setVoiceCutoffHz*(self: Ref[AudioEffectChorus]; voiceIdx: int32; cutoffHz: Float) {.loadfrom("set_voice_cutoff_hz", 1602489585).}
  proc getVoiceCutoffHz*(self: Ref[AudioEffectChorus]; voiceIdx: int32): Float {.loadfrom("get_voice_cutoff_hz", 2339986948).}
  proc setVoicePan*(self: Ref[AudioEffectChorus]; voiceIdx: int32; pan: Float) {.loadfrom("set_voice_pan", 1602489585).}
  proc getVoicePan*(self: Ref[AudioEffectChorus]; voiceIdx: int32): Float {.loadfrom("get_voice_pan", 2339986948).}
  proc `wet=`*(self: Ref[AudioEffectChorus]; amount: Float) {.loadfrom("set_wet", 373806689).}
  proc wet*(self: Ref[AudioEffectChorus]): Float {.loadfrom("get_wet", 1740695150).}
  proc `dry=`*(self: Ref[AudioEffectChorus]; amount: Float) {.loadfrom("set_dry", 373806689).}
  proc dry*(self: Ref[AudioEffectChorus]): Float {.loadfrom("get_dry", 1740695150).}

# AudioEffectCompressor
define_godot_engine_class_essencials(AudioEffectCompressor, AudioEffect)
AudioEffectCompressor.memberProcs:
  proc `threshold=`*(self: Ref[AudioEffectCompressor]; threshold: Float) {.loadfrom("set_threshold", 373806689).}
  proc threshold*(self: Ref[AudioEffectCompressor]): Float {.loadfrom("get_threshold", 1740695150).}
  proc `ratio=`*(self: Ref[AudioEffectCompressor]; ratio: Float) {.loadfrom("set_ratio", 373806689).}
  proc ratio*(self: Ref[AudioEffectCompressor]): Float {.loadfrom("get_ratio", 1740695150).}
  proc `gain=`*(self: Ref[AudioEffectCompressor]; gain: Float) {.loadfrom("set_gain", 373806689).}
  proc gain*(self: Ref[AudioEffectCompressor]): Float {.loadfrom("get_gain", 1740695150).}
  proc `attackUs=`*(self: Ref[AudioEffectCompressor]; attackUs: Float) {.loadfrom("set_attack_us", 373806689).}
  proc attackUs*(self: Ref[AudioEffectCompressor]): Float {.loadfrom("get_attack_us", 1740695150).}
  proc `releaseMs=`*(self: Ref[AudioEffectCompressor]; releaseMs: Float) {.loadfrom("set_release_ms", 373806689).}
  proc releaseMs*(self: Ref[AudioEffectCompressor]): Float {.loadfrom("get_release_ms", 1740695150).}
  proc `mix=`*(self: Ref[AudioEffectCompressor]; mix: Float) {.loadfrom("set_mix", 373806689).}
  proc mix*(self: Ref[AudioEffectCompressor]): Float {.loadfrom("get_mix", 1740695150).}
  proc `sidechain=`*(self: Ref[AudioEffectCompressor]; sidechain: StringName) {.loadfrom("set_sidechain", 3304788590).}
  proc sidechain*(self: Ref[AudioEffectCompressor]): StringName {.loadfrom("get_sidechain", 2002593661).}

# AudioEffectDelay
define_godot_engine_class_essencials(AudioEffectDelay, AudioEffect)
AudioEffectDelay.memberProcs:
  proc `dry=`*(self: Ref[AudioEffectDelay]; amount: Float) {.loadfrom("set_dry", 373806689).}
  proc dry*(self: Ref[AudioEffectDelay]): Float {.loadfrom("get_dry", 191475506).}
  proc `tap1Active=`*(self: Ref[AudioEffectDelay]; amount: Bool) {.loadfrom("set_tap1_active", 2586408642).}
  proc isTap1Active*(self: Ref[AudioEffectDelay]): Bool {.loadfrom("is_tap1_active", 36873697).}
  proc `tap1DelayMs=`*(self: Ref[AudioEffectDelay]; amount: Float) {.loadfrom("set_tap1_delay_ms", 373806689).}
  proc tap1DelayMs*(self: Ref[AudioEffectDelay]): Float {.loadfrom("get_tap1_delay_ms", 1740695150).}
  proc `tap1LevelDb=`*(self: Ref[AudioEffectDelay]; amount: Float) {.loadfrom("set_tap1_level_db", 373806689).}
  proc tap1LevelDb*(self: Ref[AudioEffectDelay]): Float {.loadfrom("get_tap1_level_db", 1740695150).}
  proc `tap1Pan=`*(self: Ref[AudioEffectDelay]; amount: Float) {.loadfrom("set_tap1_pan", 373806689).}
  proc tap1Pan*(self: Ref[AudioEffectDelay]): Float {.loadfrom("get_tap1_pan", 1740695150).}
  proc `tap2Active=`*(self: Ref[AudioEffectDelay]; amount: Bool) {.loadfrom("set_tap2_active", 2586408642).}
  proc isTap2Active*(self: Ref[AudioEffectDelay]): Bool {.loadfrom("is_tap2_active", 36873697).}
  proc `tap2DelayMs=`*(self: Ref[AudioEffectDelay]; amount: Float) {.loadfrom("set_tap2_delay_ms", 373806689).}
  proc tap2DelayMs*(self: Ref[AudioEffectDelay]): Float {.loadfrom("get_tap2_delay_ms", 1740695150).}
  proc `tap2LevelDb=`*(self: Ref[AudioEffectDelay]; amount: Float) {.loadfrom("set_tap2_level_db", 373806689).}
  proc tap2LevelDb*(self: Ref[AudioEffectDelay]): Float {.loadfrom("get_tap2_level_db", 1740695150).}
  proc `tap2Pan=`*(self: Ref[AudioEffectDelay]; amount: Float) {.loadfrom("set_tap2_pan", 373806689).}
  proc tap2Pan*(self: Ref[AudioEffectDelay]): Float {.loadfrom("get_tap2_pan", 1740695150).}
  proc `feedbackActive=`*(self: Ref[AudioEffectDelay]; amount: Bool) {.loadfrom("set_feedback_active", 2586408642).}
  proc isFeedbackActive*(self: Ref[AudioEffectDelay]): Bool {.loadfrom("is_feedback_active", 36873697).}
  proc `feedbackDelayMs=`*(self: Ref[AudioEffectDelay]; amount: Float) {.loadfrom("set_feedback_delay_ms", 373806689).}
  proc feedbackDelayMs*(self: Ref[AudioEffectDelay]): Float {.loadfrom("get_feedback_delay_ms", 1740695150).}
  proc `feedbackLevelDb=`*(self: Ref[AudioEffectDelay]; amount: Float) {.loadfrom("set_feedback_level_db", 373806689).}
  proc feedbackLevelDb*(self: Ref[AudioEffectDelay]): Float {.loadfrom("get_feedback_level_db", 1740695150).}
  proc `feedbackLowpass=`*(self: Ref[AudioEffectDelay]; amount: Float) {.loadfrom("set_feedback_lowpass", 373806689).}
  proc feedbackLowpass*(self: Ref[AudioEffectDelay]): Float {.loadfrom("get_feedback_lowpass", 1740695150).}

# AudioEffectDistortion
define_godot_engine_class_essencials(AudioEffectDistortion, AudioEffect)
AudioEffectDistortion.memberProcs:
  proc `mode=`*(self: Ref[AudioEffectDistortion]; mode: AudioEffectDistortion|>Mode) {.loadfrom("set_mode", 1314744793).}
  proc mode*(self: Ref[AudioEffectDistortion]): AudioEffectDistortion|>Mode {.loadfrom("get_mode", 809118343).}
  proc `preGain=`*(self: Ref[AudioEffectDistortion]; preGain: Float) {.loadfrom("set_pre_gain", 373806689).}
  proc preGain*(self: Ref[AudioEffectDistortion]): Float {.loadfrom("get_pre_gain", 1740695150).}
  proc `keepHfHz=`*(self: Ref[AudioEffectDistortion]; keepHfHz: Float) {.loadfrom("set_keep_hf_hz", 373806689).}
  proc keepHfHz*(self: Ref[AudioEffectDistortion]): Float {.loadfrom("get_keep_hf_hz", 1740695150).}
  proc `drive=`*(self: Ref[AudioEffectDistortion]; drive: Float) {.loadfrom("set_drive", 373806689).}
  proc drive*(self: Ref[AudioEffectDistortion]): Float {.loadfrom("get_drive", 1740695150).}
  proc `postGain=`*(self: Ref[AudioEffectDistortion]; postGain: Float) {.loadfrom("set_post_gain", 373806689).}
  proc postGain*(self: Ref[AudioEffectDistortion]): Float {.loadfrom("get_post_gain", 1740695150).}

# AudioEffectEQ
define_godot_engine_class_essencials(AudioEffectEQ, AudioEffect)
AudioEffectEQ.memberProcs:
  proc setBandGainDb*(self: Ref[AudioEffectEQ]; bandIdx: int32; volumeDb: Float) {.loadfrom("set_band_gain_db", 1602489585).}
  proc getBandGainDb*(self: Ref[AudioEffectEQ]; bandIdx: int32): Float {.loadfrom("get_band_gain_db", 2339986948).}
  proc getBandCount*(self: Ref[AudioEffectEQ]): int32 {.loadfrom("get_band_count", 3905245786).}

# AudioEffectFilter
define_godot_engine_class_essencials(AudioEffectFilter, AudioEffect)
AudioEffectFilter.memberProcs:
  proc `cutoff=`*(self: Ref[AudioEffectFilter]; freq: Float) {.loadfrom("set_cutoff", 373806689).}
  proc cutoff*(self: Ref[AudioEffectFilter]): Float {.loadfrom("get_cutoff", 1740695150).}
  proc `resonance=`*(self: Ref[AudioEffectFilter]; amount: Float) {.loadfrom("set_resonance", 373806689).}
  proc resonance*(self: Ref[AudioEffectFilter]): Float {.loadfrom("get_resonance", 1740695150).}
  proc `gain=`*(self: Ref[AudioEffectFilter]; amount: Float) {.loadfrom("set_gain", 373806689).}
  proc gain*(self: Ref[AudioEffectFilter]): Float {.loadfrom("get_gain", 1740695150).}
  proc `db=`*(self: Ref[AudioEffectFilter]; amount: AudioEffectFilter|>FilterDB) {.loadfrom("set_db", 771740901).}
  proc db*(self: Ref[AudioEffectFilter]): AudioEffectFilter|>FilterDB {.loadfrom("get_db", 3981721890).}

# AudioEffectLimiter
define_godot_engine_class_essencials(AudioEffectLimiter, AudioEffect)
AudioEffectLimiter.memberProcs:
  proc `ceilingDb=`*(self: Ref[AudioEffectLimiter]; ceiling: Float) {.loadfrom("set_ceiling_db", 373806689).}
  proc ceilingDb*(self: Ref[AudioEffectLimiter]): Float {.loadfrom("get_ceiling_db", 1740695150).}
  proc `thresholdDb=`*(self: Ref[AudioEffectLimiter]; threshold: Float) {.loadfrom("set_threshold_db", 373806689).}
  proc thresholdDb*(self: Ref[AudioEffectLimiter]): Float {.loadfrom("get_threshold_db", 1740695150).}
  proc `softClipDb=`*(self: Ref[AudioEffectLimiter]; softClip: Float) {.loadfrom("set_soft_clip_db", 373806689).}
  proc softClipDb*(self: Ref[AudioEffectLimiter]): Float {.loadfrom("get_soft_clip_db", 1740695150).}
  proc `softClipRatio=`*(self: Ref[AudioEffectLimiter]; softClip: Float) {.loadfrom("set_soft_clip_ratio", 373806689).}
  proc softClipRatio*(self: Ref[AudioEffectLimiter]): Float {.loadfrom("get_soft_clip_ratio", 1740695150).}

# AudioEffectPanner
define_godot_engine_class_essencials(AudioEffectPanner, AudioEffect)
AudioEffectPanner.memberProcs:
  proc `pan=`*(self: Ref[AudioEffectPanner]; cpanume: Float) {.loadfrom("set_pan", 373806689).}
  proc pan*(self: Ref[AudioEffectPanner]): Float {.loadfrom("get_pan", 1740695150).}

# AudioEffectPhaser
define_godot_engine_class_essencials(AudioEffectPhaser, AudioEffect)
AudioEffectPhaser.memberProcs:
  proc `rangeMinHz=`*(self: Ref[AudioEffectPhaser]; hz: Float) {.loadfrom("set_range_min_hz", 373806689).}
  proc rangeMinHz*(self: Ref[AudioEffectPhaser]): Float {.loadfrom("get_range_min_hz", 1740695150).}
  proc `rangeMaxHz=`*(self: Ref[AudioEffectPhaser]; hz: Float) {.loadfrom("set_range_max_hz", 373806689).}
  proc rangeMaxHz*(self: Ref[AudioEffectPhaser]): Float {.loadfrom("get_range_max_hz", 1740695150).}
  proc `rateHz=`*(self: Ref[AudioEffectPhaser]; hz: Float) {.loadfrom("set_rate_hz", 373806689).}
  proc rateHz*(self: Ref[AudioEffectPhaser]): Float {.loadfrom("get_rate_hz", 1740695150).}
  proc `feedback=`*(self: Ref[AudioEffectPhaser]; fbk: Float) {.loadfrom("set_feedback", 373806689).}
  proc feedback*(self: Ref[AudioEffectPhaser]): Float {.loadfrom("get_feedback", 1740695150).}
  proc `depth=`*(self: Ref[AudioEffectPhaser]; depth: Float) {.loadfrom("set_depth", 373806689).}
  proc depth*(self: Ref[AudioEffectPhaser]): Float {.loadfrom("get_depth", 1740695150).}

# AudioEffectPitchShift
define_godot_engine_class_essencials(AudioEffectPitchShift, AudioEffect)
AudioEffectPitchShift.memberProcs:
  proc `pitchScale=`*(self: Ref[AudioEffectPitchShift]; rate: Float) {.loadfrom("set_pitch_scale", 373806689).}
  proc pitchScale*(self: Ref[AudioEffectPitchShift]): Float {.loadfrom("get_pitch_scale", 1740695150).}
  proc `oversampling=`*(self: Ref[AudioEffectPitchShift]; amount: int32) {.loadfrom("set_oversampling", 1286410249).}
  proc oversampling*(self: Ref[AudioEffectPitchShift]): int32 {.loadfrom("get_oversampling", 3905245786).}
  proc `fftSize=`*(self: Ref[AudioEffectPitchShift]; size: AudioEffectPitchShift|>FFTSize) {.loadfrom("set_fft_size", 2323518741).}
  proc fftSize*(self: Ref[AudioEffectPitchShift]): AudioEffectPitchShift|>FFTSize {.loadfrom("get_fft_size", 2361246789).}

# AudioEffectRecord
define_godot_engine_class_essencials(AudioEffectRecord, AudioEffect)
AudioEffectRecord.memberProcs:
  proc setRecordingActive*(self: Ref[AudioEffectRecord]; record: Bool) {.loadfrom("set_recording_active", 2586408642).}
  proc isRecordingActive*(self: Ref[AudioEffectRecord]): Bool {.loadfrom("is_recording_active", 36873697).}
  proc `format=`*(self: Ref[AudioEffectRecord]; format: AudioStreamWAV|>Format) {.loadfrom("set_format", 60648488).}
  proc format*(self: Ref[AudioEffectRecord]): AudioStreamWAV|>Format {.loadfrom("get_format", 3151724922).}
  proc getRecording*(self: Ref[AudioEffectRecord]): Ref[AudioStreamWAV] {.loadfrom("get_recording", 2964110865).}

# AudioEffectReverb
define_godot_engine_class_essencials(AudioEffectReverb, AudioEffect)
AudioEffectReverb.memberProcs:
  proc `predelayMsec=`*(self: Ref[AudioEffectReverb]; msec: Float) {.loadfrom("set_predelay_msec", 373806689).}
  proc predelayMsec*(self: Ref[AudioEffectReverb]): Float {.loadfrom("get_predelay_msec", 1740695150).}
  proc `predelayFeedback=`*(self: Ref[AudioEffectReverb]; feedback: Float) {.loadfrom("set_predelay_feedback", 373806689).}
  proc predelayFeedback*(self: Ref[AudioEffectReverb]): Float {.loadfrom("get_predelay_feedback", 1740695150).}
  proc `roomSize=`*(self: Ref[AudioEffectReverb]; size: Float) {.loadfrom("set_room_size", 373806689).}
  proc roomSize*(self: Ref[AudioEffectReverb]): Float {.loadfrom("get_room_size", 1740695150).}
  proc `damping=`*(self: Ref[AudioEffectReverb]; amount: Float) {.loadfrom("set_damping", 373806689).}
  proc damping*(self: Ref[AudioEffectReverb]): Float {.loadfrom("get_damping", 1740695150).}
  proc `spread=`*(self: Ref[AudioEffectReverb]; amount: Float) {.loadfrom("set_spread", 373806689).}
  proc spread*(self: Ref[AudioEffectReverb]): Float {.loadfrom("get_spread", 1740695150).}
  proc `dry=`*(self: Ref[AudioEffectReverb]; amount: Float) {.loadfrom("set_dry", 373806689).}
  proc dry*(self: Ref[AudioEffectReverb]): Float {.loadfrom("get_dry", 1740695150).}
  proc `wet=`*(self: Ref[AudioEffectReverb]; amount: Float) {.loadfrom("set_wet", 373806689).}
  proc wet*(self: Ref[AudioEffectReverb]): Float {.loadfrom("get_wet", 1740695150).}
  proc `hpf=`*(self: Ref[AudioEffectReverb]; amount: Float) {.loadfrom("set_hpf", 373806689).}
  proc hpf*(self: Ref[AudioEffectReverb]): Float {.loadfrom("get_hpf", 1740695150).}

# AudioEffectSpectrumAnalyzer
define_godot_engine_class_essencials(AudioEffectSpectrumAnalyzer, AudioEffect)
AudioEffectSpectrumAnalyzer.memberProcs:
  proc `bufferLength=`*(self: Ref[AudioEffectSpectrumAnalyzer]; seconds: Float) {.loadfrom("set_buffer_length", 373806689).}
  proc bufferLength*(self: Ref[AudioEffectSpectrumAnalyzer]): Float {.loadfrom("get_buffer_length", 1740695150).}
  proc `tapBackPos=`*(self: Ref[AudioEffectSpectrumAnalyzer]; seconds: Float) {.loadfrom("set_tap_back_pos", 373806689).}
  proc tapBackPos*(self: Ref[AudioEffectSpectrumAnalyzer]): Float {.loadfrom("get_tap_back_pos", 1740695150).}
  proc `fftSize=`*(self: Ref[AudioEffectSpectrumAnalyzer]; size: AudioEffectSpectrumAnalyzer|>FFTSize) {.loadfrom("set_fft_size", 1202879215).}
  proc fftSize*(self: Ref[AudioEffectSpectrumAnalyzer]): AudioEffectSpectrumAnalyzer|>FFTSize {.loadfrom("get_fft_size", 3925405343).}

# AudioEffectStereoEnhance
define_godot_engine_class_essencials(AudioEffectStereoEnhance, AudioEffect)
AudioEffectStereoEnhance.memberProcs:
  proc `panPullout=`*(self: Ref[AudioEffectStereoEnhance]; amount: Float) {.loadfrom("set_pan_pullout", 373806689).}
  proc panPullout*(self: Ref[AudioEffectStereoEnhance]): Float {.loadfrom("get_pan_pullout", 1740695150).}
  proc `timePullout=`*(self: Ref[AudioEffectStereoEnhance]; amount: Float) {.loadfrom("set_time_pullout", 373806689).}
  proc timePullout*(self: Ref[AudioEffectStereoEnhance]): Float {.loadfrom("get_time_pullout", 1740695150).}
  proc `surround=`*(self: Ref[AudioEffectStereoEnhance]; amount: Float) {.loadfrom("set_surround", 373806689).}
  proc surround*(self: Ref[AudioEffectStereoEnhance]): Float {.loadfrom("get_surround", 1740695150).}

# AudioStreamGenerator
define_godot_engine_class_essencials(AudioStreamGenerator, AudioStream)
AudioStreamGenerator.memberProcs:
  proc `mixRate=`*(self: Ref[AudioStreamGenerator]; hz: Float) {.loadfrom("set_mix_rate", 373806689).}
  proc mixRate*(self: Ref[AudioStreamGenerator]): Float {.loadfrom("get_mix_rate", 1740695150).}
  proc `bufferLength=`*(self: Ref[AudioStreamGenerator]; seconds: Float) {.loadfrom("set_buffer_length", 373806689).}
  proc bufferLength*(self: Ref[AudioStreamGenerator]): Float {.loadfrom("get_buffer_length", 1740695150).}

# AudioStreamMP3
define_godot_engine_class_essencials(AudioStreamMP3, AudioStream)
AudioStreamMP3.memberProcs:
  proc `data=`*(self: Ref[AudioStreamMP3]; data: PackedByteArray) {.loadfrom("set_data", 2971499966).}
  proc data*(self: Ref[AudioStreamMP3]): PackedByteArray {.loadfrom("get_data", 2362200018).}
  proc `loop=`*(self: Ref[AudioStreamMP3]; enable: Bool) {.loadfrom("set_loop", 2586408642).}
  proc hasLoop*(self: Ref[AudioStreamMP3]): Bool {.loadfrom("has_loop", 36873697).}
  proc `loopOffset=`*(self: Ref[AudioStreamMP3]; seconds: float64) {.loadfrom("set_loop_offset", 373806689).}
  proc loopOffset*(self: Ref[AudioStreamMP3]): float64 {.loadfrom("get_loop_offset", 1740695150).}
  proc `bpm=`*(self: Ref[AudioStreamMP3]; bpm: float64) {.loadfrom("set_bpm", 373806689).}
  proc bpm*(self: Ref[AudioStreamMP3]): float64 {.loadfrom("get_bpm", 1740695150).}
  proc `beatCount=`*(self: Ref[AudioStreamMP3]; count: int32) {.loadfrom("set_beat_count", 1286410249).}
  proc beatCount*(self: Ref[AudioStreamMP3]): int32 {.loadfrom("get_beat_count", 3905245786).}
  proc `barBeats=`*(self: Ref[AudioStreamMP3]; count: int32) {.loadfrom("set_bar_beats", 1286410249).}
  proc barBeats*(self: Ref[AudioStreamMP3]): int32 {.loadfrom("get_bar_beats", 3905245786).}

# AudioStreamMicrophone
define_godot_engine_class_essencials(AudioStreamMicrophone, AudioStream)

# AudioStreamOggVorbis
define_godot_engine_class_essencials(AudioStreamOggVorbis, AudioStream)
AudioStreamOggVorbis.memberProcs:
  proc `packetSequence=`*(self: Ref[AudioStreamOggVorbis]; packetSequence: Ref[OggPacketSequence]) {.loadfrom("set_packet_sequence", 438882457).}
  proc packetSequence*(self: Ref[AudioStreamOggVorbis]): Ref[OggPacketSequence] {.loadfrom("get_packet_sequence", 2801636033).}
  proc `loop=`*(self: Ref[AudioStreamOggVorbis]; enable: Bool) {.loadfrom("set_loop", 2586408642).}
  proc hasLoop*(self: Ref[AudioStreamOggVorbis]): Bool {.loadfrom("has_loop", 36873697).}
  proc `loopOffset=`*(self: Ref[AudioStreamOggVorbis]; seconds: float64) {.loadfrom("set_loop_offset", 373806689).}
  proc loopOffset*(self: Ref[AudioStreamOggVorbis]): float64 {.loadfrom("get_loop_offset", 1740695150).}
  proc `bpm=`*(self: Ref[AudioStreamOggVorbis]; bpm: float64) {.loadfrom("set_bpm", 373806689).}
  proc bpm*(self: Ref[AudioStreamOggVorbis]): float64 {.loadfrom("get_bpm", 1740695150).}
  proc `beatCount=`*(self: Ref[AudioStreamOggVorbis]; count: int32) {.loadfrom("set_beat_count", 1286410249).}
  proc beatCount*(self: Ref[AudioStreamOggVorbis]): int32 {.loadfrom("get_beat_count", 3905245786).}
  proc `barBeats=`*(self: Ref[AudioStreamOggVorbis]; count: int32) {.loadfrom("set_bar_beats", 1286410249).}
  proc barBeats*(self: Ref[AudioStreamOggVorbis]): int32 {.loadfrom("get_bar_beats", 3905245786).}

# AudioStreamPolyphonic
define_godot_engine_class_essencials(AudioStreamPolyphonic, AudioStream)
AudioStreamPolyphonic.memberProcs:
  proc `polyphony=`*(self: Ref[AudioStreamPolyphonic]; voices: int32) {.loadfrom("set_polyphony", 1286410249).}
  proc polyphony*(self: Ref[AudioStreamPolyphonic]): int32 {.loadfrom("get_polyphony", 3905245786).}

# AudioStreamRandomizer
define_godot_engine_class_essencials(AudioStreamRandomizer, AudioStream)
AudioStreamRandomizer.memberProcs:
  proc addStream*(self: Ref[AudioStreamRandomizer]; index: int32; stream: Ref[AudioStream]; weight: Float = 1.0) {.loadfrom("add_stream", 3197802065).}
  proc moveStream*(self: Ref[AudioStreamRandomizer]; indexFrom: int32; indexTo: int32) {.loadfrom("move_stream", 3937882851).}
  proc removeStream*(self: Ref[AudioStreamRandomizer]; index: int32) {.loadfrom("remove_stream", 1286410249).}
  proc setStream*(self: Ref[AudioStreamRandomizer]; index: int32; stream: Ref[AudioStream]) {.loadfrom("set_stream", 111075094).}
  proc getStream*(self: Ref[AudioStreamRandomizer]; index: int32): Ref[AudioStream] {.loadfrom("get_stream", 2739380747).}
  proc setStreamProbabilityWeight*(self: Ref[AudioStreamRandomizer]; index: int32; weight: Float) {.loadfrom("set_stream_probability_weight", 1602489585).}
  proc getStreamProbabilityWeight*(self: Ref[AudioStreamRandomizer]; index: int32): Float {.loadfrom("get_stream_probability_weight", 2339986948).}
  proc `streamsCount=`*(self: Ref[AudioStreamRandomizer]; count: int32) {.loadfrom("set_streams_count", 1286410249).}
  proc streamsCount*(self: Ref[AudioStreamRandomizer]): int32 {.loadfrom("get_streams_count", 3905245786).}
  proc `randomPitch=`*(self: Ref[AudioStreamRandomizer]; scale: Float) {.loadfrom("set_random_pitch", 373806689).}
  proc randomPitch*(self: Ref[AudioStreamRandomizer]): Float {.loadfrom("get_random_pitch", 1740695150).}
  proc `randomVolumeOffdb=`*(self: Ref[AudioStreamRandomizer]; dbOffset: Float) {.loadfrom("set_random_volume_offset_db", 373806689).}
  proc randomVolumeOffsetDb*(self: Ref[AudioStreamRandomizer]): Float {.loadfrom("get_random_volume_offset_db", 1740695150).}
  proc `playbackMode=`*(self: Ref[AudioStreamRandomizer]; mode: AudioStreamRandomizer|>PlaybackMode) {.loadfrom("set_playback_mode", 3950967023).}
  proc playbackMode*(self: Ref[AudioStreamRandomizer]): AudioStreamRandomizer|>PlaybackMode {.loadfrom("get_playback_mode", 3943055077).}

# AudioStreamWAV
define_godot_engine_class_essencials(AudioStreamWAV, AudioStream)
AudioStreamWAV.memberProcs:
  proc `data=`*(self: Ref[AudioStreamWAV]; data: PackedByteArray) {.loadfrom("set_data", 2971499966).}
  proc data*(self: Ref[AudioStreamWAV]): PackedByteArray {.loadfrom("get_data", 2362200018).}
  proc `format=`*(self: Ref[AudioStreamWAV]; format: AudioStreamWAV|>Format) {.loadfrom("set_format", 60648488).}
  proc format*(self: Ref[AudioStreamWAV]): AudioStreamWAV|>Format {.loadfrom("get_format", 3151724922).}
  proc `loopMode=`*(self: Ref[AudioStreamWAV]; loopMode: AudioStreamWAV|>LoopMode) {.loadfrom("set_loop_mode", 2444882972).}
  proc loopMode*(self: Ref[AudioStreamWAV]): AudioStreamWAV|>LoopMode {.loadfrom("get_loop_mode", 393560655).}
  proc `loopBegin=`*(self: Ref[AudioStreamWAV]; loopBegin: int32) {.loadfrom("set_loop_begin", 1286410249).}
  proc loopBegin*(self: Ref[AudioStreamWAV]): int32 {.loadfrom("get_loop_begin", 3905245786).}
  proc `loopEnd=`*(self: Ref[AudioStreamWAV]; loopEnd: int32) {.loadfrom("set_loop_end", 1286410249).}
  proc loopEnd*(self: Ref[AudioStreamWAV]): int32 {.loadfrom("get_loop_end", 3905245786).}
  proc `mixRate=`*(self: Ref[AudioStreamWAV]; mixRate: int32) {.loadfrom("set_mix_rate", 1286410249).}
  proc mixRate*(self: Ref[AudioStreamWAV]): int32 {.loadfrom("get_mix_rate", 3905245786).}
  proc `stereo=`*(self: Ref[AudioStreamWAV]; stereo: Bool) {.loadfrom("set_stereo", 2586408642).}
  proc isStereo*(self: Ref[AudioStreamWAV]): Bool {.loadfrom("is_stereo", 36873697).}
  proc saveToWav*(self: Ref[AudioStreamWAV]; path: String): Error {.loadfrom("save_to_wav", 166001499).}

# CameraAttributesPhysical
define_godot_engine_class_essencials(CameraAttributesPhysical, CameraAttributes)
CameraAttributesPhysical.memberProcs:
  proc `aperture=`*(self: Ref[CameraAttributesPhysical]; aperture: Float) {.loadfrom("set_aperture", 373806689).}
  proc aperture*(self: Ref[CameraAttributesPhysical]): Float {.loadfrom("get_aperture", 1740695150).}
  proc `shutterSpeed=`*(self: Ref[CameraAttributesPhysical]; shutterSpeed: Float) {.loadfrom("set_shutter_speed", 373806689).}
  proc shutterSpeed*(self: Ref[CameraAttributesPhysical]): Float {.loadfrom("get_shutter_speed", 1740695150).}
  proc `focalLength=`*(self: Ref[CameraAttributesPhysical]; focalLength: Float) {.loadfrom("set_focal_length", 373806689).}
  proc focalLength*(self: Ref[CameraAttributesPhysical]): Float {.loadfrom("get_focal_length", 1740695150).}
  proc `focusDistance=`*(self: Ref[CameraAttributesPhysical]; focusDistance: Float) {.loadfrom("set_focus_distance", 373806689).}
  proc focusDistance*(self: Ref[CameraAttributesPhysical]): Float {.loadfrom("get_focus_distance", 1740695150).}
  proc `near=`*(self: Ref[CameraAttributesPhysical]; near: Float) {.loadfrom("set_near", 373806689).}
  proc near*(self: Ref[CameraAttributesPhysical]): Float {.loadfrom("get_near", 1740695150).}
  proc `far=`*(self: Ref[CameraAttributesPhysical]; far: Float) {.loadfrom("set_far", 373806689).}
  proc far*(self: Ref[CameraAttributesPhysical]): Float {.loadfrom("get_far", 1740695150).}
  proc getFov*(self: Ref[CameraAttributesPhysical]): Float {.loadfrom("get_fov", 1740695150).}
  proc `autoExposureMaxExposureValue=`*(self: Ref[CameraAttributesPhysical]; exposureValueMax: Float) {.loadfrom("set_auto_exposure_max_exposure_value", 373806689).}
  proc autoExposureMaxExposureValue*(self: Ref[CameraAttributesPhysical]): Float {.loadfrom("get_auto_exposure_max_exposure_value", 1740695150).}
  proc `autoExposureMinExposureValue=`*(self: Ref[CameraAttributesPhysical]; exposureValueMin: Float) {.loadfrom("set_auto_exposure_min_exposure_value", 373806689).}
  proc autoExposureMinExposureValue*(self: Ref[CameraAttributesPhysical]): Float {.loadfrom("get_auto_exposure_min_exposure_value", 1740695150).}

# CameraAttributesPractical
define_godot_engine_class_essencials(CameraAttributesPractical, CameraAttributes)
CameraAttributesPractical.memberProcs:
  proc `dofBlurFarEnabled=`*(self: Ref[CameraAttributesPractical]; enabled: Bool) {.loadfrom("set_dof_blur_far_enabled", 2586408642).}
  proc isDofBlurFarEnabled*(self: Ref[CameraAttributesPractical]): Bool {.loadfrom("is_dof_blur_far_enabled", 36873697).}
  proc `dofBlurFarDistance=`*(self: Ref[CameraAttributesPractical]; distance: Float) {.loadfrom("set_dof_blur_far_distance", 373806689).}
  proc dofBlurFarDistance*(self: Ref[CameraAttributesPractical]): Float {.loadfrom("get_dof_blur_far_distance", 1740695150).}
  proc `dofBlurFarTransition=`*(self: Ref[CameraAttributesPractical]; distance: Float) {.loadfrom("set_dof_blur_far_transition", 373806689).}
  proc dofBlurFarTransition*(self: Ref[CameraAttributesPractical]): Float {.loadfrom("get_dof_blur_far_transition", 1740695150).}
  proc `dofBlurNearEnabled=`*(self: Ref[CameraAttributesPractical]; enabled: Bool) {.loadfrom("set_dof_blur_near_enabled", 2586408642).}
  proc isDofBlurNearEnabled*(self: Ref[CameraAttributesPractical]): Bool {.loadfrom("is_dof_blur_near_enabled", 36873697).}
  proc `dofBlurNearDistance=`*(self: Ref[CameraAttributesPractical]; distance: Float) {.loadfrom("set_dof_blur_near_distance", 373806689).}
  proc dofBlurNearDistance*(self: Ref[CameraAttributesPractical]): Float {.loadfrom("get_dof_blur_near_distance", 1740695150).}
  proc `dofBlurNearTransition=`*(self: Ref[CameraAttributesPractical]; distance: Float) {.loadfrom("set_dof_blur_near_transition", 373806689).}
  proc dofBlurNearTransition*(self: Ref[CameraAttributesPractical]): Float {.loadfrom("get_dof_blur_near_transition", 1740695150).}
  proc `dofBlurAmount=`*(self: Ref[CameraAttributesPractical]; amount: Float) {.loadfrom("set_dof_blur_amount", 373806689).}
  proc dofBlurAmount*(self: Ref[CameraAttributesPractical]): Float {.loadfrom("get_dof_blur_amount", 1740695150).}
  proc `autoExposureMaxSensitivity=`*(self: Ref[CameraAttributesPractical]; maxSensitivity: Float) {.loadfrom("set_auto_exposure_max_sensitivity", 373806689).}
  proc autoExposureMaxSensitivity*(self: Ref[CameraAttributesPractical]): Float {.loadfrom("get_auto_exposure_max_sensitivity", 1740695150).}
  proc `autoExposureMinSensitivity=`*(self: Ref[CameraAttributesPractical]; minSensitivity: Float) {.loadfrom("set_auto_exposure_min_sensitivity", 373806689).}
  proc autoExposureMinSensitivity*(self: Ref[CameraAttributesPractical]): Float {.loadfrom("get_auto_exposure_min_sensitivity", 1740695150).}

# FontFile
define_godot_engine_class_essencials(FontFile, Font)
FontFile.memberProcs:
  proc loadBitmapFont*(self: Ref[FontFile]; path: String): Error {.loadfrom("load_bitmap_font", 166001499).}
  proc loadDynamicFont*(self: Ref[FontFile]; path: String): Error {.loadfrom("load_dynamic_font", 166001499).}
  proc `data=`*(self: Ref[FontFile]; data: PackedByteArray) {.loadfrom("set_data", 2971499966).}
  proc data*(self: Ref[FontFile]): PackedByteArray {.loadfrom("get_data", 2362200018).}
  proc `fontName=`*(self: Ref[FontFile]; name: String) {.loadfrom("set_font_name", 83702148).}
  proc `fontStyleName=`*(self: Ref[FontFile]; name: String) {.loadfrom("set_font_style_name", 83702148).}
  proc `fontStyle=`*(self: Ref[FontFile]; style: set[TextServer|>FontStyle]) {.loadfrom("set_font_style", 918070724).}
  proc `fontWeight=`*(self: Ref[FontFile]; weight: int32) {.loadfrom("set_font_weight", 1286410249).}
  proc `fontStretch=`*(self: Ref[FontFile]; stretch: int32) {.loadfrom("set_font_stretch", 1286410249).}
  proc `antialiasing=`*(self: Ref[FontFile]; antialiasing: TextServer|>FontAntialiasing) {.loadfrom("set_antialiasing", 1669900).}
  proc antialiasing*(self: Ref[FontFile]): TextServer|>FontAntialiasing {.loadfrom("get_antialiasing", 4262718649).}
  proc `generateMipmaps=`*(self: Ref[FontFile]; generateMipmaps: Bool) {.loadfrom("set_generate_mipmaps", 2586408642).}
  proc generateMipmaps*(self: Ref[FontFile]): Bool {.loadfrom("get_generate_mipmaps", 36873697).}
  proc `multichannelSignedDistanceField=`*(self: Ref[FontFile]; msdf: Bool) {.loadfrom("set_multichannel_signed_distance_field", 2586408642).}
  proc isMultichannelSignedDistanceField*(self: Ref[FontFile]): Bool {.loadfrom("is_multichannel_signed_distance_field", 36873697).}
  proc `msdfPixelRange=`*(self: Ref[FontFile]; msdfPixelRange: int32) {.loadfrom("set_msdf_pixel_range", 1286410249).}
  proc msdfPixelRange*(self: Ref[FontFile]): int32 {.loadfrom("get_msdf_pixel_range", 3905245786).}
  proc `msdfSize=`*(self: Ref[FontFile]; msdfSize: int32) {.loadfrom("set_msdf_size", 1286410249).}
  proc msdfSize*(self: Ref[FontFile]): int32 {.loadfrom("get_msdf_size", 3905245786).}
  proc `fixedSize=`*(self: Ref[FontFile]; fixedSize: int32) {.loadfrom("set_fixed_size", 1286410249).}
  proc fixedSize*(self: Ref[FontFile]): int32 {.loadfrom("get_fixed_size", 3905245786).}
  proc `allowSystemFallback=`*(self: Ref[FontFile]; allowSystemFallback: Bool) {.loadfrom("set_allow_system_fallback", 2586408642).}
  proc isAllowSystemFallback*(self: Ref[FontFile]): Bool {.loadfrom("is_allow_system_fallback", 36873697).}
  proc `forceAutohinter=`*(self: Ref[FontFile]; forceAutohinter: Bool) {.loadfrom("set_force_autohinter", 2586408642).}
  proc isForceAutohinter*(self: Ref[FontFile]): Bool {.loadfrom("is_force_autohinter", 36873697).}
  proc `hinting=`*(self: Ref[FontFile]; hinting: TextServer|>Hinting) {.loadfrom("set_hinting", 1827459492).}
  proc hinting*(self: Ref[FontFile]): TextServer|>Hinting {.loadfrom("get_hinting", 3683214614).}
  proc `subpixelPositioning=`*(self: Ref[FontFile]; subpixelPositioning: TextServer|>SubpixelPositioning) {.loadfrom("set_subpixel_positioning", 4225742182).}
  proc subpixelPositioning*(self: Ref[FontFile]): TextServer|>SubpixelPositioning {.loadfrom("get_subpixel_positioning", 1069238588).}
  proc `oversampling=`*(self: Ref[FontFile]; oversampling: Float) {.loadfrom("set_oversampling", 373806689).}
  proc oversampling*(self: Ref[FontFile]): Float {.loadfrom("get_oversampling", 1740695150).}
  proc getCacheCount*(self: Ref[FontFile]): int32 {.loadfrom("get_cache_count", 3905245786).}
  proc clearCache*(self: Ref[FontFile]) {.loadfrom("clear_cache", 3218959716).}
  proc removeCache*(self: Ref[FontFile]; cacheIndex: int32) {.loadfrom("remove_cache", 1286410249).}
  proc getSizeCacheList*(self: Ref[FontFile]; cacheIndex: int32): TypedArray[Vector2i] {.loadfrom("get_size_cache_list", 663333327).}
  proc clearSizeCache*(self: Ref[FontFile]; cacheIndex: int32) {.loadfrom("clear_size_cache", 1286410249).}
  proc removeSizeCache*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i) {.loadfrom("remove_size_cache", 2311374912).}
  proc setVariationCoordinates*(self: Ref[FontFile]; cacheIndex: int32; variationCoordinates: Dictionary) {.loadfrom("set_variation_coordinates", 64545446).}
  proc getVariationCoordinates*(self: Ref[FontFile]; cacheIndex: int32): Dictionary {.loadfrom("get_variation_coordinates", 3485342025).}
  proc setEmbolden*(self: Ref[FontFile]; cacheIndex: int32; strength: Float) {.loadfrom("set_embolden", 1602489585).}
  proc getEmbolden*(self: Ref[FontFile]; cacheIndex: int32): Float {.loadfrom("get_embolden", 2339986948).}
  proc setTransform*(self: Ref[FontFile]; cacheIndex: int32; transform: Transform2D) {.loadfrom("set_transform", 30160968).}
  proc getTransform*(self: Ref[FontFile]; cacheIndex: int32): Transform2D {.loadfrom("get_transform", 3836996910).}
  proc setFaceIndex*(self: Ref[FontFile]; cacheIndex: int32; faceIndex: int64) {.loadfrom("set_face_index", 3937882851).}
  proc getFaceIndex*(self: Ref[FontFile]; cacheIndex: int32): int64 {.loadfrom("get_face_index", 923996154).}
  proc setCacheAscent*(self: Ref[FontFile]; cacheIndex: int32; size: int32; ascent: Float) {.loadfrom("set_cache_ascent", 3506521499).}
  proc getCacheAscent*(self: Ref[FontFile]; cacheIndex: int32; size: int32): Float {.loadfrom("get_cache_ascent", 3085491603).}
  proc setCacheDescent*(self: Ref[FontFile]; cacheIndex: int32; size: int32; descent: Float) {.loadfrom("set_cache_descent", 3506521499).}
  proc getCacheDescent*(self: Ref[FontFile]; cacheIndex: int32; size: int32): Float {.loadfrom("get_cache_descent", 3085491603).}
  proc setCacheUnderlinePosition*(self: Ref[FontFile]; cacheIndex: int32; size: int32; underlinePosition: Float) {.loadfrom("set_cache_underline_position", 3506521499).}
  proc getCacheUnderlinePosition*(self: Ref[FontFile]; cacheIndex: int32; size: int32): Float {.loadfrom("get_cache_underline_position", 3085491603).}
  proc setCacheUnderlineThickness*(self: Ref[FontFile]; cacheIndex: int32; size: int32; underlineThickness: Float) {.loadfrom("set_cache_underline_thickness", 3506521499).}
  proc getCacheUnderlineThickness*(self: Ref[FontFile]; cacheIndex: int32; size: int32): Float {.loadfrom("get_cache_underline_thickness", 3085491603).}
  proc setCacheScale*(self: Ref[FontFile]; cacheIndex: int32; size: int32; scale: Float) {.loadfrom("set_cache_scale", 3506521499).}
  proc getCacheScale*(self: Ref[FontFile]; cacheIndex: int32; size: int32): Float {.loadfrom("get_cache_scale", 3085491603).}
  proc getTextureCount*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i): int32 {.loadfrom("get_texture_count", 1987661582).}
  proc clearTextures*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i) {.loadfrom("clear_textures", 2311374912).}
  proc removeTexture*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i; textureIndex: int32) {.loadfrom("remove_texture", 2328951467).}
  proc setTextureImage*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i; textureIndex: int32; image: Ref[Image]) {.loadfrom("set_texture_image", 4157974066).}
  proc getTextureImage*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i; textureIndex: int32): Ref[Image] {.loadfrom("get_texture_image", 3878418953).}
  proc setTextureOffsets*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i; textureIndex: int32; offset: PackedInt32Array) {.loadfrom("set_texture_offsets", 2849993437).}
  proc getTextureOffsets*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i; textureIndex: int32): PackedInt32Array {.loadfrom("get_texture_offsets", 3703444828).}
  proc getGlyphList*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i): PackedInt32Array {.loadfrom("get_glyph_list", 681709689).}
  proc clearGlyphs*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i) {.loadfrom("clear_glyphs", 2311374912).}
  proc removeGlyph*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i; glyph: int32) {.loadfrom("remove_glyph", 2328951467).}
  proc setGlyphAdvance*(self: Ref[FontFile]; cacheIndex: int32; size: int32; glyph: int32; advance: Vector2) {.loadfrom("set_glyph_advance", 947991729).}
  proc getGlyphAdvance*(self: Ref[FontFile]; cacheIndex: int32; size: int32; glyph: int32): Vector2 {.loadfrom("get_glyph_advance", 1601573536).}
  proc setGlyphOffset*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i; glyph: int32; offset: Vector2) {.loadfrom("set_glyph_offset", 921719850).}
  proc getGlyphOffset*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i; glyph: int32): Vector2 {.loadfrom("get_glyph_offset", 3205412300).}
  proc setGlyphSize*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i; glyph: int32; glSize: Vector2) {.loadfrom("set_glyph_size", 921719850).}
  proc getGlyphSize*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i; glyph: int32): Vector2 {.loadfrom("get_glyph_size", 3205412300).}
  proc setGlyphUvRect*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i; glyph: int32; uvRect: Rect2) {.loadfrom("set_glyph_uv_rect", 3821620992).}
  proc getGlyphUvRect*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i; glyph: int32): Rect2 {.loadfrom("get_glyph_uv_rect", 3927917900).}
  proc setGlyphTextureIdx*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i; glyph: int32; textureIdx: int32) {.loadfrom("set_glyph_texture_idx", 355564111).}
  proc getGlyphTextureIdx*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i; glyph: int32): int32 {.loadfrom("get_glyph_texture_idx", 1629411054).}
  proc getKerningList*(self: Ref[FontFile]; cacheIndex: int32; size: int32): TypedArray[Vector2i] {.loadfrom("get_kerning_list", 2345056839).}
  proc clearKerningMap*(self: Ref[FontFile]; cacheIndex: int32; size: int32) {.loadfrom("clear_kerning_map", 3937882851).}
  proc removeKerning*(self: Ref[FontFile]; cacheIndex: int32; size: int32; glyphPair: Vector2i) {.loadfrom("remove_kerning", 3930204747).}
  proc setKerning*(self: Ref[FontFile]; cacheIndex: int32; size: int32; glyphPair: Vector2i; kerning: Vector2) {.loadfrom("set_kerning", 3182200918).}
  proc getKerning*(self: Ref[FontFile]; cacheIndex: int32; size: int32; glyphPair: Vector2i): Vector2 {.loadfrom("get_kerning", 1611912865).}
  proc renderRange*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i; start: Int; `end`: Int) {.loadfrom("render_range", 355564111).}
  proc renderGlyph*(self: Ref[FontFile]; cacheIndex: int32; size: Vector2i; index: int32) {.loadfrom("render_glyph", 2328951467).}
  proc setLanguageSupportOverride*(self: Ref[FontFile]; language: String; supported: Bool) {.loadfrom("set_language_support_override", 2678287736).}
  proc getLanguageSupportOverride*(self: Ref[FontFile]; language: String): Bool {.loadfrom("get_language_support_override", 3927539163).}
  proc removeLanguageSupportOverride*(self: Ref[FontFile]; language: String) {.loadfrom("remove_language_support_override", 83702148).}
  proc getLanguageSupportOverrides*(self: Ref[FontFile]): PackedStringArray {.loadfrom("get_language_support_overrides", 1139954409).}
  proc setScriptSupportOverride*(self: Ref[FontFile]; script: String; supported: Bool) {.loadfrom("set_script_support_override", 2678287736).}
  proc getScriptSupportOverride*(self: Ref[FontFile]; script: String): Bool {.loadfrom("get_script_support_override", 3927539163).}
  proc removeScriptSupportOverride*(self: Ref[FontFile]; script: String) {.loadfrom("remove_script_support_override", 83702148).}
  proc getScriptSupportOverrides*(self: Ref[FontFile]): PackedStringArray {.loadfrom("get_script_support_overrides", 1139954409).}
  proc `opentypeFeatureOverrides=`*(self: Ref[FontFile]; overrides: Dictionary) {.loadfrom("set_opentype_feature_overrides", 4155329257).}
  proc opentypeFeatureOverrides*(self: Ref[FontFile]): Dictionary {.loadfrom("get_opentype_feature_overrides", 3102165223).}
  proc getGlyphIndex*(self: Ref[FontFile]; size: int32; char: Int; variationSelector: Int): int32 {.loadfrom("get_glyph_index", 864943070).}
  proc getCharFromGlyphIndex*(self: Ref[FontFile]; size: int32; glyphIndex: int32): Int {.loadfrom("get_char_from_glyph_index", 3175239445).}

# FontVariation
define_godot_engine_class_essencials(FontVariation, Font)
FontVariation.memberProcs:
  proc `baseFont=`*(self: Ref[FontVariation]; font: Ref[Font]) {.loadfrom("set_base_font", 1262170328).}
  proc baseFont*(self: Ref[FontVariation]): Ref[Font] {.loadfrom("get_base_font", 3229501585).}
  proc `variationOpentype=`*(self: Ref[FontVariation]; coords: Dictionary) {.loadfrom("set_variation_opentype", 4155329257).}
  proc variationOpentype*(self: Ref[FontVariation]): Dictionary {.loadfrom("get_variation_opentype", 3102165223).}
  proc `variationEmbolden=`*(self: Ref[FontVariation]; strength: Float) {.loadfrom("set_variation_embolden", 373806689).}
  proc variationEmbolden*(self: Ref[FontVariation]): Float {.loadfrom("get_variation_embolden", 1740695150).}
  proc `variationFaceIndex=`*(self: Ref[FontVariation]; faceIndex: int32) {.loadfrom("set_variation_face_index", 1286410249).}
  proc variationFaceIndex*(self: Ref[FontVariation]): int32 {.loadfrom("get_variation_face_index", 3905245786).}
  proc `variationTransform=`*(self: Ref[FontVariation]; transform: Transform2D) {.loadfrom("set_variation_transform", 2761652528).}
  proc variationTransform*(self: Ref[FontVariation]): Transform2D {.loadfrom("get_variation_transform", 3814499831).}
  proc `opentypeFeatures=`*(self: Ref[FontVariation]; features: Dictionary) {.loadfrom("set_opentype_features", 4155329257).}
  proc `spacing=`*(self: Ref[FontVariation]; spacing: TextServer|>SpacingType; value: int32) {.loadfrom("set_spacing", 3122339690).}

# SystemFont
define_godot_engine_class_essencials(SystemFont, Font)
SystemFont.memberProcs:
  proc `antialiasing=`*(self: Ref[SystemFont]; antialiasing: TextServer|>FontAntialiasing) {.loadfrom("set_antialiasing", 1669900).}
  proc antialiasing*(self: Ref[SystemFont]): TextServer|>FontAntialiasing {.loadfrom("get_antialiasing", 4262718649).}
  proc `generateMipmaps=`*(self: Ref[SystemFont]; generateMipmaps: Bool) {.loadfrom("set_generate_mipmaps", 2586408642).}
  proc generateMipmaps*(self: Ref[SystemFont]): Bool {.loadfrom("get_generate_mipmaps", 36873697).}
  proc `allowSystemFallback=`*(self: Ref[SystemFont]; allowSystemFallback: Bool) {.loadfrom("set_allow_system_fallback", 2586408642).}
  proc isAllowSystemFallback*(self: Ref[SystemFont]): Bool {.loadfrom("is_allow_system_fallback", 36873697).}
  proc `forceAutohinter=`*(self: Ref[SystemFont]; forceAutohinter: Bool) {.loadfrom("set_force_autohinter", 2586408642).}
  proc isForceAutohinter*(self: Ref[SystemFont]): Bool {.loadfrom("is_force_autohinter", 36873697).}
  proc `hinting=`*(self: Ref[SystemFont]; hinting: TextServer|>Hinting) {.loadfrom("set_hinting", 1827459492).}
  proc hinting*(self: Ref[SystemFont]): TextServer|>Hinting {.loadfrom("get_hinting", 3683214614).}
  proc `subpixelPositioning=`*(self: Ref[SystemFont]; subpixelPositioning: TextServer|>SubpixelPositioning) {.loadfrom("set_subpixel_positioning", 4225742182).}
  proc subpixelPositioning*(self: Ref[SystemFont]): TextServer|>SubpixelPositioning {.loadfrom("get_subpixel_positioning", 1069238588).}
  proc `multichannelSignedDistanceField=`*(self: Ref[SystemFont]; msdf: Bool) {.loadfrom("set_multichannel_signed_distance_field", 2586408642).}
  proc isMultichannelSignedDistanceField*(self: Ref[SystemFont]): Bool {.loadfrom("is_multichannel_signed_distance_field", 36873697).}
  proc `msdfPixelRange=`*(self: Ref[SystemFont]; msdfPixelRange: int32) {.loadfrom("set_msdf_pixel_range", 1286410249).}
  proc msdfPixelRange*(self: Ref[SystemFont]): int32 {.loadfrom("get_msdf_pixel_range", 3905245786).}
  proc `msdfSize=`*(self: Ref[SystemFont]; msdfSize: int32) {.loadfrom("set_msdf_size", 1286410249).}
  proc msdfSize*(self: Ref[SystemFont]): int32 {.loadfrom("get_msdf_size", 3905245786).}
  proc `oversampling=`*(self: Ref[SystemFont]; oversampling: Float) {.loadfrom("set_oversampling", 373806689).}
  proc oversampling*(self: Ref[SystemFont]): Float {.loadfrom("get_oversampling", 1740695150).}
  proc fontNames*(self: Ref[SystemFont]): PackedStringArray {.loadfrom("get_font_names", 1139954409).}
  proc `fontNames=`*(self: Ref[SystemFont]; names: PackedStringArray) {.loadfrom("set_font_names", 4015028928).}
  proc fontItalic*(self: Ref[SystemFont]): Bool {.loadfrom("get_font_italic", 36873697).}
  proc `fontItalic=`*(self: Ref[SystemFont]; italic: Bool) {.loadfrom("set_font_italic", 2586408642).}
  proc `fontWeight=`*(self: Ref[SystemFont]; weight: int32) {.loadfrom("set_font_weight", 1286410249).}
  proc `fontStretch=`*(self: Ref[SystemFont]; stretch: int32) {.loadfrom("set_font_stretch", 1286410249).}

# GLTFDocumentExtensionConvertImporterMesh
define_godot_engine_class_essencials(GLTFDocumentExtensionConvertImporterMesh, GLTFDocumentExtension)

# GLTFDocumentExtensionPhysics
define_godot_engine_class_essencials(GLTFDocumentExtensionPhysics, GLTFDocumentExtension)

# GLTFDocumentExtensionTextureWebP
define_godot_engine_class_essencials(GLTFDocumentExtensionTextureWebP, GLTFDocumentExtension)

# InputEventAction
define_godot_engine_class_essencials(InputEventAction, InputEvent)
InputEventAction.memberProcs:
  proc `action=`*(self: Ref[InputEventAction]; action: StringName) {.loadfrom("set_action", 3304788590).}
  proc action*(self: Ref[InputEventAction]): StringName {.loadfrom("get_action", 2002593661).}
  proc `pressed=`*(self: Ref[InputEventAction]; pressed: Bool) {.loadfrom("set_pressed", 2586408642).}
  proc `strength=`*(self: Ref[InputEventAction]; strength: Float) {.loadfrom("set_strength", 373806689).}
  proc strength*(self: Ref[InputEventAction]): Float {.loadfrom("get_strength", 1740695150).}

# InputEventFromWindow
define_godot_engine_class_essencials(InputEventFromWindow, InputEvent)
InputEventFromWindow.memberProcs:
  proc `windowId=`*(self: Ref[InputEventFromWindow]; id: int64) {.loadfrom("set_window_id", 1286410249).}
  proc windowId*(self: Ref[InputEventFromWindow]): int64 {.loadfrom("get_window_id", 3905245786).}

# InputEventJoypadButton
define_godot_engine_class_essencials(InputEventJoypadButton, InputEvent)
InputEventJoypadButton.memberProcs:
  proc `buttonIndex=`*(self: Ref[InputEventJoypadButton]; buttonIndex: JoyButton) {.loadfrom("set_button_index", 1466368136).}
  proc buttonIndex*(self: Ref[InputEventJoypadButton]): JoyButton {.loadfrom("get_button_index", 595588182).}
  proc `pressure=`*(self: Ref[InputEventJoypadButton]; pressure: Float) {.loadfrom("set_pressure", 373806689).}
  proc pressure*(self: Ref[InputEventJoypadButton]): Float {.loadfrom("get_pressure", 1740695150).}
  proc `pressed=`*(self: Ref[InputEventJoypadButton]; pressed: Bool) {.loadfrom("set_pressed", 2586408642).}

# InputEventJoypadMotion
define_godot_engine_class_essencials(InputEventJoypadMotion, InputEvent)
InputEventJoypadMotion.memberProcs:
  proc `axis=`*(self: Ref[InputEventJoypadMotion]; axis: JoyAxis) {.loadfrom("set_axis", 1332685170).}
  proc axis*(self: Ref[InputEventJoypadMotion]): JoyAxis {.loadfrom("get_axis", 4019121683).}
  proc `axisValue=`*(self: Ref[InputEventJoypadMotion]; axisValue: Float) {.loadfrom("set_axis_value", 373806689).}
  proc axisValue*(self: Ref[InputEventJoypadMotion]): Float {.loadfrom("get_axis_value", 1740695150).}

# InputEventMIDI
define_godot_engine_class_essencials(InputEventMIDI, InputEvent)
InputEventMIDI.memberProcs:
  proc `channel=`*(self: Ref[InputEventMIDI]; channel: int32) {.loadfrom("set_channel", 1286410249).}
  proc channel*(self: Ref[InputEventMIDI]): int32 {.loadfrom("get_channel", 3905245786).}
  proc `message=`*(self: Ref[InputEventMIDI]; message: MIDIMessage) {.loadfrom("set_message", 1064271510).}
  proc message*(self: Ref[InputEventMIDI]): MIDIMessage {.loadfrom("get_message", 1936512097).}
  proc `pitch=`*(self: Ref[InputEventMIDI]; pitch: int32) {.loadfrom("set_pitch", 1286410249).}
  proc pitch*(self: Ref[InputEventMIDI]): int32 {.loadfrom("get_pitch", 3905245786).}
  proc `velocity=`*(self: Ref[InputEventMIDI]; velocity: int32) {.loadfrom("set_velocity", 1286410249).}
  proc velocity*(self: Ref[InputEventMIDI]): int32 {.loadfrom("get_velocity", 3905245786).}
  proc `instrument=`*(self: Ref[InputEventMIDI]; instrument: int32) {.loadfrom("set_instrument", 1286410249).}
  proc instrument*(self: Ref[InputEventMIDI]): int32 {.loadfrom("get_instrument", 3905245786).}
  proc `pressure=`*(self: Ref[InputEventMIDI]; pressure: int32) {.loadfrom("set_pressure", 1286410249).}
  proc pressure*(self: Ref[InputEventMIDI]): int32 {.loadfrom("get_pressure", 3905245786).}
  proc `controllerNumber=`*(self: Ref[InputEventMIDI]; controllerNumber: int32) {.loadfrom("set_controller_number", 1286410249).}
  proc controllerNumber*(self: Ref[InputEventMIDI]): int32 {.loadfrom("get_controller_number", 3905245786).}
  proc `controllerValue=`*(self: Ref[InputEventMIDI]; controllerValue: int32) {.loadfrom("set_controller_value", 1286410249).}
  proc controllerValue*(self: Ref[InputEventMIDI]): int32 {.loadfrom("get_controller_value", 3905245786).}

# InputEventShortcut
define_godot_engine_class_essencials(InputEventShortcut, InputEvent)
InputEventShortcut.memberProcs:
  proc `shortcut=`*(self: Ref[InputEventShortcut]; shortcut: Ref[Shortcut]) {.loadfrom("set_shortcut", 857163497).}
  proc shortcut*(self: Ref[InputEventShortcut]): Ref[Shortcut] {.loadfrom("get_shortcut", 3766804753).}

# BaseMaterial3D
define_godot_engine_class_essencials(BaseMaterial3D, Material)
BaseMaterial3D.memberProcs:
  proc `albedo=`*(self: Ref[BaseMaterial3D]; albedo: Color) {.loadfrom("set_albedo", 2920490490).}
  proc albedo*(self: Ref[BaseMaterial3D]): Color {.loadfrom("get_albedo", 3444240500).}
  proc `transparency=`*(self: Ref[BaseMaterial3D]; transparency: BaseMaterial3D|>Transparency) {.loadfrom("set_transparency", 3435651667).}
  proc transparency*(self: Ref[BaseMaterial3D]): BaseMaterial3D|>Transparency {.loadfrom("get_transparency", 990903061).}
  proc `alphaAntialiasing=`*(self: Ref[BaseMaterial3D]; alphaAa: BaseMaterial3D|>AlphaAntiAliasing) {.loadfrom("set_alpha_antialiasing", 3212649852).}
  proc alphaAntialiasing*(self: Ref[BaseMaterial3D]): BaseMaterial3D|>AlphaAntiAliasing {.loadfrom("get_alpha_antialiasing", 2889939400).}
  proc `alphaAntialiasingEdge=`*(self: Ref[BaseMaterial3D]; edge: Float) {.loadfrom("set_alpha_antialiasing_edge", 373806689).}
  proc alphaAntialiasingEdge*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_alpha_antialiasing_edge", 1740695150).}
  proc `shadingMode=`*(self: Ref[BaseMaterial3D]; shadingMode: BaseMaterial3D|>ShadingMode) {.loadfrom("set_shading_mode", 3368750322).}
  proc shadingMode*(self: Ref[BaseMaterial3D]): BaseMaterial3D|>ShadingMode {.loadfrom("get_shading_mode", 2132070559).}
  proc `specular=`*(self: Ref[BaseMaterial3D]; specular: Float) {.loadfrom("set_specular", 373806689).}
  proc specular*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_specular", 1740695150).}
  proc `metallic=`*(self: Ref[BaseMaterial3D]; metallic: Float) {.loadfrom("set_metallic", 373806689).}
  proc metallic*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_metallic", 1740695150).}
  proc `roughness=`*(self: Ref[BaseMaterial3D]; roughness: Float) {.loadfrom("set_roughness", 373806689).}
  proc roughness*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_roughness", 1740695150).}
  proc `emission=`*(self: Ref[BaseMaterial3D]; emission: Color) {.loadfrom("set_emission", 2920490490).}
  proc emission*(self: Ref[BaseMaterial3D]): Color {.loadfrom("get_emission", 3444240500).}
  proc `emissionEnergyMultiplier=`*(self: Ref[BaseMaterial3D]; emissionEnergyMultiplier: Float) {.loadfrom("set_emission_energy_multiplier", 373806689).}
  proc emissionEnergyMultiplier*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_emission_energy_multiplier", 1740695150).}
  proc `emissionIntensity=`*(self: Ref[BaseMaterial3D]; emissionEnergyMultiplier: Float) {.loadfrom("set_emission_intensity", 373806689).}
  proc emissionIntensity*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_emission_intensity", 1740695150).}
  proc `normalScale=`*(self: Ref[BaseMaterial3D]; normalScale: Float) {.loadfrom("set_normal_scale", 373806689).}
  proc normalScale*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_normal_scale", 1740695150).}
  proc `rim=`*(self: Ref[BaseMaterial3D]; rim: Float) {.loadfrom("set_rim", 373806689).}
  proc rim*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_rim", 1740695150).}
  proc `rimTint=`*(self: Ref[BaseMaterial3D]; rimTint: Float) {.loadfrom("set_rim_tint", 373806689).}
  proc rimTint*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_rim_tint", 1740695150).}
  proc `clearcoat=`*(self: Ref[BaseMaterial3D]; clearcoat: Float) {.loadfrom("set_clearcoat", 373806689).}
  proc clearcoat*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_clearcoat", 1740695150).}
  proc `clearcoatRoughness=`*(self: Ref[BaseMaterial3D]; clearcoatRoughness: Float) {.loadfrom("set_clearcoat_roughness", 373806689).}
  proc clearcoatRoughness*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_clearcoat_roughness", 1740695150).}
  proc `anisotropy=`*(self: Ref[BaseMaterial3D]; anisotropy: Float) {.loadfrom("set_anisotropy", 373806689).}
  proc anisotropy*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_anisotropy", 1740695150).}
  proc `heightmapScale=`*(self: Ref[BaseMaterial3D]; heightmapScale: Float) {.loadfrom("set_heightmap_scale", 373806689).}
  proc heightmapScale*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_heightmap_scale", 1740695150).}
  proc `subsurfaceScatteringStrength=`*(self: Ref[BaseMaterial3D]; strength: Float) {.loadfrom("set_subsurface_scattering_strength", 373806689).}
  proc subsurfaceScatteringStrength*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_subsurface_scattering_strength", 1740695150).}
  proc `transmittanceColor=`*(self: Ref[BaseMaterial3D]; color: Color) {.loadfrom("set_transmittance_color", 2920490490).}
  proc transmittanceColor*(self: Ref[BaseMaterial3D]): Color {.loadfrom("get_transmittance_color", 3444240500).}
  proc `transmittanceDepth=`*(self: Ref[BaseMaterial3D]; depth: Float) {.loadfrom("set_transmittance_depth", 373806689).}
  proc transmittanceDepth*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_transmittance_depth", 1740695150).}
  proc `transmittanceBoost=`*(self: Ref[BaseMaterial3D]; boost: Float) {.loadfrom("set_transmittance_boost", 373806689).}
  proc transmittanceBoost*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_transmittance_boost", 1740695150).}
  proc `backlight=`*(self: Ref[BaseMaterial3D]; backlight: Color) {.loadfrom("set_backlight", 2920490490).}
  proc backlight*(self: Ref[BaseMaterial3D]): Color {.loadfrom("get_backlight", 3444240500).}
  proc `refraction=`*(self: Ref[BaseMaterial3D]; refraction: Float) {.loadfrom("set_refraction", 373806689).}
  proc refraction*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_refraction", 1740695150).}
  proc `pointSize=`*(self: Ref[BaseMaterial3D]; pointSize: Float) {.loadfrom("set_point_size", 373806689).}
  proc pointSize*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_point_size", 1740695150).}
  proc `detailUv=`*(self: Ref[BaseMaterial3D]; detailUv: BaseMaterial3D|>DetailUV) {.loadfrom("set_detail_uv", 456801921).}
  proc detailUv*(self: Ref[BaseMaterial3D]): BaseMaterial3D|>DetailUV {.loadfrom("get_detail_uv", 2306920512).}
  proc `blendMode=`*(self: Ref[BaseMaterial3D]; blendMode: BaseMaterial3D|>BlendMode) {.loadfrom("set_blend_mode", 2830186259).}
  proc blendMode*(self: Ref[BaseMaterial3D]): BaseMaterial3D|>BlendMode {.loadfrom("get_blend_mode", 4022690962).}
  proc `depthDrawMode=`*(self: Ref[BaseMaterial3D]; depthDrawMode: BaseMaterial3D|>DepthDrawMode) {.loadfrom("set_depth_draw_mode", 1456584748).}
  proc depthDrawMode*(self: Ref[BaseMaterial3D]): BaseMaterial3D|>DepthDrawMode {.loadfrom("get_depth_draw_mode", 2578197639).}
  proc `cullMode=`*(self: Ref[BaseMaterial3D]; cullMode: BaseMaterial3D|>CullMode) {.loadfrom("set_cull_mode", 2338909218).}
  proc cullMode*(self: Ref[BaseMaterial3D]): BaseMaterial3D|>CullMode {.loadfrom("get_cull_mode", 1941499586).}
  proc `diffuseMode=`*(self: Ref[BaseMaterial3D]; diffuseMode: BaseMaterial3D|>DiffuseMode) {.loadfrom("set_diffuse_mode", 1045299638).}
  proc diffuseMode*(self: Ref[BaseMaterial3D]): BaseMaterial3D|>DiffuseMode {.loadfrom("get_diffuse_mode", 3973617136).}
  proc `specularMode=`*(self: Ref[BaseMaterial3D]; specularMode: BaseMaterial3D|>SpecularMode) {.loadfrom("set_specular_mode", 584737147).}
  proc specularMode*(self: Ref[BaseMaterial3D]): BaseMaterial3D|>SpecularMode {.loadfrom("get_specular_mode", 2569953298).}
  proc `flag=`*(self: Ref[BaseMaterial3D]; flag: BaseMaterial3D|>Flags; enable: Bool) {.loadfrom("set_flag", 3070159527).}
  proc flag*(self: Ref[BaseMaterial3D]; flag: BaseMaterial3D|>Flags): Bool {.loadfrom("get_flag", 1286410065).}
  proc `textureFilter=`*(self: Ref[BaseMaterial3D]; mode: BaseMaterial3D|>TextureFilter) {.loadfrom("set_texture_filter", 22904437).}
  proc textureFilter*(self: Ref[BaseMaterial3D]): BaseMaterial3D|>TextureFilter {.loadfrom("get_texture_filter", 3289213076).}
  proc `feature=`*(self: Ref[BaseMaterial3D]; feature: BaseMaterial3D|>Feature; enable: Bool) {.loadfrom("set_feature", 2819288693).}
  proc feature*(self: Ref[BaseMaterial3D]; feature: BaseMaterial3D|>Feature): Bool {.loadfrom("get_feature", 1965241794).}
  proc `texture=`*(self: Ref[BaseMaterial3D]; param: BaseMaterial3D|>TextureParam; texture: Ref[Texture2D]) {.loadfrom("set_texture", 464208135).}
  proc texture*(self: Ref[BaseMaterial3D]; param: BaseMaterial3D|>TextureParam): Ref[Texture2D] {.loadfrom("get_texture", 329605813).}
  proc `detailBlendMode=`*(self: Ref[BaseMaterial3D]; detailBlendMode: BaseMaterial3D|>BlendMode) {.loadfrom("set_detail_blend_mode", 2830186259).}
  proc detailBlendMode*(self: Ref[BaseMaterial3D]): BaseMaterial3D|>BlendMode {.loadfrom("get_detail_blend_mode", 4022690962).}
  proc `uv1Scale=`*(self: Ref[BaseMaterial3D]; scale: Vector3) {.loadfrom("set_uv1_scale", 3460891852).}
  proc uv1Scale*(self: Ref[BaseMaterial3D]): Vector3 {.loadfrom("get_uv1_scale", 3360562783).}
  proc `uv1Offset=`*(self: Ref[BaseMaterial3D]; offset: Vector3) {.loadfrom("set_uv1_offset", 3460891852).}
  proc uv1Offset*(self: Ref[BaseMaterial3D]): Vector3 {.loadfrom("get_uv1_offset", 3360562783).}
  proc `uv1TriplanarBlendSharpness=`*(self: Ref[BaseMaterial3D]; sharpness: Float) {.loadfrom("set_uv1_triplanar_blend_sharpness", 373806689).}
  proc uv1TriplanarBlendSharpness*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_uv1_triplanar_blend_sharpness", 1740695150).}
  proc `uv2Scale=`*(self: Ref[BaseMaterial3D]; scale: Vector3) {.loadfrom("set_uv2_scale", 3460891852).}
  proc uv2Scale*(self: Ref[BaseMaterial3D]): Vector3 {.loadfrom("get_uv2_scale", 3360562783).}
  proc `uv2Offset=`*(self: Ref[BaseMaterial3D]; offset: Vector3) {.loadfrom("set_uv2_offset", 3460891852).}
  proc uv2Offset*(self: Ref[BaseMaterial3D]): Vector3 {.loadfrom("get_uv2_offset", 3360562783).}
  proc `uv2TriplanarBlendSharpness=`*(self: Ref[BaseMaterial3D]; sharpness: Float) {.loadfrom("set_uv2_triplanar_blend_sharpness", 373806689).}
  proc uv2TriplanarBlendSharpness*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_uv2_triplanar_blend_sharpness", 1740695150).}
  proc `billboardMode=`*(self: Ref[BaseMaterial3D]; mode: BaseMaterial3D|>BillboardMode) {.loadfrom("set_billboard_mode", 4202036497).}
  proc billboardMode*(self: Ref[BaseMaterial3D]): BaseMaterial3D|>BillboardMode {.loadfrom("get_billboard_mode", 1283840139).}
  proc `particlesAnimHFrames=`*(self: Ref[BaseMaterial3D]; frames: int32) {.loadfrom("set_particles_anim_h_frames", 1286410249).}
  proc particlesAnimHFrames*(self: Ref[BaseMaterial3D]): int32 {.loadfrom("get_particles_anim_h_frames", 3905245786).}
  proc `particlesAnimVFrames=`*(self: Ref[BaseMaterial3D]; frames: int32) {.loadfrom("set_particles_anim_v_frames", 1286410249).}
  proc particlesAnimVFrames*(self: Ref[BaseMaterial3D]): int32 {.loadfrom("get_particles_anim_v_frames", 3905245786).}
  proc `particlesAnimLoop=`*(self: Ref[BaseMaterial3D]; loop: Bool) {.loadfrom("set_particles_anim_loop", 2586408642).}
  proc particlesAnimLoop*(self: Ref[BaseMaterial3D]): Bool {.loadfrom("get_particles_anim_loop", 36873697).}
  proc `heightmapDeepParallax=`*(self: Ref[BaseMaterial3D]; enable: Bool) {.loadfrom("set_heightmap_deep_parallax", 2586408642).}
  proc isHeightmapDeepParallaxEnabled*(self: Ref[BaseMaterial3D]): Bool {.loadfrom("is_heightmap_deep_parallax_enabled", 36873697).}
  proc `heightmapDeepParallaxMinLayers=`*(self: Ref[BaseMaterial3D]; layer: int32) {.loadfrom("set_heightmap_deep_parallax_min_layers", 1286410249).}
  proc heightmapDeepParallaxMinLayers*(self: Ref[BaseMaterial3D]): int32 {.loadfrom("get_heightmap_deep_parallax_min_layers", 3905245786).}
  proc `heightmapDeepParallaxMaxLayers=`*(self: Ref[BaseMaterial3D]; layer: int32) {.loadfrom("set_heightmap_deep_parallax_max_layers", 1286410249).}
  proc heightmapDeepParallaxMaxLayers*(self: Ref[BaseMaterial3D]): int32 {.loadfrom("get_heightmap_deep_parallax_max_layers", 3905245786).}
  proc `heightmapDeepParallaxFlipTangent=`*(self: Ref[BaseMaterial3D]; flip: Bool) {.loadfrom("set_heightmap_deep_parallax_flip_tangent", 2586408642).}
  proc heightmapDeepParallaxFlipTangent*(self: Ref[BaseMaterial3D]): Bool {.loadfrom("get_heightmap_deep_parallax_flip_tangent", 36873697).}
  proc `heightmapDeepParallaxFlipBinormal=`*(self: Ref[BaseMaterial3D]; flip: Bool) {.loadfrom("set_heightmap_deep_parallax_flip_binormal", 2586408642).}
  proc heightmapDeepParallaxFlipBinormal*(self: Ref[BaseMaterial3D]): Bool {.loadfrom("get_heightmap_deep_parallax_flip_binormal", 36873697).}
  proc `grow=`*(self: Ref[BaseMaterial3D]; amount: Float) {.loadfrom("set_grow", 373806689).}
  proc grow*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_grow", 1740695150).}
  proc `emissionOperator=`*(self: Ref[BaseMaterial3D]; operator: BaseMaterial3D|>EmissionOperator) {.loadfrom("set_emission_operator", 3825128922).}
  proc emissionOperator*(self: Ref[BaseMaterial3D]): BaseMaterial3D|>EmissionOperator {.loadfrom("get_emission_operator", 974205018).}
  proc `aoLightAffect=`*(self: Ref[BaseMaterial3D]; amount: Float) {.loadfrom("set_ao_light_affect", 373806689).}
  proc aoLightAffect*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_ao_light_affect", 1740695150).}
  proc `alphaScissorThreshold=`*(self: Ref[BaseMaterial3D]; threshold: Float) {.loadfrom("set_alpha_scissor_threshold", 373806689).}
  proc alphaScissorThreshold*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_alpha_scissor_threshold", 1740695150).}
  proc `alphaHashScale=`*(self: Ref[BaseMaterial3D]; threshold: Float) {.loadfrom("set_alpha_hash_scale", 373806689).}
  proc alphaHashScale*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_alpha_hash_scale", 1740695150).}
  proc `growEnabled=`*(self: Ref[BaseMaterial3D]; enable: Bool) {.loadfrom("set_grow_enabled", 2586408642).}
  proc isGrowEnabled*(self: Ref[BaseMaterial3D]): Bool {.loadfrom("is_grow_enabled", 36873697).}
  proc `metallicTextureChannel=`*(self: Ref[BaseMaterial3D]; channel: BaseMaterial3D|>TextureChannel) {.loadfrom("set_metallic_texture_channel", 744167988).}
  proc metallicTextureChannel*(self: Ref[BaseMaterial3D]): BaseMaterial3D|>TextureChannel {.loadfrom("get_metallic_texture_channel", 568133867).}
  proc `roughnessTextureChannel=`*(self: Ref[BaseMaterial3D]; channel: BaseMaterial3D|>TextureChannel) {.loadfrom("set_roughness_texture_channel", 744167988).}
  proc roughnessTextureChannel*(self: Ref[BaseMaterial3D]): BaseMaterial3D|>TextureChannel {.loadfrom("get_roughness_texture_channel", 568133867).}
  proc `aoTextureChannel=`*(self: Ref[BaseMaterial3D]; channel: BaseMaterial3D|>TextureChannel) {.loadfrom("set_ao_texture_channel", 744167988).}
  proc aoTextureChannel*(self: Ref[BaseMaterial3D]): BaseMaterial3D|>TextureChannel {.loadfrom("get_ao_texture_channel", 568133867).}
  proc `refractionTextureChannel=`*(self: Ref[BaseMaterial3D]; channel: BaseMaterial3D|>TextureChannel) {.loadfrom("set_refraction_texture_channel", 744167988).}
  proc refractionTextureChannel*(self: Ref[BaseMaterial3D]): BaseMaterial3D|>TextureChannel {.loadfrom("get_refraction_texture_channel", 568133867).}
  proc `proximityFadeEnabled=`*(self: Ref[BaseMaterial3D]; enabled: Bool) {.loadfrom("set_proximity_fade_enabled", 2586408642).}
  proc isProximityFadeEnabled*(self: Ref[BaseMaterial3D]): Bool {.loadfrom("is_proximity_fade_enabled", 36873697).}
  proc `proximityFadeDistance=`*(self: Ref[BaseMaterial3D]; distance: Float) {.loadfrom("set_proximity_fade_distance", 373806689).}
  proc proximityFadeDistance*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_proximity_fade_distance", 1740695150).}
  proc `msdfPixelRange=`*(self: Ref[BaseMaterial3D]; range: Float) {.loadfrom("set_msdf_pixel_range", 373806689).}
  proc msdfPixelRange*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_msdf_pixel_range", 1740695150).}
  proc `msdfOutlineSize=`*(self: Ref[BaseMaterial3D]; size: Float) {.loadfrom("set_msdf_outline_size", 373806689).}
  proc msdfOutlineSize*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_msdf_outline_size", 1740695150).}
  proc `distanceFade=`*(self: Ref[BaseMaterial3D]; mode: BaseMaterial3D|>DistanceFadeMode) {.loadfrom("set_distance_fade", 1379478617).}
  proc distanceFade*(self: Ref[BaseMaterial3D]): BaseMaterial3D|>DistanceFadeMode {.loadfrom("get_distance_fade", 2694575734).}
  proc `distanceFadeMaxDistance=`*(self: Ref[BaseMaterial3D]; distance: Float) {.loadfrom("set_distance_fade_max_distance", 373806689).}
  proc distanceFadeMaxDistance*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_distance_fade_max_distance", 1740695150).}
  proc `distanceFadeMinDistance=`*(self: Ref[BaseMaterial3D]; distance: Float) {.loadfrom("set_distance_fade_min_distance", 373806689).}
  proc distanceFadeMinDistance*(self: Ref[BaseMaterial3D]): Float {.loadfrom("get_distance_fade_min_distance", 1740695150).}

# CanvasItemMaterial
define_godot_engine_class_essencials(CanvasItemMaterial, Material)
CanvasItemMaterial.memberProcs:
  proc `blendMode=`*(self: Ref[CanvasItemMaterial]; blendMode: CanvasItemMaterial|>BlendMode) {.loadfrom("set_blend_mode", 1786054936).}
  proc blendMode*(self: Ref[CanvasItemMaterial]): CanvasItemMaterial|>BlendMode {.loadfrom("get_blend_mode", 3318684035).}
  proc `lightMode=`*(self: Ref[CanvasItemMaterial]; lightMode: CanvasItemMaterial|>LightMode) {.loadfrom("set_light_mode", 628074070).}
  proc lightMode*(self: Ref[CanvasItemMaterial]): CanvasItemMaterial|>LightMode {.loadfrom("get_light_mode", 3863292382).}
  proc `particlesAnimation=`*(self: Ref[CanvasItemMaterial]; particlesAnim: Bool) {.loadfrom("set_particles_animation", 2586408642).}
  proc particlesAnimation*(self: Ref[CanvasItemMaterial]): Bool {.loadfrom("get_particles_animation", 36873697).}
  proc `particlesAnimHFrames=`*(self: Ref[CanvasItemMaterial]; frames: int32) {.loadfrom("set_particles_anim_h_frames", 1286410249).}
  proc particlesAnimHFrames*(self: Ref[CanvasItemMaterial]): int32 {.loadfrom("get_particles_anim_h_frames", 3905245786).}
  proc `particlesAnimVFrames=`*(self: Ref[CanvasItemMaterial]; frames: int32) {.loadfrom("set_particles_anim_v_frames", 1286410249).}
  proc particlesAnimVFrames*(self: Ref[CanvasItemMaterial]): int32 {.loadfrom("get_particles_anim_v_frames", 3905245786).}
  proc `particlesAnimLoop=`*(self: Ref[CanvasItemMaterial]; loop: Bool) {.loadfrom("set_particles_anim_loop", 2586408642).}
  proc particlesAnimLoop*(self: Ref[CanvasItemMaterial]): Bool {.loadfrom("get_particles_anim_loop", 36873697).}

# FogMaterial
define_godot_engine_class_essencials(FogMaterial, Material)
FogMaterial.memberProcs:
  proc `density=`*(self: Ref[FogMaterial]; density: Float) {.loadfrom("set_density", 373806689).}
  proc density*(self: Ref[FogMaterial]): Float {.loadfrom("get_density", 1740695150).}
  proc `albedo=`*(self: Ref[FogMaterial]; albedo: Color) {.loadfrom("set_albedo", 2920490490).}
  proc albedo*(self: Ref[FogMaterial]): Color {.loadfrom("get_albedo", 3444240500).}
  proc `emission=`*(self: Ref[FogMaterial]; emission: Color) {.loadfrom("set_emission", 2920490490).}
  proc emission*(self: Ref[FogMaterial]): Color {.loadfrom("get_emission", 3444240500).}
  proc `heightFalloff=`*(self: Ref[FogMaterial]; heightFalloff: Float) {.loadfrom("set_height_falloff", 373806689).}
  proc heightFalloff*(self: Ref[FogMaterial]): Float {.loadfrom("get_height_falloff", 1740695150).}
  proc `edgeFade=`*(self: Ref[FogMaterial]; edgeFade: Float) {.loadfrom("set_edge_fade", 373806689).}
  proc edgeFade*(self: Ref[FogMaterial]): Float {.loadfrom("get_edge_fade", 1740695150).}
  proc `densityTexture=`*(self: Ref[FogMaterial]; densityTexture: Ref[Texture3D]) {.loadfrom("set_density_texture", 1188404210).}
  proc densityTexture*(self: Ref[FogMaterial]): Ref[Texture3D] {.loadfrom("get_density_texture", 373985333).}

# PanoramaSkyMaterial
define_godot_engine_class_essencials(PanoramaSkyMaterial, Material)
PanoramaSkyMaterial.memberProcs:
  proc `panorama=`*(self: Ref[PanoramaSkyMaterial]; texture: Ref[Texture2D]) {.loadfrom("set_panorama", 4051416890).}
  proc panorama*(self: Ref[PanoramaSkyMaterial]): Ref[Texture2D] {.loadfrom("get_panorama", 3635182373).}
  proc `filteringEnabled=`*(self: Ref[PanoramaSkyMaterial]; enabled: Bool) {.loadfrom("set_filtering_enabled", 2586408642).}
  proc isFilteringEnabled*(self: Ref[PanoramaSkyMaterial]): Bool {.loadfrom("is_filtering_enabled", 36873697).}

# ParticleProcessMaterial
define_godot_engine_class_essencials(ParticleProcessMaterial, Material)
ParticleProcessMaterial.memberProcs:
  proc `direction=`*(self: Ref[ParticleProcessMaterial]; degrees: Vector3) {.loadfrom("set_direction", 3460891852).}
  proc direction*(self: Ref[ParticleProcessMaterial]): Vector3 {.loadfrom("get_direction", 3360562783).}
  proc `spread=`*(self: Ref[ParticleProcessMaterial]; degrees: Float) {.loadfrom("set_spread", 373806689).}
  proc spread*(self: Ref[ParticleProcessMaterial]): Float {.loadfrom("get_spread", 1740695150).}
  proc `flatness=`*(self: Ref[ParticleProcessMaterial]; amount: Float) {.loadfrom("set_flatness", 373806689).}
  proc flatness*(self: Ref[ParticleProcessMaterial]): Float {.loadfrom("get_flatness", 1740695150).}
  proc `paramMin=`*(self: Ref[ParticleProcessMaterial]; param: ParticleProcessMaterial|>Parameter; value: Float) {.loadfrom("set_param_min", 2295964248).}
  proc paramMin*(self: Ref[ParticleProcessMaterial]; param: ParticleProcessMaterial|>Parameter): Float {.loadfrom("get_param_min", 3903786503).}
  proc `paramMax=`*(self: Ref[ParticleProcessMaterial]; param: ParticleProcessMaterial|>Parameter; value: Float) {.loadfrom("set_param_max", 2295964248).}
  proc paramMax*(self: Ref[ParticleProcessMaterial]; param: ParticleProcessMaterial|>Parameter): Float {.loadfrom("get_param_max", 3903786503).}
  proc `paramTexture=`*(self: Ref[ParticleProcessMaterial]; param: ParticleProcessMaterial|>Parameter; texture: Ref[Texture2D]) {.loadfrom("set_param_texture", 526976089).}
  proc paramTexture*(self: Ref[ParticleProcessMaterial]; param: ParticleProcessMaterial|>Parameter): Ref[Texture2D] {.loadfrom("get_param_texture", 3489372978).}
  proc `color=`*(self: Ref[ParticleProcessMaterial]; color: Color) {.loadfrom("set_color", 2920490490).}
  proc color*(self: Ref[ParticleProcessMaterial]): Color {.loadfrom("get_color", 3444240500).}
  proc `colorRamp=`*(self: Ref[ParticleProcessMaterial]; ramp: Ref[Texture2D]) {.loadfrom("set_color_ramp", 4051416890).}
  proc colorRamp*(self: Ref[ParticleProcessMaterial]): Ref[Texture2D] {.loadfrom("get_color_ramp", 3635182373).}
  proc `colorInitialRamp=`*(self: Ref[ParticleProcessMaterial]; ramp: Ref[Texture2D]) {.loadfrom("set_color_initial_ramp", 4051416890).}
  proc colorInitialRamp*(self: Ref[ParticleProcessMaterial]): Ref[Texture2D] {.loadfrom("get_color_initial_ramp", 3635182373).}
  proc `particleFlag=`*(self: Ref[ParticleProcessMaterial]; particleFlag: ParticleProcessMaterial|>ParticleFlags; enable: Bool) {.loadfrom("set_particle_flag", 1711815571).}
  proc particleFlag*(self: Ref[ParticleProcessMaterial]; particleFlag: ParticleProcessMaterial|>ParticleFlags): Bool {.loadfrom("get_particle_flag", 3895316907).}
  proc `emissionShape=`*(self: Ref[ParticleProcessMaterial]; shape: ParticleProcessMaterial|>EmissionShape) {.loadfrom("set_emission_shape", 461501442).}
  proc emissionShape*(self: Ref[ParticleProcessMaterial]): ParticleProcessMaterial|>EmissionShape {.loadfrom("get_emission_shape", 3719733018).}
  proc `emissionSphereRadius=`*(self: Ref[ParticleProcessMaterial]; radius: Float) {.loadfrom("set_emission_sphere_radius", 373806689).}
  proc emissionSphereRadius*(self: Ref[ParticleProcessMaterial]): Float {.loadfrom("get_emission_sphere_radius", 1740695150).}
  proc `emissionBoxExtents=`*(self: Ref[ParticleProcessMaterial]; extents: Vector3) {.loadfrom("set_emission_box_extents", 3460891852).}
  proc emissionBoxExtents*(self: Ref[ParticleProcessMaterial]): Vector3 {.loadfrom("get_emission_box_extents", 3360562783).}
  proc `emissionPointTexture=`*(self: Ref[ParticleProcessMaterial]; texture: Ref[Texture2D]) {.loadfrom("set_emission_point_texture", 4051416890).}
  proc emissionPointTexture*(self: Ref[ParticleProcessMaterial]): Ref[Texture2D] {.loadfrom("get_emission_point_texture", 3635182373).}
  proc `emissionNormalTexture=`*(self: Ref[ParticleProcessMaterial]; texture: Ref[Texture2D]) {.loadfrom("set_emission_normal_texture", 4051416890).}
  proc emissionNormalTexture*(self: Ref[ParticleProcessMaterial]): Ref[Texture2D] {.loadfrom("get_emission_normal_texture", 3635182373).}
  proc `emissionColorTexture=`*(self: Ref[ParticleProcessMaterial]; texture: Ref[Texture2D]) {.loadfrom("set_emission_color_texture", 4051416890).}
  proc emissionColorTexture*(self: Ref[ParticleProcessMaterial]): Ref[Texture2D] {.loadfrom("get_emission_color_texture", 3635182373).}
  proc `emissionPointCount=`*(self: Ref[ParticleProcessMaterial]; pointCount: int32) {.loadfrom("set_emission_point_count", 1286410249).}
  proc emissionPointCount*(self: Ref[ParticleProcessMaterial]): int32 {.loadfrom("get_emission_point_count", 3905245786).}
  proc `emissionRingAxis=`*(self: Ref[ParticleProcessMaterial]; axis: Vector3) {.loadfrom("set_emission_ring_axis", 3460891852).}
  proc emissionRingAxis*(self: Ref[ParticleProcessMaterial]): Vector3 {.loadfrom("get_emission_ring_axis", 3360562783).}
  proc `emissionRingHeight=`*(self: Ref[ParticleProcessMaterial]; height: Float) {.loadfrom("set_emission_ring_height", 373806689).}
  proc emissionRingHeight*(self: Ref[ParticleProcessMaterial]): Float {.loadfrom("get_emission_ring_height", 1740695150).}
  proc `emissionRingRadius=`*(self: Ref[ParticleProcessMaterial]; radius: Float) {.loadfrom("set_emission_ring_radius", 373806689).}
  proc emissionRingRadius*(self: Ref[ParticleProcessMaterial]): Float {.loadfrom("get_emission_ring_radius", 1740695150).}
  proc `emissionRingInnerRadius=`*(self: Ref[ParticleProcessMaterial]; innerRadius: Float) {.loadfrom("set_emission_ring_inner_radius", 373806689).}
  proc emissionRingInnerRadius*(self: Ref[ParticleProcessMaterial]): Float {.loadfrom("get_emission_ring_inner_radius", 1740695150).}
  proc turbulenceEnabled*(self: Ref[ParticleProcessMaterial]): Bool {.loadfrom("get_turbulence_enabled", 36873697).}
  proc `turbulenceEnabled=`*(self: Ref[ParticleProcessMaterial]; turbulenceEnabled: Bool) {.loadfrom("set_turbulence_enabled", 2586408642).}
  proc turbulenceNoiseStrength*(self: Ref[ParticleProcessMaterial]): Float {.loadfrom("get_turbulence_noise_strength", 1740695150).}
  proc `turbulenceNoiseStrength=`*(self: Ref[ParticleProcessMaterial]; turbulenceNoiseStrength: Float) {.loadfrom("set_turbulence_noise_strength", 373806689).}
  proc turbulenceNoiseScale*(self: Ref[ParticleProcessMaterial]): Float {.loadfrom("get_turbulence_noise_scale", 1740695150).}
  proc `turbulenceNoiseScale=`*(self: Ref[ParticleProcessMaterial]; turbulenceNoiseScale: Float) {.loadfrom("set_turbulence_noise_scale", 373806689).}
  proc turbulenceNoiseSpeedRandom*(self: Ref[ParticleProcessMaterial]): Float {.loadfrom("get_turbulence_noise_speed_random", 1740695150).}
  proc `turbulenceNoiseSpeedRandom=`*(self: Ref[ParticleProcessMaterial]; turbulenceNoiseSpeedRandom: Float) {.loadfrom("set_turbulence_noise_speed_random", 373806689).}
  proc turbulenceNoiseSpeed*(self: Ref[ParticleProcessMaterial]): Vector3 {.loadfrom("get_turbulence_noise_speed", 3360562783).}
  proc `turbulenceNoiseSpeed=`*(self: Ref[ParticleProcessMaterial]; turbulenceNoiseSpeed: Vector3) {.loadfrom("set_turbulence_noise_speed", 3460891852).}
  proc gravity*(self: Ref[ParticleProcessMaterial]): Vector3 {.loadfrom("get_gravity", 3360562783).}
  proc `gravity=`*(self: Ref[ParticleProcessMaterial]; accelVec: Vector3) {.loadfrom("set_gravity", 3460891852).}
  proc `lifetimeRandomness=`*(self: Ref[ParticleProcessMaterial]; randomness: float64) {.loadfrom("set_lifetime_randomness", 373806689).}
  proc lifetimeRandomness*(self: Ref[ParticleProcessMaterial]): float64 {.loadfrom("get_lifetime_randomness", 1740695150).}
  proc subEmitterMode*(self: Ref[ParticleProcessMaterial]): ParticleProcessMaterial|>SubEmitterMode {.loadfrom("get_sub_emitter_mode", 2399052877).}
  proc `subEmitterMode=`*(self: Ref[ParticleProcessMaterial]; mode: ParticleProcessMaterial|>SubEmitterMode) {.loadfrom("set_sub_emitter_mode", 2161806672).}
  proc subEmitterFrequency*(self: Ref[ParticleProcessMaterial]): float64 {.loadfrom("get_sub_emitter_frequency", 1740695150).}
  proc `subEmitterFrequency=`*(self: Ref[ParticleProcessMaterial]; hz: float64) {.loadfrom("set_sub_emitter_frequency", 373806689).}
  proc subEmitterAmountAtEnd*(self: Ref[ParticleProcessMaterial]): int32 {.loadfrom("get_sub_emitter_amount_at_end", 3905245786).}
  proc `subEmitterAmountAtEnd=`*(self: Ref[ParticleProcessMaterial]; amount: int32) {.loadfrom("set_sub_emitter_amount_at_end", 1286410249).}
  proc subEmitterAmountAtCollision*(self: Ref[ParticleProcessMaterial]): int32 {.loadfrom("get_sub_emitter_amount_at_collision", 3905245786).}
  proc `subEmitterAmountAtCollision=`*(self: Ref[ParticleProcessMaterial]; amount: int32) {.loadfrom("set_sub_emitter_amount_at_collision", 1286410249).}
  proc subEmitterKeepVelocity*(self: Ref[ParticleProcessMaterial]): Bool {.loadfrom("get_sub_emitter_keep_velocity", 36873697).}
  proc `subEmitterKeepVelocity=`*(self: Ref[ParticleProcessMaterial]; enable: Bool) {.loadfrom("set_sub_emitter_keep_velocity", 2586408642).}
  proc `attractorInteractionEnabled=`*(self: Ref[ParticleProcessMaterial]; enabled: Bool) {.loadfrom("set_attractor_interaction_enabled", 2586408642).}
  proc isAttractorInteractionEnabled*(self: Ref[ParticleProcessMaterial]): Bool {.loadfrom("is_attractor_interaction_enabled", 36873697).}
  proc `collisionMode=`*(self: Ref[ParticleProcessMaterial]; mode: ParticleProcessMaterial|>CollisionMode) {.loadfrom("set_collision_mode", 653804659).}
  proc collisionMode*(self: Ref[ParticleProcessMaterial]): ParticleProcessMaterial|>CollisionMode {.loadfrom("get_collision_mode", 139371864).}
  proc `collisionUseScale=`*(self: Ref[ParticleProcessMaterial]; radius: Bool) {.loadfrom("set_collision_use_scale", 2586408642).}
  proc isCollisionUsingScale*(self: Ref[ParticleProcessMaterial]): Bool {.loadfrom("is_collision_using_scale", 36873697).}
  proc `collisionFriction=`*(self: Ref[ParticleProcessMaterial]; friction: Float) {.loadfrom("set_collision_friction", 373806689).}
  proc collisionFriction*(self: Ref[ParticleProcessMaterial]): Float {.loadfrom("get_collision_friction", 1740695150).}
  proc `collisionBounce=`*(self: Ref[ParticleProcessMaterial]; bounce: Float) {.loadfrom("set_collision_bounce", 373806689).}
  proc collisionBounce*(self: Ref[ParticleProcessMaterial]): Float {.loadfrom("get_collision_bounce", 1740695150).}

# PhysicalSkyMaterial
define_godot_engine_class_essencials(PhysicalSkyMaterial, Material)
PhysicalSkyMaterial.memberProcs:
  proc `rayleighCoefficient=`*(self: Ref[PhysicalSkyMaterial]; rayleigh: Float) {.loadfrom("set_rayleigh_coefficient", 373806689).}
  proc rayleighCoefficient*(self: Ref[PhysicalSkyMaterial]): Float {.loadfrom("get_rayleigh_coefficient", 1740695150).}
  proc `rayleighColor=`*(self: Ref[PhysicalSkyMaterial]; color: Color) {.loadfrom("set_rayleigh_color", 2920490490).}
  proc rayleighColor*(self: Ref[PhysicalSkyMaterial]): Color {.loadfrom("get_rayleigh_color", 3444240500).}
  proc `mieCoefficient=`*(self: Ref[PhysicalSkyMaterial]; mie: Float) {.loadfrom("set_mie_coefficient", 373806689).}
  proc mieCoefficient*(self: Ref[PhysicalSkyMaterial]): Float {.loadfrom("get_mie_coefficient", 1740695150).}
  proc `mieEccentricity=`*(self: Ref[PhysicalSkyMaterial]; eccentricity: Float) {.loadfrom("set_mie_eccentricity", 373806689).}
  proc mieEccentricity*(self: Ref[PhysicalSkyMaterial]): Float {.loadfrom("get_mie_eccentricity", 1740695150).}
  proc `mieColor=`*(self: Ref[PhysicalSkyMaterial]; color: Color) {.loadfrom("set_mie_color", 2920490490).}
  proc mieColor*(self: Ref[PhysicalSkyMaterial]): Color {.loadfrom("get_mie_color", 3444240500).}
  proc `turbidity=`*(self: Ref[PhysicalSkyMaterial]; turbidity: Float) {.loadfrom("set_turbidity", 373806689).}
  proc turbidity*(self: Ref[PhysicalSkyMaterial]): Float {.loadfrom("get_turbidity", 1740695150).}
  proc `sunDiskScale=`*(self: Ref[PhysicalSkyMaterial]; scale: Float) {.loadfrom("set_sun_disk_scale", 373806689).}
  proc sunDiskScale*(self: Ref[PhysicalSkyMaterial]): Float {.loadfrom("get_sun_disk_scale", 1740695150).}
  proc `groundColor=`*(self: Ref[PhysicalSkyMaterial]; color: Color) {.loadfrom("set_ground_color", 2920490490).}
  proc groundColor*(self: Ref[PhysicalSkyMaterial]): Color {.loadfrom("get_ground_color", 3444240500).}
  proc `energyMultiplier=`*(self: Ref[PhysicalSkyMaterial]; multiplier: Float) {.loadfrom("set_energy_multiplier", 373806689).}
  proc energyMultiplier*(self: Ref[PhysicalSkyMaterial]): Float {.loadfrom("get_energy_multiplier", 1740695150).}
  proc `useDebanding=`*(self: Ref[PhysicalSkyMaterial]; useDebanding: Bool) {.loadfrom("set_use_debanding", 2586408642).}
  proc useDebanding*(self: Ref[PhysicalSkyMaterial]): Bool {.loadfrom("get_use_debanding", 36873697).}
  proc `nightSky=`*(self: Ref[PhysicalSkyMaterial]; nightSky: Ref[Texture2D]) {.loadfrom("set_night_sky", 4051416890).}
  proc nightSky*(self: Ref[PhysicalSkyMaterial]): Ref[Texture2D] {.loadfrom("get_night_sky", 3635182373).}

# PlaceholderMaterial
define_godot_engine_class_essencials(PlaceholderMaterial, Material)

# ProceduralSkyMaterial
define_godot_engine_class_essencials(ProceduralSkyMaterial, Material)
ProceduralSkyMaterial.memberProcs:
  proc `skyTopColor=`*(self: Ref[ProceduralSkyMaterial]; color: Color) {.loadfrom("set_sky_top_color", 2920490490).}
  proc skyTopColor*(self: Ref[ProceduralSkyMaterial]): Color {.loadfrom("get_sky_top_color", 3444240500).}
  proc `skyHorizonColor=`*(self: Ref[ProceduralSkyMaterial]; color: Color) {.loadfrom("set_sky_horizon_color", 2920490490).}
  proc skyHorizonColor*(self: Ref[ProceduralSkyMaterial]): Color {.loadfrom("get_sky_horizon_color", 3444240500).}
  proc `skyCurve=`*(self: Ref[ProceduralSkyMaterial]; curve: Float) {.loadfrom("set_sky_curve", 373806689).}
  proc skyCurve*(self: Ref[ProceduralSkyMaterial]): Float {.loadfrom("get_sky_curve", 1740695150).}
  proc `skyEnergyMultiplier=`*(self: Ref[ProceduralSkyMaterial]; multiplier: Float) {.loadfrom("set_sky_energy_multiplier", 373806689).}
  proc skyEnergyMultiplier*(self: Ref[ProceduralSkyMaterial]): Float {.loadfrom("get_sky_energy_multiplier", 1740695150).}
  proc `skyCover=`*(self: Ref[ProceduralSkyMaterial]; skyCover: Ref[Texture2D]) {.loadfrom("set_sky_cover", 4051416890).}
  proc skyCover*(self: Ref[ProceduralSkyMaterial]): Ref[Texture2D] {.loadfrom("get_sky_cover", 3635182373).}
  proc `skyCoverModulate=`*(self: Ref[ProceduralSkyMaterial]; color: Color) {.loadfrom("set_sky_cover_modulate", 2920490490).}
  proc skyCoverModulate*(self: Ref[ProceduralSkyMaterial]): Color {.loadfrom("get_sky_cover_modulate", 3444240500).}
  proc `groundBottomColor=`*(self: Ref[ProceduralSkyMaterial]; color: Color) {.loadfrom("set_ground_bottom_color", 2920490490).}
  proc groundBottomColor*(self: Ref[ProceduralSkyMaterial]): Color {.loadfrom("get_ground_bottom_color", 3444240500).}
  proc `groundHorizonColor=`*(self: Ref[ProceduralSkyMaterial]; color: Color) {.loadfrom("set_ground_horizon_color", 2920490490).}
  proc groundHorizonColor*(self: Ref[ProceduralSkyMaterial]): Color {.loadfrom("get_ground_horizon_color", 3444240500).}
  proc `groundCurve=`*(self: Ref[ProceduralSkyMaterial]; curve: Float) {.loadfrom("set_ground_curve", 373806689).}
  proc groundCurve*(self: Ref[ProceduralSkyMaterial]): Float {.loadfrom("get_ground_curve", 1740695150).}
  proc `groundEnergyMultiplier=`*(self: Ref[ProceduralSkyMaterial]; energy: Float) {.loadfrom("set_ground_energy_multiplier", 373806689).}
  proc groundEnergyMultiplier*(self: Ref[ProceduralSkyMaterial]): Float {.loadfrom("get_ground_energy_multiplier", 1740695150).}
  proc `sunAngleMax=`*(self: Ref[ProceduralSkyMaterial]; degrees: Float) {.loadfrom("set_sun_angle_max", 373806689).}
  proc sunAngleMax*(self: Ref[ProceduralSkyMaterial]): Float {.loadfrom("get_sun_angle_max", 1740695150).}
  proc `sunCurve=`*(self: Ref[ProceduralSkyMaterial]; curve: Float) {.loadfrom("set_sun_curve", 373806689).}
  proc sunCurve*(self: Ref[ProceduralSkyMaterial]): Float {.loadfrom("get_sun_curve", 1740695150).}
  proc `useDebanding=`*(self: Ref[ProceduralSkyMaterial]; useDebanding: Bool) {.loadfrom("set_use_debanding", 2586408642).}
  proc useDebanding*(self: Ref[ProceduralSkyMaterial]): Bool {.loadfrom("get_use_debanding", 36873697).}

# ShaderMaterial
define_godot_engine_class_essencials(ShaderMaterial, Material)
ShaderMaterial.memberProcs:
  proc `shader=`*(self: Ref[ShaderMaterial]; shader: Ref[Shader]) {.loadfrom("set_shader", 3341921675).}
  proc shader*(self: Ref[ShaderMaterial]): Ref[Shader] {.loadfrom("get_shader", 2078273437).}
  proc setShaderParameter*(self: Ref[ShaderMaterial]; param: StringName; value: ptr Variant) {.loadfrom("set_shader_parameter", 3776071444).}
  proc getShaderParameter*(self: Ref[ShaderMaterial]; param: StringName): Variant {.loadfrom("get_shader_parameter", 2760726917).}

# ArrayMesh
define_godot_engine_class_essencials(ArrayMesh, Mesh)
ArrayMesh.memberProcs:
  proc addBlendShape*(self: Ref[ArrayMesh]; name: StringName) {.loadfrom("add_blend_shape", 3304788590).}
  proc getBlendShapeCount*(self: Ref[ArrayMesh]): int32 {.loadfrom("get_blend_shape_count", 3905245786).}
  proc getBlendShapeName*(self: Ref[ArrayMesh]; index: int32): StringName {.loadfrom("get_blend_shape_name", 659327637).}
  proc setBlendShapeName*(self: Ref[ArrayMesh]; index: int32; name: StringName) {.loadfrom("set_blend_shape_name", 3780747571).}
  proc clearBlendShapes*(self: Ref[ArrayMesh]) {.loadfrom("clear_blend_shapes", 3218959716).}
  proc `blendShapeMode=`*(self: Ref[ArrayMesh]; mode: Mesh|>BlendShapeMode) {.loadfrom("set_blend_shape_mode", 227983991).}
  proc blendShapeMode*(self: Ref[ArrayMesh]): Mesh|>BlendShapeMode {.loadfrom("get_blend_shape_mode", 836485024).}
  proc addSurfaceFromArrays*(self: Ref[ArrayMesh]; primitive: Mesh|>PrimitiveType; arrays: Array; blendShapes: TypedArray[Array] = TypedArray|>init[Array](); lods: Dictionary = Dictionary|>init(); flags: set[Mesh|>ArrayFormat] = {}) {.loadfrom("add_surface_from_arrays", 172284304).}
  proc clearSurfaces*(self: Ref[ArrayMesh]) {.loadfrom("clear_surfaces", 3218959716).}
  proc surfaceUpdateVertexRegion*(self: Ref[ArrayMesh]; surfIdx: int32; offset: int32; data: PackedByteArray) {.loadfrom("surface_update_vertex_region", 3837166854).}
  proc surfaceUpdateAttributeRegion*(self: Ref[ArrayMesh]; surfIdx: int32; offset: int32; data: PackedByteArray) {.loadfrom("surface_update_attribute_region", 3837166854).}
  proc surfaceUpdateSkinRegion*(self: Ref[ArrayMesh]; surfIdx: int32; offset: int32; data: PackedByteArray) {.loadfrom("surface_update_skin_region", 3837166854).}
  proc surfaceGetArrayLen*(self: Ref[ArrayMesh]; surfIdx: int32): int32 {.loadfrom("surface_get_array_len", 923996154).}
  proc surfaceGetArrayIndexLen*(self: Ref[ArrayMesh]; surfIdx: int32): int32 {.loadfrom("surface_get_array_index_len", 923996154).}
  proc surfaceGetFormat*(self: Ref[ArrayMesh]; surfIdx: int32): set[Mesh|>ArrayFormat] {.loadfrom("surface_get_format", 3718287884).}
  proc surfaceGetPrimitiveType*(self: Ref[ArrayMesh]; surfIdx: int32): Mesh|>PrimitiveType {.loadfrom("surface_get_primitive_type", 4141943888).}
  proc surfaceFindByName*(self: Ref[ArrayMesh]; name: String): int32 {.loadfrom("surface_find_by_name", 1321353865).}
  proc surfaceSetName*(self: Ref[ArrayMesh]; surfIdx: int32; name: String) {.loadfrom("surface_set_name", 501894301).}
  proc surfaceGetName*(self: Ref[ArrayMesh]; surfIdx: int32): String {.loadfrom("surface_get_name", 844755477).}
  proc regenNormalMaps*(self: Ref[ArrayMesh]) {.loadfrom("regen_normal_maps", 3218959716).}
  proc lightmapUnwrap*(self: Ref[ArrayMesh]; transform: Transform3D; texelSize: Float): Error {.loadfrom("lightmap_unwrap", 1476641071).}
  proc `customAabb=`*(self: Ref[ArrayMesh]; aabb: AABB) {.loadfrom("set_custom_aabb", 259215842).}
  proc customAabb*(self: Ref[ArrayMesh]): AABB {.loadfrom("get_custom_aabb", 1068685055).}
  proc `shadowMesh=`*(self: Ref[ArrayMesh]; mesh: Ref[ArrayMesh]) {.loadfrom("set_shadow_mesh", 3377897901).}
  proc shadowMesh*(self: Ref[ArrayMesh]): Ref[ArrayMesh] {.loadfrom("get_shadow_mesh", 3206942465).}

# ImmediateMesh
define_godot_engine_class_essencials(ImmediateMesh, Mesh)
ImmediateMesh.memberProcs:
  proc surfaceBegin*(self: Ref[ImmediateMesh]; primitive: Mesh|>PrimitiveType; material: Ref[Material] = default Ref[Material]) {.loadfrom("surface_begin", 3716480242).}
  proc surfaceSetColor*(self: Ref[ImmediateMesh]; color: Color) {.loadfrom("surface_set_color", 2920490490).}
  proc surfaceSetNormal*(self: Ref[ImmediateMesh]; normal: Vector3) {.loadfrom("surface_set_normal", 3460891852).}
  proc surfaceSetTangent*(self: Ref[ImmediateMesh]; tangent: Plane) {.loadfrom("surface_set_tangent", 3505987427).}
  proc surfaceSetUv*(self: Ref[ImmediateMesh]; uv: Vector2) {.loadfrom("surface_set_uv", 743155724).}
  proc surfaceSetUv2*(self: Ref[ImmediateMesh]; uv2: Vector2) {.loadfrom("surface_set_uv2", 743155724).}
  proc surfaceAddVertex*(self: Ref[ImmediateMesh]; vertex: Vector3) {.loadfrom("surface_add_vertex", 3460891852).}
  proc surfaceAddVertex2d*(self: Ref[ImmediateMesh]; vertex: Vector2) {.loadfrom("surface_add_vertex_2d", 743155724).}
  proc surfaceEnd*(self: Ref[ImmediateMesh]) {.loadfrom("surface_end", 3218959716).}
  proc clearSurfaces*(self: Ref[ImmediateMesh]) {.loadfrom("clear_surfaces", 3218959716).}

# PlaceholderMesh
define_godot_engine_class_essencials(PlaceholderMesh, Mesh)
PlaceholderMesh.memberProcs:
  proc `aabb=`*(self: Ref[PlaceholderMesh]; aabb: AABB) {.loadfrom("set_aabb", 259215842).}

# PrimitiveMesh
define_godot_engine_class_essencials(PrimitiveMesh, Mesh)
method createMeshArray*(self: Ref[PrimitiveMesh]): Array {.base.} = (discard)
PrimitiveMesh.memberProcs:
  proc `material=`*(self: Ref[PrimitiveMesh]; material: Ref[Material]) {.loadfrom("set_material", 2757459619).}
  proc material*(self: Ref[PrimitiveMesh]): Ref[Material] {.loadfrom("get_material", 5934680).}
  proc getMeshArrays*(self: Ref[PrimitiveMesh]): Array {.loadfrom("get_mesh_arrays", 3995934104).}
  proc `customAabb=`*(self: Ref[PrimitiveMesh]; aabb: AABB) {.loadfrom("set_custom_aabb", 259215842).}
  proc customAabb*(self: Ref[PrimitiveMesh]): AABB {.loadfrom("get_custom_aabb", 1068685055).}
  proc `flipFaces=`*(self: Ref[PrimitiveMesh]; flipFaces: Bool) {.loadfrom("set_flip_faces", 2586408642).}
  proc flipFaces*(self: Ref[PrimitiveMesh]): Bool {.loadfrom("get_flip_faces", 36873697).}
  proc `addUv2=`*(self: Ref[PrimitiveMesh]; addUv2: Bool) {.loadfrom("set_add_uv2", 2586408642).}
  proc addUv2*(self: Ref[PrimitiveMesh]): Bool {.loadfrom("get_add_uv2", 36873697).}
  proc `uv2Padding=`*(self: Ref[PrimitiveMesh]; uv2Padding: Float) {.loadfrom("set_uv2_padding", 373806689).}
  proc uv2Padding*(self: Ref[PrimitiveMesh]): Float {.loadfrom("get_uv2_padding", 1740695150).}

# FastNoiseLite
define_godot_engine_class_essencials(FastNoiseLite, Noise)
FastNoiseLite.memberProcs:
  proc `noiseType=`*(self: Ref[FastNoiseLite]; `type`: FastNoiseLite|>NoiseType) {.loadfrom("set_noise_type", 2624461392).}
  proc noiseType*(self: Ref[FastNoiseLite]): FastNoiseLite|>NoiseType {.loadfrom("get_noise_type", 1458108610).}
  proc `seed=`*(self: Ref[FastNoiseLite]; seed: int32) {.loadfrom("set_seed", 1286410249).}
  proc seed*(self: Ref[FastNoiseLite]): int32 {.loadfrom("get_seed", 3905245786).}
  proc `frequency=`*(self: Ref[FastNoiseLite]; freq: Float) {.loadfrom("set_frequency", 373806689).}
  proc frequency*(self: Ref[FastNoiseLite]): Float {.loadfrom("get_frequency", 1740695150).}
  proc `offset=`*(self: Ref[FastNoiseLite]; offset: Vector3) {.loadfrom("set_offset", 3460891852).}
  proc offset*(self: Ref[FastNoiseLite]): Vector3 {.loadfrom("get_offset", 3360562783).}
  proc `fractalType=`*(self: Ref[FastNoiseLite]; `type`: FastNoiseLite|>FractalType) {.loadfrom("set_fractal_type", 4132731174).}
  proc fractalType*(self: Ref[FastNoiseLite]): FastNoiseLite|>FractalType {.loadfrom("get_fractal_type", 1036889279).}
  proc `fractalOctaves=`*(self: Ref[FastNoiseLite]; octaveCount: int32) {.loadfrom("set_fractal_octaves", 1286410249).}
  proc fractalOctaves*(self: Ref[FastNoiseLite]): int32 {.loadfrom("get_fractal_octaves", 3905245786).}
  proc `fractalLacunarity=`*(self: Ref[FastNoiseLite]; lacunarity: Float) {.loadfrom("set_fractal_lacunarity", 373806689).}
  proc fractalLacunarity*(self: Ref[FastNoiseLite]): Float {.loadfrom("get_fractal_lacunarity", 1740695150).}
  proc `fractalGain=`*(self: Ref[FastNoiseLite]; gain: Float) {.loadfrom("set_fractal_gain", 373806689).}
  proc fractalGain*(self: Ref[FastNoiseLite]): Float {.loadfrom("get_fractal_gain", 1740695150).}
  proc `fractalWeightedStrength=`*(self: Ref[FastNoiseLite]; weightedStrength: Float) {.loadfrom("set_fractal_weighted_strength", 373806689).}
  proc fractalWeightedStrength*(self: Ref[FastNoiseLite]): Float {.loadfrom("get_fractal_weighted_strength", 1740695150).}
  proc `fractalPingPongStrength=`*(self: Ref[FastNoiseLite]; pingPongStrength: Float) {.loadfrom("set_fractal_ping_pong_strength", 373806689).}
  proc fractalPingPongStrength*(self: Ref[FastNoiseLite]): Float {.loadfrom("get_fractal_ping_pong_strength", 1740695150).}
  proc `cellularDistanceFunction=`*(self: Ref[FastNoiseLite]; `func`: FastNoiseLite|>CellularDistanceFunction) {.loadfrom("set_cellular_distance_function", 1006013267).}
  proc cellularDistanceFunction*(self: Ref[FastNoiseLite]): FastNoiseLite|>CellularDistanceFunction {.loadfrom("get_cellular_distance_function", 2021274088).}
  proc `cellularJitter=`*(self: Ref[FastNoiseLite]; jitter: Float) {.loadfrom("set_cellular_jitter", 373806689).}
  proc cellularJitter*(self: Ref[FastNoiseLite]): Float {.loadfrom("get_cellular_jitter", 1740695150).}
  proc `cellularReturnType=`*(self: Ref[FastNoiseLite]; ret: FastNoiseLite|>CellularReturnType) {.loadfrom("set_cellular_return_type", 2654169698).}
  proc cellularReturnType*(self: Ref[FastNoiseLite]): FastNoiseLite|>CellularReturnType {.loadfrom("get_cellular_return_type", 3699796343).}
  proc `domainWarpEnabled=`*(self: Ref[FastNoiseLite]; domainWarpEnabled: Bool) {.loadfrom("set_domain_warp_enabled", 2586408642).}
  proc isDomainWarpEnabled*(self: Ref[FastNoiseLite]): Bool {.loadfrom("is_domain_warp_enabled", 36873697).}
  proc `domainWarpType=`*(self: Ref[FastNoiseLite]; domainWarpType: FastNoiseLite|>DomainWarpType) {.loadfrom("set_domain_warp_type", 3629692980).}
  proc domainWarpType*(self: Ref[FastNoiseLite]): FastNoiseLite|>DomainWarpType {.loadfrom("get_domain_warp_type", 2980162020).}
  proc `domainWarpAmplitude=`*(self: Ref[FastNoiseLite]; domainWarpAmplitude: Float) {.loadfrom("set_domain_warp_amplitude", 373806689).}
  proc domainWarpAmplitude*(self: Ref[FastNoiseLite]): Float {.loadfrom("get_domain_warp_amplitude", 1740695150).}
  proc `domainWarpFrequency=`*(self: Ref[FastNoiseLite]; domainWarpFrequency: Float) {.loadfrom("set_domain_warp_frequency", 373806689).}
  proc domainWarpFrequency*(self: Ref[FastNoiseLite]): Float {.loadfrom("get_domain_warp_frequency", 1740695150).}
  proc `domainWarpFractalType=`*(self: Ref[FastNoiseLite]; domainWarpFractalType: FastNoiseLite|>DomainWarpFractalType) {.loadfrom("set_domain_warp_fractal_type", 3999408287).}
  proc domainWarpFractalType*(self: Ref[FastNoiseLite]): FastNoiseLite|>DomainWarpFractalType {.loadfrom("get_domain_warp_fractal_type", 407716934).}
  proc `domainWarpFractalOctaves=`*(self: Ref[FastNoiseLite]; domainWarpOctaveCount: int32) {.loadfrom("set_domain_warp_fractal_octaves", 1286410249).}
  proc domainWarpFractalOctaves*(self: Ref[FastNoiseLite]): int32 {.loadfrom("get_domain_warp_fractal_octaves", 3905245786).}
  proc `domainWarpFractalLacunarity=`*(self: Ref[FastNoiseLite]; domainWarpLacunarity: Float) {.loadfrom("set_domain_warp_fractal_lacunarity", 373806689).}
  proc domainWarpFractalLacunarity*(self: Ref[FastNoiseLite]): Float {.loadfrom("get_domain_warp_fractal_lacunarity", 1740695150).}
  proc `domainWarpFractalGain=`*(self: Ref[FastNoiseLite]; domainWarpGain: Float) {.loadfrom("set_domain_warp_fractal_gain", 373806689).}
  proc domainWarpFractalGain*(self: Ref[FastNoiseLite]): Float {.loadfrom("get_domain_warp_fractal_gain", 1740695150).}

# ArrayOccluder3D
define_godot_engine_class_essencials(ArrayOccluder3D, Occluder3D)
ArrayOccluder3D.memberProcs:
  proc setArrays*(self: Ref[ArrayOccluder3D]; vertices: PackedVector3Array; indices: PackedInt32Array) {.loadfrom("set_arrays", 3233972621).}
  proc `vertices=`*(self: Ref[ArrayOccluder3D]; vertices: PackedVector3Array) {.loadfrom("set_vertices", 334873810).}
  proc `indices=`*(self: Ref[ArrayOccluder3D]; indices: PackedInt32Array) {.loadfrom("set_indices", 3614634198).}

# BoxOccluder3D
define_godot_engine_class_essencials(BoxOccluder3D, Occluder3D)
BoxOccluder3D.memberProcs:
  proc `size=`*(self: Ref[BoxOccluder3D]; size: Vector3) {.loadfrom("set_size", 3460891852).}
  proc size*(self: Ref[BoxOccluder3D]): Vector3 {.loadfrom("get_size", 3360562783).}

# PolygonOccluder3D
define_godot_engine_class_essencials(PolygonOccluder3D, Occluder3D)
PolygonOccluder3D.memberProcs:
  proc `polygon=`*(self: Ref[PolygonOccluder3D]; polygon: PackedVector2Array) {.loadfrom("set_polygon", 1509147220).}
  proc polygon*(self: Ref[PolygonOccluder3D]): PackedVector2Array {.loadfrom("get_polygon", 2961356807).}

# QuadOccluder3D
define_godot_engine_class_essencials(QuadOccluder3D, Occluder3D)
QuadOccluder3D.memberProcs:
  proc `size=`*(self: Ref[QuadOccluder3D]; size: Vector2) {.loadfrom("set_size", 743155724).}
  proc size*(self: Ref[QuadOccluder3D]): Vector2 {.loadfrom("get_size", 3341600327).}

# SphereOccluder3D
define_godot_engine_class_essencials(SphereOccluder3D, Occluder3D)
SphereOccluder3D.memberProcs:
  proc `radius=`*(self: Ref[SphereOccluder3D]; radius: Float) {.loadfrom("set_radius", 373806689).}
  proc radius*(self: Ref[SphereOccluder3D]): Float {.loadfrom("get_radius", 1740695150).}

# GDScript
define_godot_engine_class_essencials(GDScript, Script)
GDScript.memberProcs:
  proc new*(self: Ref[GDScript]): Variant {.loadfrom("new", 1545262638).}

# ScriptExtension
define_godot_engine_class_essencials(ScriptExtension, Script)
method editorCanReloadFromFile*(self: Ref[ScriptExtension]): Bool {.base.} = (discard)
method placeholderErased*(self: Ref[ScriptExtension]; placeholder: pointer) {.base.} = (discard)
method canInstantiate*(self: Ref[ScriptExtension]): Bool {.base.} = (discard)
method getBaseScript*(self: Ref[ScriptExtension]): Ref[Script] {.base.} = (discard)
method getGlobalName*(self: Ref[ScriptExtension]): StringName {.base.} = (discard)
method inheritsScript*(self: Ref[ScriptExtension]; script: Ref[Script]): Bool {.base.} = (discard)
method getInstanceBaseType*(self: Ref[ScriptExtension]): StringName {.base.} = (discard)
method instanceCreate*(self: Ref[ScriptExtension]; forObject: ptr Object): pointer {.base.} = (discard)
method placeholderInstanceCreate*(self: Ref[ScriptExtension]; forObject: ptr Object): pointer {.base.} = (discard)
method instanceHas*(self: Ref[ScriptExtension]; `object`: ptr Object): Bool {.base.} = (discard)
method hasSourceCode*(self: Ref[ScriptExtension]): Bool {.base.} = (discard)
method getSourceCode*(self: Ref[ScriptExtension]): String {.base.} = (discard)
method setSourceCode*(self: Ref[ScriptExtension]; code: String) {.base.} = (discard)
method reload*(self: Ref[ScriptExtension]; keepState: Bool): Error {.base.} = (discard)
method getDocumentation*(self: Ref[ScriptExtension]): TypedArray[Dictionary] {.base.} = (discard)
method hasMethod*(self: Ref[ScriptExtension]; `method`: StringName): Bool {.base.} = (discard)
method getMethodInfo*(self: Ref[ScriptExtension]; `method`: StringName): Dictionary {.base.} = (discard)
method isTool*(self: Ref[ScriptExtension]): Bool {.base.} = (discard)
method isValid*(self: Ref[ScriptExtension]): Bool {.base.} = (discard)
method getLanguage*(self: Ref[ScriptExtension]): ScriptLanguage {.base.} = (discard)
method hasScriptSignal*(self: Ref[ScriptExtension]; signal: StringName): Bool {.base.} = (discard)
method getScriptSignalList*(self: Ref[ScriptExtension]): TypedArray[Dictionary] {.base.} = (discard)
method hasPropertyDefaultValue*(self: Ref[ScriptExtension]; property: StringName): Bool {.base.} = (discard)
method getPropertyDefaultValue*(self: Ref[ScriptExtension]; property: StringName): Variant {.base.} = (discard)
method updateExports*(self: Ref[ScriptExtension]) {.base.} = (discard)
method getScriptMethodList*(self: Ref[ScriptExtension]): TypedArray[Dictionary] {.base.} = (discard)
method getScriptPropertyList*(self: Ref[ScriptExtension]): TypedArray[Dictionary] {.base.} = (discard)
method getMemberLine*(self: Ref[ScriptExtension]; member: StringName): int32 {.base.} = (discard)
method getConstants*(self: Ref[ScriptExtension]): Dictionary {.base.} = (discard)
method getMembers*(self: Ref[ScriptExtension]): TypedArray[StringName] {.base.} = (discard)
method isPlaceholderFallbackEnabled*(self: Ref[ScriptExtension]): Bool {.base.} = (discard)
method getRpcConfig*(self: Ref[ScriptExtension]): Variant {.base.} = (discard)

# VisualShader
define_godot_engine_class_essencials(VisualShader, Shader)
VisualShader.memberProcs:
  proc setMode*(self: Ref[VisualShader]; mode: Shader|>Mode) {.loadfrom("set_mode", 3978014962).}
  proc addNode*(self: Ref[VisualShader]; `type`: VisualShader|>Type; node: Ref[VisualShaderNode]; position: Vector2; id: int32) {.loadfrom("add_node", 1560769431).}
  proc getNode*(self: Ref[VisualShader]; `type`: VisualShader|>Type; id: int32): Ref[VisualShaderNode] {.loadfrom("get_node", 3784670312).}
  proc setNodePosition*(self: Ref[VisualShader]; `type`: VisualShader|>Type; id: int32; position: Vector2) {.loadfrom("set_node_position", 2726660721).}
  proc getNodePosition*(self: Ref[VisualShader]; `type`: VisualShader|>Type; id: int32): Vector2 {.loadfrom("get_node_position", 2175036082).}
  proc getNodeList*(self: Ref[VisualShader]; `type`: VisualShader|>Type): PackedInt32Array {.loadfrom("get_node_list", 2370592410).}
  proc getValidNodeId*(self: Ref[VisualShader]; `type`: VisualShader|>Type): int32 {.loadfrom("get_valid_node_id", 629467342).}
  proc removeNode*(self: Ref[VisualShader]; `type`: VisualShader|>Type; id: int32) {.loadfrom("remove_node", 844050912).}
  proc replaceNode*(self: Ref[VisualShader]; `type`: VisualShader|>Type; id: int32; newClass: StringName) {.loadfrom("replace_node", 3144735253).}
  proc isNodeConnection*(self: Ref[VisualShader]; `type`: VisualShader|>Type; fromNode: int32; fromPort: int32; toNode: int32; toPort: int32): Bool {.loadfrom("is_node_connection", 3922381898).}
  proc canConnectNodes*(self: Ref[VisualShader]; `type`: VisualShader|>Type; fromNode: int32; fromPort: int32; toNode: int32; toPort: int32): Bool {.loadfrom("can_connect_nodes", 3922381898).}
  proc connectNodes*(self: Ref[VisualShader]; `type`: VisualShader|>Type; fromNode: int32; fromPort: int32; toNode: int32; toPort: int32): Error {.loadfrom("connect_nodes", 3081049573).}
  proc disconnectNodes*(self: Ref[VisualShader]; `type`: VisualShader|>Type; fromNode: int32; fromPort: int32; toNode: int32; toPort: int32) {.loadfrom("disconnect_nodes", 2268060358).}
  proc connectNodesForced*(self: Ref[VisualShader]; `type`: VisualShader|>Type; fromNode: int32; fromPort: int32; toNode: int32; toPort: int32) {.loadfrom("connect_nodes_forced", 2268060358).}
  proc getNodeConnections*(self: Ref[VisualShader]; `type`: VisualShader|>Type): TypedArray[Dictionary] {.loadfrom("get_node_connections", 1441964831).}
  proc `graphOffset=`*(self: Ref[VisualShader]; offset: Vector2) {.loadfrom("set_graph_offset", 743155724).}
  proc graphOffset*(self: Ref[VisualShader]): Vector2 {.loadfrom("get_graph_offset", 3341600327).}
  proc addVarying*(self: Ref[VisualShader]; name: String; mode: VisualShader|>VaryingMode; `type`: VisualShader|>VaryingType) {.loadfrom("add_varying", 2084110726).}
  proc removeVarying*(self: Ref[VisualShader]; name: String) {.loadfrom("remove_varying", 83702148).}
  proc hasVarying*(self: Ref[VisualShader]; name: String): Bool {.loadfrom("has_varying", 3927539163).}

# CapsuleShape2D
define_godot_engine_class_essencials(CapsuleShape2D, Shape2D)
CapsuleShape2D.memberProcs:
  proc `radius=`*(self: Ref[CapsuleShape2D]; radius: Float) {.loadfrom("set_radius", 373806689).}
  proc radius*(self: Ref[CapsuleShape2D]): Float {.loadfrom("get_radius", 1740695150).}
  proc `height=`*(self: Ref[CapsuleShape2D]; height: Float) {.loadfrom("set_height", 373806689).}
  proc height*(self: Ref[CapsuleShape2D]): Float {.loadfrom("get_height", 1740695150).}

# CircleShape2D
define_godot_engine_class_essencials(CircleShape2D, Shape2D)
CircleShape2D.memberProcs:
  proc `radius=`*(self: Ref[CircleShape2D]; radius: Float) {.loadfrom("set_radius", 373806689).}
  proc radius*(self: Ref[CircleShape2D]): Float {.loadfrom("get_radius", 1740695150).}

# ConcavePolygonShape2D
define_godot_engine_class_essencials(ConcavePolygonShape2D, Shape2D)
ConcavePolygonShape2D.memberProcs:
  proc `segments=`*(self: Ref[ConcavePolygonShape2D]; segments: PackedVector2Array) {.loadfrom("set_segments", 1509147220).}
  proc segments*(self: Ref[ConcavePolygonShape2D]): PackedVector2Array {.loadfrom("get_segments", 2961356807).}

# ConvexPolygonShape2D
define_godot_engine_class_essencials(ConvexPolygonShape2D, Shape2D)
ConvexPolygonShape2D.memberProcs:
  proc setPointCloud*(self: Ref[ConvexPolygonShape2D]; pointCloud: PackedVector2Array) {.loadfrom("set_point_cloud", 1509147220).}
  proc `points=`*(self: Ref[ConvexPolygonShape2D]; points: PackedVector2Array) {.loadfrom("set_points", 1509147220).}
  proc points*(self: Ref[ConvexPolygonShape2D]): PackedVector2Array {.loadfrom("get_points", 2961356807).}

# RectangleShape2D
define_godot_engine_class_essencials(RectangleShape2D, Shape2D)
RectangleShape2D.memberProcs:
  proc `size=`*(self: Ref[RectangleShape2D]; size: Vector2) {.loadfrom("set_size", 743155724).}
  proc size*(self: Ref[RectangleShape2D]): Vector2 {.loadfrom("get_size", 3341600327).}

# SegmentShape2D
define_godot_engine_class_essencials(SegmentShape2D, Shape2D)
SegmentShape2D.memberProcs:
  proc `a=`*(self: Ref[SegmentShape2D]; a: Vector2) {.loadfrom("set_a", 743155724).}
  proc a*(self: Ref[SegmentShape2D]): Vector2 {.loadfrom("get_a", 3341600327).}
  proc `b=`*(self: Ref[SegmentShape2D]; b: Vector2) {.loadfrom("set_b", 743155724).}
  proc b*(self: Ref[SegmentShape2D]): Vector2 {.loadfrom("get_b", 3341600327).}

# SeparationRayShape2D
define_godot_engine_class_essencials(SeparationRayShape2D, Shape2D)
SeparationRayShape2D.memberProcs:
  proc `length=`*(self: Ref[SeparationRayShape2D]; length: Float) {.loadfrom("set_length", 373806689).}
  proc length*(self: Ref[SeparationRayShape2D]): Float {.loadfrom("get_length", 1740695150).}
  proc `slideOnSlope=`*(self: Ref[SeparationRayShape2D]; active: Bool) {.loadfrom("set_slide_on_slope", 2586408642).}
  proc slideOnSlope*(self: Ref[SeparationRayShape2D]): Bool {.loadfrom("get_slide_on_slope", 36873697).}

# WorldBoundaryShape2D
define_godot_engine_class_essencials(WorldBoundaryShape2D, Shape2D)
WorldBoundaryShape2D.memberProcs:
  proc `normal=`*(self: Ref[WorldBoundaryShape2D]; normal: Vector2) {.loadfrom("set_normal", 743155724).}
  proc normal*(self: Ref[WorldBoundaryShape2D]): Vector2 {.loadfrom("get_normal", 3341600327).}
  proc `distance=`*(self: Ref[WorldBoundaryShape2D]; distance: Float) {.loadfrom("set_distance", 373806689).}
  proc distance*(self: Ref[WorldBoundaryShape2D]): Float {.loadfrom("get_distance", 1740695150).}

# BoxShape3D
define_godot_engine_class_essencials(BoxShape3D, Shape3D)
BoxShape3D.memberProcs:
  proc `size=`*(self: Ref[BoxShape3D]; size: Vector3) {.loadfrom("set_size", 3460891852).}
  proc size*(self: Ref[BoxShape3D]): Vector3 {.loadfrom("get_size", 3360562783).}

# CapsuleShape3D
define_godot_engine_class_essencials(CapsuleShape3D, Shape3D)
CapsuleShape3D.memberProcs:
  proc `radius=`*(self: Ref[CapsuleShape3D]; radius: Float) {.loadfrom("set_radius", 373806689).}
  proc radius*(self: Ref[CapsuleShape3D]): Float {.loadfrom("get_radius", 1740695150).}
  proc `height=`*(self: Ref[CapsuleShape3D]; height: Float) {.loadfrom("set_height", 373806689).}
  proc height*(self: Ref[CapsuleShape3D]): Float {.loadfrom("get_height", 1740695150).}

# ConcavePolygonShape3D
define_godot_engine_class_essencials(ConcavePolygonShape3D, Shape3D)
ConcavePolygonShape3D.memberProcs:
  proc `faces=`*(self: Ref[ConcavePolygonShape3D]; faces: PackedVector3Array) {.loadfrom("set_faces", 334873810).}
  proc faces*(self: Ref[ConcavePolygonShape3D]): PackedVector3Array {.loadfrom("get_faces", 497664490).}
  proc `backfaceCollisionEnabled=`*(self: Ref[ConcavePolygonShape3D]; enabled: Bool) {.loadfrom("set_backface_collision_enabled", 2586408642).}
  proc isBackfaceCollisionEnabled*(self: Ref[ConcavePolygonShape3D]): Bool {.loadfrom("is_backface_collision_enabled", 36873697).}

# ConvexPolygonShape3D
define_godot_engine_class_essencials(ConvexPolygonShape3D, Shape3D)
ConvexPolygonShape3D.memberProcs:
  proc `points=`*(self: Ref[ConvexPolygonShape3D]; points: PackedVector3Array) {.loadfrom("set_points", 334873810).}
  proc points*(self: Ref[ConvexPolygonShape3D]): PackedVector3Array {.loadfrom("get_points", 497664490).}

# CylinderShape3D
define_godot_engine_class_essencials(CylinderShape3D, Shape3D)
CylinderShape3D.memberProcs:
  proc `radius=`*(self: Ref[CylinderShape3D]; radius: Float) {.loadfrom("set_radius", 373806689).}
  proc radius*(self: Ref[CylinderShape3D]): Float {.loadfrom("get_radius", 1740695150).}
  proc `height=`*(self: Ref[CylinderShape3D]; height: Float) {.loadfrom("set_height", 373806689).}
  proc height*(self: Ref[CylinderShape3D]): Float {.loadfrom("get_height", 1740695150).}

# HeightMapShape3D
define_godot_engine_class_essencials(HeightMapShape3D, Shape3D)
HeightMapShape3D.memberProcs:
  proc `mapWidth=`*(self: Ref[HeightMapShape3D]; width: int32) {.loadfrom("set_map_width", 1286410249).}
  proc mapWidth*(self: Ref[HeightMapShape3D]): int32 {.loadfrom("get_map_width", 3905245786).}
  proc `mapDepth=`*(self: Ref[HeightMapShape3D]; height: int32) {.loadfrom("set_map_depth", 1286410249).}
  proc mapDepth*(self: Ref[HeightMapShape3D]): int32 {.loadfrom("get_map_depth", 3905245786).}
  proc `mapData=`*(self: Ref[HeightMapShape3D]; data: PackedFloat32Array) {.loadfrom("set_map_data", 2899603908).}
  proc mapData*(self: Ref[HeightMapShape3D]): PackedFloat32Array {.loadfrom("get_map_data", 675695659).}

# SeparationRayShape3D
define_godot_engine_class_essencials(SeparationRayShape3D, Shape3D)
SeparationRayShape3D.memberProcs:
  proc `length=`*(self: Ref[SeparationRayShape3D]; length: Float) {.loadfrom("set_length", 373806689).}
  proc length*(self: Ref[SeparationRayShape3D]): Float {.loadfrom("get_length", 1740695150).}
  proc `slideOnSlope=`*(self: Ref[SeparationRayShape3D]; active: Bool) {.loadfrom("set_slide_on_slope", 2586408642).}
  proc slideOnSlope*(self: Ref[SeparationRayShape3D]): Bool {.loadfrom("get_slide_on_slope", 36873697).}

# SphereShape3D
define_godot_engine_class_essencials(SphereShape3D, Shape3D)
SphereShape3D.memberProcs:
  proc `radius=`*(self: Ref[SphereShape3D]; radius: Float) {.loadfrom("set_radius", 373806689).}
  proc radius*(self: Ref[SphereShape3D]): Float {.loadfrom("get_radius", 1740695150).}

# WorldBoundaryShape3D
define_godot_engine_class_essencials(WorldBoundaryShape3D, Shape3D)
WorldBoundaryShape3D.memberProcs:
  proc `plane=`*(self: Ref[WorldBoundaryShape3D]; plane: Plane) {.loadfrom("set_plane", 3505987427).}
  proc plane*(self: Ref[WorldBoundaryShape3D]): Plane {.loadfrom("get_plane", 2753500971).}

# SkeletonModification2DCCDIK
define_godot_engine_class_essencials(SkeletonModification2DCCDIK, SkeletonModification2D)
SkeletonModification2DCCDIK.memberProcs:
  proc `targetNode=`*(self: Ref[SkeletonModification2DCCDIK]; targetNodepath: NodePath) {.loadfrom("set_target_node", 1348162250).}
  proc tarnode*(self: Ref[SkeletonModification2DCCDIK]): NodePath {.loadfrom("get_target_node", 4075236667).}
  proc `tipNode=`*(self: Ref[SkeletonModification2DCCDIK]; tipNodepath: NodePath) {.loadfrom("set_tip_node", 1348162250).}
  proc tipNode*(self: Ref[SkeletonModification2DCCDIK]): NodePath {.loadfrom("get_tip_node", 4075236667).}
  proc `ccdikDataChainLength=`*(self: Ref[SkeletonModification2DCCDIK]; length: int32) {.loadfrom("set_ccdik_data_chain_length", 1286410249).}
  proc ccdikDataChainLength*(self: Ref[SkeletonModification2DCCDIK]): int32 {.loadfrom("get_ccdik_data_chain_length", 2455072627).}
  proc setCcdikJointBone2dNode*(self: Ref[SkeletonModification2DCCDIK]; jointIdx: int32; bone2dNodepath: NodePath) {.loadfrom("set_ccdik_joint_bone2d_node", 2761262315).}
  proc getCcdikJointBone2dNode*(self: Ref[SkeletonModification2DCCDIK]; jointIdx: int32): NodePath {.loadfrom("get_ccdik_joint_bone2d_node", 408788394).}
  proc setCcdikJointBoneIndex*(self: Ref[SkeletonModification2DCCDIK]; jointIdx: int32; boneIdx: int32) {.loadfrom("set_ccdik_joint_bone_index", 3937882851).}
  proc getCcdikJointBoneIndex*(self: Ref[SkeletonModification2DCCDIK]; jointIdx: int32): int32 {.loadfrom("get_ccdik_joint_bone_index", 923996154).}
  proc setCcdikJointRotateFromJoint*(self: Ref[SkeletonModification2DCCDIK]; jointIdx: int32; rotateFromJoint: Bool) {.loadfrom("set_ccdik_joint_rotate_from_joint", 300928843).}
  proc getCcdikJointRotateFromJoint*(self: Ref[SkeletonModification2DCCDIK]; jointIdx: int32): Bool {.loadfrom("get_ccdik_joint_rotate_from_joint", 1116898809).}
  proc setCcdikJointEnableConstraint*(self: Ref[SkeletonModification2DCCDIK]; jointIdx: int32; enableConstraint: Bool) {.loadfrom("set_ccdik_joint_enable_constraint", 300928843).}
  proc getCcdikJointEnableConstraint*(self: Ref[SkeletonModification2DCCDIK]; jointIdx: int32): Bool {.loadfrom("get_ccdik_joint_enable_constraint", 1116898809).}
  proc setCcdikJointConstraintAngleMin*(self: Ref[SkeletonModification2DCCDIK]; jointIdx: int32; angleMin: Float) {.loadfrom("set_ccdik_joint_constraint_angle_min", 1602489585).}
  proc getCcdikJointConstraintAngleMin*(self: Ref[SkeletonModification2DCCDIK]; jointIdx: int32): Float {.loadfrom("get_ccdik_joint_constraint_angle_min", 2339986948).}
  proc setCcdikJointConstraintAngleMax*(self: Ref[SkeletonModification2DCCDIK]; jointIdx: int32; angleMax: Float) {.loadfrom("set_ccdik_joint_constraint_angle_max", 1602489585).}
  proc getCcdikJointConstraintAngleMax*(self: Ref[SkeletonModification2DCCDIK]; jointIdx: int32): Float {.loadfrom("get_ccdik_joint_constraint_angle_max", 2339986948).}
  proc setCcdikJointConstraintAngleInvert*(self: Ref[SkeletonModification2DCCDIK]; jointIdx: int32; invert: Bool) {.loadfrom("set_ccdik_joint_constraint_angle_invert", 300928843).}
  proc getCcdikJointConstraintAngleInvert*(self: Ref[SkeletonModification2DCCDIK]; jointIdx: int32): Bool {.loadfrom("get_ccdik_joint_constraint_angle_invert", 1116898809).}

# SkeletonModification2DFABRIK
define_godot_engine_class_essencials(SkeletonModification2DFABRIK, SkeletonModification2D)
SkeletonModification2DFABRIK.memberProcs:
  proc `targetNode=`*(self: Ref[SkeletonModification2DFABRIK]; targetNodepath: NodePath) {.loadfrom("set_target_node", 1348162250).}
  proc tarnode*(self: Ref[SkeletonModification2DFABRIK]): NodePath {.loadfrom("get_target_node", 4075236667).}
  proc `fabrikDataChainLength=`*(self: Ref[SkeletonModification2DFABRIK]; length: int32) {.loadfrom("set_fabrik_data_chain_length", 1286410249).}
  proc fabrikDataChainLength*(self: Ref[SkeletonModification2DFABRIK]): int32 {.loadfrom("get_fabrik_data_chain_length", 2455072627).}
  proc setFabrikJointBone2dNode*(self: Ref[SkeletonModification2DFABRIK]; jointIdx: int32; bone2dNodepath: NodePath) {.loadfrom("set_fabrik_joint_bone2d_node", 2761262315).}
  proc getFabrikJointBone2dNode*(self: Ref[SkeletonModification2DFABRIK]; jointIdx: int32): NodePath {.loadfrom("get_fabrik_joint_bone2d_node", 408788394).}
  proc setFabrikJointBoneIndex*(self: Ref[SkeletonModification2DFABRIK]; jointIdx: int32; boneIdx: int32) {.loadfrom("set_fabrik_joint_bone_index", 3937882851).}
  proc getFabrikJointBoneIndex*(self: Ref[SkeletonModification2DFABRIK]; jointIdx: int32): int32 {.loadfrom("get_fabrik_joint_bone_index", 923996154).}
  proc setFabrikJointMagnetPosition*(self: Ref[SkeletonModification2DFABRIK]; jointIdx: int32; magnetPosition: Vector2) {.loadfrom("set_fabrik_joint_magnet_position", 163021252).}
  proc getFabrikJointMagnetPosition*(self: Ref[SkeletonModification2DFABRIK]; jointIdx: int32): Vector2 {.loadfrom("get_fabrik_joint_magnet_position", 2299179447).}
  proc setFabrikJointUseTargetRotation*(self: Ref[SkeletonModification2DFABRIK]; jointIdx: int32; useTargetRotation: Bool) {.loadfrom("set_fabrik_joint_use_target_rotation", 300928843).}
  proc getFabrikJointUseTargetRotation*(self: Ref[SkeletonModification2DFABRIK]; jointIdx: int32): Bool {.loadfrom("get_fabrik_joint_use_target_rotation", 1116898809).}

# SkeletonModification2DJiggle
define_godot_engine_class_essencials(SkeletonModification2DJiggle, SkeletonModification2D)
SkeletonModification2DJiggle.memberProcs:
  proc `targetNode=`*(self: Ref[SkeletonModification2DJiggle]; targetNodepath: NodePath) {.loadfrom("set_target_node", 1348162250).}
  proc tarnode*(self: Ref[SkeletonModification2DJiggle]): NodePath {.loadfrom("get_target_node", 4075236667).}
  proc `jiggleDataChainLength=`*(self: Ref[SkeletonModification2DJiggle]; length: int32) {.loadfrom("set_jiggle_data_chain_length", 1286410249).}
  proc jiggleDataChainLength*(self: Ref[SkeletonModification2DJiggle]): int32 {.loadfrom("get_jiggle_data_chain_length", 2455072627).}
  proc `stiffness=`*(self: Ref[SkeletonModification2DJiggle]; stiffness: Float) {.loadfrom("set_stiffness", 373806689).}
  proc stiffness*(self: Ref[SkeletonModification2DJiggle]): Float {.loadfrom("get_stiffness", 1740695150).}
  proc `mass=`*(self: Ref[SkeletonModification2DJiggle]; mass: Float) {.loadfrom("set_mass", 373806689).}
  proc mass*(self: Ref[SkeletonModification2DJiggle]): Float {.loadfrom("get_mass", 1740695150).}
  proc `damping=`*(self: Ref[SkeletonModification2DJiggle]; damping: Float) {.loadfrom("set_damping", 373806689).}
  proc damping*(self: Ref[SkeletonModification2DJiggle]): Float {.loadfrom("get_damping", 1740695150).}
  proc `useGravity=`*(self: Ref[SkeletonModification2DJiggle]; useGravity: Bool) {.loadfrom("set_use_gravity", 2586408642).}
  proc useGravity*(self: Ref[SkeletonModification2DJiggle]): Bool {.loadfrom("get_use_gravity", 36873697).}
  proc `gravity=`*(self: Ref[SkeletonModification2DJiggle]; gravity: Vector2) {.loadfrom("set_gravity", 743155724).}
  proc gravity*(self: Ref[SkeletonModification2DJiggle]): Vector2 {.loadfrom("get_gravity", 3341600327).}
  proc setUseColliders*(self: Ref[SkeletonModification2DJiggle]; useColliders: Bool) {.loadfrom("set_use_colliders", 2586408642).}
  proc getUseColliders*(self: Ref[SkeletonModification2DJiggle]): Bool {.loadfrom("get_use_colliders", 36873697).}
  proc setCollisionMask*(self: Ref[SkeletonModification2DJiggle]; collisionMask: int32) {.loadfrom("set_collision_mask", 1286410249).}
  proc getCollisionMask*(self: Ref[SkeletonModification2DJiggle]): int32 {.loadfrom("get_collision_mask", 3905245786).}
  proc setJiggleJointBone2dNode*(self: Ref[SkeletonModification2DJiggle]; jointIdx: int32; bone2dNode: NodePath) {.loadfrom("set_jiggle_joint_bone2d_node", 2761262315).}
  proc getJiggleJointBone2dNode*(self: Ref[SkeletonModification2DJiggle]; jointIdx: int32): NodePath {.loadfrom("get_jiggle_joint_bone2d_node", 408788394).}
  proc setJiggleJointBoneIndex*(self: Ref[SkeletonModification2DJiggle]; jointIdx: int32; boneIdx: int32) {.loadfrom("set_jiggle_joint_bone_index", 3937882851).}
  proc getJiggleJointBoneIndex*(self: Ref[SkeletonModification2DJiggle]; jointIdx: int32): int32 {.loadfrom("get_jiggle_joint_bone_index", 923996154).}
  proc setJiggleJointOverride*(self: Ref[SkeletonModification2DJiggle]; jointIdx: int32; override: Bool) {.loadfrom("set_jiggle_joint_override", 300928843).}
  proc getJiggleJointOverride*(self: Ref[SkeletonModification2DJiggle]; jointIdx: int32): Bool {.loadfrom("get_jiggle_joint_override", 1116898809).}
  proc setJiggleJointStiffness*(self: Ref[SkeletonModification2DJiggle]; jointIdx: int32; stiffness: Float) {.loadfrom("set_jiggle_joint_stiffness", 1602489585).}
  proc getJiggleJointStiffness*(self: Ref[SkeletonModification2DJiggle]; jointIdx: int32): Float {.loadfrom("get_jiggle_joint_stiffness", 2339986948).}
  proc setJiggleJointMass*(self: Ref[SkeletonModification2DJiggle]; jointIdx: int32; mass: Float) {.loadfrom("set_jiggle_joint_mass", 1602489585).}
  proc getJiggleJointMass*(self: Ref[SkeletonModification2DJiggle]; jointIdx: int32): Float {.loadfrom("get_jiggle_joint_mass", 2339986948).}
  proc setJiggleJointDamping*(self: Ref[SkeletonModification2DJiggle]; jointIdx: int32; damping: Float) {.loadfrom("set_jiggle_joint_damping", 1602489585).}
  proc getJiggleJointDamping*(self: Ref[SkeletonModification2DJiggle]; jointIdx: int32): Float {.loadfrom("get_jiggle_joint_damping", 2339986948).}
  proc setJiggleJointUseGravity*(self: Ref[SkeletonModification2DJiggle]; jointIdx: int32; useGravity: Bool) {.loadfrom("set_jiggle_joint_use_gravity", 300928843).}
  proc getJiggleJointUseGravity*(self: Ref[SkeletonModification2DJiggle]; jointIdx: int32): Bool {.loadfrom("get_jiggle_joint_use_gravity", 1116898809).}
  proc setJiggleJointGravity*(self: Ref[SkeletonModification2DJiggle]; jointIdx: int32; gravity: Vector2) {.loadfrom("set_jiggle_joint_gravity", 163021252).}
  proc getJiggleJointGravity*(self: Ref[SkeletonModification2DJiggle]; jointIdx: int32): Vector2 {.loadfrom("get_jiggle_joint_gravity", 2299179447).}

# SkeletonModification2DLookAt
define_godot_engine_class_essencials(SkeletonModification2DLookAt, SkeletonModification2D)
SkeletonModification2DLookAt.memberProcs:
  proc `bone2dNode=`*(self: Ref[SkeletonModification2DLookAt]; bone2dNodepath: NodePath) {.loadfrom("set_bone2d_node", 1348162250).}
  proc bone2dNode*(self: Ref[SkeletonModification2DLookAt]): NodePath {.loadfrom("get_bone2d_node", 4075236667).}
  proc `boneIndex=`*(self: Ref[SkeletonModification2DLookAt]; boneIdx: int32) {.loadfrom("set_bone_index", 1286410249).}
  proc boneIndex*(self: Ref[SkeletonModification2DLookAt]): int32 {.loadfrom("get_bone_index", 3905245786).}
  proc `targetNode=`*(self: Ref[SkeletonModification2DLookAt]; targetNodepath: NodePath) {.loadfrom("set_target_node", 1348162250).}
  proc tarnode*(self: Ref[SkeletonModification2DLookAt]): NodePath {.loadfrom("get_target_node", 4075236667).}
  proc setAdditionalRotation*(self: Ref[SkeletonModification2DLookAt]; rotation: Float) {.loadfrom("set_additional_rotation", 373806689).}
  proc getAdditionalRotation*(self: Ref[SkeletonModification2DLookAt]): Float {.loadfrom("get_additional_rotation", 1740695150).}
  proc setEnableConstraint*(self: Ref[SkeletonModification2DLookAt]; enableConstraint: Bool) {.loadfrom("set_enable_constraint", 2586408642).}
  proc getEnableConstraint*(self: Ref[SkeletonModification2DLookAt]): Bool {.loadfrom("get_enable_constraint", 36873697).}
  proc setConstraintAngleMin*(self: Ref[SkeletonModification2DLookAt]; angleMin: Float) {.loadfrom("set_constraint_angle_min", 373806689).}
  proc getConstraintAngleMin*(self: Ref[SkeletonModification2DLookAt]): Float {.loadfrom("get_constraint_angle_min", 1740695150).}
  proc setConstraintAngleMax*(self: Ref[SkeletonModification2DLookAt]; angleMax: Float) {.loadfrom("set_constraint_angle_max", 373806689).}
  proc getConstraintAngleMax*(self: Ref[SkeletonModification2DLookAt]): Float {.loadfrom("get_constraint_angle_max", 1740695150).}
  proc setConstraintAngleInvert*(self: Ref[SkeletonModification2DLookAt]; invert: Bool) {.loadfrom("set_constraint_angle_invert", 2586408642).}
  proc getConstraintAngleInvert*(self: Ref[SkeletonModification2DLookAt]): Bool {.loadfrom("get_constraint_angle_invert", 36873697).}

# SkeletonModification2DPhysicalBones
define_godot_engine_class_essencials(SkeletonModification2DPhysicalBones, SkeletonModification2D)
SkeletonModification2DPhysicalBones.memberProcs:
  proc `physicalBoneChainLength=`*(self: Ref[SkeletonModification2DPhysicalBones]; length: int32) {.loadfrom("set_physical_bone_chain_length", 1286410249).}
  proc physicalBoneChainLength*(self: Ref[SkeletonModification2DPhysicalBones]): int32 {.loadfrom("get_physical_bone_chain_length", 2455072627).}
  proc setPhysicalBoneNode*(self: Ref[SkeletonModification2DPhysicalBones]; jointIdx: int32; physicalbone2dNode: NodePath) {.loadfrom("set_physical_bone_node", 2761262315).}
  proc getPhysicalBoneNode*(self: Ref[SkeletonModification2DPhysicalBones]; jointIdx: int32): NodePath {.loadfrom("get_physical_bone_node", 408788394).}
  proc fetchPhysicalBones*(self: Ref[SkeletonModification2DPhysicalBones]) {.loadfrom("fetch_physical_bones", 3218959716).}
  proc startSimulation*(self: Ref[SkeletonModification2DPhysicalBones]; bones: TypedArray[StringName] = TypedArray|>init[StringName]()) {.loadfrom("start_simulation", 2787316981).}
  proc stopSimulation*(self: Ref[SkeletonModification2DPhysicalBones]; bones: TypedArray[StringName] = TypedArray|>init[StringName]()) {.loadfrom("stop_simulation", 2787316981).}

# SkeletonModification2DStackHolder
define_godot_engine_class_essencials(SkeletonModification2DStackHolder, SkeletonModification2D)
SkeletonModification2DStackHolder.memberProcs:
  proc setHeldModificationStack*(self: Ref[SkeletonModification2DStackHolder]; heldModificationStack: Ref[SkeletonModificationStack2D]) {.loadfrom("set_held_modification_stack", 3907307132).}
  proc getHeldModificationStack*(self: Ref[SkeletonModification2DStackHolder]): Ref[SkeletonModificationStack2D] {.loadfrom("get_held_modification_stack", 2107508396).}

# SkeletonModification2DTwoBoneIK
define_godot_engine_class_essencials(SkeletonModification2DTwoBoneIK, SkeletonModification2D)
SkeletonModification2DTwoBoneIK.memberProcs:
  proc `targetNode=`*(self: Ref[SkeletonModification2DTwoBoneIK]; targetNodepath: NodePath) {.loadfrom("set_target_node", 1348162250).}
  proc tarnode*(self: Ref[SkeletonModification2DTwoBoneIK]): NodePath {.loadfrom("get_target_node", 4075236667).}
  proc `targetMinimumDistance=`*(self: Ref[SkeletonModification2DTwoBoneIK]; minimumDistance: Float) {.loadfrom("set_target_minimum_distance", 373806689).}
  proc tarminimumDistance*(self: Ref[SkeletonModification2DTwoBoneIK]): Float {.loadfrom("get_target_minimum_distance", 1740695150).}
  proc `targetMaximumDistance=`*(self: Ref[SkeletonModification2DTwoBoneIK]; maximumDistance: Float) {.loadfrom("set_target_maximum_distance", 373806689).}
  proc tarmaximumDistance*(self: Ref[SkeletonModification2DTwoBoneIK]): Float {.loadfrom("get_target_maximum_distance", 1740695150).}
  proc `flipBendDirection=`*(self: Ref[SkeletonModification2DTwoBoneIK]; flipDirection: Bool) {.loadfrom("set_flip_bend_direction", 2586408642).}
  proc flipBendDirection*(self: Ref[SkeletonModification2DTwoBoneIK]): Bool {.loadfrom("get_flip_bend_direction", 36873697).}
  proc setJointOneBone2dNode*(self: Ref[SkeletonModification2DTwoBoneIK]; bone2dNode: NodePath) {.loadfrom("set_joint_one_bone2d_node", 1348162250).}
  proc getJointOneBone2dNode*(self: Ref[SkeletonModification2DTwoBoneIK]): NodePath {.loadfrom("get_joint_one_bone2d_node", 4075236667).}
  proc setJointOneBoneIdx*(self: Ref[SkeletonModification2DTwoBoneIK]; boneIdx: int32) {.loadfrom("set_joint_one_bone_idx", 1286410249).}
  proc getJointOneBoneIdx*(self: Ref[SkeletonModification2DTwoBoneIK]): int32 {.loadfrom("get_joint_one_bone_idx", 3905245786).}
  proc setJointTwoBone2dNode*(self: Ref[SkeletonModification2DTwoBoneIK]; bone2dNode: NodePath) {.loadfrom("set_joint_two_bone2d_node", 1348162250).}
  proc getJointTwoBone2dNode*(self: Ref[SkeletonModification2DTwoBoneIK]): NodePath {.loadfrom("get_joint_two_bone2d_node", 4075236667).}
  proc setJointTwoBoneIdx*(self: Ref[SkeletonModification2DTwoBoneIK]; boneIdx: int32) {.loadfrom("set_joint_two_bone_idx", 1286410249).}
  proc getJointTwoBoneIdx*(self: Ref[SkeletonModification2DTwoBoneIK]): int32 {.loadfrom("get_joint_two_bone_idx", 3905245786).}

# SkeletonProfileHumanoid
define_godot_engine_class_essencials(SkeletonProfileHumanoid, SkeletonProfile)

# StyleBoxEmpty
define_godot_engine_class_essencials(StyleBoxEmpty, StyleBox)

# StyleBoxFlat
define_godot_engine_class_essencials(StyleBoxFlat, StyleBox)
StyleBoxFlat.memberProcs:
  proc `bgColor=`*(self: Ref[StyleBoxFlat]; color: Color) {.loadfrom("set_bg_color", 2920490490).}
  proc bgColor*(self: Ref[StyleBoxFlat]): Color {.loadfrom("get_bg_color", 3444240500).}
  proc `borderColor=`*(self: Ref[StyleBoxFlat]; color: Color) {.loadfrom("set_border_color", 2920490490).}
  proc borderColor*(self: Ref[StyleBoxFlat]): Color {.loadfrom("get_border_color", 3444240500).}
  proc setBorderWidthAll*(self: Ref[StyleBoxFlat]; width: int32) {.loadfrom("set_border_width_all", 1286410249).}
  proc getBorderWidthMin*(self: Ref[StyleBoxFlat]): int32 {.loadfrom("get_border_width_min", 3905245786).}
  proc `borderWidth=`*(self: Ref[StyleBoxFlat]; margin: Side; width: int32) {.loadfrom("set_border_width", 437707142).}
  proc borderWidth*(self: Ref[StyleBoxFlat]; margin: Side): int32 {.loadfrom("get_border_width", 1983885014).}
  proc `borderBlend=`*(self: Ref[StyleBoxFlat]; blend: Bool) {.loadfrom("set_border_blend", 2586408642).}
  proc borderBlend*(self: Ref[StyleBoxFlat]): Bool {.loadfrom("get_border_blend", 36873697).}
  proc setCornerRadiusAll*(self: Ref[StyleBoxFlat]; radius: int32) {.loadfrom("set_corner_radius_all", 1286410249).}
  proc `cornerRadius=`*(self: Ref[StyleBoxFlat]; corner: Corner; radius: int32) {.loadfrom("set_corner_radius", 2696158768).}
  proc cornerRadius*(self: Ref[StyleBoxFlat]; corner: Corner): int32 {.loadfrom("get_corner_radius", 3982397690).}
  proc `expandMargin=`*(self: Ref[StyleBoxFlat]; margin: Side; size: Float) {.loadfrom("set_expand_margin", 4290182280).}
  proc setExpandMarginAll*(self: Ref[StyleBoxFlat]; size: Float) {.loadfrom("set_expand_margin_all", 373806689).}
  proc expandMargin*(self: Ref[StyleBoxFlat]; margin: Side): Float {.loadfrom("get_expand_margin", 2869120046).}
  proc `drawCenter=`*(self: Ref[StyleBoxFlat]; drawCenter: Bool) {.loadfrom("set_draw_center", 2586408642).}
  proc isDrawCenterEnabled*(self: Ref[StyleBoxFlat]): Bool {.loadfrom("is_draw_center_enabled", 36873697).}
  proc `skew=`*(self: Ref[StyleBoxFlat]; skew: Vector2) {.loadfrom("set_skew", 743155724).}
  proc skew*(self: Ref[StyleBoxFlat]): Vector2 {.loadfrom("get_skew", 3341600327).}
  proc `shadowColor=`*(self: Ref[StyleBoxFlat]; color: Color) {.loadfrom("set_shadow_color", 2920490490).}
  proc shadowColor*(self: Ref[StyleBoxFlat]): Color {.loadfrom("get_shadow_color", 3444240500).}
  proc `shadowSize=`*(self: Ref[StyleBoxFlat]; size: int32) {.loadfrom("set_shadow_size", 1286410249).}
  proc shadowSize*(self: Ref[StyleBoxFlat]): int32 {.loadfrom("get_shadow_size", 3905245786).}
  proc `shadowOffset=`*(self: Ref[StyleBoxFlat]; offset: Vector2) {.loadfrom("set_shadow_offset", 743155724).}
  proc shadowOffset*(self: Ref[StyleBoxFlat]): Vector2 {.loadfrom("get_shadow_offset", 3341600327).}
  proc `antiAliased=`*(self: Ref[StyleBoxFlat]; antiAliased: Bool) {.loadfrom("set_anti_aliased", 2586408642).}
  proc isAntiAliased*(self: Ref[StyleBoxFlat]): Bool {.loadfrom("is_anti_aliased", 36873697).}
  proc `aaSize=`*(self: Ref[StyleBoxFlat]; size: Float) {.loadfrom("set_aa_size", 373806689).}
  proc aaSize*(self: Ref[StyleBoxFlat]): Float {.loadfrom("get_aa_size", 1740695150).}
  proc `cornerDetail=`*(self: Ref[StyleBoxFlat]; detail: int32) {.loadfrom("set_corner_detail", 1286410249).}
  proc cornerDetail*(self: Ref[StyleBoxFlat]): int32 {.loadfrom("get_corner_detail", 3905245786).}

# StyleBoxLine
define_godot_engine_class_essencials(StyleBoxLine, StyleBox)
StyleBoxLine.memberProcs:
  proc `color=`*(self: Ref[StyleBoxLine]; color: Color) {.loadfrom("set_color", 2920490490).}
  proc color*(self: Ref[StyleBoxLine]): Color {.loadfrom("get_color", 3444240500).}
  proc `thickness=`*(self: Ref[StyleBoxLine]; thickness: int32) {.loadfrom("set_thickness", 1286410249).}
  proc thickness*(self: Ref[StyleBoxLine]): int32 {.loadfrom("get_thickness", 3905245786).}
  proc `growBegin=`*(self: Ref[StyleBoxLine]; offset: Float) {.loadfrom("set_grow_begin", 373806689).}
  proc growBegin*(self: Ref[StyleBoxLine]): Float {.loadfrom("get_grow_begin", 1740695150).}
  proc `growEnd=`*(self: Ref[StyleBoxLine]; offset: Float) {.loadfrom("set_grow_end", 373806689).}
  proc growEnd*(self: Ref[StyleBoxLine]): Float {.loadfrom("get_grow_end", 1740695150).}
  proc `vertical=`*(self: Ref[StyleBoxLine]; vertical: Bool) {.loadfrom("set_vertical", 2586408642).}
  proc isVertical*(self: Ref[StyleBoxLine]): Bool {.loadfrom("is_vertical", 36873697).}

# StyleBoxTexture
define_godot_engine_class_essencials(StyleBoxTexture, StyleBox)
StyleBoxTexture.memberProcs:
  proc `texture=`*(self: Ref[StyleBoxTexture]; texture: Ref[Texture2D]) {.loadfrom("set_texture", 4051416890).}
  proc texture*(self: Ref[StyleBoxTexture]): Ref[Texture2D] {.loadfrom("get_texture", 3635182373).}
  proc `textureMargin=`*(self: Ref[StyleBoxTexture]; margin: Side; size: Float) {.loadfrom("set_texture_margin", 4290182280).}
  proc setTextureMarginAll*(self: Ref[StyleBoxTexture]; size: Float) {.loadfrom("set_texture_margin_all", 373806689).}
  proc textureMargin*(self: Ref[StyleBoxTexture]; margin: Side): Float {.loadfrom("get_texture_margin", 2869120046).}
  proc `expandMargin=`*(self: Ref[StyleBoxTexture]; margin: Side; size: Float) {.loadfrom("set_expand_margin", 4290182280).}
  proc setExpandMarginAll*(self: Ref[StyleBoxTexture]; size: Float) {.loadfrom("set_expand_margin_all", 373806689).}
  proc expandMargin*(self: Ref[StyleBoxTexture]; margin: Side): Float {.loadfrom("get_expand_margin", 2869120046).}
  proc `regionRect=`*(self: Ref[StyleBoxTexture]; region: Rect2) {.loadfrom("set_region_rect", 2046264180).}
  proc regionRect*(self: Ref[StyleBoxTexture]): Rect2 {.loadfrom("get_region_rect", 1639390495).}
  proc `drawCenter=`*(self: Ref[StyleBoxTexture]; enable: Bool) {.loadfrom("set_draw_center", 2586408642).}
  proc isDrawCenterEnabled*(self: Ref[StyleBoxTexture]): Bool {.loadfrom("is_draw_center_enabled", 36873697).}
  proc `modulate=`*(self: Ref[StyleBoxTexture]; color: Color) {.loadfrom("set_modulate", 2920490490).}
  proc modulate*(self: Ref[StyleBoxTexture]): Color {.loadfrom("get_modulate", 3444240500).}
  proc `hAxisStretchMode=`*(self: Ref[StyleBoxTexture]; mode: StyleBoxTexture|>AxisStretchMode) {.loadfrom("set_h_axis_stretch_mode", 2965538783).}
  proc hAxisStretchMode*(self: Ref[StyleBoxTexture]): StyleBoxTexture|>AxisStretchMode {.loadfrom("get_h_axis_stretch_mode", 3807744063).}
  proc `vAxisStretchMode=`*(self: Ref[StyleBoxTexture]; mode: StyleBoxTexture|>AxisStretchMode) {.loadfrom("set_v_axis_stretch_mode", 2965538783).}
  proc vAxisStretchMode*(self: Ref[StyleBoxTexture]): StyleBoxTexture|>AxisStretchMode {.loadfrom("get_v_axis_stretch_mode", 3807744063).}

# CodeHighlighter
define_godot_engine_class_essencials(CodeHighlighter, SyntaxHighlighter)
CodeHighlighter.memberProcs:
  proc addKeywordColor*(self: Ref[CodeHighlighter]; keyword: String; color: Color) {.loadfrom("add_keyword_color", 1636512886).}
  proc removeKeywordColor*(self: Ref[CodeHighlighter]; keyword: String) {.loadfrom("remove_keyword_color", 83702148).}
  proc hasKeywordColor*(self: Ref[CodeHighlighter]; keyword: String): Bool {.loadfrom("has_keyword_color", 3927539163).}
  proc getKeywordColor*(self: Ref[CodeHighlighter]; keyword: String): Color {.loadfrom("get_keyword_color", 3855908743).}
  proc `keywordColors=`*(self: Ref[CodeHighlighter]; keywords: Dictionary) {.loadfrom("set_keyword_colors", 4155329257).}
  proc clearKeywordColors*(self: Ref[CodeHighlighter]) {.loadfrom("clear_keyword_colors", 3218959716).}
  proc keywordColors*(self: Ref[CodeHighlighter]): Dictionary {.loadfrom("get_keyword_colors", 3102165223).}
  proc addMemberKeywordColor*(self: Ref[CodeHighlighter]; memberKeyword: String; color: Color) {.loadfrom("add_member_keyword_color", 1636512886).}
  proc removeMemberKeywordColor*(self: Ref[CodeHighlighter]; memberKeyword: String) {.loadfrom("remove_member_keyword_color", 83702148).}
  proc hasMemberKeywordColor*(self: Ref[CodeHighlighter]; memberKeyword: String): Bool {.loadfrom("has_member_keyword_color", 3927539163).}
  proc getMemberKeywordColor*(self: Ref[CodeHighlighter]; memberKeyword: String): Color {.loadfrom("get_member_keyword_color", 3855908743).}
  proc `memberKeywordColors=`*(self: Ref[CodeHighlighter]; memberKeyword: Dictionary) {.loadfrom("set_member_keyword_colors", 4155329257).}
  proc clearMemberKeywordColors*(self: Ref[CodeHighlighter]) {.loadfrom("clear_member_keyword_colors", 3218959716).}
  proc memberKeywordColors*(self: Ref[CodeHighlighter]): Dictionary {.loadfrom("get_member_keyword_colors", 3102165223).}
  proc addColorRegion*(self: Ref[CodeHighlighter]; startKey: String; endKey: String; color: Color; lineOnly: Bool = false) {.loadfrom("add_color_region", 2924977451).}
  proc removeColorRegion*(self: Ref[CodeHighlighter]; startKey: String) {.loadfrom("remove_color_region", 83702148).}
  proc hasColorRegion*(self: Ref[CodeHighlighter]; startKey: String): Bool {.loadfrom("has_color_region", 3927539163).}
  proc `colorRegions=`*(self: Ref[CodeHighlighter]; colorRegions: Dictionary) {.loadfrom("set_color_regions", 4155329257).}
  proc clearColorRegions*(self: Ref[CodeHighlighter]) {.loadfrom("clear_color_regions", 3218959716).}
  proc colorRegions*(self: Ref[CodeHighlighter]): Dictionary {.loadfrom("get_color_regions", 3102165223).}
  proc `functionColor=`*(self: Ref[CodeHighlighter]; color: Color) {.loadfrom("set_function_color", 2920490490).}
  proc functionColor*(self: Ref[CodeHighlighter]): Color {.loadfrom("get_function_color", 3444240500).}
  proc `numberColor=`*(self: Ref[CodeHighlighter]; color: Color) {.loadfrom("set_number_color", 2920490490).}
  proc numberColor*(self: Ref[CodeHighlighter]): Color {.loadfrom("get_number_color", 3444240500).}
  proc `symbolColor=`*(self: Ref[CodeHighlighter]; color: Color) {.loadfrom("set_symbol_color", 2920490490).}
  proc symbolColor*(self: Ref[CodeHighlighter]): Color {.loadfrom("get_symbol_color", 3444240500).}
  proc `memberVariableColor=`*(self: Ref[CodeHighlighter]; color: Color) {.loadfrom("set_member_variable_color", 2920490490).}
  proc memberVariableColor*(self: Ref[CodeHighlighter]): Color {.loadfrom("get_member_variable_color", 3444240500).}

# EditorSyntaxHighlighter
define_godot_engine_class_essencials(EditorSyntaxHighlighter, SyntaxHighlighter)
method getName*(self: Ref[EditorSyntaxHighlighter]): String {.base.} = (discard)
method getSupportedLanguages*(self: Ref[EditorSyntaxHighlighter]): PackedStringArray {.base.} = (discard)

# Texture2D
define_godot_engine_class_essencials(Texture2D, Texture)
method getWidth*(self: Ref[Texture2D]): int32 {.base.} = (discard)
method getHeight*(self: Ref[Texture2D]): int32 {.base.} = (discard)
method isPixelOpaque*(self: Ref[Texture2D]; x: int32; y: int32): Bool {.base.} = (discard)
method hasAlpha*(self: Ref[Texture2D]): Bool {.base.} = (discard)
method draw*(self: Ref[Texture2D]; toCanvasItem: RID; pos: Vector2; modulate: Color; transpose: Bool) {.base.} = (discard)
method drawRect*(self: Ref[Texture2D]; toCanvasItem: RID; rect: Rect2; tile: Bool; modulate: Color; transpose: Bool) {.base.} = (discard)
method drawRectRegion*(self: Ref[Texture2D]; toCanvasItem: RID; rect: Rect2; srcRect: Rect2; modulate: Color; transpose: Bool; clipUv: Bool) {.base.} = (discard)
Texture2D.memberProcs:
  proc getWidth*(self: Ref[Texture2D]): int32 {.loadfrom("get_width", 3905245786).}
  proc getHeight*(self: Ref[Texture2D]): int32 {.loadfrom("get_height", 3905245786).}
  proc getSize*(self: Ref[Texture2D]): Vector2 {.loadfrom("get_size", 3341600327).}
  proc hasAlpha*(self: Ref[Texture2D]): Bool {.loadfrom("has_alpha", 36873697).}
  proc draw*(self: Ref[Texture2D]; canvasItem: RID; position: Vector2; modulate: Color = Color|>init(1, 1, 1, 1); transpose: Bool = false) {.loadfrom("draw", 1115460088).}
  proc drawRect*(self: Ref[Texture2D]; canvasItem: RID; rect: Rect2; tile: Bool; modulate: Color = Color|>init(1, 1, 1, 1); transpose: Bool = false) {.loadfrom("draw_rect", 575156982).}
  proc drawRectRegion*(self: Ref[Texture2D]; canvasItem: RID; rect: Rect2; srcRect: Rect2; modulate: Color = Color|>init(1, 1, 1, 1); transpose: Bool = false; clipUv: Bool = true) {.loadfrom("draw_rect_region", 1066564656).}
  proc getImage*(self: Ref[Texture2D]): Ref[Image] {.loadfrom("get_image", 4190603485).}
  proc createPlaceholder*(self: Ref[Texture2D]): Ref[Resource] {.loadfrom("create_placeholder", 121922552).}

# Texture3D
define_godot_engine_class_essencials(Texture3D, Texture)
method getFormat*(self: Ref[Texture3D]): Image|>Format {.base.} = (discard)
method getWidth*(self: Ref[Texture3D]): int32 {.base.} = (discard)
method getHeight*(self: Ref[Texture3D]): int32 {.base.} = (discard)
method getDepth*(self: Ref[Texture3D]): int32 {.base.} = (discard)
method hasMipmaps*(self: Ref[Texture3D]): Bool {.base.} = (discard)
method getData*(self: Ref[Texture3D]): TypedArray[Image] {.base.} = (discard)
Texture3D.memberProcs:
  proc getFormat*(self: Ref[Texture3D]): Image|>Format {.loadfrom("get_format", 3847873762).}
  proc getWidth*(self: Ref[Texture3D]): int32 {.loadfrom("get_width", 3905245786).}
  proc getHeight*(self: Ref[Texture3D]): int32 {.loadfrom("get_height", 3905245786).}
  proc getDepth*(self: Ref[Texture3D]): int32 {.loadfrom("get_depth", 3905245786).}
  proc hasMipmaps*(self: Ref[Texture3D]): Bool {.loadfrom("has_mipmaps", 36873697).}
  proc getData*(self: Ref[Texture3D]): TypedArray[Image] {.loadfrom("get_data", 3995934104).}
  proc createPlaceholder*(self: Ref[Texture3D]): Ref[Resource] {.loadfrom("create_placeholder", 121922552).}

# TextureLayered
define_godot_engine_class_essencials(TextureLayered, Texture)
method getFormat*(self: Ref[TextureLayered]): Image|>Format {.base.} = (discard)
method getLayeredType*(self: Ref[TextureLayered]): uint32 {.base.} = (discard)
method getWidth*(self: Ref[TextureLayered]): int32 {.base.} = (discard)
method getHeight*(self: Ref[TextureLayered]): int32 {.base.} = (discard)
method getLayers*(self: Ref[TextureLayered]): int32 {.base.} = (discard)
method hasMipmaps*(self: Ref[TextureLayered]): Bool {.base.} = (discard)
method getLayerData*(self: Ref[TextureLayered]; layerIndex: int32): Ref[Image] {.base.} = (discard)
TextureLayered.memberProcs:
  proc getFormat*(self: Ref[TextureLayered]): Image|>Format {.loadfrom("get_format", 3847873762).}
  proc getLayeredType*(self: Ref[TextureLayered]): TextureLayered|>LayeredType {.loadfrom("get_layered_type", 518123893).}
  proc getWidth*(self: Ref[TextureLayered]): int32 {.loadfrom("get_width", 3905245786).}
  proc getHeight*(self: Ref[TextureLayered]): int32 {.loadfrom("get_height", 3905245786).}
  proc getLayers*(self: Ref[TextureLayered]): int32 {.loadfrom("get_layers", 3905245786).}
  proc hasMipmaps*(self: Ref[TextureLayered]): Bool {.loadfrom("has_mipmaps", 36873697).}
  proc getLayerData*(self: Ref[TextureLayered]; layer: int32): Ref[Image] {.loadfrom("get_layer_data", 3655284255).}

# TileSetAtlasSource
define_godot_engine_class_essencials(TileSetAtlasSource, TileSetSource)
TileSetAtlasSource.memberProcs:
  proc `texture=`*(self: Ref[TileSetAtlasSource]; texture: Ref[Texture2D]) {.loadfrom("set_texture", 4051416890).}
  proc texture*(self: Ref[TileSetAtlasSource]): Ref[Texture2D] {.loadfrom("get_texture", 3635182373).}
  proc `margins=`*(self: Ref[TileSetAtlasSource]; margins: Vector2i) {.loadfrom("set_margins", 1130785943).}
  proc margins*(self: Ref[TileSetAtlasSource]): Vector2i {.loadfrom("get_margins", 3690982128).}
  proc `separation=`*(self: Ref[TileSetAtlasSource]; separation: Vector2i) {.loadfrom("set_separation", 1130785943).}
  proc separation*(self: Ref[TileSetAtlasSource]): Vector2i {.loadfrom("get_separation", 3690982128).}
  proc `textureRegionSize=`*(self: Ref[TileSetAtlasSource]; textureRegionSize: Vector2i) {.loadfrom("set_texture_region_size", 1130785943).}
  proc textureRegionSize*(self: Ref[TileSetAtlasSource]): Vector2i {.loadfrom("get_texture_region_size", 3690982128).}
  proc `useTexturePadding=`*(self: Ref[TileSetAtlasSource]; useTexturePadding: Bool) {.loadfrom("set_use_texture_padding", 2586408642).}
  proc useTexturePadding*(self: Ref[TileSetAtlasSource]): Bool {.loadfrom("get_use_texture_padding", 36873697).}
  proc createTile*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i; size: Vector2i = gdveci(1, 1)) {.loadfrom("create_tile", 1583819816).}
  proc removeTile*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i) {.loadfrom("remove_tile", 1130785943).}
  proc moveTileInAtlas*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i; newAtlasCoords: Vector2i = gdveci(-1, -1); newSize: Vector2i = gdveci(-1, -1)) {.loadfrom("move_tile_in_atlas", 1375626516).}
  proc getTileSizeInAtlas*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i): Vector2i {.loadfrom("get_tile_size_in_atlas", 3050897911).}
  proc hasRoomForTile*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i; size: Vector2i; animationColumns: int32; animationSeparation: Vector2i; framesCount: int32; ignoredTile: Vector2i = gdveci(-1, -1)): Bool {.loadfrom("has_room_for_tile", 4182444377).}
  proc getTilesToBeRemovedOnChange*(self: Ref[TileSetAtlasSource]; texture: Ref[Texture2D]; margins: Vector2i; separation: Vector2i; textureRegionSize: Vector2i): PackedVector2Array {.loadfrom("get_tiles_to_be_removed_on_change", 1240378054).}
  proc getTileAtCoords*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i): Vector2i {.loadfrom("get_tile_at_coords", 3050897911).}
  proc setTileAnimationColumns*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i; frameColumns: int32) {.loadfrom("set_tile_animation_columns", 3200960707).}
  proc getTileAnimationColumns*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i): int32 {.loadfrom("get_tile_animation_columns", 2485466453).}
  proc setTileAnimationSeparation*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i; separation: Vector2i) {.loadfrom("set_tile_animation_separation", 1941061099).}
  proc getTileAnimationSeparation*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i): Vector2i {.loadfrom("get_tile_animation_separation", 3050897911).}
  proc setTileAnimationSpeed*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i; speed: Float) {.loadfrom("set_tile_animation_speed", 2262553149).}
  proc getTileAnimationSpeed*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i): Float {.loadfrom("get_tile_animation_speed", 719993801).}
  proc setTileAnimationFramesCount*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i; framesCount: int32) {.loadfrom("set_tile_animation_frames_count", 3200960707).}
  proc getTileAnimationFramesCount*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i): int32 {.loadfrom("get_tile_animation_frames_count", 2485466453).}
  proc setTileAnimationFrameDuration*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i; frameIndex: int32; duration: Float) {.loadfrom("set_tile_animation_frame_duration", 2843487787).}
  proc getTileAnimationFrameDuration*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i; frameIndex: int32): Float {.loadfrom("get_tile_animation_frame_duration", 1802448425).}
  proc getTileAnimationTotalDuration*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i): Float {.loadfrom("get_tile_animation_total_duration", 719993801).}
  proc createAlternativeTile*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i; alternativeIdOverride: int32 = -1): int32 {.loadfrom("create_alternative_tile", 3531100812).}
  proc removeAlternativeTile*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i; alternativeTile: int32) {.loadfrom("remove_alternative_tile", 3200960707).}
  proc setAlternativeTileId*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i; alternativeTile: int32; newId: int32) {.loadfrom("set_alternative_tile_id", 1499785778).}
  proc getNextAlternativeTileId*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i): int32 {.loadfrom("get_next_alternative_tile_id", 2485466453).}
  proc getTileData*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i; alternativeTile: int32): TileData {.loadfrom("get_tile_data", 3534028207).}
  proc getAtlasGridSize*(self: Ref[TileSetAtlasSource]): Vector2i {.loadfrom("get_atlas_grid_size", 3690982128).}
  proc getTileTextureRegion*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i; frame: int32 = 0): Rect2i {.loadfrom("get_tile_texture_region", 1321423751).}
  proc getRuntimeTexture*(self: Ref[TileSetAtlasSource]): Ref[Texture2D] {.loadfrom("get_runtime_texture", 3635182373).}
  proc getRuntimeTileTextureRegion*(self: Ref[TileSetAtlasSource]; atlasCoords: Vector2i; frame: int32): Rect2i {.loadfrom("get_runtime_tile_texture_region", 104874263).}

# TileSetScenesCollectionSource
define_godot_engine_class_essencials(TileSetScenesCollectionSource, TileSetSource)
TileSetScenesCollectionSource.memberProcs:
  proc getSceneTilesCount*(self: Ref[TileSetScenesCollectionSource]): int32 {.loadfrom("get_scene_tiles_count", 2455072627).}
  proc getSceneTileId*(self: Ref[TileSetScenesCollectionSource]; index: int32): int32 {.loadfrom("get_scene_tile_id", 3744713108).}
  proc hasSceneTileId*(self: Ref[TileSetScenesCollectionSource]; id: int32): Bool {.loadfrom("has_scene_tile_id", 3067735520).}
  proc createSceneTile*(self: Ref[TileSetScenesCollectionSource]; packedScene: Ref[PackedScene]; idOverride: int32 = -1): int32 {.loadfrom("create_scene_tile", 2633389122).}
  proc setSceneTileId*(self: Ref[TileSetScenesCollectionSource]; id: int32; newId: int32) {.loadfrom("set_scene_tile_id", 3937882851).}
  proc setSceneTileScene*(self: Ref[TileSetScenesCollectionSource]; id: int32; packedScene: Ref[PackedScene]) {.loadfrom("set_scene_tile_scene", 3435852839).}
  proc getSceneTileScene*(self: Ref[TileSetScenesCollectionSource]; id: int32): Ref[PackedScene] {.loadfrom("get_scene_tile_scene", 511017218).}
  proc setSceneTileDisplayPlaceholder*(self: Ref[TileSetScenesCollectionSource]; id: int32; displayPlaceholder: Bool) {.loadfrom("set_scene_tile_display_placeholder", 300928843).}
  proc getSceneTileDisplayPlaceholder*(self: Ref[TileSetScenesCollectionSource]; id: int32): Bool {.loadfrom("get_scene_tile_display_placeholder", 1116898809).}
  proc removeSceneTile*(self: Ref[TileSetScenesCollectionSource]; id: int32) {.loadfrom("remove_scene_tile", 1286410249).}
  proc getNextSceneTileId*(self: Ref[TileSetScenesCollectionSource]): int32 {.loadfrom("get_next_scene_tile_id", 3905245786).}

# OptimizedTranslation
define_godot_engine_class_essencials(OptimizedTranslation, Translation)
OptimizedTranslation.memberProcs:
  proc generate*(self: Ref[OptimizedTranslation]; `from`: Ref[Translation]) {.loadfrom("generate", 1466479800).}

# VideoStreamTheora
define_godot_engine_class_essencials(VideoStreamTheora, VideoStream)

# VisualShaderNodeBillboard
define_godot_engine_class_essencials(VisualShaderNodeBillboard, VisualShaderNode)
VisualShaderNodeBillboard.memberProcs:
  proc `billboardType=`*(self: Ref[VisualShaderNodeBillboard]; billboardType: VisualShaderNodeBillboard|>BillboardType) {.loadfrom("set_billboard_type", 1227463289).}
  proc billboardType*(self: Ref[VisualShaderNodeBillboard]): VisualShaderNodeBillboard|>BillboardType {.loadfrom("get_billboard_type", 3724188517).}
  proc `keepScaleEnabled=`*(self: Ref[VisualShaderNodeBillboard]; enabled: Bool) {.loadfrom("set_keep_scale_enabled", 2586408642).}
  proc isKeepScaleEnabled*(self: Ref[VisualShaderNodeBillboard]): Bool {.loadfrom("is_keep_scale_enabled", 36873697).}

# VisualShaderNodeClamp
define_godot_engine_class_essencials(VisualShaderNodeClamp, VisualShaderNode)
VisualShaderNodeClamp.memberProcs:
  proc `opType=`*(self: Ref[VisualShaderNodeClamp]; opType: VisualShaderNodeClamp|>OpType) {.loadfrom("set_op_type", 405010749).}
  proc opType*(self: Ref[VisualShaderNodeClamp]): VisualShaderNodeClamp|>OpType {.loadfrom("get_op_type", 233276050).}

# VisualShaderNodeColorFunc
define_godot_engine_class_essencials(VisualShaderNodeColorFunc, VisualShaderNode)
VisualShaderNodeColorFunc.memberProcs:
  proc `function=`*(self: Ref[VisualShaderNodeColorFunc]; `func`: VisualShaderNodeColorFunc|>Function) {.loadfrom("set_function", 3973396138).}
  proc function*(self: Ref[VisualShaderNodeColorFunc]): VisualShaderNodeColorFunc|>Function {.loadfrom("get_function", 554863321).}

# VisualShaderNodeColorOp
define_godot_engine_class_essencials(VisualShaderNodeColorOp, VisualShaderNode)
VisualShaderNodeColorOp.memberProcs:
  proc `operator=`*(self: Ref[VisualShaderNodeColorOp]; op: VisualShaderNodeColorOp|>Operator) {.loadfrom("set_operator", 4260370673).}
  proc operator*(self: Ref[VisualShaderNodeColorOp]): VisualShaderNodeColorOp|>Operator {.loadfrom("get_operator", 1950956529).}

# VisualShaderNodeCompare
define_godot_engine_class_essencials(VisualShaderNodeCompare, VisualShaderNode)
VisualShaderNodeCompare.memberProcs:
  proc `comparisonType=`*(self: Ref[VisualShaderNodeCompare]; `type`: VisualShaderNodeCompare|>ComparisonType) {.loadfrom("set_comparison_type", 516558320).}
  proc comparisonType*(self: Ref[VisualShaderNodeCompare]): VisualShaderNodeCompare|>ComparisonType {.loadfrom("get_comparison_type", 3495315961).}
  proc `function=`*(self: Ref[VisualShaderNodeCompare]; `func`: VisualShaderNodeCompare|>Function) {.loadfrom("set_function", 2370951349).}
  proc function*(self: Ref[VisualShaderNodeCompare]): VisualShaderNodeCompare|>Function {.loadfrom("get_function", 4089164265).}
  proc `condition=`*(self: Ref[VisualShaderNodeCompare]; condition: VisualShaderNodeCompare|>Condition) {.loadfrom("set_condition", 918742392).}
  proc condition*(self: Ref[VisualShaderNodeCompare]): VisualShaderNodeCompare|>Condition {.loadfrom("get_condition", 3281078941).}

# VisualShaderNodeConstant
define_godot_engine_class_essencials(VisualShaderNodeConstant, VisualShaderNode)

# VisualShaderNodeCubemap
define_godot_engine_class_essencials(VisualShaderNodeCubemap, VisualShaderNode)
VisualShaderNodeCubemap.memberProcs:
  proc `source=`*(self: Ref[VisualShaderNodeCubemap]; value: VisualShaderNodeCubemap|>Source) {.loadfrom("set_source", 1625400621).}
  proc source*(self: Ref[VisualShaderNodeCubemap]): VisualShaderNodeCubemap|>Source {.loadfrom("get_source", 2222048781).}
  proc `cubeMap=`*(self: Ref[VisualShaderNodeCubemap]; value: Ref[Cubemap]) {.loadfrom("set_cube_map", 2219800736).}
  proc cubeMap*(self: Ref[VisualShaderNodeCubemap]): Ref[Cubemap] {.loadfrom("get_cube_map", 1772111058).}
  proc `textureType=`*(self: Ref[VisualShaderNodeCubemap]; value: VisualShaderNodeCubemap|>TextureType) {.loadfrom("set_texture_type", 1899718876).}
  proc textureType*(self: Ref[VisualShaderNodeCubemap]): VisualShaderNodeCubemap|>TextureType {.loadfrom("get_texture_type", 3356498888).}

# VisualShaderNodeCustom
define_godot_engine_class_essencials(VisualShaderNodeCustom, VisualShaderNode)
method getName*(self: Ref[VisualShaderNodeCustom]): String {.base.} = (discard)
method getDescription*(self: Ref[VisualShaderNodeCustom]): String {.base.} = (discard)
method getCategory*(self: Ref[VisualShaderNodeCustom]): String {.base.} = (discard)
method getReturnIconType*(self: Ref[VisualShaderNodeCustom]): VisualShaderNode|>PortType {.base.} = (discard)
method getInputPortCount*(self: Ref[VisualShaderNodeCustom]): int32 {.base.} = (discard)
method getInputPortType*(self: Ref[VisualShaderNodeCustom]; port: int32): VisualShaderNode|>PortType {.base.} = (discard)
method getInputPortName*(self: Ref[VisualShaderNodeCustom]; port: int32): String {.base.} = (discard)
method getOutputPortCount*(self: Ref[VisualShaderNodeCustom]): int32 {.base.} = (discard)
method getOutputPortType*(self: Ref[VisualShaderNodeCustom]; port: int32): VisualShaderNode|>PortType {.base.} = (discard)
method getOutputPortName*(self: Ref[VisualShaderNodeCustom]; port: int32): String {.base.} = (discard)
method getCode*(self: Ref[VisualShaderNodeCustom]; inputVars: TypedArray[String]; outputVars: TypedArray[String]; mode: Shader|>Mode; `type`: VisualShader|>Type): String {.base.} = (discard)
method getFuncCode*(self: Ref[VisualShaderNodeCustom]; mode: Shader|>Mode; `type`: VisualShader|>Type): String {.base.} = (discard)
method getGlobalCode*(self: Ref[VisualShaderNodeCustom]; mode: Shader|>Mode): String {.base.} = (discard)
method isHighend*(self: Ref[VisualShaderNodeCustom]): Bool {.base.} = (discard)
method isAvailable*(self: Ref[VisualShaderNodeCustom]; mode: Shader|>Mode; `type`: VisualShader|>Type): Bool {.base.} = (discard)

# VisualShaderNodeDerivativeFunc
define_godot_engine_class_essencials(VisualShaderNodeDerivativeFunc, VisualShaderNode)
VisualShaderNodeDerivativeFunc.memberProcs:
  proc `opType=`*(self: Ref[VisualShaderNodeDerivativeFunc]; `type`: VisualShaderNodeDerivativeFunc|>OpType) {.loadfrom("set_op_type", 377800221).}
  proc opType*(self: Ref[VisualShaderNodeDerivativeFunc]): VisualShaderNodeDerivativeFunc|>OpType {.loadfrom("get_op_type", 3997800514).}
  proc `function=`*(self: Ref[VisualShaderNodeDerivativeFunc]; `func`: VisualShaderNodeDerivativeFunc|>Function) {.loadfrom("set_function", 1944704156).}
  proc function*(self: Ref[VisualShaderNodeDerivativeFunc]): VisualShaderNodeDerivativeFunc|>Function {.loadfrom("get_function", 2389093396).}
  proc `precision=`*(self: Ref[VisualShaderNodeDerivativeFunc]; precision: VisualShaderNodeDerivativeFunc|>Precision) {.loadfrom("set_precision", 797270566).}
  proc precision*(self: Ref[VisualShaderNodeDerivativeFunc]): VisualShaderNodeDerivativeFunc|>Precision {.loadfrom("get_precision", 3822547323).}

# VisualShaderNodeDeterminant
define_godot_engine_class_essencials(VisualShaderNodeDeterminant, VisualShaderNode)

# VisualShaderNodeDistanceFade
define_godot_engine_class_essencials(VisualShaderNodeDistanceFade, VisualShaderNode)

# VisualShaderNodeDotProduct
define_godot_engine_class_essencials(VisualShaderNodeDotProduct, VisualShaderNode)

# VisualShaderNodeFloatFunc
define_godot_engine_class_essencials(VisualShaderNodeFloatFunc, VisualShaderNode)
VisualShaderNodeFloatFunc.memberProcs:
  proc `function=`*(self: Ref[VisualShaderNodeFloatFunc]; `func`: VisualShaderNodeFloatFunc|>Function) {.loadfrom("set_function", 536026177).}
  proc function*(self: Ref[VisualShaderNodeFloatFunc]): VisualShaderNodeFloatFunc|>Function {.loadfrom("get_function", 2033948868).}

# VisualShaderNodeFloatOp
define_godot_engine_class_essencials(VisualShaderNodeFloatOp, VisualShaderNode)
VisualShaderNodeFloatOp.memberProcs:
  proc `operator=`*(self: Ref[VisualShaderNodeFloatOp]; op: VisualShaderNodeFloatOp|>Operator) {.loadfrom("set_operator", 2488468047).}
  proc operator*(self: Ref[VisualShaderNodeFloatOp]): VisualShaderNodeFloatOp|>Operator {.loadfrom("get_operator", 1867979390).}

# VisualShaderNodeFresnel
define_godot_engine_class_essencials(VisualShaderNodeFresnel, VisualShaderNode)

# VisualShaderNodeIf
define_godot_engine_class_essencials(VisualShaderNodeIf, VisualShaderNode)

# VisualShaderNodeInput
define_godot_engine_class_essencials(VisualShaderNodeInput, VisualShaderNode)
VisualShaderNodeInput.memberProcs:
  proc `inputName=`*(self: Ref[VisualShaderNodeInput]; name: String) {.loadfrom("set_input_name", 83702148).}
  proc inputName*(self: Ref[VisualShaderNodeInput]): String {.loadfrom("get_input_name", 201670096).}
  proc getInputRealName*(self: Ref[VisualShaderNodeInput]): String {.loadfrom("get_input_real_name", 201670096).}

# VisualShaderNodeIntFunc
define_godot_engine_class_essencials(VisualShaderNodeIntFunc, VisualShaderNode)
VisualShaderNodeIntFunc.memberProcs:
  proc `function=`*(self: Ref[VisualShaderNodeIntFunc]; `func`: VisualShaderNodeIntFunc|>Function) {.loadfrom("set_function", 424195284).}
  proc function*(self: Ref[VisualShaderNodeIntFunc]): VisualShaderNodeIntFunc|>Function {.loadfrom("get_function", 2753496911).}

# VisualShaderNodeIntOp
define_godot_engine_class_essencials(VisualShaderNodeIntOp, VisualShaderNode)
VisualShaderNodeIntOp.memberProcs:
  proc `operator=`*(self: Ref[VisualShaderNodeIntOp]; op: VisualShaderNodeIntOp|>Operator) {.loadfrom("set_operator", 1677909323).}
  proc operator*(self: Ref[VisualShaderNodeIntOp]): VisualShaderNodeIntOp|>Operator {.loadfrom("get_operator", 1236987913).}

# VisualShaderNodeIs
define_godot_engine_class_essencials(VisualShaderNodeIs, VisualShaderNode)
VisualShaderNodeIs.memberProcs:
  proc `function=`*(self: Ref[VisualShaderNodeIs]; `func`: VisualShaderNodeIs|>Function) {.loadfrom("set_function", 1438374690).}
  proc function*(self: Ref[VisualShaderNodeIs]): VisualShaderNodeIs|>Function {.loadfrom("get_function", 580678557).}

# VisualShaderNodeLinearSceneDepth
define_godot_engine_class_essencials(VisualShaderNodeLinearSceneDepth, VisualShaderNode)

# VisualShaderNodeMix
define_godot_engine_class_essencials(VisualShaderNodeMix, VisualShaderNode)
VisualShaderNodeMix.memberProcs:
  proc `opType=`*(self: Ref[VisualShaderNodeMix]; opType: VisualShaderNodeMix|>OpType) {.loadfrom("set_op_type", 3397501671).}
  proc opType*(self: Ref[VisualShaderNodeMix]): VisualShaderNodeMix|>OpType {.loadfrom("get_op_type", 4013957297).}

# VisualShaderNodeMultiplyAdd
define_godot_engine_class_essencials(VisualShaderNodeMultiplyAdd, VisualShaderNode)
VisualShaderNodeMultiplyAdd.memberProcs:
  proc `opType=`*(self: Ref[VisualShaderNodeMultiplyAdd]; `type`: VisualShaderNodeMultiplyAdd|>OpType) {.loadfrom("set_op_type", 1409862380).}
  proc opType*(self: Ref[VisualShaderNodeMultiplyAdd]): VisualShaderNodeMultiplyAdd|>OpType {.loadfrom("get_op_type", 2823201991).}

# VisualShaderNodeOuterProduct
define_godot_engine_class_essencials(VisualShaderNodeOuterProduct, VisualShaderNode)

# VisualShaderNodeOutput
define_godot_engine_class_essencials(VisualShaderNodeOutput, VisualShaderNode)

# VisualShaderNodeParameter
define_godot_engine_class_essencials(VisualShaderNodeParameter, VisualShaderNode)
VisualShaderNodeParameter.memberProcs:
  proc `parameterName=`*(self: Ref[VisualShaderNodeParameter]; name: String) {.loadfrom("set_parameter_name", 83702148).}
  proc parameterName*(self: Ref[VisualShaderNodeParameter]): String {.loadfrom("get_parameter_name", 201670096).}
  proc `qualifier=`*(self: Ref[VisualShaderNodeParameter]; qualifier: VisualShaderNodeParameter|>Qualifier) {.loadfrom("set_qualifier", 1276489447).}
  proc qualifier*(self: Ref[VisualShaderNodeParameter]): VisualShaderNodeParameter|>Qualifier {.loadfrom("get_qualifier", 3558406205).}

# VisualShaderNodeParameterRef
define_godot_engine_class_essencials(VisualShaderNodeParameterRef, VisualShaderNode)
VisualShaderNodeParameterRef.memberProcs:
  proc `parameterName=`*(self: Ref[VisualShaderNodeParameterRef]; name: String) {.loadfrom("set_parameter_name", 83702148).}
  proc parameterName*(self: Ref[VisualShaderNodeParameterRef]): String {.loadfrom("get_parameter_name", 201670096).}

# VisualShaderNodeParticleAccelerator
define_godot_engine_class_essencials(VisualShaderNodeParticleAccelerator, VisualShaderNode)
VisualShaderNodeParticleAccelerator.memberProcs:
  proc `mode=`*(self: Ref[VisualShaderNodeParticleAccelerator]; mode: VisualShaderNodeParticleAccelerator|>Mode) {.loadfrom("set_mode", 3457585749).}
  proc mode*(self: Ref[VisualShaderNodeParticleAccelerator]): VisualShaderNodeParticleAccelerator|>Mode {.loadfrom("get_mode", 2660365633).}

# VisualShaderNodeParticleConeVelocity
define_godot_engine_class_essencials(VisualShaderNodeParticleConeVelocity, VisualShaderNode)

# VisualShaderNodeParticleEmit
define_godot_engine_class_essencials(VisualShaderNodeParticleEmit, VisualShaderNode)
VisualShaderNodeParticleEmit.memberProcs:
  proc `flags=`*(self: Ref[VisualShaderNodeParticleEmit]; flags: VisualShaderNodeParticleEmit|>EmitFlags) {.loadfrom("set_flags", 3960756792).}
  proc flags*(self: Ref[VisualShaderNodeParticleEmit]): VisualShaderNodeParticleEmit|>EmitFlags {.loadfrom("get_flags", 171277835).}

# VisualShaderNodeParticleEmitter
define_godot_engine_class_essencials(VisualShaderNodeParticleEmitter, VisualShaderNode)
VisualShaderNodeParticleEmitter.memberProcs:
  proc `mode2d=`*(self: Ref[VisualShaderNodeParticleEmitter]; enabled: Bool) {.loadfrom("set_mode_2d", 2586408642).}
  proc isMode2d*(self: Ref[VisualShaderNodeParticleEmitter]): Bool {.loadfrom("is_mode_2d", 36873697).}

# VisualShaderNodeParticleMultiplyByAxisAngle
define_godot_engine_class_essencials(VisualShaderNodeParticleMultiplyByAxisAngle, VisualShaderNode)
VisualShaderNodeParticleMultiplyByAxisAngle.memberProcs:
  proc `degreesMode=`*(self: Ref[VisualShaderNodeParticleMultiplyByAxisAngle]; enabled: Bool) {.loadfrom("set_degrees_mode", 2586408642).}
  proc isDegreesMode*(self: Ref[VisualShaderNodeParticleMultiplyByAxisAngle]): Bool {.loadfrom("is_degrees_mode", 36873697).}

# VisualShaderNodeParticleRandomness
define_godot_engine_class_essencials(VisualShaderNodeParticleRandomness, VisualShaderNode)
VisualShaderNodeParticleRandomness.memberProcs:
  proc `opType=`*(self: Ref[VisualShaderNodeParticleRandomness]; `type`: VisualShaderNodeParticleRandomness|>OpType) {.loadfrom("set_op_type", 2060089061).}
  proc opType*(self: Ref[VisualShaderNodeParticleRandomness]): VisualShaderNodeParticleRandomness|>OpType {.loadfrom("get_op_type", 3597061078).}

# VisualShaderNodeProximityFade
define_godot_engine_class_essencials(VisualShaderNodeProximityFade, VisualShaderNode)

# VisualShaderNodeRandomRange
define_godot_engine_class_essencials(VisualShaderNodeRandomRange, VisualShaderNode)

# VisualShaderNodeRemap
define_godot_engine_class_essencials(VisualShaderNodeRemap, VisualShaderNode)

# VisualShaderNodeResizableBase
define_godot_engine_class_essencials(VisualShaderNodeResizableBase, VisualShaderNode)
VisualShaderNodeResizableBase.memberProcs:
  proc `size=`*(self: Ref[VisualShaderNodeResizableBase]; size: Vector2) {.loadfrom("set_size", 743155724).}
  proc size*(self: Ref[VisualShaderNodeResizableBase]): Vector2 {.loadfrom("get_size", 3341600327).}

# VisualShaderNodeSDFRaymarch
define_godot_engine_class_essencials(VisualShaderNodeSDFRaymarch, VisualShaderNode)

# VisualShaderNodeSDFToScreenUV
define_godot_engine_class_essencials(VisualShaderNodeSDFToScreenUV, VisualShaderNode)

# VisualShaderNodeSample3D
define_godot_engine_class_essencials(VisualShaderNodeSample3D, VisualShaderNode)
VisualShaderNodeSample3D.memberProcs:
  proc `source=`*(self: Ref[VisualShaderNodeSample3D]; value: VisualShaderNodeSample3D|>Source) {.loadfrom("set_source", 3315130991).}
  proc source*(self: Ref[VisualShaderNodeSample3D]): VisualShaderNodeSample3D|>Source {.loadfrom("get_source", 1079494121).}

# VisualShaderNodeScreenUVToSDF
define_godot_engine_class_essencials(VisualShaderNodeScreenUVToSDF, VisualShaderNode)

# VisualShaderNodeSmoothStep
define_godot_engine_class_essencials(VisualShaderNodeSmoothStep, VisualShaderNode)
VisualShaderNodeSmoothStep.memberProcs:
  proc `opType=`*(self: Ref[VisualShaderNodeSmoothStep]; opType: VisualShaderNodeSmoothStep|>OpType) {.loadfrom("set_op_type", 2427426148).}
  proc opType*(self: Ref[VisualShaderNodeSmoothStep]): VisualShaderNodeSmoothStep|>OpType {.loadfrom("get_op_type", 359640855).}

# VisualShaderNodeStep
define_godot_engine_class_essencials(VisualShaderNodeStep, VisualShaderNode)
VisualShaderNodeStep.memberProcs:
  proc `opType=`*(self: Ref[VisualShaderNodeStep]; opType: VisualShaderNodeStep|>OpType) {.loadfrom("set_op_type", 715172489).}
  proc opType*(self: Ref[VisualShaderNodeStep]): VisualShaderNodeStep|>OpType {.loadfrom("get_op_type", 3274022781).}

# VisualShaderNodeSwitch
define_godot_engine_class_essencials(VisualShaderNodeSwitch, VisualShaderNode)
VisualShaderNodeSwitch.memberProcs:
  proc `opType=`*(self: Ref[VisualShaderNodeSwitch]; `type`: VisualShaderNodeSwitch|>OpType) {.loadfrom("set_op_type", 510471861).}
  proc opType*(self: Ref[VisualShaderNodeSwitch]): VisualShaderNodeSwitch|>OpType {.loadfrom("get_op_type", 2517845071).}

# VisualShaderNodeTexture
define_godot_engine_class_essencials(VisualShaderNodeTexture, VisualShaderNode)
VisualShaderNodeTexture.memberProcs:
  proc `source=`*(self: Ref[VisualShaderNodeTexture]; value: VisualShaderNodeTexture|>Source) {.loadfrom("set_source", 905262939).}
  proc source*(self: Ref[VisualShaderNodeTexture]): VisualShaderNodeTexture|>Source {.loadfrom("get_source", 2896297444).}
  proc `texture=`*(self: Ref[VisualShaderNodeTexture]; value: Ref[Texture2D]) {.loadfrom("set_texture", 4051416890).}
  proc texture*(self: Ref[VisualShaderNodeTexture]): Ref[Texture2D] {.loadfrom("get_texture", 3635182373).}
  proc `textureType=`*(self: Ref[VisualShaderNodeTexture]; value: VisualShaderNodeTexture|>TextureType) {.loadfrom("set_texture_type", 986314081).}
  proc textureType*(self: Ref[VisualShaderNodeTexture]): VisualShaderNodeTexture|>TextureType {.loadfrom("get_texture_type", 3290430153).}

# VisualShaderNodeTextureSDF
define_godot_engine_class_essencials(VisualShaderNodeTextureSDF, VisualShaderNode)

# VisualShaderNodeTextureSDFNormal
define_godot_engine_class_essencials(VisualShaderNodeTextureSDFNormal, VisualShaderNode)

# VisualShaderNodeTransformCompose
define_godot_engine_class_essencials(VisualShaderNodeTransformCompose, VisualShaderNode)

# VisualShaderNodeTransformDecompose
define_godot_engine_class_essencials(VisualShaderNodeTransformDecompose, VisualShaderNode)

# VisualShaderNodeTransformFunc
define_godot_engine_class_essencials(VisualShaderNodeTransformFunc, VisualShaderNode)
VisualShaderNodeTransformFunc.memberProcs:
  proc `function=`*(self: Ref[VisualShaderNodeTransformFunc]; `func`: VisualShaderNodeTransformFunc|>Function) {.loadfrom("set_function", 2900990409).}
  proc function*(self: Ref[VisualShaderNodeTransformFunc]): VisualShaderNodeTransformFunc|>Function {.loadfrom("get_function", 2839926569).}

# VisualShaderNodeTransformOp
define_godot_engine_class_essencials(VisualShaderNodeTransformOp, VisualShaderNode)
VisualShaderNodeTransformOp.memberProcs:
  proc `operator=`*(self: Ref[VisualShaderNodeTransformOp]; op: VisualShaderNodeTransformOp|>Operator) {.loadfrom("set_operator", 2287310733).}
  proc operator*(self: Ref[VisualShaderNodeTransformOp]): VisualShaderNodeTransformOp|>Operator {.loadfrom("get_operator", 1238663601).}

# VisualShaderNodeTransformVecMult
define_godot_engine_class_essencials(VisualShaderNodeTransformVecMult, VisualShaderNode)
VisualShaderNodeTransformVecMult.memberProcs:
  proc `operator=`*(self: Ref[VisualShaderNodeTransformVecMult]; op: VisualShaderNodeTransformVecMult|>Operator) {.loadfrom("set_operator", 1785665912).}
  proc operator*(self: Ref[VisualShaderNodeTransformVecMult]): VisualShaderNodeTransformVecMult|>Operator {.loadfrom("get_operator", 1622088722).}

# VisualShaderNodeUIntFunc
define_godot_engine_class_essencials(VisualShaderNodeUIntFunc, VisualShaderNode)
VisualShaderNodeUIntFunc.memberProcs:
  proc `function=`*(self: Ref[VisualShaderNodeUIntFunc]; `func`: VisualShaderNodeUIntFunc|>Function) {.loadfrom("set_function", 2273148961).}
  proc function*(self: Ref[VisualShaderNodeUIntFunc]): VisualShaderNodeUIntFunc|>Function {.loadfrom("get_function", 4187123296).}

# VisualShaderNodeUIntOp
define_godot_engine_class_essencials(VisualShaderNodeUIntOp, VisualShaderNode)
VisualShaderNodeUIntOp.memberProcs:
  proc `operator=`*(self: Ref[VisualShaderNodeUIntOp]; op: VisualShaderNodeUIntOp|>Operator) {.loadfrom("set_operator", 3463048345).}
  proc operator*(self: Ref[VisualShaderNodeUIntOp]): VisualShaderNodeUIntOp|>Operator {.loadfrom("get_operator", 256631461).}

# VisualShaderNodeUVFunc
define_godot_engine_class_essencials(VisualShaderNodeUVFunc, VisualShaderNode)
VisualShaderNodeUVFunc.memberProcs:
  proc `function=`*(self: Ref[VisualShaderNodeUVFunc]; `func`: VisualShaderNodeUVFunc|>Function) {.loadfrom("set_function", 765791915).}
  proc function*(self: Ref[VisualShaderNodeUVFunc]): VisualShaderNodeUVFunc|>Function {.loadfrom("get_function", 3772902164).}

# VisualShaderNodeUVPolarCoord
define_godot_engine_class_essencials(VisualShaderNodeUVPolarCoord, VisualShaderNode)

# VisualShaderNodeVarying
define_godot_engine_class_essencials(VisualShaderNodeVarying, VisualShaderNode)
VisualShaderNodeVarying.memberProcs:
  proc `varyingName=`*(self: Ref[VisualShaderNodeVarying]; name: String) {.loadfrom("set_varying_name", 83702148).}
  proc varyingName*(self: Ref[VisualShaderNodeVarying]): String {.loadfrom("get_varying_name", 201670096).}
  proc `varyingType=`*(self: Ref[VisualShaderNodeVarying]; `type`: VisualShader|>VaryingType) {.loadfrom("set_varying_type", 3565867981).}
  proc varyingType*(self: Ref[VisualShaderNodeVarying]): VisualShader|>VaryingType {.loadfrom("get_varying_type", 523183580).}

# VisualShaderNodeVectorBase
define_godot_engine_class_essencials(VisualShaderNodeVectorBase, VisualShaderNode)
VisualShaderNodeVectorBase.memberProcs:
  proc `opType=`*(self: Ref[VisualShaderNodeVectorBase]; `type`: VisualShaderNodeVectorBase|>OpType) {.loadfrom("set_op_type", 1692596998).}
  proc opType*(self: Ref[VisualShaderNodeVectorBase]): VisualShaderNodeVectorBase|>OpType {.loadfrom("get_op_type", 2568738462).}

# TextServerAdvanced
define_godot_engine_class_essencials(TextServerAdvanced, TextServerExtension)

# TextServerDummy
define_godot_engine_class_essencials(TextServerDummy, TextServerExtension)

# Button
define_godot_engine_class_essencials(Button, BaseButton)
Button.memberProcs:
  proc `text=`*(self: Button; text: String) {.loadfrom("set_text", 83702148).}
  proc text*(self: Button): String {.loadfrom("get_text", 201670096).}
  proc `textOverrunBehavior=`*(self: Button; overrunBehavior: TextServer|>OverrunBehavior) {.loadfrom("set_text_overrun_behavior", 1008890932).}
  proc textOverrunBehavior*(self: Button): TextServer|>OverrunBehavior {.loadfrom("get_text_overrun_behavior", 3779142101).}
  proc `textDirection=`*(self: Button; direction: Control|>TextDirection) {.loadfrom("set_text_direction", 119160795).}
  proc textDirection*(self: Button): Control|>TextDirection {.loadfrom("get_text_direction", 797257663).}
  proc `language=`*(self: Button; language: String) {.loadfrom("set_language", 83702148).}
  proc language*(self: Button): String {.loadfrom("get_language", 201670096).}
  proc `buttonIcon=`*(self: Button; texture: Ref[Texture2D]) {.loadfrom("set_button_icon", 4051416890).}
  proc buttonIcon*(self: Button): Ref[Texture2D] {.loadfrom("get_button_icon", 3635182373).}
  proc `flat=`*(self: Button; enabled: Bool) {.loadfrom("set_flat", 2586408642).}
  proc isFlat*(self: Button): Bool {.loadfrom("is_flat", 36873697).}
  proc `clipText=`*(self: Button; enabled: Bool) {.loadfrom("set_clip_text", 2586408642).}
  proc clipText*(self: Button): Bool {.loadfrom("get_clip_text", 36873697).}
  proc `textAlignment=`*(self: Button; alignment: HorizontalAlignment) {.loadfrom("set_text_alignment", 2312603777).}
  proc textAlignment*(self: Button): HorizontalAlignment {.loadfrom("get_text_alignment", 341400642).}
  proc `iconAlignment=`*(self: Button; iconAlignment: HorizontalAlignment) {.loadfrom("set_icon_alignment", 2312603777).}
  proc iconAlignment*(self: Button): HorizontalAlignment {.loadfrom("get_icon_alignment", 341400642).}
  proc `verticalIconAlignment=`*(self: Button; verticalIconAlignment: VerticalAlignment) {.loadfrom("set_vertical_icon_alignment", 1796458609).}
  proc verticalIconAlignment*(self: Button): VerticalAlignment {.loadfrom("get_vertical_icon_alignment", 3274884059).}
  proc `expandIcon=`*(self: Button; enabled: Bool) {.loadfrom("set_expand_icon", 2586408642).}
  proc isExpandIcon*(self: Button): Bool {.loadfrom("is_expand_icon", 36873697).}

# LinkButton
define_godot_engine_class_essencials(LinkButton, BaseButton)
LinkButton.memberProcs:
  proc `text=`*(self: LinkButton; text: String) {.loadfrom("set_text", 83702148).}
  proc text*(self: LinkButton): String {.loadfrom("get_text", 201670096).}
  proc `textDirection=`*(self: LinkButton; direction: Control|>TextDirection) {.loadfrom("set_text_direction", 119160795).}
  proc textDirection*(self: LinkButton): Control|>TextDirection {.loadfrom("get_text_direction", 797257663).}
  proc `language=`*(self: LinkButton; language: String) {.loadfrom("set_language", 83702148).}
  proc language*(self: LinkButton): String {.loadfrom("get_language", 201670096).}
  proc `uri=`*(self: LinkButton; uri: String) {.loadfrom("set_uri", 83702148).}
  proc uri*(self: LinkButton): String {.loadfrom("get_uri", 201670096).}
  proc `underlineMode=`*(self: LinkButton; underlineMode: LinkButton|>UnderlineMode) {.loadfrom("set_underline_mode", 4032947085).}
  proc underlineMode*(self: LinkButton): LinkButton|>UnderlineMode {.loadfrom("get_underline_mode", 568343738).}
  proc `structuredTextBidiOverride=`*(self: LinkButton; parser: TextServer|>StructuredTextParser) {.loadfrom("set_structured_text_bidi_override", 55961453).}
  proc structuredTextBidiOverride*(self: LinkButton): TextServer|>StructuredTextParser {.loadfrom("get_structured_text_bidi_override", 3385126229).}
  proc `structuredTextBidiOverrideOptions=`*(self: LinkButton; args: Array) {.loadfrom("set_structured_text_bidi_override_options", 381264803).}
  proc structuredTextBidiOverrideOptions*(self: LinkButton): Array {.loadfrom("get_structured_text_bidi_override_options", 3995934104).}

# TextureButton
define_godot_engine_class_essencials(TextureButton, BaseButton)
TextureButton.memberProcs:
  proc `textureNormal=`*(self: TextureButton; texture: Ref[Texture2D]) {.loadfrom("set_texture_normal", 4051416890).}
  proc `texturePressed=`*(self: TextureButton; texture: Ref[Texture2D]) {.loadfrom("set_texture_pressed", 4051416890).}
  proc `textureHover=`*(self: TextureButton; texture: Ref[Texture2D]) {.loadfrom("set_texture_hover", 4051416890).}
  proc `textureDisabled=`*(self: TextureButton; texture: Ref[Texture2D]) {.loadfrom("set_texture_disabled", 4051416890).}
  proc `textureFocused=`*(self: TextureButton; texture: Ref[Texture2D]) {.loadfrom("set_texture_focused", 4051416890).}
  proc `clickMask=`*(self: TextureButton; mask: Ref[BitMap]) {.loadfrom("set_click_mask", 698588216).}
  proc `ignoreTextureSize=`*(self: TextureButton; ignore: Bool) {.loadfrom("set_ignore_texture_size", 2586408642).}
  proc `stretchMode=`*(self: TextureButton; mode: TextureButton|>StretchMode) {.loadfrom("set_stretch_mode", 252530840).}
  proc `flipH=`*(self: TextureButton; enable: Bool) {.loadfrom("set_flip_h", 2586408642).}
  proc isFlippedH*(self: TextureButton): Bool {.loadfrom("is_flipped_h", 36873697).}
  proc `flipV=`*(self: TextureButton; enable: Bool) {.loadfrom("set_flip_v", 2586408642).}
  proc isFlippedV*(self: TextureButton): Bool {.loadfrom("is_flipped_v", 36873697).}
  proc textureNormal*(self: TextureButton): Ref[Texture2D] {.loadfrom("get_texture_normal", 3635182373).}
  proc texturePressed*(self: TextureButton): Ref[Texture2D] {.loadfrom("get_texture_pressed", 3635182373).}
  proc textureHover*(self: TextureButton): Ref[Texture2D] {.loadfrom("get_texture_hover", 3635182373).}
  proc textureDisabled*(self: TextureButton): Ref[Texture2D] {.loadfrom("get_texture_disabled", 3635182373).}
  proc textureFocused*(self: TextureButton): Ref[Texture2D] {.loadfrom("get_texture_focused", 3635182373).}
  proc clickMask*(self: TextureButton): Ref[BitMap] {.loadfrom("get_click_mask", 2459671998).}
  proc ignoreTextureSize*(self: TextureButton): Bool {.loadfrom("get_ignore_texture_size", 36873697).}
  proc stretchMode*(self: TextureButton): TextureButton|>StretchMode {.loadfrom("get_stretch_mode", 33815122).}

# AspectRatioContainer
define_godot_engine_class_essencials(AspectRatioContainer, Container)
AspectRatioContainer.memberProcs:
  proc `ratio=`*(self: AspectRatioContainer; ratio: Float) {.loadfrom("set_ratio", 373806689).}
  proc ratio*(self: AspectRatioContainer): Float {.loadfrom("get_ratio", 1740695150).}
  proc `stretchMode=`*(self: AspectRatioContainer; stretchMode: AspectRatioContainer|>StretchMode) {.loadfrom("set_stretch_mode", 1876743467).}
  proc stretchMode*(self: AspectRatioContainer): AspectRatioContainer|>StretchMode {.loadfrom("get_stretch_mode", 3416449033).}
  proc `alignmentHorizontal=`*(self: AspectRatioContainer; alignmentHorizontal: AspectRatioContainer|>AlignmentMode) {.loadfrom("set_alignment_horizontal", 2147829016).}
  proc alignmentHorizontal*(self: AspectRatioContainer): AspectRatioContainer|>AlignmentMode {.loadfrom("get_alignment_horizontal", 3838875429).}
  proc `alignmentVertical=`*(self: AspectRatioContainer; alignmentVertical: AspectRatioContainer|>AlignmentMode) {.loadfrom("set_alignment_vertical", 2147829016).}
  proc alignmentVertical*(self: AspectRatioContainer): AspectRatioContainer|>AlignmentMode {.loadfrom("get_alignment_vertical", 3838875429).}

# BoxContainer
define_godot_engine_class_essencials(BoxContainer, Container)
BoxContainer.memberProcs:
  proc addSpacer*(self: BoxContainer; begin: Bool): Control {.loadfrom("add_spacer", 1326660695).}
  proc `alignment=`*(self: BoxContainer; alignment: BoxContainer|>AlignmentMode) {.loadfrom("set_alignment", 2456745134).}
  proc alignment*(self: BoxContainer): BoxContainer|>AlignmentMode {.loadfrom("get_alignment", 1915476527).}
  proc `vertical=`*(self: BoxContainer; vertical: Bool) {.loadfrom("set_vertical", 2586408642).}
  proc isVertical*(self: BoxContainer): Bool {.loadfrom("is_vertical", 36873697).}

# CenterContainer
define_godot_engine_class_essencials(CenterContainer, Container)
CenterContainer.memberProcs:
  proc `useTopLeft=`*(self: CenterContainer; enable: Bool) {.loadfrom("set_use_top_left", 2586408642).}
  proc isUsingTopLeft*(self: CenterContainer): Bool {.loadfrom("is_using_top_left", 36873697).}

# EditorProperty
define_godot_engine_class_essencials(EditorProperty, Container)
method updateProperty*(self: EditorProperty) {.base.} = (discard)
method setReadOnly*(self: EditorProperty; readOnly: Bool) {.base.} = (discard)
EditorProperty.memberProcs:
  proc `label=`*(self: EditorProperty; text: String) {.loadfrom("set_label", 83702148).}
  proc label*(self: EditorProperty): String {.loadfrom("get_label", 201670096).}
  proc `readOnly=`*(self: EditorProperty; readOnly: Bool) {.loadfrom("set_read_only", 2586408642).}
  proc isReadOnly*(self: EditorProperty): Bool {.loadfrom("is_read_only", 36873697).}
  proc `checkable=`*(self: EditorProperty; checkable: Bool) {.loadfrom("set_checkable", 2586408642).}
  proc isCheckable*(self: EditorProperty): Bool {.loadfrom("is_checkable", 36873697).}
  proc `checked=`*(self: EditorProperty; checked: Bool) {.loadfrom("set_checked", 2586408642).}
  proc isChecked*(self: EditorProperty): Bool {.loadfrom("is_checked", 36873697).}
  proc `drawWarning=`*(self: EditorProperty; drawWarning: Bool) {.loadfrom("set_draw_warning", 2586408642).}
  proc isDrawWarning*(self: EditorProperty): Bool {.loadfrom("is_draw_warning", 36873697).}
  proc `keying=`*(self: EditorProperty; keying: Bool) {.loadfrom("set_keying", 2586408642).}
  proc isKeying*(self: EditorProperty): Bool {.loadfrom("is_keying", 36873697).}
  proc `deletable=`*(self: EditorProperty; deletable: Bool) {.loadfrom("set_deletable", 2586408642).}
  proc isDeletable*(self: EditorProperty): Bool {.loadfrom("is_deletable", 36873697).}
  proc getEditedProperty*(self: EditorProperty): StringName {.loadfrom("get_edited_property", 2002593661).}
  proc getEditedObject*(self: EditorProperty): Object {.loadfrom("get_edited_object", 2050059866).}
  proc updateProperty*(self: EditorProperty) {.loadfrom("update_property", 3218959716).}
  proc addFocusable*(self: EditorProperty; control: Control) {.loadfrom("add_focusable", 1496901182).}
  proc setBottomEditor*(self: EditorProperty; editor: Control) {.loadfrom("set_bottom_editor", 1496901182).}
  proc emitChanged*(self: EditorProperty; property: StringName; value: ptr Variant; field: StringName = ""; changing: Bool = false) {.loadfrom("emit_changed", 3069422438).}

# FlowContainer
define_godot_engine_class_essencials(FlowContainer, Container)
FlowContainer.memberProcs:
  proc getLineCount*(self: FlowContainer): int32 {.loadfrom("get_line_count", 3905245786).}
  proc `alignment=`*(self: FlowContainer; alignment: FlowContainer|>AlignmentMode) {.loadfrom("set_alignment", 575250951).}
  proc alignment*(self: FlowContainer): FlowContainer|>AlignmentMode {.loadfrom("get_alignment", 3749743559).}
  proc `vertical=`*(self: FlowContainer; vertical: Bool) {.loadfrom("set_vertical", 2586408642).}
  proc isVertical*(self: FlowContainer): Bool {.loadfrom("is_vertical", 36873697).}

# GraphNode
define_godot_engine_class_essencials(GraphNode, Container)
GraphNode.memberProcs:
  proc `title=`*(self: GraphNode; title: String) {.loadfrom("set_title", 83702148).}
  proc title*(self: GraphNode): String {.loadfrom("get_title", 201670096).}
  proc `textDirection=`*(self: GraphNode; direction: Control|>TextDirection) {.loadfrom("set_text_direction", 119160795).}
  proc textDirection*(self: GraphNode): Control|>TextDirection {.loadfrom("get_text_direction", 797257663).}
  proc `language=`*(self: GraphNode; language: String) {.loadfrom("set_language", 83702148).}
  proc language*(self: GraphNode): String {.loadfrom("get_language", 201670096).}
  proc setSlot*(self: GraphNode; slotIndex: int32; enableLeftPort: Bool; typeLeft: int32; colorLeft: Color; enableRightPort: Bool; typeRight: int32; colorRight: Color; customIconLeft: Ref[Texture2D] = default Ref[Texture2D]; customIconRight: Ref[Texture2D] = default Ref[Texture2D]; drawStylebox: Bool = true) {.loadfrom("set_slot", 902131739).}
  proc clearSlot*(self: GraphNode; slotIndex: int32) {.loadfrom("clear_slot", 1286410249).}
  proc clearAllSlots*(self: GraphNode) {.loadfrom("clear_all_slots", 3218959716).}
  proc setSlotEnabledLeft*(self: GraphNode; slotIndex: int32; enable: Bool) {.loadfrom("set_slot_enabled_left", 300928843).}
  proc isSlotEnabledLeft*(self: GraphNode; slotIndex: int32): Bool {.loadfrom("is_slot_enabled_left", 1116898809).}
  proc setSlotTypeLeft*(self: GraphNode; slotIndex: int32; `type`: int32) {.loadfrom("set_slot_type_left", 3937882851).}
  proc getSlotTypeLeft*(self: GraphNode; slotIndex: int32): int32 {.loadfrom("get_slot_type_left", 923996154).}
  proc setSlotColorLeft*(self: GraphNode; slotIndex: int32; color: Color) {.loadfrom("set_slot_color_left", 2878471219).}
  proc getSlotColorLeft*(self: GraphNode; slotIndex: int32): Color {.loadfrom("get_slot_color_left", 3457211756).}
  proc setSlotEnabledRight*(self: GraphNode; slotIndex: int32; enable: Bool) {.loadfrom("set_slot_enabled_right", 300928843).}
  proc isSlotEnabledRight*(self: GraphNode; slotIndex: int32): Bool {.loadfrom("is_slot_enabled_right", 1116898809).}
  proc setSlotTypeRight*(self: GraphNode; slotIndex: int32; `type`: int32) {.loadfrom("set_slot_type_right", 3937882851).}
  proc getSlotTypeRight*(self: GraphNode; slotIndex: int32): int32 {.loadfrom("get_slot_type_right", 923996154).}
  proc setSlotColorRight*(self: GraphNode; slotIndex: int32; color: Color) {.loadfrom("set_slot_color_right", 2878471219).}
  proc getSlotColorRight*(self: GraphNode; slotIndex: int32): Color {.loadfrom("get_slot_color_right", 3457211756).}
  proc isSlotDrawStylebox*(self: GraphNode; slotIndex: int32): Bool {.loadfrom("is_slot_draw_stylebox", 1116898809).}
  proc setSlotDrawStylebox*(self: GraphNode; slotIndex: int32; enable: Bool) {.loadfrom("set_slot_draw_stylebox", 300928843).}
  proc `positionOffset=`*(self: GraphNode; offset: Vector2) {.loadfrom("set_position_offset", 743155724).}
  proc positionOffset*(self: GraphNode): Vector2 {.loadfrom("get_position_offset", 3341600327).}
  proc `comment=`*(self: GraphNode; comment: Bool) {.loadfrom("set_comment", 2586408642).}
  proc isComment*(self: GraphNode): Bool {.loadfrom("is_comment", 36873697).}
  proc `resizable=`*(self: GraphNode; resizable: Bool) {.loadfrom("set_resizable", 2586408642).}
  proc isResizable*(self: GraphNode): Bool {.loadfrom("is_resizable", 36873697).}
  proc `draggable=`*(self: GraphNode; draggable: Bool) {.loadfrom("set_draggable", 2586408642).}
  proc isDraggable*(self: GraphNode): Bool {.loadfrom("is_draggable", 2240911060).}
  proc `selectable=`*(self: GraphNode; selectable: Bool) {.loadfrom("set_selectable", 2586408642).}
  proc isSelectable*(self: GraphNode): Bool {.loadfrom("is_selectable", 2240911060).}
  proc `selected=`*(self: GraphNode; selected: Bool) {.loadfrom("set_selected", 2586408642).}
  proc isSelected*(self: GraphNode): Bool {.loadfrom("is_selected", 2240911060).}
  proc getConnectionInputCount*(self: GraphNode): int32 {.loadfrom("get_connection_input_count", 2455072627).}
  proc getConnectionInputHeight*(self: GraphNode; port: int32): int32 {.loadfrom("get_connection_input_height", 3744713108).}
  proc getConnectionInputPosition*(self: GraphNode; port: int32): Vector2 {.loadfrom("get_connection_input_position", 3114997196).}
  proc getConnectionInputType*(self: GraphNode; port: int32): int32 {.loadfrom("get_connection_input_type", 3744713108).}
  proc getConnectionInputColor*(self: GraphNode; port: int32): Color {.loadfrom("get_connection_input_color", 2624840992).}
  proc getConnectionInputSlot*(self: GraphNode; port: int32): int32 {.loadfrom("get_connection_input_slot", 3744713108).}
  proc getConnectionOutputCount*(self: GraphNode): int32 {.loadfrom("get_connection_output_count", 2455072627).}
  proc getConnectionOutputHeight*(self: GraphNode; port: int32): int32 {.loadfrom("get_connection_output_height", 3744713108).}
  proc getConnectionOutputPosition*(self: GraphNode; port: int32): Vector2 {.loadfrom("get_connection_output_position", 3114997196).}
  proc getConnectionOutputType*(self: GraphNode; port: int32): int32 {.loadfrom("get_connection_output_type", 3744713108).}
  proc getConnectionOutputColor*(self: GraphNode; port: int32): Color {.loadfrom("get_connection_output_color", 2624840992).}
  proc getConnectionOutputSlot*(self: GraphNode; port: int32): int32 {.loadfrom("get_connection_output_slot", 3744713108).}
  proc `showCloseButton=`*(self: GraphNode; show: Bool) {.loadfrom("set_show_close_button", 2586408642).}
  proc isCloseButtonVisible*(self: GraphNode): Bool {.loadfrom("is_close_button_visible", 36873697).}
  proc `overlay=`*(self: GraphNode; overlay: GraphNode|>Overlay) {.loadfrom("set_overlay", 3144190109).}
  proc overlay*(self: GraphNode): GraphNode|>Overlay {.loadfrom("get_overlay", 2854257040).}

# GridContainer
define_godot_engine_class_essencials(GridContainer, Container)
GridContainer.memberProcs:
  proc `columns=`*(self: GridContainer; columns: int32) {.loadfrom("set_columns", 1286410249).}
  proc columns*(self: GridContainer): int32 {.loadfrom("get_columns", 3905245786).}

# MarginContainer
define_godot_engine_class_essencials(MarginContainer, Container)

# PanelContainer
define_godot_engine_class_essencials(PanelContainer, Container)

# ScrollContainer
define_godot_engine_class_essencials(ScrollContainer, Container)
ScrollContainer.memberProcs:
  proc `hScroll=`*(self: ScrollContainer; value: int32) {.loadfrom("set_h_scroll", 1286410249).}
  proc hScroll*(self: ScrollContainer): int32 {.loadfrom("get_h_scroll", 3905245786).}
  proc `vScroll=`*(self: ScrollContainer; value: int32) {.loadfrom("set_v_scroll", 1286410249).}
  proc vScroll*(self: ScrollContainer): int32 {.loadfrom("get_v_scroll", 3905245786).}
  proc `horizontalCustomStep=`*(self: ScrollContainer; value: Float) {.loadfrom("set_horizontal_custom_step", 373806689).}
  proc horizontalCustomStep*(self: ScrollContainer): Float {.loadfrom("get_horizontal_custom_step", 1740695150).}
  proc `verticalCustomStep=`*(self: ScrollContainer; value: Float) {.loadfrom("set_vertical_custom_step", 373806689).}
  proc verticalCustomStep*(self: ScrollContainer): Float {.loadfrom("get_vertical_custom_step", 1740695150).}
  proc `horizontalScrollMode=`*(self: ScrollContainer; enable: ScrollContainer|>ScrollMode) {.loadfrom("set_horizontal_scroll_mode", 2750506364).}
  proc horizontalScrollMode*(self: ScrollContainer): ScrollContainer|>ScrollMode {.loadfrom("get_horizontal_scroll_mode", 3987985145).}
  proc `verticalScrollMode=`*(self: ScrollContainer; enable: ScrollContainer|>ScrollMode) {.loadfrom("set_vertical_scroll_mode", 2750506364).}
  proc verticalScrollMode*(self: ScrollContainer): ScrollContainer|>ScrollMode {.loadfrom("get_vertical_scroll_mode", 3987985145).}
  proc `deadzone=`*(self: ScrollContainer; deadzone: int32) {.loadfrom("set_deadzone", 1286410249).}
  proc deadzone*(self: ScrollContainer): int32 {.loadfrom("get_deadzone", 3905245786).}
  proc `followFocus=`*(self: ScrollContainer; enabled: Bool) {.loadfrom("set_follow_focus", 2586408642).}
  proc isFollowingFocus*(self: ScrollContainer): Bool {.loadfrom("is_following_focus", 36873697).}
  proc getHScrollBar*(self: ScrollContainer): HScrollBar {.loadfrom("get_h_scroll_bar", 4004517983).}
  proc getVScrollBar*(self: ScrollContainer): VScrollBar {.loadfrom("get_v_scroll_bar", 2630340773).}
  proc ensureControlVisible*(self: ScrollContainer; control: Control) {.loadfrom("ensure_control_visible", 1496901182).}

# SplitContainer
define_godot_engine_class_essencials(SplitContainer, Container)
SplitContainer.memberProcs:
  proc `splitOffset=`*(self: SplitContainer; offset: int32) {.loadfrom("set_split_offset", 1286410249).}
  proc splitOffset*(self: SplitContainer): int32 {.loadfrom("get_split_offset", 3905245786).}
  proc clampSplitOffset*(self: SplitContainer) {.loadfrom("clamp_split_offset", 3218959716).}
  proc `collapsed=`*(self: SplitContainer; collapsed: Bool) {.loadfrom("set_collapsed", 2586408642).}
  proc isCollapsed*(self: SplitContainer): Bool {.loadfrom("is_collapsed", 36873697).}
  proc `draggerVisibility=`*(self: SplitContainer; mode: SplitContainer|>DraggerVisibility) {.loadfrom("set_dragger_visibility", 1168273952).}
  proc draggerVisibility*(self: SplitContainer): SplitContainer|>DraggerVisibility {.loadfrom("get_dragger_visibility", 967297479).}
  proc `vertical=`*(self: SplitContainer; vertical: Bool) {.loadfrom("set_vertical", 2586408642).}
  proc isVertical*(self: SplitContainer): Bool {.loadfrom("is_vertical", 36873697).}

# SubViewportContainer
define_godot_engine_class_essencials(SubViewportContainer, Container)
SubViewportContainer.memberProcs:
  proc `stretch=`*(self: SubViewportContainer; enable: Bool) {.loadfrom("set_stretch", 2586408642).}
  proc isStretchEnabled*(self: SubViewportContainer): Bool {.loadfrom("is_stretch_enabled", 36873697).}
  proc `stretchShrink=`*(self: SubViewportContainer; amount: int32) {.loadfrom("set_stretch_shrink", 1286410249).}
  proc stretchShrink*(self: SubViewportContainer): int32 {.loadfrom("get_stretch_shrink", 3905245786).}

# TabContainer
define_godot_engine_class_essencials(TabContainer, Container)
TabContainer.memberProcs:
  proc getTabCount*(self: TabContainer): int32 {.loadfrom("get_tab_count", 3905245786).}
  proc `currentTab=`*(self: TabContainer; tabIdx: int32) {.loadfrom("set_current_tab", 1286410249).}
  proc currentTab*(self: TabContainer): int32 {.loadfrom("get_current_tab", 3905245786).}
  proc getPreviousTab*(self: TabContainer): int32 {.loadfrom("get_previous_tab", 3905245786).}
  proc getCurrentTabControl*(self: TabContainer): Control {.loadfrom("get_current_tab_control", 2783021301).}
  proc getTabControl*(self: TabContainer; tabIdx: int32): Control {.loadfrom("get_tab_control", 1065994134).}
  proc `tabAlignment=`*(self: TabContainer; alignment: TabBar|>AlignmentMode) {.loadfrom("set_tab_alignment", 2413632353).}
  proc tabAlignment*(self: TabContainer): TabBar|>AlignmentMode {.loadfrom("get_tab_alignment", 2178122193).}
  proc `clipTabs=`*(self: TabContainer; clipTabs: Bool) {.loadfrom("set_clip_tabs", 2586408642).}
  proc clipTabs*(self: TabContainer): Bool {.loadfrom("get_clip_tabs", 36873697).}
  proc `tabsVisible=`*(self: TabContainer; visible: Bool) {.loadfrom("set_tabs_visible", 2586408642).}
  proc areTabsVisible*(self: TabContainer): Bool {.loadfrom("are_tabs_visible", 36873697).}
  proc `allTabsInFront=`*(self: TabContainer; isFront: Bool) {.loadfrom("set_all_tabs_in_front", 2586408642).}
  proc isAllTabsInFront*(self: TabContainer): Bool {.loadfrom("is_all_tabs_in_front", 36873697).}
  proc setTabTitle*(self: TabContainer; tabIdx: int32; title: String) {.loadfrom("set_tab_title", 501894301).}
  proc getTabTitle*(self: TabContainer; tabIdx: int32): String {.loadfrom("get_tab_title", 844755477).}
  proc setTabIcon*(self: TabContainer; tabIdx: int32; icon: Ref[Texture2D]) {.loadfrom("set_tab_icon", 666127730).}
  proc getTabIcon*(self: TabContainer; tabIdx: int32): Ref[Texture2D] {.loadfrom("get_tab_icon", 3536238170).}
  proc setTabDisabled*(self: TabContainer; tabIdx: int32; disabled: Bool) {.loadfrom("set_tab_disabled", 300928843).}
  proc isTabDisabled*(self: TabContainer; tabIdx: int32): Bool {.loadfrom("is_tab_disabled", 1116898809).}
  proc setTabHidden*(self: TabContainer; tabIdx: int32; hidden: Bool) {.loadfrom("set_tab_hidden", 300928843).}
  proc isTabHidden*(self: TabContainer; tabIdx: int32): Bool {.loadfrom("is_tab_hidden", 1116898809).}
  proc setTabMetadata*(self: TabContainer; tabIdx: int32; metadata: ptr Variant) {.loadfrom("set_tab_metadata", 2152698145).}
  proc getTabMetadata*(self: TabContainer; tabIdx: int32): Variant {.loadfrom("get_tab_metadata", 4227898402).}
  proc setTabButtonIcon*(self: TabContainer; tabIdx: int32; icon: Ref[Texture2D]) {.loadfrom("set_tab_button_icon", 666127730).}
  proc getTabButtonIcon*(self: TabContainer; tabIdx: int32): Ref[Texture2D] {.loadfrom("get_tab_button_icon", 3536238170).}
  proc getTabIdxAtPoint*(self: TabContainer; point: Vector2): int32 {.loadfrom("get_tab_idx_at_point", 3820158470).}
  proc getTabIdxFromControl*(self: TabContainer; control: Control): int32 {.loadfrom("get_tab_idx_from_control", 2787397975).}
  proc setPopup*(self: TabContainer; popup: ptr Node) {.loadfrom("set_popup", 1078189570).}
  proc getPopup*(self: TabContainer): Popup {.loadfrom("get_popup", 111095082).}
  proc `dragToRearrangeEnabled=`*(self: TabContainer; enabled: Bool) {.loadfrom("set_drag_to_rearrange_enabled", 2586408642).}
  proc dragToRearrangeEnabled*(self: TabContainer): Bool {.loadfrom("get_drag_to_rearrange_enabled", 36873697).}
  proc `tabsRearrangeGroup=`*(self: TabContainer; groupId: int32) {.loadfrom("set_tabs_rearrange_group", 1286410249).}
  proc tabsRearrangeGroup*(self: TabContainer): int32 {.loadfrom("get_tabs_rearrange_group", 3905245786).}
  proc `useHiddenTabsForMinSize=`*(self: TabContainer; enabled: Bool) {.loadfrom("set_use_hidden_tabs_for_min_size", 2586408642).}
  proc useHiddenTabsForMinSize*(self: TabContainer): Bool {.loadfrom("get_use_hidden_tabs_for_min_size", 36873697).}

# EditorSpinSlider
define_godot_engine_class_essencials(EditorSpinSlider, Range)
EditorSpinSlider.memberProcs:
  proc `label=`*(self: EditorSpinSlider; label: String) {.loadfrom("set_label", 83702148).}
  proc label*(self: EditorSpinSlider): String {.loadfrom("get_label", 201670096).}
  proc `suffix=`*(self: EditorSpinSlider; suffix: String) {.loadfrom("set_suffix", 83702148).}
  proc suffix*(self: EditorSpinSlider): String {.loadfrom("get_suffix", 201670096).}
  proc `readOnly=`*(self: EditorSpinSlider; readOnly: Bool) {.loadfrom("set_read_only", 2586408642).}
  proc isReadOnly*(self: EditorSpinSlider): Bool {.loadfrom("is_read_only", 36873697).}
  proc `flat=`*(self: EditorSpinSlider; flat: Bool) {.loadfrom("set_flat", 2586408642).}
  proc isFlat*(self: EditorSpinSlider): Bool {.loadfrom("is_flat", 36873697).}
  proc `hideSlider=`*(self: EditorSpinSlider; hideSlider: Bool) {.loadfrom("set_hide_slider", 2586408642).}
  proc isHidingSlider*(self: EditorSpinSlider): Bool {.loadfrom("is_hiding_slider", 36873697).}

# ProgressBar
define_godot_engine_class_essencials(ProgressBar, Range)
ProgressBar.memberProcs:
  proc `fillMode=`*(self: ProgressBar; mode: int32) {.loadfrom("set_fill_mode", 1286410249).}
  proc fillMode*(self: ProgressBar): int32 {.loadfrom("get_fill_mode", 2455072627).}
  proc `showPercentage=`*(self: ProgressBar; visible: Bool) {.loadfrom("set_show_percentage", 2586408642).}
  proc isPercentageShown*(self: ProgressBar): Bool {.loadfrom("is_percentage_shown", 36873697).}

# ScrollBar
define_godot_engine_class_essencials(ScrollBar, Range)
ScrollBar.memberProcs:
  proc `customStep=`*(self: ScrollBar; step: Float) {.loadfrom("set_custom_step", 373806689).}
  proc customStep*(self: ScrollBar): Float {.loadfrom("get_custom_step", 1740695150).}

# Slider
define_godot_engine_class_essencials(Slider, Range)
Slider.memberProcs:
  proc `ticks=`*(self: Slider; count: int32) {.loadfrom("set_ticks", 1286410249).}
  proc ticks*(self: Slider): int32 {.loadfrom("get_ticks", 3905245786).}
  proc ticksOnBorders*(self: Slider): Bool {.loadfrom("get_ticks_on_borders", 36873697).}
  proc `ticksOnBorders=`*(self: Slider; ticksOnBorder: Bool) {.loadfrom("set_ticks_on_borders", 2586408642).}
  proc `editable=`*(self: Slider; editable: Bool) {.loadfrom("set_editable", 2586408642).}
  proc isEditable*(self: Slider): Bool {.loadfrom("is_editable", 36873697).}
  proc `scrollable=`*(self: Slider; scrollable: Bool) {.loadfrom("set_scrollable", 2586408642).}
  proc isScrollable*(self: Slider): Bool {.loadfrom("is_scrollable", 36873697).}

# SpinBox
define_godot_engine_class_essencials(SpinBox, Range)
SpinBox.memberProcs:
  proc `horizontalAlignment=`*(self: SpinBox; alignment: HorizontalAlignment) {.loadfrom("set_horizontal_alignment", 2312603777).}
  proc horizontalAlignment*(self: SpinBox): HorizontalAlignment {.loadfrom("get_horizontal_alignment", 341400642).}
  proc `suffix=`*(self: SpinBox; suffix: String) {.loadfrom("set_suffix", 83702148).}
  proc suffix*(self: SpinBox): String {.loadfrom("get_suffix", 201670096).}
  proc `prefix=`*(self: SpinBox; prefix: String) {.loadfrom("set_prefix", 83702148).}
  proc prefix*(self: SpinBox): String {.loadfrom("get_prefix", 201670096).}
  proc `editable=`*(self: SpinBox; enabled: Bool) {.loadfrom("set_editable", 2586408642).}
  proc `customArrowStep=`*(self: SpinBox; arrowStep: float64) {.loadfrom("set_custom_arrow_step", 373806689).}
  proc customArrowStep*(self: SpinBox): float64 {.loadfrom("get_custom_arrow_step", 1740695150).}
  proc isEditable*(self: SpinBox): Bool {.loadfrom("is_editable", 36873697).}
  proc `updateOnTextChanged=`*(self: SpinBox; enabled: Bool) {.loadfrom("set_update_on_text_changed", 2586408642).}
  proc updateOnTextChanged*(self: SpinBox): Bool {.loadfrom("get_update_on_text_changed", 36873697).}
  proc `selectAllOnFocus=`*(self: SpinBox; enabled: Bool) {.loadfrom("set_select_all_on_focus", 2586408642).}
  proc isSelectAllOnFocus*(self: SpinBox): Bool {.loadfrom("is_select_all_on_focus", 36873697).}
  proc apply*(self: SpinBox) {.loadfrom("apply", 3218959716).}
  proc getLineEdit*(self: SpinBox): LineEdit {.loadfrom("get_line_edit", 4071694264).}

# TextureProgressBar
define_godot_engine_class_essencials(TextureProgressBar, Range)
TextureProgressBar.memberProcs:
  proc `underTexture=`*(self: TextureProgressBar; tex: Ref[Texture2D]) {.loadfrom("set_under_texture", 4051416890).}
  proc underTexture*(self: TextureProgressBar): Ref[Texture2D] {.loadfrom("get_under_texture", 3635182373).}
  proc `progressTexture=`*(self: TextureProgressBar; tex: Ref[Texture2D]) {.loadfrom("set_progress_texture", 4051416890).}
  proc progressTexture*(self: TextureProgressBar): Ref[Texture2D] {.loadfrom("get_progress_texture", 3635182373).}
  proc `overTexture=`*(self: TextureProgressBar; tex: Ref[Texture2D]) {.loadfrom("set_over_texture", 4051416890).}
  proc overTexture*(self: TextureProgressBar): Ref[Texture2D] {.loadfrom("get_over_texture", 3635182373).}
  proc `fillMode=`*(self: TextureProgressBar; mode: int32) {.loadfrom("set_fill_mode", 1286410249).}
  proc fillMode*(self: TextureProgressBar): int32 {.loadfrom("get_fill_mode", 2455072627).}
  proc `tintUnder=`*(self: TextureProgressBar; tint: Color) {.loadfrom("set_tint_under", 2920490490).}
  proc tintUnder*(self: TextureProgressBar): Color {.loadfrom("get_tint_under", 3444240500).}
  proc `tintProgress=`*(self: TextureProgressBar; tint: Color) {.loadfrom("set_tint_progress", 2920490490).}
  proc tintProgress*(self: TextureProgressBar): Color {.loadfrom("get_tint_progress", 3444240500).}
  proc `tintOver=`*(self: TextureProgressBar; tint: Color) {.loadfrom("set_tint_over", 2920490490).}
  proc tintOver*(self: TextureProgressBar): Color {.loadfrom("get_tint_over", 3444240500).}
  proc `textureProgressOffset=`*(self: TextureProgressBar; offset: Vector2) {.loadfrom("set_texture_progress_offset", 743155724).}
  proc textureProgressOffset*(self: TextureProgressBar): Vector2 {.loadfrom("get_texture_progress_offset", 3341600327).}
  proc `radialInitialAngle=`*(self: TextureProgressBar; mode: Float) {.loadfrom("set_radial_initial_angle", 373806689).}
  proc radialInitialAngle*(self: TextureProgressBar): Float {.loadfrom("get_radial_initial_angle", 191475506).}
  proc `radialCenterOffset=`*(self: TextureProgressBar; mode: Vector2) {.loadfrom("set_radial_center_offset", 743155724).}
  proc radialCenterOffset*(self: TextureProgressBar): Vector2 {.loadfrom("get_radial_center_offset", 1497962370).}
  proc `fillDegrees=`*(self: TextureProgressBar; mode: Float) {.loadfrom("set_fill_degrees", 373806689).}
  proc fillDegrees*(self: TextureProgressBar): Float {.loadfrom("get_fill_degrees", 191475506).}
  proc `stretchMargin=`*(self: TextureProgressBar; margin: Side; value: int32) {.loadfrom("set_stretch_margin", 437707142).}
  proc stretchMargin*(self: TextureProgressBar; margin: Side): int32 {.loadfrom("get_stretch_margin", 1983885014).}
  proc `ninePatchStretch=`*(self: TextureProgressBar; stretch: Bool) {.loadfrom("set_nine_patch_stretch", 2586408642).}
  proc ninePatchStretch*(self: TextureProgressBar): Bool {.loadfrom("get_nine_patch_stretch", 36873697).}

# HSeparator
define_godot_engine_class_essencials(HSeparator, Separator)

# VSeparator
define_godot_engine_class_essencials(VSeparator, Separator)

# CodeEdit
define_godot_engine_class_essencials(CodeEdit, TextEdit)
method confirmCodeCompletion*(self: CodeEdit; replace: Bool) {.base.} = (discard)
method requestCodeCompletion*(self: CodeEdit; force: Bool) {.base.} = (discard)
method filterCodeCompletionCandidates*(self: CodeEdit; candidates: TypedArray[Dictionary]): TypedArray[Dictionary] {.base.} = (discard)
CodeEdit.memberProcs:
  proc `indentSize=`*(self: CodeEdit; size: int32) {.loadfrom("set_indent_size", 1286410249).}
  proc indentSize*(self: CodeEdit): int32 {.loadfrom("get_indent_size", 3905245786).}
  proc `indentUsingSpaces=`*(self: CodeEdit; useSpaces: Bool) {.loadfrom("set_indent_using_spaces", 2586408642).}
  proc isIndentUsingSpaces*(self: CodeEdit): Bool {.loadfrom("is_indent_using_spaces", 36873697).}
  proc `autoIndentEnabled=`*(self: CodeEdit; enable: Bool) {.loadfrom("set_auto_indent_enabled", 2586408642).}
  proc isAutoIndentEnabled*(self: CodeEdit): Bool {.loadfrom("is_auto_indent_enabled", 36873697).}
  proc `autoIndentPrefixes=`*(self: CodeEdit; prefixes: TypedArray[String]) {.loadfrom("set_auto_indent_prefixes", 381264803).}
  proc autoIndentPrefixes*(self: CodeEdit): TypedArray[String] {.loadfrom("get_auto_indent_prefixes", 3995934104).}
  proc doIndent*(self: CodeEdit) {.loadfrom("do_indent", 3218959716).}
  proc indentLines*(self: CodeEdit) {.loadfrom("indent_lines", 3218959716).}
  proc unindentLines*(self: CodeEdit) {.loadfrom("unindent_lines", 3218959716).}
  proc convertIndent*(self: CodeEdit; fromLine: int32 = -1; toLine: int32 = -1) {.loadfrom("convert_indent", 423910286).}
  proc `autoBraceCompletionEnabled=`*(self: CodeEdit; enable: Bool) {.loadfrom("set_auto_brace_completion_enabled", 2586408642).}
  proc isAutoBraceCompletionEnabled*(self: CodeEdit): Bool {.loadfrom("is_auto_brace_completion_enabled", 36873697).}
  proc `highlightMatchingBracesEnabled=`*(self: CodeEdit; enable: Bool) {.loadfrom("set_highlight_matching_braces_enabled", 2586408642).}
  proc isHighlightMatchingBracesEnabled*(self: CodeEdit): Bool {.loadfrom("is_highlight_matching_braces_enabled", 36873697).}
  proc addAutoBraceCompletionPair*(self: CodeEdit; startKey: String; endKey: String) {.loadfrom("add_auto_brace_completion_pair", 3186203200).}
  proc `autoBraceCompletionPairs=`*(self: CodeEdit; pairs: Dictionary) {.loadfrom("set_auto_brace_completion_pairs", 4155329257).}
  proc autoBraceCompletionPairs*(self: CodeEdit): Dictionary {.loadfrom("get_auto_brace_completion_pairs", 3102165223).}
  proc hasAutoBraceCompletionOpenKey*(self: CodeEdit; openKey: String): Bool {.loadfrom("has_auto_brace_completion_open_key", 3927539163).}
  proc hasAutoBraceCompletionCloseKey*(self: CodeEdit; closeKey: String): Bool {.loadfrom("has_auto_brace_completion_close_key", 3927539163).}
  proc getAutoBraceCompletionCloseKey*(self: CodeEdit; openKey: String): String {.loadfrom("get_auto_brace_completion_close_key", 3135753539).}
  proc `drawBreakpointsGutter=`*(self: CodeEdit; enable: Bool) {.loadfrom("set_draw_breakpoints_gutter", 2586408642).}
  proc isDrawingBreakpointsGutter*(self: CodeEdit): Bool {.loadfrom("is_drawing_breakpoints_gutter", 36873697).}
  proc `drawBookmarksGutter=`*(self: CodeEdit; enable: Bool) {.loadfrom("set_draw_bookmarks_gutter", 2586408642).}
  proc isDrawingBookmarksGutter*(self: CodeEdit): Bool {.loadfrom("is_drawing_bookmarks_gutter", 36873697).}
  proc `drawExecutingLinesGutter=`*(self: CodeEdit; enable: Bool) {.loadfrom("set_draw_executing_lines_gutter", 2586408642).}
  proc isDrawingExecutingLinesGutter*(self: CodeEdit): Bool {.loadfrom("is_drawing_executing_lines_gutter", 36873697).}
  proc setLineAsBreakpoint*(self: CodeEdit; line: int32; breakpointed: Bool) {.loadfrom("set_line_as_breakpoint", 300928843).}
  proc isLineBreakpointed*(self: CodeEdit; line: int32): Bool {.loadfrom("is_line_breakpointed", 1116898809).}
  proc clearBreakpointedLines*(self: CodeEdit) {.loadfrom("clear_breakpointed_lines", 3218959716).}
  proc getBreakpointedLines*(self: CodeEdit): PackedInt32Array {.loadfrom("get_breakpointed_lines", 1930428628).}
  proc setLineAsBookmarked*(self: CodeEdit; line: int32; bookmarked: Bool) {.loadfrom("set_line_as_bookmarked", 300928843).}
  proc isLineBookmarked*(self: CodeEdit; line: int32): Bool {.loadfrom("is_line_bookmarked", 1116898809).}
  proc clearBookmarkedLines*(self: CodeEdit) {.loadfrom("clear_bookmarked_lines", 3218959716).}
  proc getBookmarkedLines*(self: CodeEdit): PackedInt32Array {.loadfrom("get_bookmarked_lines", 1930428628).}
  proc setLineAsExecuting*(self: CodeEdit; line: int32; executing: Bool) {.loadfrom("set_line_as_executing", 300928843).}
  proc isLineExecuting*(self: CodeEdit; line: int32): Bool {.loadfrom("is_line_executing", 1116898809).}
  proc clearExecutingLines*(self: CodeEdit) {.loadfrom("clear_executing_lines", 3218959716).}
  proc getExecutingLines*(self: CodeEdit): PackedInt32Array {.loadfrom("get_executing_lines", 1930428628).}
  proc `drawLineNumbers=`*(self: CodeEdit; enable: Bool) {.loadfrom("set_draw_line_numbers", 2586408642).}
  proc isDrawLineNumbersEnabled*(self: CodeEdit): Bool {.loadfrom("is_draw_line_numbers_enabled", 36873697).}
  proc `lineNumbersZeroPadded=`*(self: CodeEdit; enable: Bool) {.loadfrom("set_line_numbers_zero_padded", 2586408642).}
  proc isLineNumbersZeroPadded*(self: CodeEdit): Bool {.loadfrom("is_line_numbers_zero_padded", 36873697).}
  proc `drawFoldGutter=`*(self: CodeEdit; enable: Bool) {.loadfrom("set_draw_fold_gutter", 2586408642).}
  proc isDrawingFoldGutter*(self: CodeEdit): Bool {.loadfrom("is_drawing_fold_gutter", 36873697).}
  proc `lineFoldingEnabled=`*(self: CodeEdit; enabled: Bool) {.loadfrom("set_line_folding_enabled", 2586408642).}
  proc isLineFoldingEnabled*(self: CodeEdit): Bool {.loadfrom("is_line_folding_enabled", 36873697).}
  proc canFoldLine*(self: CodeEdit; line: int32): Bool {.loadfrom("can_fold_line", 1116898809).}
  proc foldLine*(self: CodeEdit; line: int32) {.loadfrom("fold_line", 1286410249).}
  proc unfoldLine*(self: CodeEdit; line: int32) {.loadfrom("unfold_line", 1286410249).}
  proc foldAllLines*(self: CodeEdit) {.loadfrom("fold_all_lines", 3218959716).}
  proc unfoldAllLines*(self: CodeEdit) {.loadfrom("unfold_all_lines", 3218959716).}
  proc toggleFoldableLine*(self: CodeEdit; line: int32) {.loadfrom("toggle_foldable_line", 1286410249).}
  proc isLineFolded*(self: CodeEdit; line: int32): Bool {.loadfrom("is_line_folded", 1116898809).}
  proc getFoldedLines*(self: CodeEdit): TypedArray[Int] {.loadfrom("get_folded_lines", 3995934104).}
  proc addStringDelimiter*(self: CodeEdit; startKey: String; endKey: String; lineOnly: Bool = false) {.loadfrom("add_string_delimiter", 3146098955).}
  proc removeStringDelimiter*(self: CodeEdit; startKey: String) {.loadfrom("remove_string_delimiter", 83702148).}
  proc hasStringDelimiter*(self: CodeEdit; startKey: String): Bool {.loadfrom("has_string_delimiter", 3927539163).}
  proc `stringDelimiters=`*(self: CodeEdit; stringDelimiters: TypedArray[String]) {.loadfrom("set_string_delimiters", 381264803).}
  proc clearStringDelimiters*(self: CodeEdit) {.loadfrom("clear_string_delimiters", 3218959716).}
  proc stringDelimiters*(self: CodeEdit): TypedArray[String] {.loadfrom("get_string_delimiters", 3995934104).}
  proc isInString*(self: CodeEdit; line: int32; column: int32 = -1): int32 {.loadfrom("is_in_string", 3294126239).}
  proc addCommentDelimiter*(self: CodeEdit; startKey: String; endKey: String; lineOnly: Bool = false) {.loadfrom("add_comment_delimiter", 3146098955).}
  proc removeCommentDelimiter*(self: CodeEdit; startKey: String) {.loadfrom("remove_comment_delimiter", 83702148).}
  proc hasCommentDelimiter*(self: CodeEdit; startKey: String): Bool {.loadfrom("has_comment_delimiter", 3927539163).}
  proc `commentDelimiters=`*(self: CodeEdit; commentDelimiters: TypedArray[String]) {.loadfrom("set_comment_delimiters", 381264803).}
  proc clearCommentDelimiters*(self: CodeEdit) {.loadfrom("clear_comment_delimiters", 3218959716).}
  proc commentDelimiters*(self: CodeEdit): TypedArray[String] {.loadfrom("get_comment_delimiters", 3995934104).}
  proc isInComment*(self: CodeEdit; line: int32; column: int32 = -1): int32 {.loadfrom("is_in_comment", 3294126239).}
  proc getDelimiterStartKey*(self: CodeEdit; delimiterIndex: int32): String {.loadfrom("get_delimiter_start_key", 844755477).}
  proc getDelimiterEndKey*(self: CodeEdit; delimiterIndex: int32): String {.loadfrom("get_delimiter_end_key", 844755477).}
  proc getDelimiterStartPosition*(self: CodeEdit; line: int32; column: int32): Vector2 {.loadfrom("get_delimiter_start_position", 3016396712).}
  proc getDelimiterEndPosition*(self: CodeEdit; line: int32; column: int32): Vector2 {.loadfrom("get_delimiter_end_position", 3016396712).}
  proc setCodeHint*(self: CodeEdit; codeHint: String) {.loadfrom("set_code_hint", 83702148).}
  proc setCodeHintDrawBelow*(self: CodeEdit; drawBelow: Bool) {.loadfrom("set_code_hint_draw_below", 2586408642).}
  proc getTextForCodeCompletion*(self: CodeEdit): String {.loadfrom("get_text_for_code_completion", 201670096).}
  proc requestCodeCompletion*(self: CodeEdit; force: Bool = false) {.loadfrom("request_code_completion", 107499316).}
  proc addCodeCompletionOption*(self: CodeEdit; `type`: CodeEdit|>CodeCompletionKind; displayText: String; insertText: String; textColor: Color = Color|>init(1, 1, 1, 1); icon: Ref[Resource] = default Ref[Resource]; value: ptr Variant = nil; location: int32 = 1024) {.loadfrom("add_code_completion_option", 1629240608).}
  proc updateCodeCompletionOptions*(self: CodeEdit; force: Bool) {.loadfrom("update_code_completion_options", 2586408642).}
  proc getCodeCompletionOptions*(self: CodeEdit): TypedArray[Dictionary] {.loadfrom("get_code_completion_options", 3995934104).}
  proc getCodeCompletionOption*(self: CodeEdit; index: int32): Dictionary {.loadfrom("get_code_completion_option", 3485342025).}
  proc getCodeCompletionSelectedIndex*(self: CodeEdit): int32 {.loadfrom("get_code_completion_selected_index", 3905245786).}
  proc setCodeCompletionSelectedIndex*(self: CodeEdit; index: int32) {.loadfrom("set_code_completion_selected_index", 1286410249).}
  proc confirmCodeCompletion*(self: CodeEdit; replace: Bool = false) {.loadfrom("confirm_code_completion", 107499316).}
  proc cancelCodeCompletion*(self: CodeEdit) {.loadfrom("cancel_code_completion", 3218959716).}
  proc `codeCompletionEnabled=`*(self: CodeEdit; enable: Bool) {.loadfrom("set_code_completion_enabled", 2586408642).}
  proc isCodeCompletionEnabled*(self: CodeEdit): Bool {.loadfrom("is_code_completion_enabled", 36873697).}
  proc `codeCompletionPrefixes=`*(self: CodeEdit; prefixes: TypedArray[String]) {.loadfrom("set_code_completion_prefixes", 381264803).}
  proc codeCompletionPrefixes*(self: CodeEdit): TypedArray[String] {.loadfrom("get_code_completion_prefixes", 3995934104).}
  proc `lineLengthGuidelines=`*(self: CodeEdit; guidelineColumns: TypedArray[Int]) {.loadfrom("set_line_length_guidelines", 381264803).}
  proc lineLengthGuidelines*(self: CodeEdit): TypedArray[Int] {.loadfrom("get_line_length_guidelines", 3995934104).}
  proc `symbolLookupOnClickEnabled=`*(self: CodeEdit; enable: Bool) {.loadfrom("set_symbol_lookup_on_click_enabled", 2586408642).}
  proc isSymbolLookupOnClickEnabled*(self: CodeEdit): Bool {.loadfrom("is_symbol_lookup_on_click_enabled", 36873697).}
  proc getTextForSymbolLookup*(self: CodeEdit): String {.loadfrom("get_text_for_symbol_lookup", 2841200299).}
  proc setSymbolLookupWordAsValid*(self: CodeEdit; valid: Bool) {.loadfrom("set_symbol_lookup_word_as_valid", 2586408642).}

# Area2D
define_godot_engine_class_essencials(Area2D, CollisionObject2D)
Area2D.memberProcs:
  proc `gravitySpaceOverrideMode=`*(self: Area2D; spaceOverrideMode: Area2D|>SpaceOverride) {.loadfrom("set_gravity_space_override_mode", 2879900038).}
  proc gravitySpaceOverrideMode*(self: Area2D): Area2D|>SpaceOverride {.loadfrom("get_gravity_space_override_mode", 3990256304).}
  proc `gravityIsPoint=`*(self: Area2D; enable: Bool) {.loadfrom("set_gravity_is_point", 2586408642).}
  proc isGravityAPoint*(self: Area2D): Bool {.loadfrom("is_gravity_a_point", 36873697).}
  proc `gravityPointUnitDistance=`*(self: Area2D; distanceScale: Float) {.loadfrom("set_gravity_point_unit_distance", 373806689).}
  proc gravityPointUnitDistance*(self: Area2D): Float {.loadfrom("get_gravity_point_unit_distance", 1740695150).}
  proc `gravityPointCenter=`*(self: Area2D; center: Vector2) {.loadfrom("set_gravity_point_center", 743155724).}
  proc gravityPointCenter*(self: Area2D): Vector2 {.loadfrom("get_gravity_point_center", 3341600327).}
  proc `gravityDirection=`*(self: Area2D; direction: Vector2) {.loadfrom("set_gravity_direction", 743155724).}
  proc gravityDirection*(self: Area2D): Vector2 {.loadfrom("get_gravity_direction", 3341600327).}
  proc `gravity=`*(self: Area2D; gravity: Float) {.loadfrom("set_gravity", 373806689).}
  proc gravity*(self: Area2D): Float {.loadfrom("get_gravity", 1740695150).}
  proc `linearDampSpaceOverrideMode=`*(self: Area2D; spaceOverrideMode: Area2D|>SpaceOverride) {.loadfrom("set_linear_damp_space_override_mode", 2879900038).}
  proc linearDampSpaceOverrideMode*(self: Area2D): Area2D|>SpaceOverride {.loadfrom("get_linear_damp_space_override_mode", 3990256304).}
  proc `angularDampSpaceOverrideMode=`*(self: Area2D; spaceOverrideMode: Area2D|>SpaceOverride) {.loadfrom("set_angular_damp_space_override_mode", 2879900038).}
  proc angularDampSpaceOverrideMode*(self: Area2D): Area2D|>SpaceOverride {.loadfrom("get_angular_damp_space_override_mode", 3990256304).}
  proc `linearDamp=`*(self: Area2D; linearDamp: Float) {.loadfrom("set_linear_damp", 373806689).}
  proc linearDamp*(self: Area2D): Float {.loadfrom("get_linear_damp", 1740695150).}
  proc `angularDamp=`*(self: Area2D; angularDamp: Float) {.loadfrom("set_angular_damp", 373806689).}
  proc angularDamp*(self: Area2D): Float {.loadfrom("get_angular_damp", 1740695150).}
  proc `priority=`*(self: Area2D; priority: int32) {.loadfrom("set_priority", 1286410249).}
  proc priority*(self: Area2D): int32 {.loadfrom("get_priority", 3905245786).}
  proc `monitoring=`*(self: Area2D; enable: Bool) {.loadfrom("set_monitoring", 2586408642).}
  proc isMonitoring*(self: Area2D): Bool {.loadfrom("is_monitoring", 36873697).}
  proc `monitorable=`*(self: Area2D; enable: Bool) {.loadfrom("set_monitorable", 2586408642).}
  proc isMonitorable*(self: Area2D): Bool {.loadfrom("is_monitorable", 36873697).}
  proc getOverlappingBodies*(self: Area2D): TypedArray[Node2D] {.loadfrom("get_overlapping_bodies", 3995934104).}
  proc getOverlappingAreas*(self: Area2D): TypedArray[Area2D] {.loadfrom("get_overlapping_areas", 3995934104).}
  proc hasOverlappingBodies*(self: Area2D): Bool {.loadfrom("has_overlapping_bodies", 36873697).}
  proc hasOverlappingAreas*(self: Area2D): Bool {.loadfrom("has_overlapping_areas", 36873697).}
  proc overlapsBody*(self: Area2D; body: ptr Node): Bool {.loadfrom("overlaps_body", 3093956946).}
  proc overlapsArea*(self: Area2D; area: ptr Node): Bool {.loadfrom("overlaps_area", 3093956946).}
  proc `audioBusName=`*(self: Area2D; name: StringName) {.loadfrom("set_audio_bus_name", 3304788590).}
  proc audioBusName*(self: Area2D): StringName {.loadfrom("get_audio_bus_name", 2002593661).}
  proc `audioBusOverride=`*(self: Area2D; enable: Bool) {.loadfrom("set_audio_bus_override", 2586408642).}
  proc isOverridingAudioBus*(self: Area2D): Bool {.loadfrom("is_overriding_audio_bus", 36873697).}

# PhysicsBody2D
define_godot_engine_class_essencials(PhysicsBody2D, CollisionObject2D)
PhysicsBody2D.memberProcs:
  proc moveAndCollide*(self: PhysicsBody2D; motion: Vector2; testOnly: Bool = false; safeMargin: Float = 0.08; recoveryAsCollision: Bool = false): Ref[KinematicCollision2D] {.loadfrom("move_and_collide", 1529961754).}
  proc testMove*(self: PhysicsBody2D; `from`: Transform2D; motion: Vector2; collision: Ref[KinematicCollision2D] = default Ref[KinematicCollision2D]; safeMargin: Float = 0.08; recoveryAsCollision: Bool = false): Bool {.loadfrom("test_move", 1369208982).}
  proc getCollisionExceptions*(self: PhysicsBody2D): TypedArray[PhysicsBody2D] {.loadfrom("get_collision_exceptions", 2915620761).}
  proc addCollisionExceptionWith*(self: PhysicsBody2D; body: ptr Node) {.loadfrom("add_collision_exception_with", 1078189570).}
  proc removeCollisionExceptionWith*(self: PhysicsBody2D; body: ptr Node) {.loadfrom("remove_collision_exception_with", 1078189570).}

# DampedSpringJoint2D
define_godot_engine_class_essencials(DampedSpringJoint2D, Joint2D)
DampedSpringJoint2D.memberProcs:
  proc `length=`*(self: DampedSpringJoint2D; length: Float) {.loadfrom("set_length", 373806689).}
  proc length*(self: DampedSpringJoint2D): Float {.loadfrom("get_length", 1740695150).}
  proc `restLength=`*(self: DampedSpringJoint2D; restLength: Float) {.loadfrom("set_rest_length", 373806689).}
  proc restLength*(self: DampedSpringJoint2D): Float {.loadfrom("get_rest_length", 1740695150).}
  proc `stiffness=`*(self: DampedSpringJoint2D; stiffness: Float) {.loadfrom("set_stiffness", 373806689).}
  proc stiffness*(self: DampedSpringJoint2D): Float {.loadfrom("get_stiffness", 1740695150).}
  proc `damping=`*(self: DampedSpringJoint2D; damping: Float) {.loadfrom("set_damping", 373806689).}
  proc damping*(self: DampedSpringJoint2D): Float {.loadfrom("get_damping", 1740695150).}

# GrooveJoint2D
define_godot_engine_class_essencials(GrooveJoint2D, Joint2D)
GrooveJoint2D.memberProcs:
  proc `length=`*(self: GrooveJoint2D; length: Float) {.loadfrom("set_length", 373806689).}
  proc length*(self: GrooveJoint2D): Float {.loadfrom("get_length", 1740695150).}
  proc `initialOffset=`*(self: GrooveJoint2D; offset: Float) {.loadfrom("set_initial_offset", 373806689).}
  proc initialOffset*(self: GrooveJoint2D): Float {.loadfrom("get_initial_offset", 1740695150).}

# PinJoint2D
define_godot_engine_class_essencials(PinJoint2D, Joint2D)
PinJoint2D.memberProcs:
  proc `softness=`*(self: PinJoint2D; softness: Float) {.loadfrom("set_softness", 373806689).}
  proc softness*(self: PinJoint2D): Float {.loadfrom("get_softness", 1740695150).}

# DirectionalLight2D
define_godot_engine_class_essencials(DirectionalLight2D, Light2D)
DirectionalLight2D.memberProcs:
  proc `maxDistance=`*(self: DirectionalLight2D; pixels: Float) {.loadfrom("set_max_distance", 373806689).}
  proc maxDistance*(self: DirectionalLight2D): Float {.loadfrom("get_max_distance", 1740695150).}

# PointLight2D
define_godot_engine_class_essencials(PointLight2D, Light2D)
PointLight2D.memberProcs:
  proc `texture=`*(self: PointLight2D; texture: Ref[Texture2D]) {.loadfrom("set_texture", 4051416890).}
  proc texture*(self: PointLight2D): Ref[Texture2D] {.loadfrom("get_texture", 3635182373).}
  proc `textureOffset=`*(self: PointLight2D; textureOffset: Vector2) {.loadfrom("set_texture_offset", 743155724).}
  proc textureOffset*(self: PointLight2D): Vector2 {.loadfrom("get_texture_offset", 3341600327).}
  proc `textureScale=`*(self: PointLight2D; textureScale: Float) {.loadfrom("set_texture_scale", 373806689).}
  proc textureScale*(self: PointLight2D): Float {.loadfrom("get_texture_scale", 1740695150).}

# VisibleOnScreenEnabler2D
define_godot_engine_class_essencials(VisibleOnScreenEnabler2D, VisibleOnScreenNotifier2D)
VisibleOnScreenEnabler2D.memberProcs:
  proc `enableMode=`*(self: VisibleOnScreenEnabler2D; mode: VisibleOnScreenEnabler2D|>EnableMode) {.loadfrom("set_enable_mode", 2961788752).}
  proc enableMode*(self: VisibleOnScreenEnabler2D): VisibleOnScreenEnabler2D|>EnableMode {.loadfrom("get_enable_mode", 2650445576).}
  proc `enableNodePath=`*(self: VisibleOnScreenEnabler2D; path: NodePath) {.loadfrom("set_enable_node_path", 1348162250).}
  proc enableNodePath*(self: VisibleOnScreenEnabler2D): NodePath {.loadfrom("get_enable_node_path", 277076166).}

# CharacterBody3D
define_godot_engine_class_essencials(CharacterBody3D, PhysicsBody3D)
CharacterBody3D.memberProcs:
  proc moveAndSlide*(self: CharacterBody3D): Bool {.loadfrom("move_and_slide", 2240911060).}
  proc applyFloorSnap*(self: CharacterBody3D) {.loadfrom("apply_floor_snap", 3218959716).}
  proc `velocity=`*(self: CharacterBody3D; velocity: Vector3) {.loadfrom("set_velocity", 3460891852).}
  proc velocity*(self: CharacterBody3D): Vector3 {.loadfrom("get_velocity", 3360562783).}
  proc `safeMargin=`*(self: CharacterBody3D; margin: Float) {.loadfrom("set_safe_margin", 373806689).}
  proc safeMargin*(self: CharacterBody3D): Float {.loadfrom("get_safe_margin", 1740695150).}
  proc isFloorStopOnSlopeEnabled*(self: CharacterBody3D): Bool {.loadfrom("is_floor_stop_on_slope_enabled", 36873697).}
  proc `floorStopOnSlopeEnabled=`*(self: CharacterBody3D; enabled: Bool) {.loadfrom("set_floor_stop_on_slope_enabled", 2586408642).}
  proc `floorConstantSpeedEnabled=`*(self: CharacterBody3D; enabled: Bool) {.loadfrom("set_floor_constant_speed_enabled", 2586408642).}
  proc isFloorConstantSpeedEnabled*(self: CharacterBody3D): Bool {.loadfrom("is_floor_constant_speed_enabled", 36873697).}
  proc `floorBlockOnWallEnabled=`*(self: CharacterBody3D; enabled: Bool) {.loadfrom("set_floor_block_on_wall_enabled", 2586408642).}
  proc isFloorBlockOnWallEnabled*(self: CharacterBody3D): Bool {.loadfrom("is_floor_block_on_wall_enabled", 36873697).}
  proc `slideOnCeilingEnabled=`*(self: CharacterBody3D; enabled: Bool) {.loadfrom("set_slide_on_ceiling_enabled", 2586408642).}
  proc isSlideOnCeilingEnabled*(self: CharacterBody3D): Bool {.loadfrom("is_slide_on_ceiling_enabled", 36873697).}
  proc `platformFloorLayers=`*(self: CharacterBody3D; excludeLayer: uint32) {.loadfrom("set_platform_floor_layers", 1286410249).}
  proc platformFloorLayers*(self: CharacterBody3D): uint32 {.loadfrom("get_platform_floor_layers", 3905245786).}
  proc `platformWallLayers=`*(self: CharacterBody3D; excludeLayer: uint32) {.loadfrom("set_platform_wall_layers", 1286410249).}
  proc platformWallLayers*(self: CharacterBody3D): uint32 {.loadfrom("get_platform_wall_layers", 3905245786).}
  proc maxSlides*(self: CharacterBody3D): int32 {.loadfrom("get_max_slides", 3905245786).}
  proc `maxSlides=`*(self: CharacterBody3D; maxSlides: int32) {.loadfrom("set_max_slides", 1286410249).}
  proc floorMaxAngle*(self: CharacterBody3D): Float {.loadfrom("get_floor_max_angle", 1740695150).}
  proc `floorMaxAngle=`*(self: CharacterBody3D; radians: Float) {.loadfrom("set_floor_max_angle", 373806689).}
  proc floorSnapLength*(self: CharacterBody3D): Float {.loadfrom("get_floor_snap_length", 191475506).}
  proc `floorSnapLength=`*(self: CharacterBody3D; floorSnapLength: Float) {.loadfrom("set_floor_snap_length", 373806689).}
  proc wallMinSlideAngle*(self: CharacterBody3D): Float {.loadfrom("get_wall_min_slide_angle", 1740695150).}
  proc `wallMinSlideAngle=`*(self: CharacterBody3D; radians: Float) {.loadfrom("set_wall_min_slide_angle", 373806689).}
  proc upDirection*(self: CharacterBody3D): Vector3 {.loadfrom("get_up_direction", 3360562783).}
  proc `upDirection=`*(self: CharacterBody3D; upDirection: Vector3) {.loadfrom("set_up_direction", 3460891852).}
  proc `motionMode=`*(self: CharacterBody3D; mode: CharacterBody3D|>MotionMode) {.loadfrom("set_motion_mode", 2690739026).}
  proc motionMode*(self: CharacterBody3D): CharacterBody3D|>MotionMode {.loadfrom("get_motion_mode", 3529553604).}
  proc `platformOnLeave=`*(self: CharacterBody3D; onLeaveApplyVelocity: CharacterBody3D|>PlatformOnLeave) {.loadfrom("set_platform_on_leave", 1459986142).}
  proc platformOnLeave*(self: CharacterBody3D): CharacterBody3D|>PlatformOnLeave {.loadfrom("get_platform_on_leave", 996491171).}
  proc isOnFloor*(self: CharacterBody3D): Bool {.loadfrom("is_on_floor", 36873697).}
  proc isOnFloorOnly*(self: CharacterBody3D): Bool {.loadfrom("is_on_floor_only", 36873697).}
  proc isOnCeiling*(self: CharacterBody3D): Bool {.loadfrom("is_on_ceiling", 36873697).}
  proc isOnCeilingOnly*(self: CharacterBody3D): Bool {.loadfrom("is_on_ceiling_only", 36873697).}
  proc isOnWall*(self: CharacterBody3D): Bool {.loadfrom("is_on_wall", 36873697).}
  proc isOnWallOnly*(self: CharacterBody3D): Bool {.loadfrom("is_on_wall_only", 36873697).}
  proc getFloorNormal*(self: CharacterBody3D): Vector3 {.loadfrom("get_floor_normal", 3360562783).}
  proc getWallNormal*(self: CharacterBody3D): Vector3 {.loadfrom("get_wall_normal", 3360562783).}
  proc getLastMotion*(self: CharacterBody3D): Vector3 {.loadfrom("get_last_motion", 3360562783).}
  proc getPositionDelta*(self: CharacterBody3D): Vector3 {.loadfrom("get_position_delta", 3360562783).}
  proc getRealVelocity*(self: CharacterBody3D): Vector3 {.loadfrom("get_real_velocity", 3360562783).}
  proc getFloorAngle*(self: CharacterBody3D; upDirection: Vector3 = gdvec(0, 1, 0)): Float {.loadfrom("get_floor_angle", 2906300789).}
  proc getPlatformVelocity*(self: CharacterBody3D): Vector3 {.loadfrom("get_platform_velocity", 3360562783).}
  proc getPlatformAngularVelocity*(self: CharacterBody3D): Vector3 {.loadfrom("get_platform_angular_velocity", 3360562783).}
  proc getSlideCollisionCount*(self: CharacterBody3D): int32 {.loadfrom("get_slide_collision_count", 3905245786).}
  proc getSlideCollision*(self: CharacterBody3D; slideIdx: int32): Ref[KinematicCollision3D] {.loadfrom("get_slide_collision", 107003663).}
  proc getLastSlideCollision*(self: CharacterBody3D): Ref[KinematicCollision3D] {.loadfrom("get_last_slide_collision", 186875014).}

# PhysicalBone3D
define_godot_engine_class_essencials(PhysicalBone3D, PhysicsBody3D)
method integrateForces*(self: PhysicalBone3D; state: PhysicsDirectBodyState3D) {.base.} = (discard)
PhysicalBone3D.memberProcs:
  proc applyCentralImpulse*(self: PhysicalBone3D; impulse: Vector3) {.loadfrom("apply_central_impulse", 3460891852).}
  proc applyImpulse*(self: PhysicalBone3D; impulse: Vector3; position: Vector3 = gdvec(0, 0, 0)) {.loadfrom("apply_impulse", 1002852006).}
  proc `jointType=`*(self: PhysicalBone3D; jointType: PhysicalBone3D|>JointType) {.loadfrom("set_joint_type", 2289552604).}
  proc jointType*(self: PhysicalBone3D): PhysicalBone3D|>JointType {.loadfrom("get_joint_type", 931347320).}
  proc `jointOffset=`*(self: PhysicalBone3D; offset: Transform3D) {.loadfrom("set_joint_offset", 2952846383).}
  proc jointOffset*(self: PhysicalBone3D): Transform3D {.loadfrom("get_joint_offset", 3229777777).}
  proc `jointRotation=`*(self: PhysicalBone3D; euler: Vector3) {.loadfrom("set_joint_rotation", 3460891852).}
  proc jointRotation*(self: PhysicalBone3D): Vector3 {.loadfrom("get_joint_rotation", 3360562783).}
  proc `bodyOffset=`*(self: PhysicalBone3D; offset: Transform3D) {.loadfrom("set_body_offset", 2952846383).}
  proc bodyOffset*(self: PhysicalBone3D): Transform3D {.loadfrom("get_body_offset", 3229777777).}
  proc getSimulatePhysics*(self: PhysicalBone3D): Bool {.loadfrom("get_simulate_physics", 2240911060).}
  proc isSimulatingPhysics*(self: PhysicalBone3D): Bool {.loadfrom("is_simulating_physics", 2240911060).}
  proc getBoneId*(self: PhysicalBone3D): int32 {.loadfrom("get_bone_id", 3905245786).}
  proc `mass=`*(self: PhysicalBone3D; mass: Float) {.loadfrom("set_mass", 373806689).}
  proc mass*(self: PhysicalBone3D): Float {.loadfrom("get_mass", 1740695150).}
  proc `friction=`*(self: PhysicalBone3D; friction: Float) {.loadfrom("set_friction", 373806689).}
  proc friction*(self: PhysicalBone3D): Float {.loadfrom("get_friction", 1740695150).}
  proc `bounce=`*(self: PhysicalBone3D; bounce: Float) {.loadfrom("set_bounce", 373806689).}
  proc bounce*(self: PhysicalBone3D): Float {.loadfrom("get_bounce", 1740695150).}
  proc `gravityScale=`*(self: PhysicalBone3D; gravityScale: Float) {.loadfrom("set_gravity_scale", 373806689).}
  proc gravityScale*(self: PhysicalBone3D): Float {.loadfrom("get_gravity_scale", 1740695150).}
  proc `linearDampMode=`*(self: PhysicalBone3D; linearDampMode: PhysicalBone3D|>DampMode) {.loadfrom("set_linear_damp_mode", 1244972221).}
  proc linearDampMode*(self: PhysicalBone3D): PhysicalBone3D|>DampMode {.loadfrom("get_linear_damp_mode", 205884699).}
  proc `angularDampMode=`*(self: PhysicalBone3D; angularDampMode: PhysicalBone3D|>DampMode) {.loadfrom("set_angular_damp_mode", 1244972221).}
  proc angularDampMode*(self: PhysicalBone3D): PhysicalBone3D|>DampMode {.loadfrom("get_angular_damp_mode", 205884699).}
  proc `linearDamp=`*(self: PhysicalBone3D; linearDamp: Float) {.loadfrom("set_linear_damp", 373806689).}
  proc linearDamp*(self: PhysicalBone3D): Float {.loadfrom("get_linear_damp", 1740695150).}
  proc `angularDamp=`*(self: PhysicalBone3D; angularDamp: Float) {.loadfrom("set_angular_damp", 373806689).}
  proc angularDamp*(self: PhysicalBone3D): Float {.loadfrom("get_angular_damp", 1740695150).}
  proc `linearVelocity=`*(self: PhysicalBone3D; linearVelocity: Vector3) {.loadfrom("set_linear_velocity", 3460891852).}
  proc linearVelocity*(self: PhysicalBone3D): Vector3 {.loadfrom("get_linear_velocity", 3360562783).}
  proc `angularVelocity=`*(self: PhysicalBone3D; angularVelocity: Vector3) {.loadfrom("set_angular_velocity", 3460891852).}
  proc angularVelocity*(self: PhysicalBone3D): Vector3 {.loadfrom("get_angular_velocity", 3360562783).}
  proc `useCustomIntegrator=`*(self: PhysicalBone3D; enable: Bool) {.loadfrom("set_use_custom_integrator", 2586408642).}
  proc isUsingCustomIntegrator*(self: PhysicalBone3D): Bool {.loadfrom("is_using_custom_integrator", 2240911060).}
  proc `canSleep=`*(self: PhysicalBone3D; ableToSleep: Bool) {.loadfrom("set_can_sleep", 2586408642).}
  proc isAbleToSleep*(self: PhysicalBone3D): Bool {.loadfrom("is_able_to_sleep", 36873697).}

# RigidBody3D
define_godot_engine_class_essencials(RigidBody3D, PhysicsBody3D)
method integrateForces*(self: RigidBody3D; state: PhysicsDirectBodyState3D) {.base.} = (discard)
RigidBody3D.memberProcs:
  proc `mass=`*(self: RigidBody3D; mass: Float) {.loadfrom("set_mass", 373806689).}
  proc mass*(self: RigidBody3D): Float {.loadfrom("get_mass", 1740695150).}
  proc `inertia=`*(self: RigidBody3D; inertia: Vector3) {.loadfrom("set_inertia", 3460891852).}
  proc inertia*(self: RigidBody3D): Vector3 {.loadfrom("get_inertia", 3360562783).}
  proc `centerOfMassMode=`*(self: RigidBody3D; mode: RigidBody3D|>CenterOfMassMode) {.loadfrom("set_center_of_mass_mode", 3625866032).}
  proc centerOfMassMode*(self: RigidBody3D): RigidBody3D|>CenterOfMassMode {.loadfrom("get_center_of_mass_mode", 237405040).}
  proc `centerOfMass=`*(self: RigidBody3D; centerOfMass: Vector3) {.loadfrom("set_center_of_mass", 3460891852).}
  proc centerOfMass*(self: RigidBody3D): Vector3 {.loadfrom("get_center_of_mass", 3360562783).}
  proc `physicsMaterialOverride=`*(self: RigidBody3D; physicsMaterialOverride: Ref[PhysicsMaterial]) {.loadfrom("set_physics_material_override", 1784508650).}
  proc physicsMaterialOverride*(self: RigidBody3D): Ref[PhysicsMaterial] {.loadfrom("get_physics_material_override", 2521850424).}
  proc `linearVelocity=`*(self: RigidBody3D; linearVelocity: Vector3) {.loadfrom("set_linear_velocity", 3460891852).}
  proc linearVelocity*(self: RigidBody3D): Vector3 {.loadfrom("get_linear_velocity", 3360562783).}
  proc `angularVelocity=`*(self: RigidBody3D; angularVelocity: Vector3) {.loadfrom("set_angular_velocity", 3460891852).}
  proc angularVelocity*(self: RigidBody3D): Vector3 {.loadfrom("get_angular_velocity", 3360562783).}
  proc getInverseInertiaTensor*(self: RigidBody3D): Basis {.loadfrom("get_inverse_inertia_tensor", 2716978435).}
  proc `gravityScale=`*(self: RigidBody3D; gravityScale: Float) {.loadfrom("set_gravity_scale", 373806689).}
  proc gravityScale*(self: RigidBody3D): Float {.loadfrom("get_gravity_scale", 1740695150).}
  proc `linearDampMode=`*(self: RigidBody3D; linearDampMode: RigidBody3D|>DampMode) {.loadfrom("set_linear_damp_mode", 1802035050).}
  proc linearDampMode*(self: RigidBody3D): RigidBody3D|>DampMode {.loadfrom("get_linear_damp_mode", 1366206940).}
  proc `angularDampMode=`*(self: RigidBody3D; angularDampMode: RigidBody3D|>DampMode) {.loadfrom("set_angular_damp_mode", 1802035050).}
  proc angularDampMode*(self: RigidBody3D): RigidBody3D|>DampMode {.loadfrom("get_angular_damp_mode", 1366206940).}
  proc `linearDamp=`*(self: RigidBody3D; linearDamp: Float) {.loadfrom("set_linear_damp", 373806689).}
  proc linearDamp*(self: RigidBody3D): Float {.loadfrom("get_linear_damp", 1740695150).}
  proc `angularDamp=`*(self: RigidBody3D; angularDamp: Float) {.loadfrom("set_angular_damp", 373806689).}
  proc angularDamp*(self: RigidBody3D): Float {.loadfrom("get_angular_damp", 1740695150).}
  proc `maxContactsReported=`*(self: RigidBody3D; amount: int32) {.loadfrom("set_max_contacts_reported", 1286410249).}
  proc maxContactsReported*(self: RigidBody3D): int32 {.loadfrom("get_max_contacts_reported", 3905245786).}
  proc getContactCount*(self: RigidBody3D): int32 {.loadfrom("get_contact_count", 3905245786).}
  proc `useCustomIntegrator=`*(self: RigidBody3D; enable: Bool) {.loadfrom("set_use_custom_integrator", 2586408642).}
  proc isUsingCustomIntegrator*(self: RigidBody3D): Bool {.loadfrom("is_using_custom_integrator", 2240911060).}
  proc `contactMonitor=`*(self: RigidBody3D; enabled: Bool) {.loadfrom("set_contact_monitor", 2586408642).}
  proc isContactMonitorEnabled*(self: RigidBody3D): Bool {.loadfrom("is_contact_monitor_enabled", 36873697).}
  proc `useContinuousCollisionDetection=`*(self: RigidBody3D; enable: Bool) {.loadfrom("set_use_continuous_collision_detection", 2586408642).}
  proc isUsingContinuousCollisionDetection*(self: RigidBody3D): Bool {.loadfrom("is_using_continuous_collision_detection", 36873697).}
  proc setAxisVelocity*(self: RigidBody3D; axisVelocity: Vector3) {.loadfrom("set_axis_velocity", 3460891852).}
  proc applyCentralImpulse*(self: RigidBody3D; impulse: Vector3) {.loadfrom("apply_central_impulse", 3460891852).}
  proc applyImpulse*(self: RigidBody3D; impulse: Vector3; position: Vector3 = gdvec(0, 0, 0)) {.loadfrom("apply_impulse", 1002852006).}
  proc applyTorqueImpulse*(self: RigidBody3D; impulse: Vector3) {.loadfrom("apply_torque_impulse", 3460891852).}
  proc applyCentralForce*(self: RigidBody3D; force: Vector3) {.loadfrom("apply_central_force", 3460891852).}
  proc applyForce*(self: RigidBody3D; force: Vector3; position: Vector3 = gdvec(0, 0, 0)) {.loadfrom("apply_force", 1002852006).}
  proc applyTorque*(self: RigidBody3D; torque: Vector3) {.loadfrom("apply_torque", 3460891852).}
  proc addConstantCentralForce*(self: RigidBody3D; force: Vector3) {.loadfrom("add_constant_central_force", 3460891852).}
  proc addConstantForce*(self: RigidBody3D; force: Vector3; position: Vector3 = gdvec(0, 0, 0)) {.loadfrom("add_constant_force", 1002852006).}
  proc addConstantTorque*(self: RigidBody3D; torque: Vector3) {.loadfrom("add_constant_torque", 3460891852).}
  proc `constantForce=`*(self: RigidBody3D; force: Vector3) {.loadfrom("set_constant_force", 3460891852).}
  proc constantForce*(self: RigidBody3D): Vector3 {.loadfrom("get_constant_force", 3360562783).}
  proc `constantTorque=`*(self: RigidBody3D; torque: Vector3) {.loadfrom("set_constant_torque", 3460891852).}
  proc constantTorque*(self: RigidBody3D): Vector3 {.loadfrom("get_constant_torque", 3360562783).}
  proc `sleeping=`*(self: RigidBody3D; sleeping: Bool) {.loadfrom("set_sleeping", 2586408642).}
  proc isSleeping*(self: RigidBody3D): Bool {.loadfrom("is_sleeping", 36873697).}
  proc `canSleep=`*(self: RigidBody3D; ableToSleep: Bool) {.loadfrom("set_can_sleep", 2586408642).}
  proc isAbleToSleep*(self: RigidBody3D): Bool {.loadfrom("is_able_to_sleep", 36873697).}
  proc `lockRotationEnabled=`*(self: RigidBody3D; lockRotation: Bool) {.loadfrom("set_lock_rotation_enabled", 2586408642).}
  proc isLockRotationEnabled*(self: RigidBody3D): Bool {.loadfrom("is_lock_rotation_enabled", 36873697).}
  proc `freezeEnabled=`*(self: RigidBody3D; freezeMode: Bool) {.loadfrom("set_freeze_enabled", 2586408642).}
  proc isFreezeEnabled*(self: RigidBody3D): Bool {.loadfrom("is_freeze_enabled", 36873697).}
  proc `freezeMode=`*(self: RigidBody3D; freezeMode: RigidBody3D|>FreezeMode) {.loadfrom("set_freeze_mode", 1319914653).}
  proc freezeMode*(self: RigidBody3D): RigidBody3D|>FreezeMode {.loadfrom("get_freeze_mode", 2008423905).}
  proc getCollidingBodies*(self: RigidBody3D): TypedArray[Node3D] {.loadfrom("get_colliding_bodies", 3995934104).}

# StaticBody3D
define_godot_engine_class_essencials(StaticBody3D, PhysicsBody3D)
StaticBody3D.memberProcs:
  proc `constantLinearVelocity=`*(self: StaticBody3D; vel: Vector3) {.loadfrom("set_constant_linear_velocity", 3460891852).}
  proc `constantAngularVelocity=`*(self: StaticBody3D; vel: Vector3) {.loadfrom("set_constant_angular_velocity", 3460891852).}
  proc constantLinearVelocity*(self: StaticBody3D): Vector3 {.loadfrom("get_constant_linear_velocity", 3360562783).}
  proc constantAngularVelocity*(self: StaticBody3D): Vector3 {.loadfrom("get_constant_angular_velocity", 3360562783).}
  proc `physicsMaterialOverride=`*(self: StaticBody3D; physicsMaterialOverride: Ref[PhysicsMaterial]) {.loadfrom("set_physics_material_override", 1784508650).}
  proc physicsMaterialOverride*(self: StaticBody3D): Ref[PhysicsMaterial] {.loadfrom("get_physics_material_override", 2521850424).}

# GPUParticlesAttractorBox3D
define_godot_engine_class_essencials(GPUParticlesAttractorBox3D, GPUParticlesAttractor3D)
GPUParticlesAttractorBox3D.memberProcs:
  proc `size=`*(self: GPUParticlesAttractorBox3D; size: Vector3) {.loadfrom("set_size", 3460891852).}
  proc size*(self: GPUParticlesAttractorBox3D): Vector3 {.loadfrom("get_size", 3360562783).}

# GPUParticlesAttractorSphere3D
define_godot_engine_class_essencials(GPUParticlesAttractorSphere3D, GPUParticlesAttractor3D)
GPUParticlesAttractorSphere3D.memberProcs:
  proc `radius=`*(self: GPUParticlesAttractorSphere3D; radius: Float) {.loadfrom("set_radius", 373806689).}
  proc radius*(self: GPUParticlesAttractorSphere3D): Float {.loadfrom("get_radius", 1740695150).}

# GPUParticlesAttractorVectorField3D
define_godot_engine_class_essencials(GPUParticlesAttractorVectorField3D, GPUParticlesAttractor3D)
GPUParticlesAttractorVectorField3D.memberProcs:
  proc `size=`*(self: GPUParticlesAttractorVectorField3D; size: Vector3) {.loadfrom("set_size", 3460891852).}
  proc size*(self: GPUParticlesAttractorVectorField3D): Vector3 {.loadfrom("get_size", 3360562783).}
  proc `texture=`*(self: GPUParticlesAttractorVectorField3D; texture: Ref[Texture3D]) {.loadfrom("set_texture", 1188404210).}
  proc texture*(self: GPUParticlesAttractorVectorField3D): Ref[Texture3D] {.loadfrom("get_texture", 373985333).}

# GPUParticlesCollisionBox3D
define_godot_engine_class_essencials(GPUParticlesCollisionBox3D, GPUParticlesCollision3D)
GPUParticlesCollisionBox3D.memberProcs:
  proc `size=`*(self: GPUParticlesCollisionBox3D; size: Vector3) {.loadfrom("set_size", 3460891852).}
  proc size*(self: GPUParticlesCollisionBox3D): Vector3 {.loadfrom("get_size", 3360562783).}

# GPUParticlesCollisionHeightField3D
define_godot_engine_class_essencials(GPUParticlesCollisionHeightField3D, GPUParticlesCollision3D)
GPUParticlesCollisionHeightField3D.memberProcs:
  proc `size=`*(self: GPUParticlesCollisionHeightField3D; size: Vector3) {.loadfrom("set_size", 3460891852).}
  proc size*(self: GPUParticlesCollisionHeightField3D): Vector3 {.loadfrom("get_size", 3360562783).}
  proc `resolution=`*(self: GPUParticlesCollisionHeightField3D; resolution: GPUParticlesCollisionHeightField3D|>Resolution) {.loadfrom("set_resolution", 1009996517).}
  proc resolution*(self: GPUParticlesCollisionHeightField3D): GPUParticlesCollisionHeightField3D|>Resolution {.loadfrom("get_resolution", 1156065644).}
  proc `updateMode=`*(self: GPUParticlesCollisionHeightField3D; updateMode: GPUParticlesCollisionHeightField3D|>UpdateMode) {.loadfrom("set_update_mode", 673680859).}
  proc updateMode*(self: GPUParticlesCollisionHeightField3D): GPUParticlesCollisionHeightField3D|>UpdateMode {.loadfrom("get_update_mode", 1998141380).}
  proc `followCameraEnabled=`*(self: GPUParticlesCollisionHeightField3D; enabled: Bool) {.loadfrom("set_follow_camera_enabled", 2586408642).}
  proc isFollowCameraEnabled*(self: GPUParticlesCollisionHeightField3D): Bool {.loadfrom("is_follow_camera_enabled", 36873697).}

# GPUParticlesCollisionSDF3D
define_godot_engine_class_essencials(GPUParticlesCollisionSDF3D, GPUParticlesCollision3D)
GPUParticlesCollisionSDF3D.memberProcs:
  proc `size=`*(self: GPUParticlesCollisionSDF3D; size: Vector3) {.loadfrom("set_size", 3460891852).}
  proc size*(self: GPUParticlesCollisionSDF3D): Vector3 {.loadfrom("get_size", 3360562783).}
  proc `resolution=`*(self: GPUParticlesCollisionSDF3D; resolution: GPUParticlesCollisionSDF3D|>Resolution) {.loadfrom("set_resolution", 1155629297).}
  proc resolution*(self: GPUParticlesCollisionSDF3D): GPUParticlesCollisionSDF3D|>Resolution {.loadfrom("get_resolution", 2919555867).}
  proc `texture=`*(self: GPUParticlesCollisionSDF3D; texture: Ref[Texture3D]) {.loadfrom("set_texture", 1188404210).}
  proc texture*(self: GPUParticlesCollisionSDF3D): Ref[Texture3D] {.loadfrom("get_texture", 373985333).}
  proc `thickness=`*(self: GPUParticlesCollisionSDF3D; thickness: Float) {.loadfrom("set_thickness", 373806689).}
  proc thickness*(self: GPUParticlesCollisionSDF3D): Float {.loadfrom("get_thickness", 1740695150).}
  proc `bakeMask=`*(self: GPUParticlesCollisionSDF3D; mask: uint32) {.loadfrom("set_bake_mask", 1286410249).}
  proc bakeMask*(self: GPUParticlesCollisionSDF3D): uint32 {.loadfrom("get_bake_mask", 3905245786).}
  proc setBakeMaskValue*(self: GPUParticlesCollisionSDF3D; layerNumber: int32; value: Bool) {.loadfrom("set_bake_mask_value", 300928843).}
  proc getBakeMaskValue*(self: GPUParticlesCollisionSDF3D; layerNumber: int32): Bool {.loadfrom("get_bake_mask_value", 1116898809).}

# GPUParticlesCollisionSphere3D
define_godot_engine_class_essencials(GPUParticlesCollisionSphere3D, GPUParticlesCollision3D)
GPUParticlesCollisionSphere3D.memberProcs:
  proc `radius=`*(self: GPUParticlesCollisionSphere3D; radius: Float) {.loadfrom("set_radius", 373806689).}
  proc radius*(self: GPUParticlesCollisionSphere3D): Float {.loadfrom("get_radius", 1740695150).}

# CPUParticles3D
define_godot_engine_class_essencials(CPUParticles3D, GeometryInstance3D)
CPUParticles3D.memberProcs:
  proc `emitting=`*(self: CPUParticles3D; emitting: Bool) {.loadfrom("set_emitting", 2586408642).}
  proc `amount=`*(self: CPUParticles3D; amount: int32) {.loadfrom("set_amount", 1286410249).}
  proc `lifetime=`*(self: CPUParticles3D; secs: float64) {.loadfrom("set_lifetime", 373806689).}
  proc `oneShot=`*(self: CPUParticles3D; enable: Bool) {.loadfrom("set_one_shot", 2586408642).}
  proc `preProcessTime=`*(self: CPUParticles3D; secs: float64) {.loadfrom("set_pre_process_time", 373806689).}
  proc `explosivenessRatio=`*(self: CPUParticles3D; ratio: Float) {.loadfrom("set_explosiveness_ratio", 373806689).}
  proc `randomnessRatio=`*(self: CPUParticles3D; ratio: Float) {.loadfrom("set_randomness_ratio", 373806689).}
  proc `lifetimeRandomness=`*(self: CPUParticles3D; random: float64) {.loadfrom("set_lifetime_randomness", 373806689).}
  proc `useLocalCoordinates=`*(self: CPUParticles3D; enable: Bool) {.loadfrom("set_use_local_coordinates", 2586408642).}
  proc `fixedFps=`*(self: CPUParticles3D; fps: int32) {.loadfrom("set_fixed_fps", 1286410249).}
  proc `fractionalDelta=`*(self: CPUParticles3D; enable: Bool) {.loadfrom("set_fractional_delta", 2586408642).}
  proc `speedScale=`*(self: CPUParticles3D; scale: float64) {.loadfrom("set_speed_scale", 373806689).}
  proc isEmitting*(self: CPUParticles3D): Bool {.loadfrom("is_emitting", 36873697).}
  proc amount*(self: CPUParticles3D): int32 {.loadfrom("get_amount", 3905245786).}
  proc lifetime*(self: CPUParticles3D): float64 {.loadfrom("get_lifetime", 1740695150).}
  proc oneShot*(self: CPUParticles3D): Bool {.loadfrom("get_one_shot", 36873697).}
  proc preProcessTime*(self: CPUParticles3D): float64 {.loadfrom("get_pre_process_time", 1740695150).}
  proc explosivenessRatio*(self: CPUParticles3D): Float {.loadfrom("get_explosiveness_ratio", 1740695150).}
  proc randomnessRatio*(self: CPUParticles3D): Float {.loadfrom("get_randomness_ratio", 1740695150).}
  proc lifetimeRandomness*(self: CPUParticles3D): float64 {.loadfrom("get_lifetime_randomness", 1740695150).}
  proc useLocalCoordinates*(self: CPUParticles3D): Bool {.loadfrom("get_use_local_coordinates", 36873697).}
  proc fixedFps*(self: CPUParticles3D): int32 {.loadfrom("get_fixed_fps", 3905245786).}
  proc fractionalDelta*(self: CPUParticles3D): Bool {.loadfrom("get_fractional_delta", 36873697).}
  proc speedScale*(self: CPUParticles3D): float64 {.loadfrom("get_speed_scale", 1740695150).}
  proc `drawOrder=`*(self: CPUParticles3D; order: CPUParticles3D|>DrawOrder) {.loadfrom("set_draw_order", 1427401774).}
  proc drawOrder*(self: CPUParticles3D): CPUParticles3D|>DrawOrder {.loadfrom("get_draw_order", 1321900776).}
  proc `mesh=`*(self: CPUParticles3D; mesh: Ref[Mesh]) {.loadfrom("set_mesh", 194775623).}
  proc mesh*(self: CPUParticles3D): Ref[Mesh] {.loadfrom("get_mesh", 1808005922).}
  proc restart*(self: CPUParticles3D) {.loadfrom("restart", 3218959716).}
  proc `direction=`*(self: CPUParticles3D; direction: Vector3) {.loadfrom("set_direction", 3460891852).}
  proc direction*(self: CPUParticles3D): Vector3 {.loadfrom("get_direction", 3360562783).}
  proc `spread=`*(self: CPUParticles3D; degrees: Float) {.loadfrom("set_spread", 373806689).}
  proc spread*(self: CPUParticles3D): Float {.loadfrom("get_spread", 1740695150).}
  proc `flatness=`*(self: CPUParticles3D; amount: Float) {.loadfrom("set_flatness", 373806689).}
  proc flatness*(self: CPUParticles3D): Float {.loadfrom("get_flatness", 1740695150).}
  proc `paramMin=`*(self: CPUParticles3D; param: CPUParticles3D|>Parameter; value: Float) {.loadfrom("set_param_min", 557936109).}
  proc paramMin*(self: CPUParticles3D; param: CPUParticles3D|>Parameter): Float {.loadfrom("get_param_min", 597646162).}
  proc `paramMax=`*(self: CPUParticles3D; param: CPUParticles3D|>Parameter; value: Float) {.loadfrom("set_param_max", 557936109).}
  proc paramMax*(self: CPUParticles3D; param: CPUParticles3D|>Parameter): Float {.loadfrom("get_param_max", 597646162).}
  proc `paramCurve=`*(self: CPUParticles3D; param: CPUParticles3D|>Parameter; curve: Ref[Curve]) {.loadfrom("set_param_curve", 4044142537).}
  proc paramCurve*(self: CPUParticles3D; param: CPUParticles3D|>Parameter): Ref[Curve] {.loadfrom("get_param_curve", 4132790277).}
  proc `color=`*(self: CPUParticles3D; color: Color) {.loadfrom("set_color", 2920490490).}
  proc color*(self: CPUParticles3D): Color {.loadfrom("get_color", 3444240500).}
  proc `colorRamp=`*(self: CPUParticles3D; ramp: Ref[Gradient]) {.loadfrom("set_color_ramp", 2756054477).}
  proc colorRamp*(self: CPUParticles3D): Ref[Gradient] {.loadfrom("get_color_ramp", 132272999).}
  proc `colorInitialRamp=`*(self: CPUParticles3D; ramp: Ref[Gradient]) {.loadfrom("set_color_initial_ramp", 2756054477).}
  proc colorInitialRamp*(self: CPUParticles3D): Ref[Gradient] {.loadfrom("get_color_initial_ramp", 132272999).}
  proc `particleFlag=`*(self: CPUParticles3D; particleFlag: CPUParticles3D|>ParticleFlags; enable: Bool) {.loadfrom("set_particle_flag", 3515406498).}
  proc particleFlag*(self: CPUParticles3D; particleFlag: CPUParticles3D|>ParticleFlags): Bool {.loadfrom("get_particle_flag", 2845201987).}
  proc `emissionShape=`*(self: CPUParticles3D; shape: CPUParticles3D|>EmissionShape) {.loadfrom("set_emission_shape", 491823814).}
  proc emissionShape*(self: CPUParticles3D): CPUParticles3D|>EmissionShape {.loadfrom("get_emission_shape", 2961454842).}
  proc `emissionSphereRadius=`*(self: CPUParticles3D; radius: Float) {.loadfrom("set_emission_sphere_radius", 373806689).}
  proc emissionSphereRadius*(self: CPUParticles3D): Float {.loadfrom("get_emission_sphere_radius", 1740695150).}
  proc `emissionBoxExtents=`*(self: CPUParticles3D; extents: Vector3) {.loadfrom("set_emission_box_extents", 3460891852).}
  proc emissionBoxExtents*(self: CPUParticles3D): Vector3 {.loadfrom("get_emission_box_extents", 3360562783).}
  proc `emissionPoints=`*(self: CPUParticles3D; array: PackedVector3Array) {.loadfrom("set_emission_points", 334873810).}
  proc emissionPoints*(self: CPUParticles3D): PackedVector3Array {.loadfrom("get_emission_points", 497664490).}
  proc `emissionNormals=`*(self: CPUParticles3D; array: PackedVector3Array) {.loadfrom("set_emission_normals", 334873810).}
  proc emissionNormals*(self: CPUParticles3D): PackedVector3Array {.loadfrom("get_emission_normals", 497664490).}
  proc `emissionColors=`*(self: CPUParticles3D; array: PackedColorArray) {.loadfrom("set_emission_colors", 3546319833).}
  proc emissionColors*(self: CPUParticles3D): PackedColorArray {.loadfrom("get_emission_colors", 1392750486).}
  proc `emissionRingAxis=`*(self: CPUParticles3D; axis: Vector3) {.loadfrom("set_emission_ring_axis", 3460891852).}
  proc emissionRingAxis*(self: CPUParticles3D): Vector3 {.loadfrom("get_emission_ring_axis", 3360562783).}
  proc `emissionRingHeight=`*(self: CPUParticles3D; height: Float) {.loadfrom("set_emission_ring_height", 373806689).}
  proc emissionRingHeight*(self: CPUParticles3D): Float {.loadfrom("get_emission_ring_height", 1740695150).}
  proc `emissionRingRadius=`*(self: CPUParticles3D; radius: Float) {.loadfrom("set_emission_ring_radius", 373806689).}
  proc emissionRingRadius*(self: CPUParticles3D): Float {.loadfrom("get_emission_ring_radius", 1740695150).}
  proc `emissionRingInnerRadius=`*(self: CPUParticles3D; innerRadius: Float) {.loadfrom("set_emission_ring_inner_radius", 373806689).}
  proc emissionRingInnerRadius*(self: CPUParticles3D): Float {.loadfrom("get_emission_ring_inner_radius", 1740695150).}
  proc gravity*(self: CPUParticles3D): Vector3 {.loadfrom("get_gravity", 3360562783).}
  proc `gravity=`*(self: CPUParticles3D; accelVec: Vector3) {.loadfrom("set_gravity", 3460891852).}
  proc splitScale*(self: CPUParticles3D): Bool {.loadfrom("get_split_scale", 2240911060).}
  proc `splitScale=`*(self: CPUParticles3D; splitScale: Bool) {.loadfrom("set_split_scale", 2586408642).}
  proc scaleCurveX*(self: CPUParticles3D): Ref[Curve] {.loadfrom("get_scale_curve_x", 2460114913).}
  proc `scaleCurveX=`*(self: CPUParticles3D; scaleCurve: Ref[Curve]) {.loadfrom("set_scale_curve_x", 270443179).}
  proc scaleCurveY*(self: CPUParticles3D): Ref[Curve] {.loadfrom("get_scale_curve_y", 2460114913).}
  proc `scaleCurveY=`*(self: CPUParticles3D; scaleCurve: Ref[Curve]) {.loadfrom("set_scale_curve_y", 270443179).}
  proc scaleCurveZ*(self: CPUParticles3D): Ref[Curve] {.loadfrom("get_scale_curve_z", 2460114913).}
  proc `scaleCurveZ=`*(self: CPUParticles3D; scaleCurve: Ref[Curve]) {.loadfrom("set_scale_curve_z", 270443179).}
  proc convertFromParticles*(self: CPUParticles3D; particles: ptr Node) {.loadfrom("convert_from_particles", 1078189570).}

# CSGShape3D
define_godot_engine_class_essencials(CSGShape3D, GeometryInstance3D)
CSGShape3D.memberProcs:
  proc isRootShape*(self: CSGShape3D): Bool {.loadfrom("is_root_shape", 36873697).}
  proc `operation=`*(self: CSGShape3D; operation: CSGShape3D|>Operation) {.loadfrom("set_operation", 811425055).}
  proc operation*(self: CSGShape3D): CSGShape3D|>Operation {.loadfrom("get_operation", 2662425879).}
  proc `snap=`*(self: CSGShape3D; snap: Float) {.loadfrom("set_snap", 373806689).}
  proc snap*(self: CSGShape3D): Float {.loadfrom("get_snap", 1740695150).}
  proc `useCollision=`*(self: CSGShape3D; operation: Bool) {.loadfrom("set_use_collision", 2586408642).}
  proc isUsingCollision*(self: CSGShape3D): Bool {.loadfrom("is_using_collision", 36873697).}
  proc `collisionLayer=`*(self: CSGShape3D; layer: uint32) {.loadfrom("set_collision_layer", 1286410249).}
  proc collisionLayer*(self: CSGShape3D): uint32 {.loadfrom("get_collision_layer", 3905245786).}
  proc `collisionMask=`*(self: CSGShape3D; mask: uint32) {.loadfrom("set_collision_mask", 1286410249).}
  proc collisionMask*(self: CSGShape3D): uint32 {.loadfrom("get_collision_mask", 3905245786).}
  proc setCollisionMaskValue*(self: CSGShape3D; layerNumber: int32; value: Bool) {.loadfrom("set_collision_mask_value", 300928843).}
  proc getCollisionMaskValue*(self: CSGShape3D; layerNumber: int32): Bool {.loadfrom("get_collision_mask_value", 1116898809).}
  proc setCollisionLayerValue*(self: CSGShape3D; layerNumber: int32; value: Bool) {.loadfrom("set_collision_layer_value", 300928843).}
  proc getCollisionLayerValue*(self: CSGShape3D; layerNumber: int32): Bool {.loadfrom("get_collision_layer_value", 1116898809).}
  proc `collisionPriority=`*(self: CSGShape3D; priority: Float) {.loadfrom("set_collision_priority", 373806689).}
  proc collisionPriority*(self: CSGShape3D): Float {.loadfrom("get_collision_priority", 1740695150).}
  proc `calculateTangents=`*(self: CSGShape3D; enabled: Bool) {.loadfrom("set_calculate_tangents", 2586408642).}
  proc isCalculatingTangents*(self: CSGShape3D): Bool {.loadfrom("is_calculating_tangents", 36873697).}
  proc getMeshes*(self: CSGShape3D): Array {.loadfrom("get_meshes", 3995934104).}

# GPUParticles3D
define_godot_engine_class_essencials(GPUParticles3D, GeometryInstance3D)
GPUParticles3D.memberProcs:
  proc `emitting=`*(self: GPUParticles3D; emitting: Bool) {.loadfrom("set_emitting", 2586408642).}
  proc `amount=`*(self: GPUParticles3D; amount: int32) {.loadfrom("set_amount", 1286410249).}
  proc `lifetime=`*(self: GPUParticles3D; secs: float64) {.loadfrom("set_lifetime", 373806689).}
  proc `oneShot=`*(self: GPUParticles3D; enable: Bool) {.loadfrom("set_one_shot", 2586408642).}
  proc `preProcessTime=`*(self: GPUParticles3D; secs: float64) {.loadfrom("set_pre_process_time", 373806689).}
  proc `explosivenessRatio=`*(self: GPUParticles3D; ratio: Float) {.loadfrom("set_explosiveness_ratio", 373806689).}
  proc `randomnessRatio=`*(self: GPUParticles3D; ratio: Float) {.loadfrom("set_randomness_ratio", 373806689).}
  proc `visibilityAabb=`*(self: GPUParticles3D; aabb: AABB) {.loadfrom("set_visibility_aabb", 259215842).}
  proc `useLocalCoordinates=`*(self: GPUParticles3D; enable: Bool) {.loadfrom("set_use_local_coordinates", 2586408642).}
  proc `fixedFps=`*(self: GPUParticles3D; fps: int32) {.loadfrom("set_fixed_fps", 1286410249).}
  proc `fractionalDelta=`*(self: GPUParticles3D; enable: Bool) {.loadfrom("set_fractional_delta", 2586408642).}
  proc `interpolate=`*(self: GPUParticles3D; enable: Bool) {.loadfrom("set_interpolate", 2586408642).}
  proc `processMaterial=`*(self: GPUParticles3D; material: Ref[Material]) {.loadfrom("set_process_material", 2757459619).}
  proc `speedScale=`*(self: GPUParticles3D; scale: float64) {.loadfrom("set_speed_scale", 373806689).}
  proc `collisionBaseSize=`*(self: GPUParticles3D; size: Float) {.loadfrom("set_collision_base_size", 373806689).}
  proc isEmitting*(self: GPUParticles3D): Bool {.loadfrom("is_emitting", 36873697).}
  proc amount*(self: GPUParticles3D): int32 {.loadfrom("get_amount", 3905245786).}
  proc lifetime*(self: GPUParticles3D): float64 {.loadfrom("get_lifetime", 1740695150).}
  proc oneShot*(self: GPUParticles3D): Bool {.loadfrom("get_one_shot", 36873697).}
  proc preProcessTime*(self: GPUParticles3D): float64 {.loadfrom("get_pre_process_time", 1740695150).}
  proc explosivenessRatio*(self: GPUParticles3D): Float {.loadfrom("get_explosiveness_ratio", 1740695150).}
  proc randomnessRatio*(self: GPUParticles3D): Float {.loadfrom("get_randomness_ratio", 1740695150).}
  proc visibilityAabb*(self: GPUParticles3D): AABB {.loadfrom("get_visibility_aabb", 1068685055).}
  proc useLocalCoordinates*(self: GPUParticles3D): Bool {.loadfrom("get_use_local_coordinates", 36873697).}
  proc fixedFps*(self: GPUParticles3D): int32 {.loadfrom("get_fixed_fps", 3905245786).}
  proc fractionalDelta*(self: GPUParticles3D): Bool {.loadfrom("get_fractional_delta", 36873697).}
  proc interpolate*(self: GPUParticles3D): Bool {.loadfrom("get_interpolate", 36873697).}
  proc processMaterial*(self: GPUParticles3D): Ref[Material] {.loadfrom("get_process_material", 5934680).}
  proc speedScale*(self: GPUParticles3D): float64 {.loadfrom("get_speed_scale", 1740695150).}
  proc collisionBaseSize*(self: GPUParticles3D): Float {.loadfrom("get_collision_base_size", 1740695150).}
  proc `drawOrder=`*(self: GPUParticles3D; order: GPUParticles3D|>DrawOrder) {.loadfrom("set_draw_order", 1208074815).}
  proc drawOrder*(self: GPUParticles3D): GPUParticles3D|>DrawOrder {.loadfrom("get_draw_order", 3770381780).}
  proc `drawPasses=`*(self: GPUParticles3D; passes: int32) {.loadfrom("set_draw_passes", 1286410249).}
  proc `drawPassMesh=`*(self: GPUParticles3D; pass: int32; mesh: Ref[Mesh]) {.loadfrom("set_draw_pass_mesh", 969122797).}
  proc drawPasses*(self: GPUParticles3D): int32 {.loadfrom("get_draw_passes", 3905245786).}
  proc drawPassMesh*(self: GPUParticles3D; pass: int32): Ref[Mesh] {.loadfrom("get_draw_pass_mesh", 1576363275).}
  proc `skin=`*(self: GPUParticles3D; skin: Ref[Skin]) {.loadfrom("set_skin", 3971435618).}
  proc skin*(self: GPUParticles3D): Ref[Skin] {.loadfrom("get_skin", 2074563878).}
  proc restart*(self: GPUParticles3D) {.loadfrom("restart", 3218959716).}
  proc captureAabb*(self: GPUParticles3D): AABB {.loadfrom("capture_aabb", 1068685055).}
  proc `subEmitter=`*(self: GPUParticles3D; path: NodePath) {.loadfrom("set_sub_emitter", 1348162250).}
  proc subEmitter*(self: GPUParticles3D): NodePath {.loadfrom("get_sub_emitter", 4075236667).}
  proc emitParticle*(self: GPUParticles3D; xform: Transform3D; velocity: Vector3; color: Color; custom: Color; flags: uint32) {.loadfrom("emit_particle", 992173727).}
  proc `trailEnabled=`*(self: GPUParticles3D; enabled: Bool) {.loadfrom("set_trail_enabled", 2586408642).}
  proc `trailLifetime=`*(self: GPUParticles3D; secs: float64) {.loadfrom("set_trail_lifetime", 373806689).}
  proc isTrailEnabled*(self: GPUParticles3D): Bool {.loadfrom("is_trail_enabled", 36873697).}
  proc trailLifetime*(self: GPUParticles3D): float64 {.loadfrom("get_trail_lifetime", 1740695150).}
  proc `transformAlign=`*(self: GPUParticles3D; align: GPUParticles3D|>TransformAlign) {.loadfrom("set_transform_align", 3892425954).}
  proc transformAlign*(self: GPUParticles3D): GPUParticles3D|>TransformAlign {.loadfrom("get_transform_align", 2100992166).}

# Label3D
define_godot_engine_class_essencials(Label3D, GeometryInstance3D)
Label3D.memberProcs:
  proc `horizontalAlignment=`*(self: Label3D; alignment: HorizontalAlignment) {.loadfrom("set_horizontal_alignment", 2312603777).}
  proc horizontalAlignment*(self: Label3D): HorizontalAlignment {.loadfrom("get_horizontal_alignment", 341400642).}
  proc `verticalAlignment=`*(self: Label3D; alignment: VerticalAlignment) {.loadfrom("set_vertical_alignment", 1796458609).}
  proc verticalAlignment*(self: Label3D): VerticalAlignment {.loadfrom("get_vertical_alignment", 3274884059).}
  proc `modulate=`*(self: Label3D; modulate: Color) {.loadfrom("set_modulate", 2920490490).}
  proc modulate*(self: Label3D): Color {.loadfrom("get_modulate", 3444240500).}
  proc `outlineModulate=`*(self: Label3D; modulate: Color) {.loadfrom("set_outline_modulate", 2920490490).}
  proc outlineModulate*(self: Label3D): Color {.loadfrom("get_outline_modulate", 3444240500).}
  proc `text=`*(self: Label3D; text: String) {.loadfrom("set_text", 83702148).}
  proc text*(self: Label3D): String {.loadfrom("get_text", 201670096).}
  proc `textDirection=`*(self: Label3D; direction: TextServer|>Direction) {.loadfrom("set_text_direction", 1418190634).}
  proc textDirection*(self: Label3D): TextServer|>Direction {.loadfrom("get_text_direction", 2516697328).}
  proc `language=`*(self: Label3D; language: String) {.loadfrom("set_language", 83702148).}
  proc language*(self: Label3D): String {.loadfrom("get_language", 201670096).}
  proc `structuredTextBidiOverride=`*(self: Label3D; parser: TextServer|>StructuredTextParser) {.loadfrom("set_structured_text_bidi_override", 55961453).}
  proc structuredTextBidiOverride*(self: Label3D): TextServer|>StructuredTextParser {.loadfrom("get_structured_text_bidi_override", 3385126229).}
  proc `structuredTextBidiOverrideOptions=`*(self: Label3D; args: Array) {.loadfrom("set_structured_text_bidi_override_options", 381264803).}
  proc structuredTextBidiOverrideOptions*(self: Label3D): Array {.loadfrom("get_structured_text_bidi_override_options", 3995934104).}
  proc `uppercase=`*(self: Label3D; enable: Bool) {.loadfrom("set_uppercase", 2586408642).}
  proc isUppercase*(self: Label3D): Bool {.loadfrom("is_uppercase", 36873697).}
  proc `renderPriority=`*(self: Label3D; priority: int32) {.loadfrom("set_render_priority", 1286410249).}
  proc renderPriority*(self: Label3D): int32 {.loadfrom("get_render_priority", 3905245786).}
  proc `outlineRenderPriority=`*(self: Label3D; priority: int32) {.loadfrom("set_outline_render_priority", 1286410249).}
  proc outlineRenderPriority*(self: Label3D): int32 {.loadfrom("get_outline_render_priority", 3905245786).}
  proc `font=`*(self: Label3D; font: Ref[Font]) {.loadfrom("set_font", 1262170328).}
  proc font*(self: Label3D): Ref[Font] {.loadfrom("get_font", 3229501585).}
  proc `fontSize=`*(self: Label3D; size: int32) {.loadfrom("set_font_size", 1286410249).}
  proc fontSize*(self: Label3D): int32 {.loadfrom("get_font_size", 3905245786).}
  proc `outlineSize=`*(self: Label3D; outlineSize: int32) {.loadfrom("set_outline_size", 1286410249).}
  proc outlineSize*(self: Label3D): int32 {.loadfrom("get_outline_size", 3905245786).}
  proc `lineSpacing=`*(self: Label3D; lineSpacing: Float) {.loadfrom("set_line_spacing", 373806689).}
  proc lineSpacing*(self: Label3D): Float {.loadfrom("get_line_spacing", 1740695150).}
  proc `autowrapMode=`*(self: Label3D; autowrapMode: TextServer|>AutowrapMode) {.loadfrom("set_autowrap_mode", 3289138044).}
  proc autowrapMode*(self: Label3D): TextServer|>AutowrapMode {.loadfrom("get_autowrap_mode", 1549071663).}
  proc `justificationFlags=`*(self: Label3D; justificationFlags: set[TextServer|>JustificationFlag]) {.loadfrom("set_justification_flags", 2877345813).}
  proc justificationFlags*(self: Label3D): set[TextServer|>JustificationFlag] {.loadfrom("get_justification_flags", 1583363614).}
  proc `width=`*(self: Label3D; width: Float) {.loadfrom("set_width", 373806689).}
  proc width*(self: Label3D): Float {.loadfrom("get_width", 1740695150).}
  proc `pixelSize=`*(self: Label3D; pixelSize: Float) {.loadfrom("set_pixel_size", 373806689).}
  proc pixelSize*(self: Label3D): Float {.loadfrom("get_pixel_size", 1740695150).}
  proc `offset=`*(self: Label3D; offset: Vector2) {.loadfrom("set_offset", 743155724).}
  proc offset*(self: Label3D): Vector2 {.loadfrom("get_offset", 3341600327).}
  proc `drawFlag=`*(self: Label3D; flag: Label3D|>DrawFlags; enabled: Bool) {.loadfrom("set_draw_flag", 1285833066).}
  proc drawFlag*(self: Label3D; flag: Label3D|>DrawFlags): Bool {.loadfrom("get_draw_flag", 259226453).}
  proc `billboardMode=`*(self: Label3D; mode: BaseMaterial3D|>BillboardMode) {.loadfrom("set_billboard_mode", 4202036497).}
  proc billboardMode*(self: Label3D): BaseMaterial3D|>BillboardMode {.loadfrom("get_billboard_mode", 1283840139).}
  proc `alphaCutMode=`*(self: Label3D; mode: Label3D|>AlphaCutMode) {.loadfrom("set_alpha_cut_mode", 2549142916).}
  proc alphaCutMode*(self: Label3D): Label3D|>AlphaCutMode {.loadfrom("get_alpha_cut_mode", 219468601).}
  proc `alphaScissorThreshold=`*(self: Label3D; threshold: Float) {.loadfrom("set_alpha_scissor_threshold", 373806689).}
  proc alphaScissorThreshold*(self: Label3D): Float {.loadfrom("get_alpha_scissor_threshold", 1740695150).}
  proc `alphaHashScale=`*(self: Label3D; threshold: Float) {.loadfrom("set_alpha_hash_scale", 373806689).}
  proc alphaHashScale*(self: Label3D): Float {.loadfrom("get_alpha_hash_scale", 1740695150).}
  proc `alphaAntialiasing=`*(self: Label3D; alphaAa: BaseMaterial3D|>AlphaAntiAliasing) {.loadfrom("set_alpha_antialiasing", 3212649852).}
  proc alphaAntialiasing*(self: Label3D): BaseMaterial3D|>AlphaAntiAliasing {.loadfrom("get_alpha_antialiasing", 2889939400).}
  proc `alphaAntialiasingEdge=`*(self: Label3D; edge: Float) {.loadfrom("set_alpha_antialiasing_edge", 373806689).}
  proc alphaAntialiasingEdge*(self: Label3D): Float {.loadfrom("get_alpha_antialiasing_edge", 1740695150).}
  proc `textureFilter=`*(self: Label3D; mode: BaseMaterial3D|>TextureFilter) {.loadfrom("set_texture_filter", 22904437).}
  proc textureFilter*(self: Label3D): BaseMaterial3D|>TextureFilter {.loadfrom("get_texture_filter", 3289213076).}
  proc generateTriangleMesh*(self: Label3D): Ref[TriangleMesh] {.loadfrom("generate_triangle_mesh", 3476533166).}

# MeshInstance3D
define_godot_engine_class_essencials(MeshInstance3D, GeometryInstance3D)
MeshInstance3D.memberProcs:
  proc `mesh=`*(self: MeshInstance3D; mesh: Ref[Mesh]) {.loadfrom("set_mesh", 194775623).}
  proc mesh*(self: MeshInstance3D): Ref[Mesh] {.loadfrom("get_mesh", 1808005922).}
  proc `skeletonPath=`*(self: MeshInstance3D; skeletonPath: NodePath) {.loadfrom("set_skeleton_path", 1348162250).}
  proc skeletonPath*(self: MeshInstance3D): NodePath {.loadfrom("get_skeleton_path", 277076166).}
  proc `skin=`*(self: MeshInstance3D; skin: Ref[Skin]) {.loadfrom("set_skin", 3971435618).}
  proc skin*(self: MeshInstance3D): Ref[Skin] {.loadfrom("get_skin", 2074563878).}
  proc getSurfaceOverrideMaterialCount*(self: MeshInstance3D): int32 {.loadfrom("get_surface_override_material_count", 3905245786).}
  proc setSurfaceOverrideMaterial*(self: MeshInstance3D; surface: int32; material: Ref[Material]) {.loadfrom("set_surface_override_material", 3671737478).}
  proc getSurfaceOverrideMaterial*(self: MeshInstance3D; surface: int32): Ref[Material] {.loadfrom("get_surface_override_material", 2897466400).}
  proc getActiveMaterial*(self: MeshInstance3D; surface: int32): Ref[Material] {.loadfrom("get_active_material", 2897466400).}
  proc createTrimeshCollision*(self: MeshInstance3D) {.loadfrom("create_trimesh_collision", 3218959716).}
  proc createConvexCollision*(self: MeshInstance3D; clean: Bool = true; simplify: Bool = false) {.loadfrom("create_convex_collision", 2751962654).}
  proc createMultipleConvexCollisions*(self: MeshInstance3D; settings: Ref[MeshConvexDecompositionSettings] = default Ref[MeshConvexDecompositionSettings]) {.loadfrom("create_multiple_convex_collisions", 628789669).}
  proc getBlendShapeCount*(self: MeshInstance3D): int32 {.loadfrom("get_blend_shape_count", 3905245786).}
  proc findBlendShapeByName*(self: MeshInstance3D; name: StringName): int32 {.loadfrom("find_blend_shape_by_name", 4150868206).}
  proc getBlendShapeValue*(self: MeshInstance3D; blendShapeIdx: int32): Float {.loadfrom("get_blend_shape_value", 2339986948).}
  proc setBlendShapeValue*(self: MeshInstance3D; blendShapeIdx: int32; value: Float) {.loadfrom("set_blend_shape_value", 1602489585).}
  proc createDebugTangents*(self: MeshInstance3D) {.loadfrom("create_debug_tangents", 3218959716).}

# MultiMeshInstance3D
define_godot_engine_class_essencials(MultiMeshInstance3D, GeometryInstance3D)
MultiMeshInstance3D.memberProcs:
  proc `multimesh=`*(self: MultiMeshInstance3D; multimesh: Ref[MultiMesh]) {.loadfrom("set_multimesh", 2246127404).}
  proc multimesh*(self: MultiMeshInstance3D): Ref[MultiMesh] {.loadfrom("get_multimesh", 1385450523).}

# SpriteBase3D
define_godot_engine_class_essencials(SpriteBase3D, GeometryInstance3D)
SpriteBase3D.memberProcs:
  proc `centered=`*(self: SpriteBase3D; centered: Bool) {.loadfrom("set_centered", 2586408642).}
  proc isCentered*(self: SpriteBase3D): Bool {.loadfrom("is_centered", 36873697).}
  proc `offset=`*(self: SpriteBase3D; offset: Vector2) {.loadfrom("set_offset", 743155724).}
  proc offset*(self: SpriteBase3D): Vector2 {.loadfrom("get_offset", 3341600327).}
  proc `flipH=`*(self: SpriteBase3D; flipH: Bool) {.loadfrom("set_flip_h", 2586408642).}
  proc isFlippedH*(self: SpriteBase3D): Bool {.loadfrom("is_flipped_h", 36873697).}
  proc `flipV=`*(self: SpriteBase3D; flipV: Bool) {.loadfrom("set_flip_v", 2586408642).}
  proc isFlippedV*(self: SpriteBase3D): Bool {.loadfrom("is_flipped_v", 36873697).}
  proc `modulate=`*(self: SpriteBase3D; modulate: Color) {.loadfrom("set_modulate", 2920490490).}
  proc modulate*(self: SpriteBase3D): Color {.loadfrom("get_modulate", 3444240500).}
  proc `renderPriority=`*(self: SpriteBase3D; priority: int32) {.loadfrom("set_render_priority", 1286410249).}
  proc renderPriority*(self: SpriteBase3D): int32 {.loadfrom("get_render_priority", 3905245786).}
  proc `pixelSize=`*(self: SpriteBase3D; pixelSize: Float) {.loadfrom("set_pixel_size", 373806689).}
  proc pixelSize*(self: SpriteBase3D): Float {.loadfrom("get_pixel_size", 1740695150).}
  proc `axis=`*(self: SpriteBase3D; axis: Vector3|>Axis) {.loadfrom("set_axis", 1144690656).}
  proc axis*(self: SpriteBase3D): Vector3|>Axis {.loadfrom("get_axis", 3050976882).}
  proc `drawFlag=`*(self: SpriteBase3D; flag: SpriteBase3D|>DrawFlags; enabled: Bool) {.loadfrom("set_draw_flag", 1135633219).}
  proc drawFlag*(self: SpriteBase3D; flag: SpriteBase3D|>DrawFlags): Bool {.loadfrom("get_draw_flag", 1733036628).}
  proc `alphaCutMode=`*(self: SpriteBase3D; mode: SpriteBase3D|>AlphaCutMode) {.loadfrom("set_alpha_cut_mode", 227561226).}
  proc alphaCutMode*(self: SpriteBase3D): SpriteBase3D|>AlphaCutMode {.loadfrom("get_alpha_cut_mode", 336003791).}
  proc `alphaScissorThreshold=`*(self: SpriteBase3D; threshold: Float) {.loadfrom("set_alpha_scissor_threshold", 373806689).}
  proc alphaScissorThreshold*(self: SpriteBase3D): Float {.loadfrom("get_alpha_scissor_threshold", 1740695150).}
  proc `alphaHashScale=`*(self: SpriteBase3D; threshold: Float) {.loadfrom("set_alpha_hash_scale", 373806689).}
  proc alphaHashScale*(self: SpriteBase3D): Float {.loadfrom("get_alpha_hash_scale", 1740695150).}
  proc `alphaAntialiasing=`*(self: SpriteBase3D; alphaAa: BaseMaterial3D|>AlphaAntiAliasing) {.loadfrom("set_alpha_antialiasing", 3212649852).}
  proc alphaAntialiasing*(self: SpriteBase3D): BaseMaterial3D|>AlphaAntiAliasing {.loadfrom("get_alpha_antialiasing", 2889939400).}
  proc `alphaAntialiasingEdge=`*(self: SpriteBase3D; edge: Float) {.loadfrom("set_alpha_antialiasing_edge", 373806689).}
  proc alphaAntialiasingEdge*(self: SpriteBase3D): Float {.loadfrom("get_alpha_antialiasing_edge", 1740695150).}
  proc `billboardMode=`*(self: SpriteBase3D; mode: BaseMaterial3D|>BillboardMode) {.loadfrom("set_billboard_mode", 4202036497).}
  proc billboardMode*(self: SpriteBase3D): BaseMaterial3D|>BillboardMode {.loadfrom("get_billboard_mode", 1283840139).}
  proc `textureFilter=`*(self: SpriteBase3D; mode: BaseMaterial3D|>TextureFilter) {.loadfrom("set_texture_filter", 22904437).}
  proc textureFilter*(self: SpriteBase3D): BaseMaterial3D|>TextureFilter {.loadfrom("get_texture_filter", 3289213076).}
  proc getItemRect*(self: SpriteBase3D): Rect2 {.loadfrom("get_item_rect", 1639390495).}
  proc generateTriangleMesh*(self: SpriteBase3D): Ref[TriangleMesh] {.loadfrom("generate_triangle_mesh", 3476533166).}

# DirectionalLight3D
define_godot_engine_class_essencials(DirectionalLight3D, Light3D)
DirectionalLight3D.memberProcs:
  proc `shadowMode=`*(self: DirectionalLight3D; mode: DirectionalLight3D|>ShadowMode) {.loadfrom("set_shadow_mode", 1261211726).}
  proc shadowMode*(self: DirectionalLight3D): DirectionalLight3D|>ShadowMode {.loadfrom("get_shadow_mode", 2765228544).}
  proc `blendSplits=`*(self: DirectionalLight3D; enabled: Bool) {.loadfrom("set_blend_splits", 2586408642).}
  proc isBlendSplitsEnabled*(self: DirectionalLight3D): Bool {.loadfrom("is_blend_splits_enabled", 36873697).}
  proc `skyMode=`*(self: DirectionalLight3D; mode: DirectionalLight3D|>SkyMode) {.loadfrom("set_sky_mode", 2691194817).}
  proc skyMode*(self: DirectionalLight3D): DirectionalLight3D|>SkyMode {.loadfrom("get_sky_mode", 3819982774).}

# OmniLight3D
define_godot_engine_class_essencials(OmniLight3D, Light3D)
OmniLight3D.memberProcs:
  proc `shadowMode=`*(self: OmniLight3D; mode: OmniLight3D|>ShadowMode) {.loadfrom("set_shadow_mode", 121862228).}
  proc shadowMode*(self: OmniLight3D): OmniLight3D|>ShadowMode {.loadfrom("get_shadow_mode", 4181586331).}

# SpotLight3D
define_godot_engine_class_essencials(SpotLight3D, Light3D)

# VisibleOnScreenEnabler3D
define_godot_engine_class_essencials(VisibleOnScreenEnabler3D, VisibleOnScreenNotifier3D)
VisibleOnScreenEnabler3D.memberProcs:
  proc `enableMode=`*(self: VisibleOnScreenEnabler3D; mode: VisibleOnScreenEnabler3D|>EnableMode) {.loadfrom("set_enable_mode", 320303646).}
  proc enableMode*(self: VisibleOnScreenEnabler3D): VisibleOnScreenEnabler3D|>EnableMode {.loadfrom("get_enable_mode", 3352990031).}
  proc `enableNodePath=`*(self: VisibleOnScreenEnabler3D; path: NodePath) {.loadfrom("set_enable_node_path", 1348162250).}
  proc enableNodePath*(self: VisibleOnScreenEnabler3D): NodePath {.loadfrom("get_enable_node_path", 277076166).}

# ConfirmationDialog
define_godot_engine_class_essencials(ConfirmationDialog, AcceptDialog)
ConfirmationDialog.memberProcs:
  proc getCancelButton*(self: ConfirmationDialog): Button {.loadfrom("get_cancel_button", 1856205918).}
  proc `cancelButtonText=`*(self: ConfirmationDialog; text: String) {.loadfrom("set_cancel_button_text", 83702148).}
  proc cancelButtonText*(self: ConfirmationDialog): String {.loadfrom("get_cancel_button_text", 201670096).}

# PopupMenu
define_godot_engine_class_essencials(PopupMenu, Popup)
PopupMenu.memberProcs:
  proc addItem*(self: PopupMenu; label: String; id: int32 = -1; accel: Key = keyNone) {.loadfrom("add_item", 3224536192).}
  proc addIconItem*(self: PopupMenu; texture: Ref[Texture2D]; label: String; id: int32 = -1; accel: Key = keyNone) {.loadfrom("add_icon_item", 1200674553).}
  proc addCheckItem*(self: PopupMenu; label: String; id: int32 = -1; accel: Key = keyNone) {.loadfrom("add_check_item", 3224536192).}
  proc addIconCheckItem*(self: PopupMenu; texture: Ref[Texture2D]; label: String; id: int32 = -1; accel: Key = keyNone) {.loadfrom("add_icon_check_item", 1200674553).}
  proc addRadioCheckItem*(self: PopupMenu; label: String; id: int32 = -1; accel: Key = keyNone) {.loadfrom("add_radio_check_item", 3224536192).}
  proc addIconRadioCheckItem*(self: PopupMenu; texture: Ref[Texture2D]; label: String; id: int32 = -1; accel: Key = keyNone) {.loadfrom("add_icon_radio_check_item", 1200674553).}
  proc addMultistateItem*(self: PopupMenu; label: String; maxStates: int32; defaultState: int32 = 0; id: int32 = -1; accel: Key = keyNone) {.loadfrom("add_multistate_item", 1585218420).}
  proc addShortcut*(self: PopupMenu; shortcut: Ref[Shortcut]; id: int32 = -1; global: Bool = false) {.loadfrom("add_shortcut", 2168272394).}
  proc addIconShortcut*(self: PopupMenu; texture: Ref[Texture2D]; shortcut: Ref[Shortcut]; id: int32 = -1; global: Bool = false) {.loadfrom("add_icon_shortcut", 68101841).}
  proc addCheckShortcut*(self: PopupMenu; shortcut: Ref[Shortcut]; id: int32 = -1; global: Bool = false) {.loadfrom("add_check_shortcut", 2168272394).}
  proc addIconCheckShortcut*(self: PopupMenu; texture: Ref[Texture2D]; shortcut: Ref[Shortcut]; id: int32 = -1; global: Bool = false) {.loadfrom("add_icon_check_shortcut", 68101841).}
  proc addRadioCheckShortcut*(self: PopupMenu; shortcut: Ref[Shortcut]; id: int32 = -1; global: Bool = false) {.loadfrom("add_radio_check_shortcut", 2168272394).}
  proc addIconRadioCheckShortcut*(self: PopupMenu; texture: Ref[Texture2D]; shortcut: Ref[Shortcut]; id: int32 = -1; global: Bool = false) {.loadfrom("add_icon_radio_check_shortcut", 68101841).}
  proc addSubmenuItem*(self: PopupMenu; label: String; submenu: String; id: int32 = -1) {.loadfrom("add_submenu_item", 3728518296).}
  proc setItemText*(self: PopupMenu; index: int32; text: String) {.loadfrom("set_item_text", 501894301).}
  proc setItemTextDirection*(self: PopupMenu; index: int32; direction: Control|>TextDirection) {.loadfrom("set_item_text_direction", 1707680378).}
  proc setItemLanguage*(self: PopupMenu; index: int32; language: String) {.loadfrom("set_item_language", 501894301).}
  proc setItemIcon*(self: PopupMenu; index: int32; icon: Ref[Texture2D]) {.loadfrom("set_item_icon", 666127730).}
  proc setItemIconMaxWidth*(self: PopupMenu; index: int32; width: int32) {.loadfrom("set_item_icon_max_width", 3937882851).}
  proc setItemIconModulate*(self: PopupMenu; index: int32; modulate: Color) {.loadfrom("set_item_icon_modulate", 2878471219).}
  proc setItemChecked*(self: PopupMenu; index: int32; checked: Bool) {.loadfrom("set_item_checked", 300928843).}
  proc setItemId*(self: PopupMenu; index: int32; id: int32) {.loadfrom("set_item_id", 3937882851).}
  proc setItemAccelerator*(self: PopupMenu; index: int32; accel: Key) {.loadfrom("set_item_accelerator", 2992817551).}
  proc setItemMetadata*(self: PopupMenu; index: int32; metadata: ptr Variant) {.loadfrom("set_item_metadata", 2152698145).}
  proc setItemDisabled*(self: PopupMenu; index: int32; disabled: Bool) {.loadfrom("set_item_disabled", 300928843).}
  proc setItemSubmenu*(self: PopupMenu; index: int32; submenu: String) {.loadfrom("set_item_submenu", 501894301).}
  proc setItemAsSeparator*(self: PopupMenu; index: int32; enable: Bool) {.loadfrom("set_item_as_separator", 300928843).}
  proc setItemAsCheckable*(self: PopupMenu; index: int32; enable: Bool) {.loadfrom("set_item_as_checkable", 300928843).}
  proc setItemAsRadioCheckable*(self: PopupMenu; index: int32; enable: Bool) {.loadfrom("set_item_as_radio_checkable", 300928843).}
  proc setItemTooltip*(self: PopupMenu; index: int32; tooltip: String) {.loadfrom("set_item_tooltip", 501894301).}
  proc setItemShortcut*(self: PopupMenu; index: int32; shortcut: Ref[Shortcut]; global: Bool = false) {.loadfrom("set_item_shortcut", 825127832).}
  proc setItemIndent*(self: PopupMenu; index: int32; indent: int32) {.loadfrom("set_item_indent", 3937882851).}
  proc setItemMultistate*(self: PopupMenu; index: int32; state: int32) {.loadfrom("set_item_multistate", 3937882851).}
  proc setItemShortcutDisabled*(self: PopupMenu; index: int32; disabled: Bool) {.loadfrom("set_item_shortcut_disabled", 300928843).}
  proc toggleItemChecked*(self: PopupMenu; index: int32) {.loadfrom("toggle_item_checked", 1286410249).}
  proc toggleItemMultistate*(self: PopupMenu; index: int32) {.loadfrom("toggle_item_multistate", 1286410249).}
  proc getItemText*(self: PopupMenu; index: int32): String {.loadfrom("get_item_text", 844755477).}
  proc getItemTextDirection*(self: PopupMenu; index: int32): Control|>TextDirection {.loadfrom("get_item_text_direction", 4235602388).}
  proc getItemLanguage*(self: PopupMenu; index: int32): String {.loadfrom("get_item_language", 844755477).}
  proc getItemIcon*(self: PopupMenu; index: int32): Ref[Texture2D] {.loadfrom("get_item_icon", 3536238170).}
  proc getItemIconMaxWidth*(self: PopupMenu; index: int32): int32 {.loadfrom("get_item_icon_max_width", 923996154).}
  proc getItemIconModulate*(self: PopupMenu; index: int32): Color {.loadfrom("get_item_icon_modulate", 3457211756).}
  proc isItemChecked*(self: PopupMenu; index: int32): Bool {.loadfrom("is_item_checked", 1116898809).}
  proc getItemId*(self: PopupMenu; index: int32): int32 {.loadfrom("get_item_id", 923996154).}
  proc getItemIndex*(self: PopupMenu; id: int32): int32 {.loadfrom("get_item_index", 923996154).}
  proc getItemAccelerator*(self: PopupMenu; index: int32): Key {.loadfrom("get_item_accelerator", 253789942).}
  proc getItemMetadata*(self: PopupMenu; index: int32): Variant {.loadfrom("get_item_metadata", 4227898402).}
  proc isItemDisabled*(self: PopupMenu; index: int32): Bool {.loadfrom("is_item_disabled", 1116898809).}
  proc getItemSubmenu*(self: PopupMenu; index: int32): String {.loadfrom("get_item_submenu", 844755477).}
  proc isItemSeparator*(self: PopupMenu; index: int32): Bool {.loadfrom("is_item_separator", 1116898809).}
  proc isItemCheckable*(self: PopupMenu; index: int32): Bool {.loadfrom("is_item_checkable", 1116898809).}
  proc isItemRadioCheckable*(self: PopupMenu; index: int32): Bool {.loadfrom("is_item_radio_checkable", 1116898809).}
  proc isItemShortcutDisabled*(self: PopupMenu; index: int32): Bool {.loadfrom("is_item_shortcut_disabled", 1116898809).}
  proc getItemTooltip*(self: PopupMenu; index: int32): String {.loadfrom("get_item_tooltip", 844755477).}
  proc getItemShortcut*(self: PopupMenu; index: int32): Ref[Shortcut] {.loadfrom("get_item_shortcut", 1449483325).}
  proc getItemIndent*(self: PopupMenu; index: int32): int32 {.loadfrom("get_item_indent", 923996154).}
  proc setFocusedItem*(self: PopupMenu; index: int32) {.loadfrom("set_focused_item", 1286410249).}
  proc getFocusedItem*(self: PopupMenu): int32 {.loadfrom("get_focused_item", 3905245786).}
  proc `itemCount=`*(self: PopupMenu; count: int32) {.loadfrom("set_item_count", 1286410249).}
  proc itemCount*(self: PopupMenu): int32 {.loadfrom("get_item_count", 3905245786).}
  proc scrollToItem*(self: PopupMenu; index: int32) {.loadfrom("scroll_to_item", 1286410249).}
  proc removeItem*(self: PopupMenu; index: int32) {.loadfrom("remove_item", 1286410249).}
  proc addSeparator*(self: PopupMenu; label: String = ""; id: int32 = -1) {.loadfrom("add_separator", 2266703459).}
  proc clear*(self: PopupMenu) {.loadfrom("clear", 3218959716).}
  proc `hideOnItemSelection=`*(self: PopupMenu; enable: Bool) {.loadfrom("set_hide_on_item_selection", 2586408642).}
  proc isHideOnItemSelection*(self: PopupMenu): Bool {.loadfrom("is_hide_on_item_selection", 36873697).}
  proc `hideOnCheckableItemSelection=`*(self: PopupMenu; enable: Bool) {.loadfrom("set_hide_on_checkable_item_selection", 2586408642).}
  proc isHideOnCheckableItemSelection*(self: PopupMenu): Bool {.loadfrom("is_hide_on_checkable_item_selection", 36873697).}
  proc `hideOnStateItemSelection=`*(self: PopupMenu; enable: Bool) {.loadfrom("set_hide_on_state_item_selection", 2586408642).}
  proc isHideOnStateItemSelection*(self: PopupMenu): Bool {.loadfrom("is_hide_on_state_item_selection", 36873697).}
  proc `submenuPopupDelay=`*(self: PopupMenu; seconds: Float) {.loadfrom("set_submenu_popup_delay", 373806689).}
  proc submenuPopupDelay*(self: PopupMenu): Float {.loadfrom("get_submenu_popup_delay", 1740695150).}
  proc `allowSearch=`*(self: PopupMenu; allow: Bool) {.loadfrom("set_allow_search", 2586408642).}
  proc allowSearch*(self: PopupMenu): Bool {.loadfrom("get_allow_search", 36873697).}

# PopupPanel
define_godot_engine_class_essencials(PopupPanel, Popup)

# AnimationNodeAdd2
define_godot_engine_class_essencials(AnimationNodeAdd2, AnimationNodeSync)

# AnimationNodeAdd3
define_godot_engine_class_essencials(AnimationNodeAdd3, AnimationNodeSync)

# AnimationNodeBlend2
define_godot_engine_class_essencials(AnimationNodeBlend2, AnimationNodeSync)

# AnimationNodeBlend3
define_godot_engine_class_essencials(AnimationNodeBlend3, AnimationNodeSync)

# AnimationNodeOneShot
define_godot_engine_class_essencials(AnimationNodeOneShot, AnimationNodeSync)
AnimationNodeOneShot.memberProcs:
  proc `fadeinTime=`*(self: Ref[AnimationNodeOneShot]; time: float64) {.loadfrom("set_fadein_time", 373806689).}
  proc fadeinTime*(self: Ref[AnimationNodeOneShot]): float64 {.loadfrom("get_fadein_time", 1740695150).}
  proc `fadeinCurve=`*(self: Ref[AnimationNodeOneShot]; curve: Ref[Curve]) {.loadfrom("set_fadein_curve", 270443179).}
  proc fadeinCurve*(self: Ref[AnimationNodeOneShot]): Ref[Curve] {.loadfrom("get_fadein_curve", 2460114913).}
  proc `fadeoutTime=`*(self: Ref[AnimationNodeOneShot]; time: float64) {.loadfrom("set_fadeout_time", 373806689).}
  proc fadeoutTime*(self: Ref[AnimationNodeOneShot]): float64 {.loadfrom("get_fadeout_time", 1740695150).}
  proc `fadeoutCurve=`*(self: Ref[AnimationNodeOneShot]; curve: Ref[Curve]) {.loadfrom("set_fadeout_curve", 270443179).}
  proc fadeoutCurve*(self: Ref[AnimationNodeOneShot]): Ref[Curve] {.loadfrom("get_fadeout_curve", 2460114913).}
  proc `autorestart=`*(self: Ref[AnimationNodeOneShot]; active: Bool) {.loadfrom("set_autorestart", 2586408642).}
  proc hasAutorestart*(self: Ref[AnimationNodeOneShot]): Bool {.loadfrom("has_autorestart", 36873697).}
  proc `autorestartDelay=`*(self: Ref[AnimationNodeOneShot]; time: float64) {.loadfrom("set_autorestart_delay", 373806689).}
  proc autorestartDelay*(self: Ref[AnimationNodeOneShot]): float64 {.loadfrom("get_autorestart_delay", 1740695150).}
  proc `autorestartRandomDelay=`*(self: Ref[AnimationNodeOneShot]; time: float64) {.loadfrom("set_autorestart_random_delay", 373806689).}
  proc autorestartRandomDelay*(self: Ref[AnimationNodeOneShot]): float64 {.loadfrom("get_autorestart_random_delay", 1740695150).}
  proc `mixMode=`*(self: Ref[AnimationNodeOneShot]; mode: AnimationNodeOneShot|>MixMode) {.loadfrom("set_mix_mode", 1018899799).}
  proc mixMode*(self: Ref[AnimationNodeOneShot]): AnimationNodeOneShot|>MixMode {.loadfrom("get_mix_mode", 3076550526).}

# AnimationNodeSub2
define_godot_engine_class_essencials(AnimationNodeSub2, AnimationNodeSync)

# AnimationNodeTransition
define_godot_engine_class_essencials(AnimationNodeTransition, AnimationNodeSync)
AnimationNodeTransition.memberProcs:
  proc `inputCount=`*(self: Ref[AnimationNodeTransition]; inputCount: int32) {.loadfrom("set_input_count", 1286410249).}
  proc setInputAsAutoAdvance*(self: Ref[AnimationNodeTransition]; input: int32; enable: Bool) {.loadfrom("set_input_as_auto_advance", 300928843).}
  proc isInputSetAsAutoAdvance*(self: Ref[AnimationNodeTransition]; input: int32): Bool {.loadfrom("is_input_set_as_auto_advance", 1116898809).}
  proc setInputReset*(self: Ref[AnimationNodeTransition]; input: int32; enable: Bool) {.loadfrom("set_input_reset", 300928843).}
  proc isInputReset*(self: Ref[AnimationNodeTransition]; input: int32): Bool {.loadfrom("is_input_reset", 1116898809).}
  proc `xfadeTime=`*(self: Ref[AnimationNodeTransition]; time: float64) {.loadfrom("set_xfade_time", 373806689).}
  proc xfadeTime*(self: Ref[AnimationNodeTransition]): float64 {.loadfrom("get_xfade_time", 1740695150).}
  proc `xfadeCurve=`*(self: Ref[AnimationNodeTransition]; curve: Ref[Curve]) {.loadfrom("set_xfade_curve", 270443179).}
  proc xfadeCurve*(self: Ref[AnimationNodeTransition]): Ref[Curve] {.loadfrom("get_xfade_curve", 2460114913).}
  proc `allowTransitionToSelf=`*(self: Ref[AnimationNodeTransition]; enable: Bool) {.loadfrom("set_allow_transition_to_self", 2586408642).}
  proc isAllowTransitionToSelf*(self: Ref[AnimationNodeTransition]): Bool {.loadfrom("is_allow_transition_to_self", 36873697).}

# AnimationNodeAnimation
define_godot_engine_class_essencials(AnimationNodeAnimation, AnimationRootNode)
AnimationNodeAnimation.memberProcs:
  proc `animation=`*(self: Ref[AnimationNodeAnimation]; name: StringName) {.loadfrom("set_animation", 3304788590).}
  proc animation*(self: Ref[AnimationNodeAnimation]): StringName {.loadfrom("get_animation", 2002593661).}
  proc `playMode=`*(self: Ref[AnimationNodeAnimation]; mode: AnimationNodeAnimation|>PlayMode) {.loadfrom("set_play_mode", 3347718873).}
  proc playMode*(self: Ref[AnimationNodeAnimation]): AnimationNodeAnimation|>PlayMode {.loadfrom("get_play_mode", 2061244637).}

# AnimationNodeBlendSpace1D
define_godot_engine_class_essencials(AnimationNodeBlendSpace1D, AnimationRootNode)
AnimationNodeBlendSpace1D.memberProcs:
  proc addBlendPoint*(self: Ref[AnimationNodeBlendSpace1D]; node: Ref[AnimationRootNode]; pos: Float; atIndex: int32 = -1) {.loadfrom("add_blend_point", 4069484420).}
  proc setBlendPointPosition*(self: Ref[AnimationNodeBlendSpace1D]; point: int32; pos: Float) {.loadfrom("set_blend_point_position", 1602489585).}
  proc getBlendPointPosition*(self: Ref[AnimationNodeBlendSpace1D]; point: int32): Float {.loadfrom("get_blend_point_position", 2339986948).}
  proc setBlendPointNode*(self: Ref[AnimationNodeBlendSpace1D]; point: int32; node: Ref[AnimationRootNode]) {.loadfrom("set_blend_point_node", 4240341528).}
  proc getBlendPointNode*(self: Ref[AnimationNodeBlendSpace1D]; point: int32): Ref[AnimationRootNode] {.loadfrom("get_blend_point_node", 665599029).}
  proc removeBlendPoint*(self: Ref[AnimationNodeBlendSpace1D]; point: int32) {.loadfrom("remove_blend_point", 1286410249).}
  proc getBlendPointCount*(self: Ref[AnimationNodeBlendSpace1D]): int32 {.loadfrom("get_blend_point_count", 3905245786).}
  proc `minSpace=`*(self: Ref[AnimationNodeBlendSpace1D]; minSpace: Float) {.loadfrom("set_min_space", 373806689).}
  proc minSpace*(self: Ref[AnimationNodeBlendSpace1D]): Float {.loadfrom("get_min_space", 1740695150).}
  proc `maxSpace=`*(self: Ref[AnimationNodeBlendSpace1D]; maxSpace: Float) {.loadfrom("set_max_space", 373806689).}
  proc maxSpace*(self: Ref[AnimationNodeBlendSpace1D]): Float {.loadfrom("get_max_space", 1740695150).}
  proc `snap=`*(self: Ref[AnimationNodeBlendSpace1D]; snap: Float) {.loadfrom("set_snap", 373806689).}
  proc snap*(self: Ref[AnimationNodeBlendSpace1D]): Float {.loadfrom("get_snap", 1740695150).}
  proc `valueLabel=`*(self: Ref[AnimationNodeBlendSpace1D]; text: String) {.loadfrom("set_value_label", 83702148).}
  proc valueLabel*(self: Ref[AnimationNodeBlendSpace1D]): String {.loadfrom("get_value_label", 201670096).}
  proc `blendMode=`*(self: Ref[AnimationNodeBlendSpace1D]; mode: AnimationNodeBlendSpace1D|>BlendMode) {.loadfrom("set_blend_mode", 2600869457).}
  proc blendMode*(self: Ref[AnimationNodeBlendSpace1D]): AnimationNodeBlendSpace1D|>BlendMode {.loadfrom("get_blend_mode", 1547667849).}
  proc `useSync=`*(self: Ref[AnimationNodeBlendSpace1D]; enable: Bool) {.loadfrom("set_use_sync", 2586408642).}
  proc isUsingSync*(self: Ref[AnimationNodeBlendSpace1D]): Bool {.loadfrom("is_using_sync", 36873697).}

# AnimationNodeBlendSpace2D
define_godot_engine_class_essencials(AnimationNodeBlendSpace2D, AnimationRootNode)
AnimationNodeBlendSpace2D.memberProcs:
  proc addBlendPoint*(self: Ref[AnimationNodeBlendSpace2D]; node: Ref[AnimationRootNode]; pos: Vector2; atIndex: int32 = -1) {.loadfrom("add_blend_point", 1533588937).}
  proc setBlendPointPosition*(self: Ref[AnimationNodeBlendSpace2D]; point: int32; pos: Vector2) {.loadfrom("set_blend_point_position", 163021252).}
  proc getBlendPointPosition*(self: Ref[AnimationNodeBlendSpace2D]; point: int32): Vector2 {.loadfrom("get_blend_point_position", 2299179447).}
  proc setBlendPointNode*(self: Ref[AnimationNodeBlendSpace2D]; point: int32; node: Ref[AnimationRootNode]) {.loadfrom("set_blend_point_node", 4240341528).}
  proc getBlendPointNode*(self: Ref[AnimationNodeBlendSpace2D]; point: int32): Ref[AnimationRootNode] {.loadfrom("get_blend_point_node", 665599029).}
  proc removeBlendPoint*(self: Ref[AnimationNodeBlendSpace2D]; point: int32) {.loadfrom("remove_blend_point", 1286410249).}
  proc getBlendPointCount*(self: Ref[AnimationNodeBlendSpace2D]): int32 {.loadfrom("get_blend_point_count", 3905245786).}
  proc addTriangle*(self: Ref[AnimationNodeBlendSpace2D]; x: int32; y: int32; z: int32; atIndex: int32 = -1) {.loadfrom("add_triangle", 642454959).}
  proc getTrianglePoint*(self: Ref[AnimationNodeBlendSpace2D]; triangle: int32; point: int32): int32 {.loadfrom("get_triangle_point", 50157827).}
  proc removeTriangle*(self: Ref[AnimationNodeBlendSpace2D]; triangle: int32) {.loadfrom("remove_triangle", 1286410249).}
  proc getTriangleCount*(self: Ref[AnimationNodeBlendSpace2D]): int32 {.loadfrom("get_triangle_count", 3905245786).}
  proc `minSpace=`*(self: Ref[AnimationNodeBlendSpace2D]; minSpace: Vector2) {.loadfrom("set_min_space", 743155724).}
  proc minSpace*(self: Ref[AnimationNodeBlendSpace2D]): Vector2 {.loadfrom("get_min_space", 3341600327).}
  proc `maxSpace=`*(self: Ref[AnimationNodeBlendSpace2D]; maxSpace: Vector2) {.loadfrom("set_max_space", 743155724).}
  proc maxSpace*(self: Ref[AnimationNodeBlendSpace2D]): Vector2 {.loadfrom("get_max_space", 3341600327).}
  proc `snap=`*(self: Ref[AnimationNodeBlendSpace2D]; snap: Vector2) {.loadfrom("set_snap", 743155724).}
  proc snap*(self: Ref[AnimationNodeBlendSpace2D]): Vector2 {.loadfrom("get_snap", 3341600327).}
  proc `xLabel=`*(self: Ref[AnimationNodeBlendSpace2D]; text: String) {.loadfrom("set_x_label", 83702148).}
  proc xLabel*(self: Ref[AnimationNodeBlendSpace2D]): String {.loadfrom("get_x_label", 201670096).}
  proc `yLabel=`*(self: Ref[AnimationNodeBlendSpace2D]; text: String) {.loadfrom("set_y_label", 83702148).}
  proc yLabel*(self: Ref[AnimationNodeBlendSpace2D]): String {.loadfrom("get_y_label", 201670096).}
  proc `autoTriangles=`*(self: Ref[AnimationNodeBlendSpace2D]; enable: Bool) {.loadfrom("set_auto_triangles", 2586408642).}
  proc autoTriangles*(self: Ref[AnimationNodeBlendSpace2D]): Bool {.loadfrom("get_auto_triangles", 36873697).}
  proc `blendMode=`*(self: Ref[AnimationNodeBlendSpace2D]; mode: AnimationNodeBlendSpace2D|>BlendMode) {.loadfrom("set_blend_mode", 81193520).}
  proc blendMode*(self: Ref[AnimationNodeBlendSpace2D]): AnimationNodeBlendSpace2D|>BlendMode {.loadfrom("get_blend_mode", 1398433632).}
  proc `useSync=`*(self: Ref[AnimationNodeBlendSpace2D]; enable: Bool) {.loadfrom("set_use_sync", 2586408642).}
  proc isUsingSync*(self: Ref[AnimationNodeBlendSpace2D]): Bool {.loadfrom("is_using_sync", 36873697).}

# AnimationNodeBlendTree
define_godot_engine_class_essencials(AnimationNodeBlendTree, AnimationRootNode)
AnimationNodeBlendTree.memberProcs:
  proc addNode*(self: Ref[AnimationNodeBlendTree]; name: StringName; node: Ref[AnimationNode]; position: Vector2 = gdvec(0, 0)) {.loadfrom("add_node", 2055804584).}
  proc getNode*(self: Ref[AnimationNodeBlendTree]; name: StringName): Ref[AnimationNode] {.loadfrom("get_node", 625644256).}
  proc removeNode*(self: Ref[AnimationNodeBlendTree]; name: StringName) {.loadfrom("remove_node", 3304788590).}
  proc renameNode*(self: Ref[AnimationNodeBlendTree]; name: StringName; newName: StringName) {.loadfrom("rename_node", 3740211285).}
  proc hasNode*(self: Ref[AnimationNodeBlendTree]; name: StringName): Bool {.loadfrom("has_node", 2619796661).}
  proc connectNode*(self: Ref[AnimationNodeBlendTree]; inputNode: StringName; inputIndex: int32; outputNode: StringName) {.loadfrom("connect_node", 2168001410).}
  proc disconnectNode*(self: Ref[AnimationNodeBlendTree]; inputNode: StringName; inputIndex: int32) {.loadfrom("disconnect_node", 2415702435).}
  proc setNodePosition*(self: Ref[AnimationNodeBlendTree]; name: StringName; position: Vector2) {.loadfrom("set_node_position", 1999414630).}
  proc getNodePosition*(self: Ref[AnimationNodeBlendTree]; name: StringName): Vector2 {.loadfrom("get_node_position", 3100822709).}
  proc `graphOffset=`*(self: Ref[AnimationNodeBlendTree]; offset: Vector2) {.loadfrom("set_graph_offset", 743155724).}
  proc graphOffset*(self: Ref[AnimationNodeBlendTree]): Vector2 {.loadfrom("get_graph_offset", 3341600327).}

# AnimationNodeStateMachine
define_godot_engine_class_essencials(AnimationNodeStateMachine, AnimationRootNode)
AnimationNodeStateMachine.memberProcs:
  proc addNode*(self: Ref[AnimationNodeStateMachine]; name: StringName; node: Ref[AnimationNode]; position: Vector2 = gdvec(0, 0)) {.loadfrom("add_node", 2055804584).}
  proc replaceNode*(self: Ref[AnimationNodeStateMachine]; name: StringName; node: Ref[AnimationNode]) {.loadfrom("replace_node", 2559412862).}
  proc getNode*(self: Ref[AnimationNodeStateMachine]; name: StringName): Ref[AnimationNode] {.loadfrom("get_node", 625644256).}
  proc removeNode*(self: Ref[AnimationNodeStateMachine]; name: StringName) {.loadfrom("remove_node", 3304788590).}
  proc renameNode*(self: Ref[AnimationNodeStateMachine]; name: StringName; newName: StringName) {.loadfrom("rename_node", 3740211285).}
  proc hasNode*(self: Ref[AnimationNodeStateMachine]; name: StringName): Bool {.loadfrom("has_node", 2619796661).}
  proc getNodeName*(self: Ref[AnimationNodeStateMachine]; node: Ref[AnimationNode]): StringName {.loadfrom("get_node_name", 739213945).}
  proc setNodePosition*(self: Ref[AnimationNodeStateMachine]; name: StringName; position: Vector2) {.loadfrom("set_node_position", 1999414630).}
  proc getNodePosition*(self: Ref[AnimationNodeStateMachine]; name: StringName): Vector2 {.loadfrom("get_node_position", 3100822709).}
  proc hasTransition*(self: Ref[AnimationNodeStateMachine]; `from`: StringName; to: StringName): Bool {.loadfrom("has_transition", 471820014).}
  proc addTransition*(self: Ref[AnimationNodeStateMachine]; `from`: StringName; to: StringName; transition: Ref[AnimationNodeStateMachineTransition]) {.loadfrom("add_transition", 795486887).}
  proc getTransition*(self: Ref[AnimationNodeStateMachine]; idx: int32): Ref[AnimationNodeStateMachineTransition] {.loadfrom("get_transition", 4192381260).}
  proc getTransitionFrom*(self: Ref[AnimationNodeStateMachine]; idx: int32): StringName {.loadfrom("get_transition_from", 659327637).}
  proc getTransitionTo*(self: Ref[AnimationNodeStateMachine]; idx: int32): StringName {.loadfrom("get_transition_to", 659327637).}
  proc getTransitionCount*(self: Ref[AnimationNodeStateMachine]): int32 {.loadfrom("get_transition_count", 3905245786).}
  proc removeTransitionByIndex*(self: Ref[AnimationNodeStateMachine]; idx: int32) {.loadfrom("remove_transition_by_index", 1286410249).}
  proc removeTransition*(self: Ref[AnimationNodeStateMachine]; `from`: StringName; to: StringName) {.loadfrom("remove_transition", 3740211285).}
  proc setGraphOffset*(self: Ref[AnimationNodeStateMachine]; offset: Vector2) {.loadfrom("set_graph_offset", 743155724).}
  proc getGraphOffset*(self: Ref[AnimationNodeStateMachine]): Vector2 {.loadfrom("get_graph_offset", 3341600327).}
  proc `stateMachineType=`*(self: Ref[AnimationNodeStateMachine]; stateMachineType: AnimationNodeStateMachine|>StateMachineType) {.loadfrom("set_state_machine_type", 2584759088).}
  proc stateMachineType*(self: Ref[AnimationNodeStateMachine]): AnimationNodeStateMachine|>StateMachineType {.loadfrom("get_state_machine_type", 1140726469).}
  proc `allowTransitionToSelf=`*(self: Ref[AnimationNodeStateMachine]; enable: Bool) {.loadfrom("set_allow_transition_to_self", 2586408642).}
  proc isAllowTransitionToSelf*(self: Ref[AnimationNodeStateMachine]): Bool {.loadfrom("is_allow_transition_to_self", 36873697).}
  proc `reends=`*(self: Ref[AnimationNodeStateMachine]; enable: Bool) {.loadfrom("set_reset_ends", 2586408642).}
  proc areEndsReset*(self: Ref[AnimationNodeStateMachine]): Bool {.loadfrom("are_ends_reset", 36873697).}

# AudioEffectEQ10
define_godot_engine_class_essencials(AudioEffectEQ10, AudioEffectEQ)

# AudioEffectEQ21
define_godot_engine_class_essencials(AudioEffectEQ21, AudioEffectEQ)

# AudioEffectEQ6
define_godot_engine_class_essencials(AudioEffectEQ6, AudioEffectEQ)

# AudioEffectBandLimitFilter
define_godot_engine_class_essencials(AudioEffectBandLimitFilter, AudioEffectFilter)

# AudioEffectBandPassFilter
define_godot_engine_class_essencials(AudioEffectBandPassFilter, AudioEffectFilter)

# AudioEffectHighPassFilter
define_godot_engine_class_essencials(AudioEffectHighPassFilter, AudioEffectFilter)

# AudioEffectHighShelfFilter
define_godot_engine_class_essencials(AudioEffectHighShelfFilter, AudioEffectFilter)

# AudioEffectLowPassFilter
define_godot_engine_class_essencials(AudioEffectLowPassFilter, AudioEffectFilter)

# AudioEffectLowShelfFilter
define_godot_engine_class_essencials(AudioEffectLowShelfFilter, AudioEffectFilter)

# AudioEffectNotchFilter
define_godot_engine_class_essencials(AudioEffectNotchFilter, AudioEffectFilter)

# InputEventScreenDrag
define_godot_engine_class_essencials(InputEventScreenDrag, InputEventFromWindow)
InputEventScreenDrag.memberProcs:
  proc `index=`*(self: Ref[InputEventScreenDrag]; index: int32) {.loadfrom("set_index", 1286410249).}
  proc index*(self: Ref[InputEventScreenDrag]): int32 {.loadfrom("get_index", 3905245786).}
  proc `tilt=`*(self: Ref[InputEventScreenDrag]; tilt: Vector2) {.loadfrom("set_tilt", 743155724).}
  proc tilt*(self: Ref[InputEventScreenDrag]): Vector2 {.loadfrom("get_tilt", 3341600327).}
  proc `pressure=`*(self: Ref[InputEventScreenDrag]; pressure: Float) {.loadfrom("set_pressure", 373806689).}
  proc pressure*(self: Ref[InputEventScreenDrag]): Float {.loadfrom("get_pressure", 1740695150).}
  proc `penInverted=`*(self: Ref[InputEventScreenDrag]; penInverted: Bool) {.loadfrom("set_pen_inverted", 2586408642).}
  proc penInverted*(self: Ref[InputEventScreenDrag]): Bool {.loadfrom("get_pen_inverted", 36873697).}
  proc `position=`*(self: Ref[InputEventScreenDrag]; position: Vector2) {.loadfrom("set_position", 743155724).}
  proc position*(self: Ref[InputEventScreenDrag]): Vector2 {.loadfrom("get_position", 3341600327).}
  proc `relative=`*(self: Ref[InputEventScreenDrag]; relative: Vector2) {.loadfrom("set_relative", 743155724).}
  proc relative*(self: Ref[InputEventScreenDrag]): Vector2 {.loadfrom("get_relative", 3341600327).}
  proc `velocity=`*(self: Ref[InputEventScreenDrag]; velocity: Vector2) {.loadfrom("set_velocity", 743155724).}
  proc velocity*(self: Ref[InputEventScreenDrag]): Vector2 {.loadfrom("get_velocity", 3341600327).}

# InputEventScreenTouch
define_godot_engine_class_essencials(InputEventScreenTouch, InputEventFromWindow)
InputEventScreenTouch.memberProcs:
  proc `index=`*(self: Ref[InputEventScreenTouch]; index: int32) {.loadfrom("set_index", 1286410249).}
  proc index*(self: Ref[InputEventScreenTouch]): int32 {.loadfrom("get_index", 3905245786).}
  proc `position=`*(self: Ref[InputEventScreenTouch]; position: Vector2) {.loadfrom("set_position", 743155724).}
  proc position*(self: Ref[InputEventScreenTouch]): Vector2 {.loadfrom("get_position", 3341600327).}
  proc `pressed=`*(self: Ref[InputEventScreenTouch]; pressed: Bool) {.loadfrom("set_pressed", 2586408642).}
  proc `canceled=`*(self: Ref[InputEventScreenTouch]; canceled: Bool) {.loadfrom("set_canceled", 2586408642).}
  proc `doubleTap=`*(self: Ref[InputEventScreenTouch]; doubleTap: Bool) {.loadfrom("set_double_tap", 2586408642).}
  proc isDoubleTap*(self: Ref[InputEventScreenTouch]): Bool {.loadfrom("is_double_tap", 36873697).}

# InputEventWithModifiers
define_godot_engine_class_essencials(InputEventWithModifiers, InputEventFromWindow)
InputEventWithModifiers.memberProcs:
  proc `commandOrControlAutoremap=`*(self: Ref[InputEventWithModifiers]; enable: Bool) {.loadfrom("set_command_or_control_autoremap", 2586408642).}
  proc isCommandOrControlAutoremap*(self: Ref[InputEventWithModifiers]): Bool {.loadfrom("is_command_or_control_autoremap", 36873697).}
  proc isCommandOrControlPressed*(self: Ref[InputEventWithModifiers]): Bool {.loadfrom("is_command_or_control_pressed", 36873697).}
  proc `altPressed=`*(self: Ref[InputEventWithModifiers]; pressed: Bool) {.loadfrom("set_alt_pressed", 2586408642).}
  proc isAltPressed*(self: Ref[InputEventWithModifiers]): Bool {.loadfrom("is_alt_pressed", 36873697).}
  proc `shiftPressed=`*(self: Ref[InputEventWithModifiers]; pressed: Bool) {.loadfrom("set_shift_pressed", 2586408642).}
  proc isShiftPressed*(self: Ref[InputEventWithModifiers]): Bool {.loadfrom("is_shift_pressed", 36873697).}
  proc `ctrlPressed=`*(self: Ref[InputEventWithModifiers]; pressed: Bool) {.loadfrom("set_ctrl_pressed", 2586408642).}
  proc isCtrlPressed*(self: Ref[InputEventWithModifiers]): Bool {.loadfrom("is_ctrl_pressed", 36873697).}
  proc `metaPressed=`*(self: Ref[InputEventWithModifiers]; pressed: Bool) {.loadfrom("set_meta_pressed", 2586408642).}
  proc isMetaPressed*(self: Ref[InputEventWithModifiers]): Bool {.loadfrom("is_meta_pressed", 36873697).}
  proc getModifiersMask*(self: Ref[InputEventWithModifiers]): set[KeyModifierMask] {.loadfrom("get_modifiers_mask", 1258259499).}

# ORMMaterial3D
define_godot_engine_class_essencials(ORMMaterial3D, BaseMaterial3D)

# StandardMaterial3D
define_godot_engine_class_essencials(StandardMaterial3D, BaseMaterial3D)

# BoxMesh
define_godot_engine_class_essencials(BoxMesh, PrimitiveMesh)
BoxMesh.memberProcs:
  proc `size=`*(self: Ref[BoxMesh]; size: Vector3) {.loadfrom("set_size", 3460891852).}
  proc size*(self: Ref[BoxMesh]): Vector3 {.loadfrom("get_size", 3360562783).}
  proc `subdivideWidth=`*(self: Ref[BoxMesh]; subdivide: int32) {.loadfrom("set_subdivide_width", 1286410249).}
  proc subdivideWidth*(self: Ref[BoxMesh]): int32 {.loadfrom("get_subdivide_width", 3905245786).}
  proc `subdivideHeight=`*(self: Ref[BoxMesh]; divisions: int32) {.loadfrom("set_subdivide_height", 1286410249).}
  proc subdivideHeight*(self: Ref[BoxMesh]): int32 {.loadfrom("get_subdivide_height", 3905245786).}
  proc `subdivideDepth=`*(self: Ref[BoxMesh]; divisions: int32) {.loadfrom("set_subdivide_depth", 1286410249).}
  proc subdivideDepth*(self: Ref[BoxMesh]): int32 {.loadfrom("get_subdivide_depth", 3905245786).}

# CapsuleMesh
define_godot_engine_class_essencials(CapsuleMesh, PrimitiveMesh)
CapsuleMesh.memberProcs:
  proc `radius=`*(self: Ref[CapsuleMesh]; radius: Float) {.loadfrom("set_radius", 373806689).}
  proc radius*(self: Ref[CapsuleMesh]): Float {.loadfrom("get_radius", 1740695150).}
  proc `height=`*(self: Ref[CapsuleMesh]; height: Float) {.loadfrom("set_height", 373806689).}
  proc height*(self: Ref[CapsuleMesh]): Float {.loadfrom("get_height", 1740695150).}
  proc `radialSegments=`*(self: Ref[CapsuleMesh]; segments: int32) {.loadfrom("set_radial_segments", 1286410249).}
  proc radialSegments*(self: Ref[CapsuleMesh]): int32 {.loadfrom("get_radial_segments", 3905245786).}
  proc `rings=`*(self: Ref[CapsuleMesh]; rings: int32) {.loadfrom("set_rings", 1286410249).}
  proc rings*(self: Ref[CapsuleMesh]): int32 {.loadfrom("get_rings", 3905245786).}

# CylinderMesh
define_godot_engine_class_essencials(CylinderMesh, PrimitiveMesh)
CylinderMesh.memberProcs:
  proc `topRadius=`*(self: Ref[CylinderMesh]; radius: Float) {.loadfrom("set_top_radius", 373806689).}
  proc topRadius*(self: Ref[CylinderMesh]): Float {.loadfrom("get_top_radius", 1740695150).}
  proc `bottomRadius=`*(self: Ref[CylinderMesh]; radius: Float) {.loadfrom("set_bottom_radius", 373806689).}
  proc bottomRadius*(self: Ref[CylinderMesh]): Float {.loadfrom("get_bottom_radius", 1740695150).}
  proc `height=`*(self: Ref[CylinderMesh]; height: Float) {.loadfrom("set_height", 373806689).}
  proc height*(self: Ref[CylinderMesh]): Float {.loadfrom("get_height", 1740695150).}
  proc `radialSegments=`*(self: Ref[CylinderMesh]; segments: int32) {.loadfrom("set_radial_segments", 1286410249).}
  proc radialSegments*(self: Ref[CylinderMesh]): int32 {.loadfrom("get_radial_segments", 3905245786).}
  proc `rings=`*(self: Ref[CylinderMesh]; rings: int32) {.loadfrom("set_rings", 1286410249).}
  proc rings*(self: Ref[CylinderMesh]): int32 {.loadfrom("get_rings", 3905245786).}
  proc `capTop=`*(self: Ref[CylinderMesh]; capTop: Bool) {.loadfrom("set_cap_top", 2586408642).}
  proc isCapTop*(self: Ref[CylinderMesh]): Bool {.loadfrom("is_cap_top", 36873697).}
  proc `capBottom=`*(self: Ref[CylinderMesh]; capBottom: Bool) {.loadfrom("set_cap_bottom", 2586408642).}
  proc isCapBottom*(self: Ref[CylinderMesh]): Bool {.loadfrom("is_cap_bottom", 36873697).}

# PlaneMesh
define_godot_engine_class_essencials(PlaneMesh, PrimitiveMesh)
PlaneMesh.memberProcs:
  proc `size=`*(self: Ref[PlaneMesh]; size: Vector2) {.loadfrom("set_size", 743155724).}
  proc size*(self: Ref[PlaneMesh]): Vector2 {.loadfrom("get_size", 3341600327).}
  proc `subdivideWidth=`*(self: Ref[PlaneMesh]; subdivide: int32) {.loadfrom("set_subdivide_width", 1286410249).}
  proc subdivideWidth*(self: Ref[PlaneMesh]): int32 {.loadfrom("get_subdivide_width", 3905245786).}
  proc `subdivideDepth=`*(self: Ref[PlaneMesh]; subdivide: int32) {.loadfrom("set_subdivide_depth", 1286410249).}
  proc subdivideDepth*(self: Ref[PlaneMesh]): int32 {.loadfrom("get_subdivide_depth", 3905245786).}
  proc `centerOffset=`*(self: Ref[PlaneMesh]; offset: Vector3) {.loadfrom("set_center_offset", 3460891852).}
  proc centerOffset*(self: Ref[PlaneMesh]): Vector3 {.loadfrom("get_center_offset", 3360562783).}
  proc `orientation=`*(self: Ref[PlaneMesh]; orientation: PlaneMesh|>Orientation) {.loadfrom("set_orientation", 2751399687).}
  proc orientation*(self: Ref[PlaneMesh]): PlaneMesh|>Orientation {.loadfrom("get_orientation", 3227599250).}

# PointMesh
define_godot_engine_class_essencials(PointMesh, PrimitiveMesh)

# PrismMesh
define_godot_engine_class_essencials(PrismMesh, PrimitiveMesh)
PrismMesh.memberProcs:
  proc `leftToRight=`*(self: Ref[PrismMesh]; leftToRight: Float) {.loadfrom("set_left_to_right", 373806689).}
  proc leftToRight*(self: Ref[PrismMesh]): Float {.loadfrom("get_left_to_right", 1740695150).}
  proc `size=`*(self: Ref[PrismMesh]; size: Vector3) {.loadfrom("set_size", 3460891852).}
  proc size*(self: Ref[PrismMesh]): Vector3 {.loadfrom("get_size", 3360562783).}
  proc `subdivideWidth=`*(self: Ref[PrismMesh]; segments: int32) {.loadfrom("set_subdivide_width", 1286410249).}
  proc subdivideWidth*(self: Ref[PrismMesh]): int32 {.loadfrom("get_subdivide_width", 3905245786).}
  proc `subdivideHeight=`*(self: Ref[PrismMesh]; segments: int32) {.loadfrom("set_subdivide_height", 1286410249).}
  proc subdivideHeight*(self: Ref[PrismMesh]): int32 {.loadfrom("get_subdivide_height", 3905245786).}
  proc `subdivideDepth=`*(self: Ref[PrismMesh]; segments: int32) {.loadfrom("set_subdivide_depth", 1286410249).}
  proc subdivideDepth*(self: Ref[PrismMesh]): int32 {.loadfrom("get_subdivide_depth", 3905245786).}

# RibbonTrailMesh
define_godot_engine_class_essencials(RibbonTrailMesh, PrimitiveMesh)
RibbonTrailMesh.memberProcs:
  proc `size=`*(self: Ref[RibbonTrailMesh]; size: Float) {.loadfrom("set_size", 373806689).}
  proc size*(self: Ref[RibbonTrailMesh]): Float {.loadfrom("get_size", 1740695150).}
  proc `sections=`*(self: Ref[RibbonTrailMesh]; sections: int32) {.loadfrom("set_sections", 1286410249).}
  proc sections*(self: Ref[RibbonTrailMesh]): int32 {.loadfrom("get_sections", 3905245786).}
  proc `sectionLength=`*(self: Ref[RibbonTrailMesh]; sectionLength: Float) {.loadfrom("set_section_length", 373806689).}
  proc sectionLength*(self: Ref[RibbonTrailMesh]): Float {.loadfrom("get_section_length", 1740695150).}
  proc `sectionSegments=`*(self: Ref[RibbonTrailMesh]; sectionSegments: int32) {.loadfrom("set_section_segments", 1286410249).}
  proc sectionSegments*(self: Ref[RibbonTrailMesh]): int32 {.loadfrom("get_section_segments", 3905245786).}
  proc `curve=`*(self: Ref[RibbonTrailMesh]; curve: Ref[Curve]) {.loadfrom("set_curve", 270443179).}
  proc curve*(self: Ref[RibbonTrailMesh]): Ref[Curve] {.loadfrom("get_curve", 2460114913).}
  proc `shape=`*(self: Ref[RibbonTrailMesh]; shape: RibbonTrailMesh|>Shape) {.loadfrom("set_shape", 1684440262).}
  proc shape*(self: Ref[RibbonTrailMesh]): RibbonTrailMesh|>Shape {.loadfrom("get_shape", 1317484155).}

# SphereMesh
define_godot_engine_class_essencials(SphereMesh, PrimitiveMesh)
SphereMesh.memberProcs:
  proc `radius=`*(self: Ref[SphereMesh]; radius: Float) {.loadfrom("set_radius", 373806689).}
  proc radius*(self: Ref[SphereMesh]): Float {.loadfrom("get_radius", 1740695150).}
  proc `height=`*(self: Ref[SphereMesh]; height: Float) {.loadfrom("set_height", 373806689).}
  proc height*(self: Ref[SphereMesh]): Float {.loadfrom("get_height", 1740695150).}
  proc `radialSegments=`*(self: Ref[SphereMesh]; radialSegments: int32) {.loadfrom("set_radial_segments", 1286410249).}
  proc radialSegments*(self: Ref[SphereMesh]): int32 {.loadfrom("get_radial_segments", 3905245786).}
  proc `rings=`*(self: Ref[SphereMesh]; rings: int32) {.loadfrom("set_rings", 1286410249).}
  proc rings*(self: Ref[SphereMesh]): int32 {.loadfrom("get_rings", 3905245786).}
  proc `isHemisphere=`*(self: Ref[SphereMesh]; isHemisphere: Bool) {.loadfrom("set_is_hemisphere", 2586408642).}
  proc isHemisphere*(self: Ref[SphereMesh]): Bool {.loadfrom("get_is_hemisphere", 36873697).}

# TextMesh
define_godot_engine_class_essencials(TextMesh, PrimitiveMesh)
TextMesh.memberProcs:
  proc `horizontalAlignment=`*(self: Ref[TextMesh]; alignment: HorizontalAlignment) {.loadfrom("set_horizontal_alignment", 2312603777).}
  proc horizontalAlignment*(self: Ref[TextMesh]): HorizontalAlignment {.loadfrom("get_horizontal_alignment", 341400642).}
  proc `verticalAlignment=`*(self: Ref[TextMesh]; alignment: VerticalAlignment) {.loadfrom("set_vertical_alignment", 1796458609).}
  proc verticalAlignment*(self: Ref[TextMesh]): VerticalAlignment {.loadfrom("get_vertical_alignment", 3274884059).}
  proc `text=`*(self: Ref[TextMesh]; text: String) {.loadfrom("set_text", 83702148).}
  proc text*(self: Ref[TextMesh]): String {.loadfrom("get_text", 201670096).}
  proc `font=`*(self: Ref[TextMesh]; font: Ref[Font]) {.loadfrom("set_font", 1262170328).}
  proc font*(self: Ref[TextMesh]): Ref[Font] {.loadfrom("get_font", 3229501585).}
  proc `fontSize=`*(self: Ref[TextMesh]; fontSize: int32) {.loadfrom("set_font_size", 1286410249).}
  proc fontSize*(self: Ref[TextMesh]): int32 {.loadfrom("get_font_size", 3905245786).}
  proc `lineSpacing=`*(self: Ref[TextMesh]; lineSpacing: Float) {.loadfrom("set_line_spacing", 373806689).}
  proc lineSpacing*(self: Ref[TextMesh]): Float {.loadfrom("get_line_spacing", 1740695150).}
  proc `autowrapMode=`*(self: Ref[TextMesh]; autowrapMode: TextServer|>AutowrapMode) {.loadfrom("set_autowrap_mode", 3289138044).}
  proc autowrapMode*(self: Ref[TextMesh]): TextServer|>AutowrapMode {.loadfrom("get_autowrap_mode", 1549071663).}
  proc `justificationFlags=`*(self: Ref[TextMesh]; justificationFlags: set[TextServer|>JustificationFlag]) {.loadfrom("set_justification_flags", 2877345813).}
  proc justificationFlags*(self: Ref[TextMesh]): set[TextServer|>JustificationFlag] {.loadfrom("get_justification_flags", 1583363614).}
  proc `depth=`*(self: Ref[TextMesh]; depth: Float) {.loadfrom("set_depth", 373806689).}
  proc depth*(self: Ref[TextMesh]): Float {.loadfrom("get_depth", 1740695150).}
  proc `width=`*(self: Ref[TextMesh]; width: Float) {.loadfrom("set_width", 373806689).}
  proc width*(self: Ref[TextMesh]): Float {.loadfrom("get_width", 1740695150).}
  proc `pixelSize=`*(self: Ref[TextMesh]; pixelSize: Float) {.loadfrom("set_pixel_size", 373806689).}
  proc pixelSize*(self: Ref[TextMesh]): Float {.loadfrom("get_pixel_size", 1740695150).}
  proc `offset=`*(self: Ref[TextMesh]; offset: Vector2) {.loadfrom("set_offset", 743155724).}
  proc offset*(self: Ref[TextMesh]): Vector2 {.loadfrom("get_offset", 3341600327).}
  proc `curveStep=`*(self: Ref[TextMesh]; curveStep: Float) {.loadfrom("set_curve_step", 373806689).}
  proc curveStep*(self: Ref[TextMesh]): Float {.loadfrom("get_curve_step", 1740695150).}
  proc `textDirection=`*(self: Ref[TextMesh]; direction: TextServer|>Direction) {.loadfrom("set_text_direction", 1418190634).}
  proc textDirection*(self: Ref[TextMesh]): TextServer|>Direction {.loadfrom("get_text_direction", 2516697328).}
  proc `language=`*(self: Ref[TextMesh]; language: String) {.loadfrom("set_language", 83702148).}
  proc language*(self: Ref[TextMesh]): String {.loadfrom("get_language", 201670096).}
  proc `structuredTextBidiOverride=`*(self: Ref[TextMesh]; parser: TextServer|>StructuredTextParser) {.loadfrom("set_structured_text_bidi_override", 55961453).}
  proc structuredTextBidiOverride*(self: Ref[TextMesh]): TextServer|>StructuredTextParser {.loadfrom("get_structured_text_bidi_override", 3385126229).}
  proc `structuredTextBidiOverrideOptions=`*(self: Ref[TextMesh]; args: Array) {.loadfrom("set_structured_text_bidi_override_options", 381264803).}
  proc structuredTextBidiOverrideOptions*(self: Ref[TextMesh]): Array {.loadfrom("get_structured_text_bidi_override_options", 3995934104).}
  proc `uppercase=`*(self: Ref[TextMesh]; enable: Bool) {.loadfrom("set_uppercase", 2586408642).}
  proc isUppercase*(self: Ref[TextMesh]): Bool {.loadfrom("is_uppercase", 36873697).}

# TorusMesh
define_godot_engine_class_essencials(TorusMesh, PrimitiveMesh)
TorusMesh.memberProcs:
  proc `innerRadius=`*(self: Ref[TorusMesh]; radius: Float) {.loadfrom("set_inner_radius", 373806689).}
  proc innerRadius*(self: Ref[TorusMesh]): Float {.loadfrom("get_inner_radius", 1740695150).}
  proc `outerRadius=`*(self: Ref[TorusMesh]; radius: Float) {.loadfrom("set_outer_radius", 373806689).}
  proc outerRadius*(self: Ref[TorusMesh]): Float {.loadfrom("get_outer_radius", 1740695150).}
  proc `rings=`*(self: Ref[TorusMesh]; rings: int32) {.loadfrom("set_rings", 1286410249).}
  proc rings*(self: Ref[TorusMesh]): int32 {.loadfrom("get_rings", 3905245786).}
  proc `ringSegments=`*(self: Ref[TorusMesh]; rings: int32) {.loadfrom("set_ring_segments", 1286410249).}
  proc ringSegments*(self: Ref[TorusMesh]): int32 {.loadfrom("get_ring_segments", 3905245786).}

# TubeTrailMesh
define_godot_engine_class_essencials(TubeTrailMesh, PrimitiveMesh)
TubeTrailMesh.memberProcs:
  proc `radius=`*(self: Ref[TubeTrailMesh]; radius: Float) {.loadfrom("set_radius", 373806689).}
  proc radius*(self: Ref[TubeTrailMesh]): Float {.loadfrom("get_radius", 1740695150).}
  proc `radialSteps=`*(self: Ref[TubeTrailMesh]; radialSteps: int32) {.loadfrom("set_radial_steps", 1286410249).}
  proc radialSteps*(self: Ref[TubeTrailMesh]): int32 {.loadfrom("get_radial_steps", 3905245786).}
  proc `sections=`*(self: Ref[TubeTrailMesh]; sections: int32) {.loadfrom("set_sections", 1286410249).}
  proc sections*(self: Ref[TubeTrailMesh]): int32 {.loadfrom("get_sections", 3905245786).}
  proc `sectionLength=`*(self: Ref[TubeTrailMesh]; sectionLength: Float) {.loadfrom("set_section_length", 373806689).}
  proc sectionLength*(self: Ref[TubeTrailMesh]): Float {.loadfrom("get_section_length", 1740695150).}
  proc `sectionRings=`*(self: Ref[TubeTrailMesh]; sectionRings: int32) {.loadfrom("set_section_rings", 1286410249).}
  proc sectionRings*(self: Ref[TubeTrailMesh]): int32 {.loadfrom("get_section_rings", 3905245786).}
  proc `capTop=`*(self: Ref[TubeTrailMesh]; capTop: Bool) {.loadfrom("set_cap_top", 2586408642).}
  proc isCapTop*(self: Ref[TubeTrailMesh]): Bool {.loadfrom("is_cap_top", 36873697).}
  proc `capBottom=`*(self: Ref[TubeTrailMesh]; capBottom: Bool) {.loadfrom("set_cap_bottom", 2586408642).}
  proc isCapBottom*(self: Ref[TubeTrailMesh]): Bool {.loadfrom("is_cap_bottom", 36873697).}
  proc `curve=`*(self: Ref[TubeTrailMesh]; curve: Ref[Curve]) {.loadfrom("set_curve", 270443179).}
  proc curve*(self: Ref[TubeTrailMesh]): Ref[Curve] {.loadfrom("get_curve", 2460114913).}

# AnimatedTexture
define_godot_engine_class_essencials(AnimatedTexture, Texture2D)
AnimatedTexture.memberProcs:
  proc `frames=`*(self: Ref[AnimatedTexture]; frames: int32) {.loadfrom("set_frames", 1286410249).}
  proc frames*(self: Ref[AnimatedTexture]): int32 {.loadfrom("get_frames", 3905245786).}
  proc `currentFrame=`*(self: Ref[AnimatedTexture]; frame: int32) {.loadfrom("set_current_frame", 1286410249).}
  proc currentFrame*(self: Ref[AnimatedTexture]): int32 {.loadfrom("get_current_frame", 3905245786).}
  proc `pause=`*(self: Ref[AnimatedTexture]; pause: Bool) {.loadfrom("set_pause", 2586408642).}
  proc pause*(self: Ref[AnimatedTexture]): Bool {.loadfrom("get_pause", 36873697).}
  proc `oneShot=`*(self: Ref[AnimatedTexture]; oneShot: Bool) {.loadfrom("set_one_shot", 2586408642).}
  proc oneShot*(self: Ref[AnimatedTexture]): Bool {.loadfrom("get_one_shot", 36873697).}
  proc `speedScale=`*(self: Ref[AnimatedTexture]; scale: Float) {.loadfrom("set_speed_scale", 373806689).}
  proc speedScale*(self: Ref[AnimatedTexture]): Float {.loadfrom("get_speed_scale", 1740695150).}
  proc setFrameTexture*(self: Ref[AnimatedTexture]; frame: int32; texture: Ref[Texture2D]) {.loadfrom("set_frame_texture", 666127730).}
  proc getFrameTexture*(self: Ref[AnimatedTexture]; frame: int32): Ref[Texture2D] {.loadfrom("get_frame_texture", 3536238170).}
  proc setFrameDuration*(self: Ref[AnimatedTexture]; frame: int32; duration: Float) {.loadfrom("set_frame_duration", 1602489585).}
  proc getFrameDuration*(self: Ref[AnimatedTexture]; frame: int32): Float {.loadfrom("get_frame_duration", 2339986948).}

# AtlasTexture
define_godot_engine_class_essencials(AtlasTexture, Texture2D)
AtlasTexture.memberProcs:
  proc `atlas=`*(self: Ref[AtlasTexture]; atlas: Ref[Texture2D]) {.loadfrom("set_atlas", 4051416890).}
  proc atlas*(self: Ref[AtlasTexture]): Ref[Texture2D] {.loadfrom("get_atlas", 3635182373).}
  proc `region=`*(self: Ref[AtlasTexture]; region: Rect2) {.loadfrom("set_region", 2046264180).}
  proc region*(self: Ref[AtlasTexture]): Rect2 {.loadfrom("get_region", 1639390495).}
  proc `margin=`*(self: Ref[AtlasTexture]; margin: Rect2) {.loadfrom("set_margin", 2046264180).}
  proc margin*(self: Ref[AtlasTexture]): Rect2 {.loadfrom("get_margin", 1639390495).}
  proc `filterClip=`*(self: Ref[AtlasTexture]; enable: Bool) {.loadfrom("set_filter_clip", 2586408642).}
  proc hasFilterClip*(self: Ref[AtlasTexture]): Bool {.loadfrom("has_filter_clip", 36873697).}

# CameraTexture
define_godot_engine_class_essencials(CameraTexture, Texture2D)
CameraTexture.memberProcs:
  proc `cameraFeedId=`*(self: Ref[CameraTexture]; feedId: int32) {.loadfrom("set_camera_feed_id", 1286410249).}
  proc cameraFeedId*(self: Ref[CameraTexture]): int32 {.loadfrom("get_camera_feed_id", 3905245786).}
  proc `whichFeed=`*(self: Ref[CameraTexture]; whichFeed: CameraServer|>FeedImage) {.loadfrom("set_which_feed", 1595299230).}
  proc whichFeed*(self: Ref[CameraTexture]): CameraServer|>FeedImage {.loadfrom("get_which_feed", 91039457).}
  proc `cameraActive=`*(self: Ref[CameraTexture]; active: Bool) {.loadfrom("set_camera_active", 2586408642).}
  proc cameraActive*(self: Ref[CameraTexture]): Bool {.loadfrom("get_camera_active", 36873697).}

# CanvasTexture
define_godot_engine_class_essencials(CanvasTexture, Texture2D)
CanvasTexture.memberProcs:
  proc `diffuseTexture=`*(self: Ref[CanvasTexture]; texture: Ref[Texture2D]) {.loadfrom("set_diffuse_texture", 4051416890).}
  proc diffuseTexture*(self: Ref[CanvasTexture]): Ref[Texture2D] {.loadfrom("get_diffuse_texture", 3635182373).}
  proc `normalTexture=`*(self: Ref[CanvasTexture]; texture: Ref[Texture2D]) {.loadfrom("set_normal_texture", 4051416890).}
  proc normalTexture*(self: Ref[CanvasTexture]): Ref[Texture2D] {.loadfrom("get_normal_texture", 3635182373).}
  proc `specularTexture=`*(self: Ref[CanvasTexture]; texture: Ref[Texture2D]) {.loadfrom("set_specular_texture", 4051416890).}
  proc specularTexture*(self: Ref[CanvasTexture]): Ref[Texture2D] {.loadfrom("get_specular_texture", 3635182373).}
  proc `specularColor=`*(self: Ref[CanvasTexture]; color: Color) {.loadfrom("set_specular_color", 2920490490).}
  proc specularColor*(self: Ref[CanvasTexture]): Color {.loadfrom("get_specular_color", 3444240500).}
  proc `specularShininess=`*(self: Ref[CanvasTexture]; shininess: Float) {.loadfrom("set_specular_shininess", 373806689).}
  proc specularShininess*(self: Ref[CanvasTexture]): Float {.loadfrom("get_specular_shininess", 1740695150).}
  proc `textureFilter=`*(self: Ref[CanvasTexture]; filter: CanvasItem|>TextureFilter) {.loadfrom("set_texture_filter", 1037999706).}
  proc textureFilter*(self: Ref[CanvasTexture]): CanvasItem|>TextureFilter {.loadfrom("get_texture_filter", 121960042).}
  proc `textureRepeat=`*(self: Ref[CanvasTexture]; repeat: CanvasItem|>TextureRepeat) {.loadfrom("set_texture_repeat", 1716472974).}
  proc textureRepeat*(self: Ref[CanvasTexture]): CanvasItem|>TextureRepeat {.loadfrom("get_texture_repeat", 2667158319).}

# CompressedTexture2D
define_godot_engine_class_essencials(CompressedTexture2D, Texture2D)
CompressedTexture2D.memberProcs:
  proc `load=`*(self: Ref[CompressedTexture2D]; path: String): Error {.loadfrom("load", 166001499).}
  proc loadPath*(self: Ref[CompressedTexture2D]): String {.loadfrom("get_load_path", 201670096).}

# CurveTexture
define_godot_engine_class_essencials(CurveTexture, Texture2D)
CurveTexture.memberProcs:
  proc `width=`*(self: Ref[CurveTexture]; width: int32) {.loadfrom("set_width", 1286410249).}
  proc `curve=`*(self: Ref[CurveTexture]; curve: Ref[Curve]) {.loadfrom("set_curve", 270443179).}
  proc curve*(self: Ref[CurveTexture]): Ref[Curve] {.loadfrom("get_curve", 2460114913).}
  proc `textureMode=`*(self: Ref[CurveTexture]; textureMode: CurveTexture|>TextureMode) {.loadfrom("set_texture_mode", 1321955367).}
  proc textureMode*(self: Ref[CurveTexture]): CurveTexture|>TextureMode {.loadfrom("get_texture_mode", 715756376).}

# CurveXYZTexture
define_godot_engine_class_essencials(CurveXYZTexture, Texture2D)
CurveXYZTexture.memberProcs:
  proc `width=`*(self: Ref[CurveXYZTexture]; width: int32) {.loadfrom("set_width", 1286410249).}
  proc `curveX=`*(self: Ref[CurveXYZTexture]; curve: Ref[Curve]) {.loadfrom("set_curve_x", 270443179).}
  proc curveX*(self: Ref[CurveXYZTexture]): Ref[Curve] {.loadfrom("get_curve_x", 2460114913).}
  proc `curveY=`*(self: Ref[CurveXYZTexture]; curve: Ref[Curve]) {.loadfrom("set_curve_y", 270443179).}
  proc curveY*(self: Ref[CurveXYZTexture]): Ref[Curve] {.loadfrom("get_curve_y", 2460114913).}
  proc `curveZ=`*(self: Ref[CurveXYZTexture]; curve: Ref[Curve]) {.loadfrom("set_curve_z", 270443179).}
  proc curveZ*(self: Ref[CurveXYZTexture]): Ref[Curve] {.loadfrom("get_curve_z", 2460114913).}

# GradientTexture1D
define_godot_engine_class_essencials(GradientTexture1D, Texture2D)
GradientTexture1D.memberProcs:
  proc `gradient=`*(self: Ref[GradientTexture1D]; gradient: Ref[Gradient]) {.loadfrom("set_gradient", 2756054477).}
  proc gradient*(self: Ref[GradientTexture1D]): Ref[Gradient] {.loadfrom("get_gradient", 132272999).}
  proc `width=`*(self: Ref[GradientTexture1D]; width: int32) {.loadfrom("set_width", 1286410249).}
  proc `useHdr=`*(self: Ref[GradientTexture1D]; enabled: Bool) {.loadfrom("set_use_hdr", 2586408642).}
  proc isUsingHdr*(self: Ref[GradientTexture1D]): Bool {.loadfrom("is_using_hdr", 36873697).}

# GradientTexture2D
define_godot_engine_class_essencials(GradientTexture2D, Texture2D)
GradientTexture2D.memberProcs:
  proc `gradient=`*(self: Ref[GradientTexture2D]; gradient: Ref[Gradient]) {.loadfrom("set_gradient", 2756054477).}
  proc gradient*(self: Ref[GradientTexture2D]): Ref[Gradient] {.loadfrom("get_gradient", 132272999).}
  proc `width=`*(self: Ref[GradientTexture2D]; width: int32) {.loadfrom("set_width", 1286410249).}
  proc `height=`*(self: Ref[GradientTexture2D]; height: int32) {.loadfrom("set_height", 1286410249).}
  proc `useHdr=`*(self: Ref[GradientTexture2D]; enabled: Bool) {.loadfrom("set_use_hdr", 2586408642).}
  proc isUsingHdr*(self: Ref[GradientTexture2D]): Bool {.loadfrom("is_using_hdr", 36873697).}
  proc `fill=`*(self: Ref[GradientTexture2D]; fill: GradientTexture2D|>Fill) {.loadfrom("set_fill", 3623927636).}
  proc fill*(self: Ref[GradientTexture2D]): GradientTexture2D|>Fill {.loadfrom("get_fill", 1876227217).}
  proc `fillFrom=`*(self: Ref[GradientTexture2D]; fillFrom: Vector2) {.loadfrom("set_fill_from", 743155724).}
  proc fillFrom*(self: Ref[GradientTexture2D]): Vector2 {.loadfrom("get_fill_from", 3341600327).}
  proc `fillTo=`*(self: Ref[GradientTexture2D]; fillTo: Vector2) {.loadfrom("set_fill_to", 743155724).}
  proc fillTo*(self: Ref[GradientTexture2D]): Vector2 {.loadfrom("get_fill_to", 3341600327).}
  proc `repeat=`*(self: Ref[GradientTexture2D]; repeat: GradientTexture2D|>Repeat) {.loadfrom("set_repeat", 1357597002).}
  proc repeat*(self: Ref[GradientTexture2D]): GradientTexture2D|>Repeat {.loadfrom("get_repeat", 3351758665).}

# ImageTexture
define_godot_engine_class_essencials(ImageTexture, Texture2D)
ImageTexture.memberProcs:
  proc createFromImage*(image: Ref[Image]): Ref[ImageTexture] {.staticOf: ImageTexture, loadfrom("create_from_image", 2775144163).}
  proc getFormat*(self: Ref[ImageTexture]): Image|>Format {.loadfrom("get_format", 3847873762).}
  proc setImage*(self: Ref[ImageTexture]; image: Ref[Image]) {.loadfrom("set_image", 532598488).}
  proc update*(self: Ref[ImageTexture]; image: Ref[Image]) {.loadfrom("update", 532598488).}
  proc setSizeOverride*(self: Ref[ImageTexture]; size: Vector2i) {.loadfrom("set_size_override", 1130785943).}

# MeshTexture
define_godot_engine_class_essencials(MeshTexture, Texture2D)
MeshTexture.memberProcs:
  proc `mesh=`*(self: Ref[MeshTexture]; mesh: Ref[Mesh]) {.loadfrom("set_mesh", 194775623).}
  proc mesh*(self: Ref[MeshTexture]): Ref[Mesh] {.loadfrom("get_mesh", 1808005922).}
  proc `imageSize=`*(self: Ref[MeshTexture]; size: Vector2) {.loadfrom("set_image_size", 743155724).}
  proc imageSize*(self: Ref[MeshTexture]): Vector2 {.loadfrom("get_image_size", 3341600327).}
  proc `baseTexture=`*(self: Ref[MeshTexture]; texture: Ref[Texture2D]) {.loadfrom("set_base_texture", 4051416890).}
  proc baseTexture*(self: Ref[MeshTexture]): Ref[Texture2D] {.loadfrom("get_base_texture", 3635182373).}

# NoiseTexture2D
define_godot_engine_class_essencials(NoiseTexture2D, Texture2D)
NoiseTexture2D.memberProcs:
  proc `width=`*(self: Ref[NoiseTexture2D]; width: int32) {.loadfrom("set_width", 1286410249).}
  proc `height=`*(self: Ref[NoiseTexture2D]; height: int32) {.loadfrom("set_height", 1286410249).}
  proc `invert=`*(self: Ref[NoiseTexture2D]; invert: Bool) {.loadfrom("set_invert", 2586408642).}
  proc invert*(self: Ref[NoiseTexture2D]): Bool {.loadfrom("get_invert", 36873697).}
  proc `in3dSpace=`*(self: Ref[NoiseTexture2D]; enable: Bool) {.loadfrom("set_in_3d_space", 2586408642).}
  proc isIn3dSpace*(self: Ref[NoiseTexture2D]): Bool {.loadfrom("is_in_3d_space", 36873697).}
  proc `generateMipmaps=`*(self: Ref[NoiseTexture2D]; invert: Bool) {.loadfrom("set_generate_mipmaps", 2586408642).}
  proc isGeneratingMipmaps*(self: Ref[NoiseTexture2D]): Bool {.loadfrom("is_generating_mipmaps", 36873697).}
  proc `seamless=`*(self: Ref[NoiseTexture2D]; seamless: Bool) {.loadfrom("set_seamless", 2586408642).}
  proc seamless*(self: Ref[NoiseTexture2D]): Bool {.loadfrom("get_seamless", 2240911060).}
  proc `seamlessBlendSkirt=`*(self: Ref[NoiseTexture2D]; seamlessBlendSkirt: Float) {.loadfrom("set_seamless_blend_skirt", 373806689).}
  proc seamlessBlendSkirt*(self: Ref[NoiseTexture2D]): Float {.loadfrom("get_seamless_blend_skirt", 191475506).}
  proc `asNormalMap=`*(self: Ref[NoiseTexture2D]; asNormalMap: Bool) {.loadfrom("set_as_normal_map", 2586408642).}
  proc isNormalMap*(self: Ref[NoiseTexture2D]): Bool {.loadfrom("is_normal_map", 2240911060).}
  proc `bumpStrength=`*(self: Ref[NoiseTexture2D]; bumpStrength: Float) {.loadfrom("set_bump_strength", 373806689).}
  proc bumpStrength*(self: Ref[NoiseTexture2D]): Float {.loadfrom("get_bump_strength", 191475506).}
  proc `normalize=`*(self: Ref[NoiseTexture2D]; normalize: Bool) {.loadfrom("set_normalize", 2586408642).}
  proc isNormalized*(self: Ref[NoiseTexture2D]): Bool {.loadfrom("is_normalized", 36873697).}
  proc `colorRamp=`*(self: Ref[NoiseTexture2D]; gradient: Ref[Gradient]) {.loadfrom("set_color_ramp", 2756054477).}
  proc colorRamp*(self: Ref[NoiseTexture2D]): Ref[Gradient] {.loadfrom("get_color_ramp", 132272999).}
  proc `noise=`*(self: Ref[NoiseTexture2D]; noise: Ref[Noise]) {.loadfrom("set_noise", 4135492439).}
  proc noise*(self: Ref[NoiseTexture2D]): Ref[Noise] {.loadfrom("get_noise", 185851837).}

# PlaceholderTexture2D
define_godot_engine_class_essencials(PlaceholderTexture2D, Texture2D)
PlaceholderTexture2D.memberProcs:
  proc `size=`*(self: Ref[PlaceholderTexture2D]; size: Vector2) {.loadfrom("set_size", 743155724).}

# PortableCompressedTexture2D
define_godot_engine_class_essencials(PortableCompressedTexture2D, Texture2D)
PortableCompressedTexture2D.memberProcs:
  proc createFromImage*(self: Ref[PortableCompressedTexture2D]; image: Ref[Image]; compressionMode: PortableCompressedTexture2D|>CompressionMode; normalMap: Bool = false; lossyQuality: Float = 0.8) {.loadfrom("create_from_image", 97251393).}
  proc getFormat*(self: Ref[PortableCompressedTexture2D]): Image|>Format {.loadfrom("get_format", 3847873762).}
  proc getCompressionMode*(self: Ref[PortableCompressedTexture2D]): PortableCompressedTexture2D|>CompressionMode {.loadfrom("get_compression_mode", 3265612739).}
  proc `sizeOverride=`*(self: Ref[PortableCompressedTexture2D]; size: Vector2) {.loadfrom("set_size_override", 743155724).}
  proc sizeOverride*(self: Ref[PortableCompressedTexture2D]): Vector2 {.loadfrom("get_size_override", 3341600327).}
  proc `keepCompressedBuffer=`*(self: Ref[PortableCompressedTexture2D]; keep: Bool) {.loadfrom("set_keep_compressed_buffer", 2586408642).}
  proc isKeepingCompressedBuffer*(self: Ref[PortableCompressedTexture2D]): Bool {.loadfrom("is_keeping_compressed_buffer", 36873697).}
  proc setKeepAllCompressedBuffers*(keep: Bool) {.staticOf: PortableCompressedTexture2D, loadfrom("set_keep_all_compressed_buffers", 2586408642).}
  proc isKeepingAllCompressedBuffers*: Bool {.staticOf: PortableCompressedTexture2D, loadfrom("is_keeping_all_compressed_buffers", 2240911060).}

# ViewportTexture
define_godot_engine_class_essencials(ViewportTexture, Texture2D)
ViewportTexture.memberProcs:
  proc `viewportPathInScene=`*(self: Ref[ViewportTexture]; path: NodePath) {.loadfrom("set_viewport_path_in_scene", 1348162250).}
  proc viewportPathInScene*(self: Ref[ViewportTexture]): NodePath {.loadfrom("get_viewport_path_in_scene", 4075236667).}

# CompressedTexture3D
define_godot_engine_class_essencials(CompressedTexture3D, Texture3D)
CompressedTexture3D.memberProcs:
  proc `load=`*(self: Ref[CompressedTexture3D]; path: String): Error {.loadfrom("load", 166001499).}
  proc loadPath*(self: Ref[CompressedTexture3D]): String {.loadfrom("get_load_path", 201670096).}

# ImageTexture3D
define_godot_engine_class_essencials(ImageTexture3D, Texture3D)
ImageTexture3D.memberProcs:
  proc create*(self: Ref[ImageTexture3D]; format: Image|>Format; width: int32; height: int32; depth: int32; useMipmaps: Bool; data: TypedArray[Image]): Error {.loadfrom("create", 1130379827).}
  proc update*(self: Ref[ImageTexture3D]; data: TypedArray[Image]) {.loadfrom("update", 381264803).}

# NoiseTexture3D
define_godot_engine_class_essencials(NoiseTexture3D, Texture3D)
NoiseTexture3D.memberProcs:
  proc `width=`*(self: Ref[NoiseTexture3D]; width: int32) {.loadfrom("set_width", 1286410249).}
  proc `height=`*(self: Ref[NoiseTexture3D]; height: int32) {.loadfrom("set_height", 1286410249).}
  proc `depth=`*(self: Ref[NoiseTexture3D]; depth: int32) {.loadfrom("set_depth", 1286410249).}
  proc `invert=`*(self: Ref[NoiseTexture3D]; invert: Bool) {.loadfrom("set_invert", 2586408642).}
  proc invert*(self: Ref[NoiseTexture3D]): Bool {.loadfrom("get_invert", 36873697).}
  proc `seamless=`*(self: Ref[NoiseTexture3D]; seamless: Bool) {.loadfrom("set_seamless", 2586408642).}
  proc seamless*(self: Ref[NoiseTexture3D]): Bool {.loadfrom("get_seamless", 2240911060).}
  proc `seamlessBlendSkirt=`*(self: Ref[NoiseTexture3D]; seamlessBlendSkirt: Float) {.loadfrom("set_seamless_blend_skirt", 373806689).}
  proc seamlessBlendSkirt*(self: Ref[NoiseTexture3D]): Float {.loadfrom("get_seamless_blend_skirt", 191475506).}
  proc `normalize=`*(self: Ref[NoiseTexture3D]; normalize: Bool) {.loadfrom("set_normalize", 2586408642).}
  proc isNormalized*(self: Ref[NoiseTexture3D]): Bool {.loadfrom("is_normalized", 36873697).}
  proc `colorRamp=`*(self: Ref[NoiseTexture3D]; gradient: Ref[Gradient]) {.loadfrom("set_color_ramp", 2756054477).}
  proc colorRamp*(self: Ref[NoiseTexture3D]): Ref[Gradient] {.loadfrom("get_color_ramp", 132272999).}
  proc `noise=`*(self: Ref[NoiseTexture3D]; noise: Ref[Noise]) {.loadfrom("set_noise", 4135492439).}
  proc noise*(self: Ref[NoiseTexture3D]): Ref[Noise] {.loadfrom("get_noise", 185851837).}

# PlaceholderTexture3D
define_godot_engine_class_essencials(PlaceholderTexture3D, Texture3D)
PlaceholderTexture3D.memberProcs:
  proc `size=`*(self: Ref[PlaceholderTexture3D]; size: Vector3i) {.loadfrom("set_size", 560364750).}
  proc size*(self: Ref[PlaceholderTexture3D]): Vector3i {.loadfrom("get_size", 2785653706).}

# CompressedTextureLayered
define_godot_engine_class_essencials(CompressedTextureLayered, TextureLayered)
CompressedTextureLayered.memberProcs:
  proc `load=`*(self: Ref[CompressedTextureLayered]; path: String): Error {.loadfrom("load", 166001499).}
  proc loadPath*(self: Ref[CompressedTextureLayered]): String {.loadfrom("get_load_path", 201670096).}

# ImageTextureLayered
define_godot_engine_class_essencials(ImageTextureLayered, TextureLayered)
ImageTextureLayered.memberProcs:
  proc createFromImages*(self: Ref[ImageTextureLayered]; images: TypedArray[Image]): Error {.loadfrom("create_from_images", 2785773503).}
  proc updateLayer*(self: Ref[ImageTextureLayered]; image: Ref[Image]; layer: int32) {.loadfrom("update_layer", 3331733361).}

# PlaceholderTextureLayered
define_godot_engine_class_essencials(PlaceholderTextureLayered, TextureLayered)
PlaceholderTextureLayered.memberProcs:
  proc `size=`*(self: Ref[PlaceholderTextureLayered]; size: Vector2i) {.loadfrom("set_size", 1130785943).}
  proc size*(self: Ref[PlaceholderTextureLayered]): Vector2i {.loadfrom("get_size", 3690982128).}
  proc `layers=`*(self: Ref[PlaceholderTextureLayered]; layers: int32) {.loadfrom("set_layers", 1286410249).}

# VisualShaderNodeBooleanConstant
define_godot_engine_class_essencials(VisualShaderNodeBooleanConstant, VisualShaderNodeConstant)
VisualShaderNodeBooleanConstant.memberProcs:
  proc `constant=`*(self: Ref[VisualShaderNodeBooleanConstant]; constant: Bool) {.loadfrom("set_constant", 2586408642).}
  proc constant*(self: Ref[VisualShaderNodeBooleanConstant]): Bool {.loadfrom("get_constant", 36873697).}

# VisualShaderNodeColorConstant
define_godot_engine_class_essencials(VisualShaderNodeColorConstant, VisualShaderNodeConstant)
VisualShaderNodeColorConstant.memberProcs:
  proc `constant=`*(self: Ref[VisualShaderNodeColorConstant]; constant: Color) {.loadfrom("set_constant", 2920490490).}
  proc constant*(self: Ref[VisualShaderNodeColorConstant]): Color {.loadfrom("get_constant", 3444240500).}

# VisualShaderNodeFloatConstant
define_godot_engine_class_essencials(VisualShaderNodeFloatConstant, VisualShaderNodeConstant)
VisualShaderNodeFloatConstant.memberProcs:
  proc `constant=`*(self: Ref[VisualShaderNodeFloatConstant]; constant: Float) {.loadfrom("set_constant", 373806689).}
  proc constant*(self: Ref[VisualShaderNodeFloatConstant]): Float {.loadfrom("get_constant", 1740695150).}

# VisualShaderNodeIntConstant
define_godot_engine_class_essencials(VisualShaderNodeIntConstant, VisualShaderNodeConstant)
VisualShaderNodeIntConstant.memberProcs:
  proc `constant=`*(self: Ref[VisualShaderNodeIntConstant]; constant: int32) {.loadfrom("set_constant", 1286410249).}
  proc constant*(self: Ref[VisualShaderNodeIntConstant]): int32 {.loadfrom("get_constant", 3905245786).}

# VisualShaderNodeTransformConstant
define_godot_engine_class_essencials(VisualShaderNodeTransformConstant, VisualShaderNodeConstant)
VisualShaderNodeTransformConstant.memberProcs:
  proc `constant=`*(self: Ref[VisualShaderNodeTransformConstant]; constant: Transform3D) {.loadfrom("set_constant", 2952846383).}
  proc constant*(self: Ref[VisualShaderNodeTransformConstant]): Transform3D {.loadfrom("get_constant", 3229777777).}

# VisualShaderNodeUIntConstant
define_godot_engine_class_essencials(VisualShaderNodeUIntConstant, VisualShaderNodeConstant)
VisualShaderNodeUIntConstant.memberProcs:
  proc `constant=`*(self: Ref[VisualShaderNodeUIntConstant]; constant: int32) {.loadfrom("set_constant", 1286410249).}
  proc constant*(self: Ref[VisualShaderNodeUIntConstant]): int32 {.loadfrom("get_constant", 3905245786).}

# VisualShaderNodeVec2Constant
define_godot_engine_class_essencials(VisualShaderNodeVec2Constant, VisualShaderNodeConstant)
VisualShaderNodeVec2Constant.memberProcs:
  proc `constant=`*(self: Ref[VisualShaderNodeVec2Constant]; constant: Vector2) {.loadfrom("set_constant", 743155724).}
  proc constant*(self: Ref[VisualShaderNodeVec2Constant]): Vector2 {.loadfrom("get_constant", 3341600327).}

# VisualShaderNodeVec3Constant
define_godot_engine_class_essencials(VisualShaderNodeVec3Constant, VisualShaderNodeConstant)
VisualShaderNodeVec3Constant.memberProcs:
  proc `constant=`*(self: Ref[VisualShaderNodeVec3Constant]; constant: Vector3) {.loadfrom("set_constant", 3460891852).}
  proc constant*(self: Ref[VisualShaderNodeVec3Constant]): Vector3 {.loadfrom("get_constant", 3360562783).}

# VisualShaderNodeVec4Constant
define_godot_engine_class_essencials(VisualShaderNodeVec4Constant, VisualShaderNodeConstant)
VisualShaderNodeVec4Constant.memberProcs:
  proc `constant=`*(self: Ref[VisualShaderNodeVec4Constant]; constant: Quaternion) {.loadfrom("set_constant", 1727505552).}
  proc constant*(self: Ref[VisualShaderNodeVec4Constant]): Quaternion {.loadfrom("get_constant", 1222331677).}

# VisualShaderNodeParticleOutput
define_godot_engine_class_essencials(VisualShaderNodeParticleOutput, VisualShaderNodeOutput)

# VisualShaderNodeBooleanParameter
define_godot_engine_class_essencials(VisualShaderNodeBooleanParameter, VisualShaderNodeParameter)
VisualShaderNodeBooleanParameter.memberProcs:
  proc `defaultValueEnabled=`*(self: Ref[VisualShaderNodeBooleanParameter]; enabled: Bool) {.loadfrom("set_default_value_enabled", 2586408642).}
  proc isDefaultValueEnabled*(self: Ref[VisualShaderNodeBooleanParameter]): Bool {.loadfrom("is_default_value_enabled", 36873697).}
  proc `defaultValue=`*(self: Ref[VisualShaderNodeBooleanParameter]; value: Bool) {.loadfrom("set_default_value", 2586408642).}
  proc defaultValue*(self: Ref[VisualShaderNodeBooleanParameter]): Bool {.loadfrom("get_default_value", 36873697).}

# VisualShaderNodeColorParameter
define_godot_engine_class_essencials(VisualShaderNodeColorParameter, VisualShaderNodeParameter)
VisualShaderNodeColorParameter.memberProcs:
  proc `defaultValueEnabled=`*(self: Ref[VisualShaderNodeColorParameter]; enabled: Bool) {.loadfrom("set_default_value_enabled", 2586408642).}
  proc isDefaultValueEnabled*(self: Ref[VisualShaderNodeColorParameter]): Bool {.loadfrom("is_default_value_enabled", 36873697).}
  proc `defaultValue=`*(self: Ref[VisualShaderNodeColorParameter]; value: Color) {.loadfrom("set_default_value", 2920490490).}
  proc defaultValue*(self: Ref[VisualShaderNodeColorParameter]): Color {.loadfrom("get_default_value", 3444240500).}

# VisualShaderNodeFloatParameter
define_godot_engine_class_essencials(VisualShaderNodeFloatParameter, VisualShaderNodeParameter)
VisualShaderNodeFloatParameter.memberProcs:
  proc `hint=`*(self: Ref[VisualShaderNodeFloatParameter]; hint: VisualShaderNodeFloatParameter|>Hint) {.loadfrom("set_hint", 3712586466).}
  proc hint*(self: Ref[VisualShaderNodeFloatParameter]): VisualShaderNodeFloatParameter|>Hint {.loadfrom("get_hint", 3042240429).}
  proc `min=`*(self: Ref[VisualShaderNodeFloatParameter]; value: Float) {.loadfrom("set_min", 373806689).}
  proc min*(self: Ref[VisualShaderNodeFloatParameter]): Float {.loadfrom("get_min", 1740695150).}
  proc `max=`*(self: Ref[VisualShaderNodeFloatParameter]; value: Float) {.loadfrom("set_max", 373806689).}
  proc max*(self: Ref[VisualShaderNodeFloatParameter]): Float {.loadfrom("get_max", 1740695150).}
  proc `step=`*(self: Ref[VisualShaderNodeFloatParameter]; value: Float) {.loadfrom("set_step", 373806689).}
  proc step*(self: Ref[VisualShaderNodeFloatParameter]): Float {.loadfrom("get_step", 1740695150).}
  proc `defaultValueEnabled=`*(self: Ref[VisualShaderNodeFloatParameter]; enabled: Bool) {.loadfrom("set_default_value_enabled", 2586408642).}
  proc isDefaultValueEnabled*(self: Ref[VisualShaderNodeFloatParameter]): Bool {.loadfrom("is_default_value_enabled", 36873697).}
  proc `defaultValue=`*(self: Ref[VisualShaderNodeFloatParameter]; value: Float) {.loadfrom("set_default_value", 373806689).}
  proc defaultValue*(self: Ref[VisualShaderNodeFloatParameter]): Float {.loadfrom("get_default_value", 1740695150).}

# VisualShaderNodeIntParameter
define_godot_engine_class_essencials(VisualShaderNodeIntParameter, VisualShaderNodeParameter)
VisualShaderNodeIntParameter.memberProcs:
  proc `hint=`*(self: Ref[VisualShaderNodeIntParameter]; hint: VisualShaderNodeIntParameter|>Hint) {.loadfrom("set_hint", 2540512075).}
  proc hint*(self: Ref[VisualShaderNodeIntParameter]): VisualShaderNodeIntParameter|>Hint {.loadfrom("get_hint", 4250814924).}
  proc `min=`*(self: Ref[VisualShaderNodeIntParameter]; value: int32) {.loadfrom("set_min", 1286410249).}
  proc min*(self: Ref[VisualShaderNodeIntParameter]): int32 {.loadfrom("get_min", 3905245786).}
  proc `max=`*(self: Ref[VisualShaderNodeIntParameter]; value: int32) {.loadfrom("set_max", 1286410249).}
  proc max*(self: Ref[VisualShaderNodeIntParameter]): int32 {.loadfrom("get_max", 3905245786).}
  proc `step=`*(self: Ref[VisualShaderNodeIntParameter]; value: int32) {.loadfrom("set_step", 1286410249).}
  proc step*(self: Ref[VisualShaderNodeIntParameter]): int32 {.loadfrom("get_step", 3905245786).}
  proc `defaultValueEnabled=`*(self: Ref[VisualShaderNodeIntParameter]; enabled: Bool) {.loadfrom("set_default_value_enabled", 2586408642).}
  proc isDefaultValueEnabled*(self: Ref[VisualShaderNodeIntParameter]): Bool {.loadfrom("is_default_value_enabled", 36873697).}
  proc `defaultValue=`*(self: Ref[VisualShaderNodeIntParameter]; value: int32) {.loadfrom("set_default_value", 1286410249).}
  proc defaultValue*(self: Ref[VisualShaderNodeIntParameter]): int32 {.loadfrom("get_default_value", 3905245786).}

# VisualShaderNodeTextureParameter
define_godot_engine_class_essencials(VisualShaderNodeTextureParameter, VisualShaderNodeParameter)
VisualShaderNodeTextureParameter.memberProcs:
  proc `textureType=`*(self: Ref[VisualShaderNodeTextureParameter]; `type`: VisualShaderNodeTextureParameter|>TextureType) {.loadfrom("set_texture_type", 2227296876).}
  proc textureType*(self: Ref[VisualShaderNodeTextureParameter]): VisualShaderNodeTextureParameter|>TextureType {.loadfrom("get_texture_type", 367922070).}
  proc `colorDefault=`*(self: Ref[VisualShaderNodeTextureParameter]; color: VisualShaderNodeTextureParameter|>ColorDefault) {.loadfrom("set_color_default", 4217624432).}
  proc colorDefault*(self: Ref[VisualShaderNodeTextureParameter]): VisualShaderNodeTextureParameter|>ColorDefault {.loadfrom("get_color_default", 3837060134).}
  proc `textureFilter=`*(self: Ref[VisualShaderNodeTextureParameter]; filter: VisualShaderNodeTextureParameter|>TextureFilter) {.loadfrom("set_texture_filter", 2147684752).}
  proc textureFilter*(self: Ref[VisualShaderNodeTextureParameter]): VisualShaderNodeTextureParameter|>TextureFilter {.loadfrom("get_texture_filter", 4184490817).}
  proc `textureRepeat=`*(self: Ref[VisualShaderNodeTextureParameter]; repeat: VisualShaderNodeTextureParameter|>TextureRepeat) {.loadfrom("set_texture_repeat", 2036143070).}
  proc textureRepeat*(self: Ref[VisualShaderNodeTextureParameter]): VisualShaderNodeTextureParameter|>TextureRepeat {.loadfrom("get_texture_repeat", 1690132794).}
  proc `textureSource=`*(self: Ref[VisualShaderNodeTextureParameter]; source: VisualShaderNodeTextureParameter|>TextureSource) {.loadfrom("set_texture_source", 1212687372).}
  proc textureSource*(self: Ref[VisualShaderNodeTextureParameter]): VisualShaderNodeTextureParameter|>TextureSource {.loadfrom("get_texture_source", 2039092262).}

# VisualShaderNodeTransformParameter
define_godot_engine_class_essencials(VisualShaderNodeTransformParameter, VisualShaderNodeParameter)
VisualShaderNodeTransformParameter.memberProcs:
  proc `defaultValueEnabled=`*(self: Ref[VisualShaderNodeTransformParameter]; enabled: Bool) {.loadfrom("set_default_value_enabled", 2586408642).}
  proc isDefaultValueEnabled*(self: Ref[VisualShaderNodeTransformParameter]): Bool {.loadfrom("is_default_value_enabled", 36873697).}
  proc `defaultValue=`*(self: Ref[VisualShaderNodeTransformParameter]; value: Transform3D) {.loadfrom("set_default_value", 2952846383).}
  proc defaultValue*(self: Ref[VisualShaderNodeTransformParameter]): Transform3D {.loadfrom("get_default_value", 3229777777).}

# VisualShaderNodeUIntParameter
define_godot_engine_class_essencials(VisualShaderNodeUIntParameter, VisualShaderNodeParameter)
VisualShaderNodeUIntParameter.memberProcs:
  proc `defaultValueEnabled=`*(self: Ref[VisualShaderNodeUIntParameter]; enabled: Bool) {.loadfrom("set_default_value_enabled", 2586408642).}
  proc isDefaultValueEnabled*(self: Ref[VisualShaderNodeUIntParameter]): Bool {.loadfrom("is_default_value_enabled", 36873697).}
  proc `defaultValue=`*(self: Ref[VisualShaderNodeUIntParameter]; value: int32) {.loadfrom("set_default_value", 1286410249).}
  proc defaultValue*(self: Ref[VisualShaderNodeUIntParameter]): int32 {.loadfrom("get_default_value", 3905245786).}

# VisualShaderNodeVec2Parameter
define_godot_engine_class_essencials(VisualShaderNodeVec2Parameter, VisualShaderNodeParameter)
VisualShaderNodeVec2Parameter.memberProcs:
  proc `defaultValueEnabled=`*(self: Ref[VisualShaderNodeVec2Parameter]; enabled: Bool) {.loadfrom("set_default_value_enabled", 2586408642).}
  proc isDefaultValueEnabled*(self: Ref[VisualShaderNodeVec2Parameter]): Bool {.loadfrom("is_default_value_enabled", 36873697).}
  proc `defaultValue=`*(self: Ref[VisualShaderNodeVec2Parameter]; value: Vector2) {.loadfrom("set_default_value", 743155724).}
  proc defaultValue*(self: Ref[VisualShaderNodeVec2Parameter]): Vector2 {.loadfrom("get_default_value", 3341600327).}

# VisualShaderNodeVec3Parameter
define_godot_engine_class_essencials(VisualShaderNodeVec3Parameter, VisualShaderNodeParameter)
VisualShaderNodeVec3Parameter.memberProcs:
  proc `defaultValueEnabled=`*(self: Ref[VisualShaderNodeVec3Parameter]; enabled: Bool) {.loadfrom("set_default_value_enabled", 2586408642).}
  proc isDefaultValueEnabled*(self: Ref[VisualShaderNodeVec3Parameter]): Bool {.loadfrom("is_default_value_enabled", 36873697).}
  proc `defaultValue=`*(self: Ref[VisualShaderNodeVec3Parameter]; value: Vector3) {.loadfrom("set_default_value", 3460891852).}
  proc defaultValue*(self: Ref[VisualShaderNodeVec3Parameter]): Vector3 {.loadfrom("get_default_value", 3360562783).}

# VisualShaderNodeVec4Parameter
define_godot_engine_class_essencials(VisualShaderNodeVec4Parameter, VisualShaderNodeParameter)
VisualShaderNodeVec4Parameter.memberProcs:
  proc `defaultValueEnabled=`*(self: Ref[VisualShaderNodeVec4Parameter]; enabled: Bool) {.loadfrom("set_default_value_enabled", 2586408642).}
  proc isDefaultValueEnabled*(self: Ref[VisualShaderNodeVec4Parameter]): Bool {.loadfrom("is_default_value_enabled", 36873697).}
  proc `defaultValue=`*(self: Ref[VisualShaderNodeVec4Parameter]; value: Vector4) {.loadfrom("set_default_value", 643568085).}
  proc defaultValue*(self: Ref[VisualShaderNodeVec4Parameter]): Vector4 {.loadfrom("get_default_value", 2435802345).}

# VisualShaderNodeParticleBoxEmitter
define_godot_engine_class_essencials(VisualShaderNodeParticleBoxEmitter, VisualShaderNodeParticleEmitter)

# VisualShaderNodeParticleMeshEmitter
define_godot_engine_class_essencials(VisualShaderNodeParticleMeshEmitter, VisualShaderNodeParticleEmitter)
VisualShaderNodeParticleMeshEmitter.memberProcs:
  proc `mesh=`*(self: Ref[VisualShaderNodeParticleMeshEmitter]; mesh: Ref[Mesh]) {.loadfrom("set_mesh", 194775623).}
  proc mesh*(self: Ref[VisualShaderNodeParticleMeshEmitter]): Ref[Mesh] {.loadfrom("get_mesh", 1808005922).}
  proc `useAllSurfaces=`*(self: Ref[VisualShaderNodeParticleMeshEmitter]; enabled: Bool) {.loadfrom("set_use_all_surfaces", 2586408642).}
  proc isUseAllSurfaces*(self: Ref[VisualShaderNodeParticleMeshEmitter]): Bool {.loadfrom("is_use_all_surfaces", 36873697).}
  proc `surfaceIndex=`*(self: Ref[VisualShaderNodeParticleMeshEmitter]; surfaceIndex: int32) {.loadfrom("set_surface_index", 1286410249).}
  proc surfaceIndex*(self: Ref[VisualShaderNodeParticleMeshEmitter]): int32 {.loadfrom("get_surface_index", 3905245786).}

# VisualShaderNodeParticleRingEmitter
define_godot_engine_class_essencials(VisualShaderNodeParticleRingEmitter, VisualShaderNodeParticleEmitter)

# VisualShaderNodeParticleSphereEmitter
define_godot_engine_class_essencials(VisualShaderNodeParticleSphereEmitter, VisualShaderNodeParticleEmitter)

# VisualShaderNodeComment
define_godot_engine_class_essencials(VisualShaderNodeComment, VisualShaderNodeResizableBase)
VisualShaderNodeComment.memberProcs:
  proc `title=`*(self: Ref[VisualShaderNodeComment]; title: String) {.loadfrom("set_title", 83702148).}
  proc title*(self: Ref[VisualShaderNodeComment]): String {.loadfrom("get_title", 201670096).}
  proc `description=`*(self: Ref[VisualShaderNodeComment]; description: String) {.loadfrom("set_description", 83702148).}
  proc description*(self: Ref[VisualShaderNodeComment]): String {.loadfrom("get_description", 201670096).}

# VisualShaderNodeCurveTexture
define_godot_engine_class_essencials(VisualShaderNodeCurveTexture, VisualShaderNodeResizableBase)
VisualShaderNodeCurveTexture.memberProcs:
  proc `texture=`*(self: Ref[VisualShaderNodeCurveTexture]; texture: Ref[CurveTexture]) {.loadfrom("set_texture", 181872837).}
  proc texture*(self: Ref[VisualShaderNodeCurveTexture]): Ref[CurveTexture] {.loadfrom("get_texture", 2800800579).}

# VisualShaderNodeCurveXYZTexture
define_godot_engine_class_essencials(VisualShaderNodeCurveXYZTexture, VisualShaderNodeResizableBase)
VisualShaderNodeCurveXYZTexture.memberProcs:
  proc `texture=`*(self: Ref[VisualShaderNodeCurveXYZTexture]; texture: Ref[CurveXYZTexture]) {.loadfrom("set_texture", 8031783).}
  proc texture*(self: Ref[VisualShaderNodeCurveXYZTexture]): Ref[CurveXYZTexture] {.loadfrom("get_texture", 1950275015).}

# VisualShaderNodeGroupBase
define_godot_engine_class_essencials(VisualShaderNodeGroupBase, VisualShaderNodeResizableBase)
VisualShaderNodeGroupBase.memberProcs:
  proc setInputs*(self: Ref[VisualShaderNodeGroupBase]; inputs: String) {.loadfrom("set_inputs", 83702148).}
  proc getInputs*(self: Ref[VisualShaderNodeGroupBase]): String {.loadfrom("get_inputs", 201670096).}
  proc setOutputs*(self: Ref[VisualShaderNodeGroupBase]; outputs: String) {.loadfrom("set_outputs", 83702148).}
  proc getOutputs*(self: Ref[VisualShaderNodeGroupBase]): String {.loadfrom("get_outputs", 201670096).}
  proc isValidPortName*(self: Ref[VisualShaderNodeGroupBase]; name: String): Bool {.loadfrom("is_valid_port_name", 3927539163).}
  proc addInputPort*(self: Ref[VisualShaderNodeGroupBase]; id: int32; `type`: int32; name: String) {.loadfrom("add_input_port", 2285447957).}
  proc removeInputPort*(self: Ref[VisualShaderNodeGroupBase]; id: int32) {.loadfrom("remove_input_port", 1286410249).}
  proc getInputPortCount*(self: Ref[VisualShaderNodeGroupBase]): int32 {.loadfrom("get_input_port_count", 3905245786).}
  proc hasInputPort*(self: Ref[VisualShaderNodeGroupBase]; id: int32): Bool {.loadfrom("has_input_port", 1116898809).}
  proc clearInputPorts*(self: Ref[VisualShaderNodeGroupBase]) {.loadfrom("clear_input_ports", 3218959716).}
  proc addOutputPort*(self: Ref[VisualShaderNodeGroupBase]; id: int32; `type`: int32; name: String) {.loadfrom("add_output_port", 2285447957).}
  proc removeOutputPort*(self: Ref[VisualShaderNodeGroupBase]; id: int32) {.loadfrom("remove_output_port", 1286410249).}
  proc getOutputPortCount*(self: Ref[VisualShaderNodeGroupBase]): int32 {.loadfrom("get_output_port_count", 3905245786).}
  proc hasOutputPort*(self: Ref[VisualShaderNodeGroupBase]; id: int32): Bool {.loadfrom("has_output_port", 1116898809).}
  proc clearOutputPorts*(self: Ref[VisualShaderNodeGroupBase]) {.loadfrom("clear_output_ports", 3218959716).}
  proc setInputPortName*(self: Ref[VisualShaderNodeGroupBase]; id: int32; name: String) {.loadfrom("set_input_port_name", 501894301).}
  proc setInputPortType*(self: Ref[VisualShaderNodeGroupBase]; id: int32; `type`: int32) {.loadfrom("set_input_port_type", 3937882851).}
  proc setOutputPortName*(self: Ref[VisualShaderNodeGroupBase]; id: int32; name: String) {.loadfrom("set_output_port_name", 501894301).}
  proc setOutputPortType*(self: Ref[VisualShaderNodeGroupBase]; id: int32; `type`: int32) {.loadfrom("set_output_port_type", 3937882851).}
  proc getFreeInputPortId*(self: Ref[VisualShaderNodeGroupBase]): int32 {.loadfrom("get_free_input_port_id", 3905245786).}
  proc getFreeOutputPortId*(self: Ref[VisualShaderNodeGroupBase]): int32 {.loadfrom("get_free_output_port_id", 3905245786).}

# VisualShaderNodeTexture2DArray
define_godot_engine_class_essencials(VisualShaderNodeTexture2DArray, VisualShaderNodeSample3D)
VisualShaderNodeTexture2DArray.memberProcs:
  proc `textureArray=`*(self: Ref[VisualShaderNodeTexture2DArray]; value: Ref[Texture2DArray]) {.loadfrom("set_texture_array", 2206200446).}
  proc textureArray*(self: Ref[VisualShaderNodeTexture2DArray]): Ref[Texture2DArray] {.loadfrom("get_texture_array", 146117123).}

# VisualShaderNodeTexture3D
define_godot_engine_class_essencials(VisualShaderNodeTexture3D, VisualShaderNodeSample3D)
VisualShaderNodeTexture3D.memberProcs:
  proc `texture=`*(self: Ref[VisualShaderNodeTexture3D]; value: Ref[Texture3D]) {.loadfrom("set_texture", 1188404210).}
  proc texture*(self: Ref[VisualShaderNodeTexture3D]): Ref[Texture3D] {.loadfrom("get_texture", 373985333).}

# VisualShaderNodeVaryingGetter
define_godot_engine_class_essencials(VisualShaderNodeVaryingGetter, VisualShaderNodeVarying)

# VisualShaderNodeVaryingSetter
define_godot_engine_class_essencials(VisualShaderNodeVaryingSetter, VisualShaderNodeVarying)

# VisualShaderNodeFaceForward
define_godot_engine_class_essencials(VisualShaderNodeFaceForward, VisualShaderNodeVectorBase)

# VisualShaderNodeVectorCompose
define_godot_engine_class_essencials(VisualShaderNodeVectorCompose, VisualShaderNodeVectorBase)

# VisualShaderNodeVectorDecompose
define_godot_engine_class_essencials(VisualShaderNodeVectorDecompose, VisualShaderNodeVectorBase)

# VisualShaderNodeVectorDistance
define_godot_engine_class_essencials(VisualShaderNodeVectorDistance, VisualShaderNodeVectorBase)

# VisualShaderNodeVectorFunc
define_godot_engine_class_essencials(VisualShaderNodeVectorFunc, VisualShaderNodeVectorBase)
VisualShaderNodeVectorFunc.memberProcs:
  proc `function=`*(self: Ref[VisualShaderNodeVectorFunc]; `func`: VisualShaderNodeVectorFunc|>Function) {.loadfrom("set_function", 629964457).}
  proc function*(self: Ref[VisualShaderNodeVectorFunc]): VisualShaderNodeVectorFunc|>Function {.loadfrom("get_function", 4047776843).}

# VisualShaderNodeVectorLen
define_godot_engine_class_essencials(VisualShaderNodeVectorLen, VisualShaderNodeVectorBase)

# VisualShaderNodeVectorOp
define_godot_engine_class_essencials(VisualShaderNodeVectorOp, VisualShaderNodeVectorBase)
VisualShaderNodeVectorOp.memberProcs:
  proc `operator=`*(self: Ref[VisualShaderNodeVectorOp]; op: VisualShaderNodeVectorOp|>Operator) {.loadfrom("set_operator", 3371507302).}
  proc operator*(self: Ref[VisualShaderNodeVectorOp]): VisualShaderNodeVectorOp|>Operator {.loadfrom("get_operator", 11793929).}

# VisualShaderNodeVectorRefract
define_godot_engine_class_essencials(VisualShaderNodeVectorRefract, VisualShaderNodeVectorBase)

# CheckBox
define_godot_engine_class_essencials(CheckBox, Button)

# CheckButton
define_godot_engine_class_essencials(CheckButton, Button)

# ColorPickerButton
define_godot_engine_class_essencials(ColorPickerButton, Button)
ColorPickerButton.memberProcs:
  proc `pickColor=`*(self: ColorPickerButton; color: Color) {.loadfrom("set_pick_color", 2920490490).}
  proc pickColor*(self: ColorPickerButton): Color {.loadfrom("get_pick_color", 3444240500).}
  proc getPicker*(self: ColorPickerButton): ColorPicker {.loadfrom("get_picker", 331835996).}
  proc getPopup*(self: ColorPickerButton): PopupPanel {.loadfrom("get_popup", 1322440207).}
  proc `editAlpha=`*(self: ColorPickerButton; show: Bool) {.loadfrom("set_edit_alpha", 2586408642).}
  proc isEditingAlpha*(self: ColorPickerButton): Bool {.loadfrom("is_editing_alpha", 36873697).}

# MenuButton
define_godot_engine_class_essencials(MenuButton, Button)
MenuButton.memberProcs:
  proc getPopup*(self: MenuButton): PopupMenu {.loadfrom("get_popup", 229722558).}
  proc showPopup*(self: MenuButton) {.loadfrom("show_popup", 3218959716).}
  proc `switchOnHover=`*(self: MenuButton; enable: Bool) {.loadfrom("set_switch_on_hover", 2586408642).}
  proc isSwitchOnHover*(self: MenuButton): Bool {.loadfrom("is_switch_on_hover", 2240911060).}
  proc setDisableShortcuts*(self: MenuButton; disabled: Bool) {.loadfrom("set_disable_shortcuts", 2586408642).}
  proc `itemCount=`*(self: MenuButton; count: int32) {.loadfrom("set_item_count", 1286410249).}
  proc itemCount*(self: MenuButton): int32 {.loadfrom("get_item_count", 3905245786).}

# OptionButton
define_godot_engine_class_essencials(OptionButton, Button)
OptionButton.memberProcs:
  proc addItem*(self: OptionButton; label: String; id: int32 = -1) {.loadfrom("add_item", 3043792800).}
  proc addIconItem*(self: OptionButton; texture: Ref[Texture2D]; label: String; id: int32 = -1) {.loadfrom("add_icon_item", 3944051090).}
  proc setItemText*(self: OptionButton; idx: int32; text: String) {.loadfrom("set_item_text", 501894301).}
  proc setItemIcon*(self: OptionButton; idx: int32; texture: Ref[Texture2D]) {.loadfrom("set_item_icon", 666127730).}
  proc setItemDisabled*(self: OptionButton; idx: int32; disabled: Bool) {.loadfrom("set_item_disabled", 300928843).}
  proc setItemId*(self: OptionButton; idx: int32; id: int32) {.loadfrom("set_item_id", 3937882851).}
  proc setItemMetadata*(self: OptionButton; idx: int32; metadata: ptr Variant) {.loadfrom("set_item_metadata", 2152698145).}
  proc setItemTooltip*(self: OptionButton; idx: int32; tooltip: String) {.loadfrom("set_item_tooltip", 501894301).}
  proc getItemText*(self: OptionButton; idx: int32): String {.loadfrom("get_item_text", 844755477).}
  proc getItemIcon*(self: OptionButton; idx: int32): Ref[Texture2D] {.loadfrom("get_item_icon", 3536238170).}
  proc getItemId*(self: OptionButton; idx: int32): int32 {.loadfrom("get_item_id", 923996154).}
  proc getItemIndex*(self: OptionButton; id: int32): int32 {.loadfrom("get_item_index", 923996154).}
  proc getItemMetadata*(self: OptionButton; idx: int32): Variant {.loadfrom("get_item_metadata", 4227898402).}
  proc getItemTooltip*(self: OptionButton; idx: int32): String {.loadfrom("get_item_tooltip", 844755477).}
  proc isItemDisabled*(self: OptionButton; idx: int32): Bool {.loadfrom("is_item_disabled", 1116898809).}
  proc isItemSeparator*(self: OptionButton; idx: int32): Bool {.loadfrom("is_item_separator", 1116898809).}
  proc addSeparator*(self: OptionButton; text: String = "") {.loadfrom("add_separator", 3005725572).}
  proc clear*(self: OptionButton) {.loadfrom("clear", 3218959716).}
  proc select*(self: OptionButton; idx: int32) {.loadfrom("select", 1286410249).}
  proc selected*(self: OptionButton): int32 {.loadfrom("get_selected", 3905245786).}
  proc getSelectedId*(self: OptionButton): int32 {.loadfrom("get_selected_id", 3905245786).}
  proc getSelectedMetadata*(self: OptionButton): Variant {.loadfrom("get_selected_metadata", 1214101251).}
  proc removeItem*(self: OptionButton; idx: int32) {.loadfrom("remove_item", 1286410249).}
  proc getPopup*(self: OptionButton): PopupMenu {.loadfrom("get_popup", 229722558).}
  proc showPopup*(self: OptionButton) {.loadfrom("show_popup", 3218959716).}
  proc `itemCount=`*(self: OptionButton; count: int32) {.loadfrom("set_item_count", 1286410249).}
  proc itemCount*(self: OptionButton): int32 {.loadfrom("get_item_count", 3905245786).}
  proc hasSelectableItems*(self: OptionButton): Bool {.loadfrom("has_selectable_items", 36873697).}
  proc getSelectableItem*(self: OptionButton; fromLast: Bool = false): int32 {.loadfrom("get_selectable_item", 894402480).}
  proc `fitToLongestItem=`*(self: OptionButton; fit: Bool) {.loadfrom("set_fit_to_longest_item", 2586408642).}
  proc isFitToLongestItem*(self: OptionButton): Bool {.loadfrom("is_fit_to_longest_item", 36873697).}
  proc `allowReselect=`*(self: OptionButton; allow: Bool) {.loadfrom("set_allow_reselect", 2586408642).}
  proc allowReselect*(self: OptionButton): Bool {.loadfrom("get_allow_reselect", 36873697).}

# HBoxContainer
define_godot_engine_class_essencials(HBoxContainer, BoxContainer)

# VBoxContainer
define_godot_engine_class_essencials(VBoxContainer, BoxContainer)

# HFlowContainer
define_godot_engine_class_essencials(HFlowContainer, FlowContainer)

# VFlowContainer
define_godot_engine_class_essencials(VFlowContainer, FlowContainer)

# ScriptEditor
define_godot_engine_class_essencials(ScriptEditor, PanelContainer)
ScriptEditor.memberProcs:
  proc getCurrentEditor*(self: ScriptEditor): ScriptEditorBase {.loadfrom("get_current_editor", 1906266726).}
  proc getOpenScriptEditors*(self: ScriptEditor): TypedArray[ScriptEditorBase] {.loadfrom("get_open_script_editors", 3995934104).}
  proc registerSyntaxHighlighter*(self: ScriptEditor; syntaxHighlighter: Ref[EditorSyntaxHighlighter]) {.loadfrom("register_syntax_highlighter", 1092774468).}
  proc unregisterSyntaxHighlighter*(self: ScriptEditor; syntaxHighlighter: Ref[EditorSyntaxHighlighter]) {.loadfrom("unregister_syntax_highlighter", 1092774468).}
  proc gotoLine*(self: ScriptEditor; lineNumber: int32) {.loadfrom("goto_line", 1286410249).}
  proc getCurrentScript*(self: ScriptEditor): Ref[Script] {.loadfrom("get_current_script", 2146468882).}
  proc getOpenScripts*(self: ScriptEditor): TypedArray[Script] {.loadfrom("get_open_scripts", 3995934104).}
  proc openScriptCreateDialog*(self: ScriptEditor; baseName: String; basePath: String) {.loadfrom("open_script_create_dialog", 3186203200).}

# EditorInspector
define_godot_engine_class_essencials(EditorInspector, ScrollContainer)
EditorInspector.memberProcs:
  proc getSelectedPath*(self: EditorInspector): String {.loadfrom("get_selected_path", 201670096).}

# HSplitContainer
define_godot_engine_class_essencials(HSplitContainer, SplitContainer)

# VSplitContainer
define_godot_engine_class_essencials(VSplitContainer, SplitContainer)

# HScrollBar
define_godot_engine_class_essencials(HScrollBar, ScrollBar)

# VScrollBar
define_godot_engine_class_essencials(VScrollBar, ScrollBar)

# HSlider
define_godot_engine_class_essencials(HSlider, Slider)

# VSlider
define_godot_engine_class_essencials(VSlider, Slider)

# CharacterBody2D
define_godot_engine_class_essencials(CharacterBody2D, PhysicsBody2D)
CharacterBody2D.memberProcs:
  proc moveAndSlide*(self: CharacterBody2D): Bool {.loadfrom("move_and_slide", 2240911060).}
  proc applyFloorSnap*(self: CharacterBody2D) {.loadfrom("apply_floor_snap", 3218959716).}
  proc `velocity=`*(self: CharacterBody2D; velocity: Vector2) {.loadfrom("set_velocity", 743155724).}
  proc velocity*(self: CharacterBody2D): Vector2 {.loadfrom("get_velocity", 3341600327).}
  proc `safeMargin=`*(self: CharacterBody2D; margin: Float) {.loadfrom("set_safe_margin", 373806689).}
  proc safeMargin*(self: CharacterBody2D): Float {.loadfrom("get_safe_margin", 1740695150).}
  proc isFloorStopOnSlopeEnabled*(self: CharacterBody2D): Bool {.loadfrom("is_floor_stop_on_slope_enabled", 36873697).}
  proc `floorStopOnSlopeEnabled=`*(self: CharacterBody2D; enabled: Bool) {.loadfrom("set_floor_stop_on_slope_enabled", 2586408642).}
  proc `floorConstantSpeedEnabled=`*(self: CharacterBody2D; enabled: Bool) {.loadfrom("set_floor_constant_speed_enabled", 2586408642).}
  proc isFloorConstantSpeedEnabled*(self: CharacterBody2D): Bool {.loadfrom("is_floor_constant_speed_enabled", 36873697).}
  proc `floorBlockOnWallEnabled=`*(self: CharacterBody2D; enabled: Bool) {.loadfrom("set_floor_block_on_wall_enabled", 2586408642).}
  proc isFloorBlockOnWallEnabled*(self: CharacterBody2D): Bool {.loadfrom("is_floor_block_on_wall_enabled", 36873697).}
  proc `slideOnCeilingEnabled=`*(self: CharacterBody2D; enabled: Bool) {.loadfrom("set_slide_on_ceiling_enabled", 2586408642).}
  proc isSlideOnCeilingEnabled*(self: CharacterBody2D): Bool {.loadfrom("is_slide_on_ceiling_enabled", 36873697).}
  proc `platformFloorLayers=`*(self: CharacterBody2D; excludeLayer: uint32) {.loadfrom("set_platform_floor_layers", 1286410249).}
  proc platformFloorLayers*(self: CharacterBody2D): uint32 {.loadfrom("get_platform_floor_layers", 3905245786).}
  proc `platformWallLayers=`*(self: CharacterBody2D; excludeLayer: uint32) {.loadfrom("set_platform_wall_layers", 1286410249).}
  proc platformWallLayers*(self: CharacterBody2D): uint32 {.loadfrom("get_platform_wall_layers", 3905245786).}
  proc maxSlides*(self: CharacterBody2D): int32 {.loadfrom("get_max_slides", 3905245786).}
  proc `maxSlides=`*(self: CharacterBody2D; maxSlides: int32) {.loadfrom("set_max_slides", 1286410249).}
  proc floorMaxAngle*(self: CharacterBody2D): Float {.loadfrom("get_floor_max_angle", 1740695150).}
  proc `floorMaxAngle=`*(self: CharacterBody2D; radians: Float) {.loadfrom("set_floor_max_angle", 373806689).}
  proc floorSnapLength*(self: CharacterBody2D): Float {.loadfrom("get_floor_snap_length", 191475506).}
  proc `floorSnapLength=`*(self: CharacterBody2D; floorSnapLength: Float) {.loadfrom("set_floor_snap_length", 373806689).}
  proc wallMinSlideAngle*(self: CharacterBody2D): Float {.loadfrom("get_wall_min_slide_angle", 1740695150).}
  proc `wallMinSlideAngle=`*(self: CharacterBody2D; radians: Float) {.loadfrom("set_wall_min_slide_angle", 373806689).}
  proc upDirection*(self: CharacterBody2D): Vector2 {.loadfrom("get_up_direction", 3341600327).}
  proc `upDirection=`*(self: CharacterBody2D; upDirection: Vector2) {.loadfrom("set_up_direction", 743155724).}
  proc `motionMode=`*(self: CharacterBody2D; mode: CharacterBody2D|>MotionMode) {.loadfrom("set_motion_mode", 1224392233).}
  proc motionMode*(self: CharacterBody2D): CharacterBody2D|>MotionMode {.loadfrom("get_motion_mode", 1160151236).}
  proc `platformOnLeave=`*(self: CharacterBody2D; onLeaveApplyVelocity: CharacterBody2D|>PlatformOnLeave) {.loadfrom("set_platform_on_leave", 2423324375).}
  proc platformOnLeave*(self: CharacterBody2D): CharacterBody2D|>PlatformOnLeave {.loadfrom("get_platform_on_leave", 4054324341).}
  proc isOnFloor*(self: CharacterBody2D): Bool {.loadfrom("is_on_floor", 36873697).}
  proc isOnFloorOnly*(self: CharacterBody2D): Bool {.loadfrom("is_on_floor_only", 36873697).}
  proc isOnCeiling*(self: CharacterBody2D): Bool {.loadfrom("is_on_ceiling", 36873697).}
  proc isOnCeilingOnly*(self: CharacterBody2D): Bool {.loadfrom("is_on_ceiling_only", 36873697).}
  proc isOnWall*(self: CharacterBody2D): Bool {.loadfrom("is_on_wall", 36873697).}
  proc isOnWallOnly*(self: CharacterBody2D): Bool {.loadfrom("is_on_wall_only", 36873697).}
  proc getFloorNormal*(self: CharacterBody2D): Vector2 {.loadfrom("get_floor_normal", 3341600327).}
  proc getWallNormal*(self: CharacterBody2D): Vector2 {.loadfrom("get_wall_normal", 3341600327).}
  proc getLastMotion*(self: CharacterBody2D): Vector2 {.loadfrom("get_last_motion", 3341600327).}
  proc getPositionDelta*(self: CharacterBody2D): Vector2 {.loadfrom("get_position_delta", 3341600327).}
  proc getRealVelocity*(self: CharacterBody2D): Vector2 {.loadfrom("get_real_velocity", 3341600327).}
  proc getFloorAngle*(self: CharacterBody2D; upDirection: Vector2 = gdvec(0, -1)): Float {.loadfrom("get_floor_angle", 2841063350).}
  proc getPlatformVelocity*(self: CharacterBody2D): Vector2 {.loadfrom("get_platform_velocity", 3341600327).}
  proc getSlideCollisionCount*(self: CharacterBody2D): int32 {.loadfrom("get_slide_collision_count", 3905245786).}
  proc getSlideCollision*(self: CharacterBody2D; slideIdx: int32): Ref[KinematicCollision2D] {.loadfrom("get_slide_collision", 860659811).}
  proc getLastSlideCollision*(self: CharacterBody2D): Ref[KinematicCollision2D] {.loadfrom("get_last_slide_collision", 2161834755).}

# RigidBody2D
define_godot_engine_class_essencials(RigidBody2D, PhysicsBody2D)
method integrateForces*(self: RigidBody2D; state: PhysicsDirectBodyState2D) {.base.} = (discard)
RigidBody2D.memberProcs:
  proc `mass=`*(self: RigidBody2D; mass: Float) {.loadfrom("set_mass", 373806689).}
  proc mass*(self: RigidBody2D): Float {.loadfrom("get_mass", 1740695150).}
  proc inertia*(self: RigidBody2D): Float {.loadfrom("get_inertia", 1740695150).}
  proc `inertia=`*(self: RigidBody2D; inertia: Float) {.loadfrom("set_inertia", 373806689).}
  proc `centerOfMassMode=`*(self: RigidBody2D; mode: RigidBody2D|>CenterOfMassMode) {.loadfrom("set_center_of_mass_mode", 1757235706).}
  proc centerOfMassMode*(self: RigidBody2D): RigidBody2D|>CenterOfMassMode {.loadfrom("get_center_of_mass_mode", 3277132817).}
  proc `centerOfMass=`*(self: RigidBody2D; centerOfMass: Vector2) {.loadfrom("set_center_of_mass", 743155724).}
  proc centerOfMass*(self: RigidBody2D): Vector2 {.loadfrom("get_center_of_mass", 3341600327).}
  proc `physicsMaterialOverride=`*(self: RigidBody2D; physicsMaterialOverride: Ref[PhysicsMaterial]) {.loadfrom("set_physics_material_override", 1784508650).}
  proc physicsMaterialOverride*(self: RigidBody2D): Ref[PhysicsMaterial] {.loadfrom("get_physics_material_override", 2521850424).}
  proc `gravityScale=`*(self: RigidBody2D; gravityScale: Float) {.loadfrom("set_gravity_scale", 373806689).}
  proc gravityScale*(self: RigidBody2D): Float {.loadfrom("get_gravity_scale", 1740695150).}
  proc `linearDampMode=`*(self: RigidBody2D; linearDampMode: RigidBody2D|>DampMode) {.loadfrom("set_linear_damp_mode", 3406533708).}
  proc linearDampMode*(self: RigidBody2D): RigidBody2D|>DampMode {.loadfrom("get_linear_damp_mode", 2970511462).}
  proc `angularDampMode=`*(self: RigidBody2D; angularDampMode: RigidBody2D|>DampMode) {.loadfrom("set_angular_damp_mode", 3406533708).}
  proc angularDampMode*(self: RigidBody2D): RigidBody2D|>DampMode {.loadfrom("get_angular_damp_mode", 2970511462).}
  proc `linearDamp=`*(self: RigidBody2D; linearDamp: Float) {.loadfrom("set_linear_damp", 373806689).}
  proc linearDamp*(self: RigidBody2D): Float {.loadfrom("get_linear_damp", 1740695150).}
  proc `angularDamp=`*(self: RigidBody2D; angularDamp: Float) {.loadfrom("set_angular_damp", 373806689).}
  proc angularDamp*(self: RigidBody2D): Float {.loadfrom("get_angular_damp", 1740695150).}
  proc `linearVelocity=`*(self: RigidBody2D; linearVelocity: Vector2) {.loadfrom("set_linear_velocity", 743155724).}
  proc linearVelocity*(self: RigidBody2D): Vector2 {.loadfrom("get_linear_velocity", 3341600327).}
  proc `angularVelocity=`*(self: RigidBody2D; angularVelocity: Float) {.loadfrom("set_angular_velocity", 373806689).}
  proc angularVelocity*(self: RigidBody2D): Float {.loadfrom("get_angular_velocity", 1740695150).}
  proc `maxContactsReported=`*(self: RigidBody2D; amount: int32) {.loadfrom("set_max_contacts_reported", 1286410249).}
  proc maxContactsReported*(self: RigidBody2D): int32 {.loadfrom("get_max_contacts_reported", 3905245786).}
  proc getContactCount*(self: RigidBody2D): int32 {.loadfrom("get_contact_count", 3905245786).}
  proc `useCustomIntegrator=`*(self: RigidBody2D; enable: Bool) {.loadfrom("set_use_custom_integrator", 2586408642).}
  proc isUsingCustomIntegrator*(self: RigidBody2D): Bool {.loadfrom("is_using_custom_integrator", 2240911060).}
  proc `contactMonitor=`*(self: RigidBody2D; enabled: Bool) {.loadfrom("set_contact_monitor", 2586408642).}
  proc isContactMonitorEnabled*(self: RigidBody2D): Bool {.loadfrom("is_contact_monitor_enabled", 36873697).}
  proc `continuousCollisionDetectionMode=`*(self: RigidBody2D; mode: RigidBody2D|>CCDMode) {.loadfrom("set_continuous_collision_detection_mode", 1000241384).}
  proc continuousCollisionDetectionMode*(self: RigidBody2D): RigidBody2D|>CCDMode {.loadfrom("get_continuous_collision_detection_mode", 815214376).}
  proc setAxisVelocity*(self: RigidBody2D; axisVelocity: Vector2) {.loadfrom("set_axis_velocity", 743155724).}
  proc applyCentralImpulse*(self: RigidBody2D; impulse: Vector2 = gdvec(0, 0)) {.loadfrom("apply_central_impulse", 3862383994).}
  proc applyImpulse*(self: RigidBody2D; impulse: Vector2; position: Vector2 = gdvec(0, 0)) {.loadfrom("apply_impulse", 496058220).}
  proc applyTorqueImpulse*(self: RigidBody2D; torque: Float) {.loadfrom("apply_torque_impulse", 373806689).}
  proc applyCentralForce*(self: RigidBody2D; force: Vector2) {.loadfrom("apply_central_force", 743155724).}
  proc applyForce*(self: RigidBody2D; force: Vector2; position: Vector2 = gdvec(0, 0)) {.loadfrom("apply_force", 496058220).}
  proc applyTorque*(self: RigidBody2D; torque: Float) {.loadfrom("apply_torque", 373806689).}
  proc addConstantCentralForce*(self: RigidBody2D; force: Vector2) {.loadfrom("add_constant_central_force", 743155724).}
  proc addConstantForce*(self: RigidBody2D; force: Vector2; position: Vector2 = gdvec(0, 0)) {.loadfrom("add_constant_force", 496058220).}
  proc addConstantTorque*(self: RigidBody2D; torque: Float) {.loadfrom("add_constant_torque", 373806689).}
  proc `constantForce=`*(self: RigidBody2D; force: Vector2) {.loadfrom("set_constant_force", 743155724).}
  proc constantForce*(self: RigidBody2D): Vector2 {.loadfrom("get_constant_force", 3341600327).}
  proc `constantTorque=`*(self: RigidBody2D; torque: Float) {.loadfrom("set_constant_torque", 373806689).}
  proc constantTorque*(self: RigidBody2D): Float {.loadfrom("get_constant_torque", 1740695150).}
  proc `sleeping=`*(self: RigidBody2D; sleeping: Bool) {.loadfrom("set_sleeping", 2586408642).}
  proc isSleeping*(self: RigidBody2D): Bool {.loadfrom("is_sleeping", 36873697).}
  proc `canSleep=`*(self: RigidBody2D; ableToSleep: Bool) {.loadfrom("set_can_sleep", 2586408642).}
  proc isAbleToSleep*(self: RigidBody2D): Bool {.loadfrom("is_able_to_sleep", 36873697).}
  proc `lockRotationEnabled=`*(self: RigidBody2D; lockRotation: Bool) {.loadfrom("set_lock_rotation_enabled", 2586408642).}
  proc isLockRotationEnabled*(self: RigidBody2D): Bool {.loadfrom("is_lock_rotation_enabled", 36873697).}
  proc `freezeEnabled=`*(self: RigidBody2D; freezeMode: Bool) {.loadfrom("set_freeze_enabled", 2586408642).}
  proc isFreezeEnabled*(self: RigidBody2D): Bool {.loadfrom("is_freeze_enabled", 36873697).}
  proc `freezeMode=`*(self: RigidBody2D; freezeMode: RigidBody2D|>FreezeMode) {.loadfrom("set_freeze_mode", 1705112154).}
  proc freezeMode*(self: RigidBody2D): RigidBody2D|>FreezeMode {.loadfrom("get_freeze_mode", 2016872314).}
  proc getCollidingBodies*(self: RigidBody2D): TypedArray[Node2D] {.loadfrom("get_colliding_bodies", 3995934104).}

# StaticBody2D
define_godot_engine_class_essencials(StaticBody2D, PhysicsBody2D)
StaticBody2D.memberProcs:
  proc `constantLinearVelocity=`*(self: StaticBody2D; vel: Vector2) {.loadfrom("set_constant_linear_velocity", 743155724).}
  proc `constantAngularVelocity=`*(self: StaticBody2D; vel: Float) {.loadfrom("set_constant_angular_velocity", 373806689).}
  proc constantLinearVelocity*(self: StaticBody2D): Vector2 {.loadfrom("get_constant_linear_velocity", 3341600327).}
  proc constantAngularVelocity*(self: StaticBody2D): Float {.loadfrom("get_constant_angular_velocity", 1740695150).}
  proc `physicsMaterialOverride=`*(self: StaticBody2D; physicsMaterialOverride: Ref[PhysicsMaterial]) {.loadfrom("set_physics_material_override", 1784508650).}
  proc physicsMaterialOverride*(self: StaticBody2D): Ref[PhysicsMaterial] {.loadfrom("get_physics_material_override", 2521850424).}

# VehicleBody3D
define_godot_engine_class_essencials(VehicleBody3D, RigidBody3D)
VehicleBody3D.memberProcs:
  proc `engineForce=`*(self: VehicleBody3D; engineForce: Float) {.loadfrom("set_engine_force", 373806689).}
  proc engineForce*(self: VehicleBody3D): Float {.loadfrom("get_engine_force", 1740695150).}
  proc `brake=`*(self: VehicleBody3D; brake: Float) {.loadfrom("set_brake", 373806689).}
  proc brake*(self: VehicleBody3D): Float {.loadfrom("get_brake", 1740695150).}
  proc `steering=`*(self: VehicleBody3D; steering: Float) {.loadfrom("set_steering", 373806689).}
  proc steering*(self: VehicleBody3D): Float {.loadfrom("get_steering", 1740695150).}

# AnimatableBody3D
define_godot_engine_class_essencials(AnimatableBody3D, StaticBody3D)
AnimatableBody3D.memberProcs:
  proc `syncToPhysics=`*(self: AnimatableBody3D; enable: Bool) {.loadfrom("set_sync_to_physics", 2586408642).}
  proc isSyncToPhysicsEnabled*(self: AnimatableBody3D): Bool {.loadfrom("is_sync_to_physics_enabled", 36873697).}

# CSGCombiner3D
define_godot_engine_class_essencials(CSGCombiner3D, CSGShape3D)

# CSGPrimitive3D
define_godot_engine_class_essencials(CSGPrimitive3D, CSGShape3D)
CSGPrimitive3D.memberProcs:
  proc `flipFaces=`*(self: CSGPrimitive3D; flipFaces: Bool) {.loadfrom("set_flip_faces", 2586408642).}
  proc flipFaces*(self: CSGPrimitive3D): Bool {.loadfrom("get_flip_faces", 2240911060).}

# SoftBody3D
define_godot_engine_class_essencials(SoftBody3D, MeshInstance3D)
SoftBody3D.memberProcs:
  proc getPhysicsRid*(self: SoftBody3D): RID {.loadfrom("get_physics_rid", 2944877500).}
  proc `collisionMask=`*(self: SoftBody3D; collisionMask: uint32) {.loadfrom("set_collision_mask", 1286410249).}
  proc collisionMask*(self: SoftBody3D): uint32 {.loadfrom("get_collision_mask", 3905245786).}
  proc `collisionLayer=`*(self: SoftBody3D; collisionLayer: uint32) {.loadfrom("set_collision_layer", 1286410249).}
  proc collisionLayer*(self: SoftBody3D): uint32 {.loadfrom("get_collision_layer", 3905245786).}
  proc setCollisionMaskValue*(self: SoftBody3D; layerNumber: int32; value: Bool) {.loadfrom("set_collision_mask_value", 300928843).}
  proc getCollisionMaskValue*(self: SoftBody3D; layerNumber: int32): Bool {.loadfrom("get_collision_mask_value", 1116898809).}
  proc setCollisionLayerValue*(self: SoftBody3D; layerNumber: int32; value: Bool) {.loadfrom("set_collision_layer_value", 300928843).}
  proc getCollisionLayerValue*(self: SoftBody3D; layerNumber: int32): Bool {.loadfrom("get_collision_layer_value", 1116898809).}
  proc `parentCollisionIgnore=`*(self: SoftBody3D; parentCollisionIgnore: NodePath) {.loadfrom("set_parent_collision_ignore", 1348162250).}
  proc parentCollisionIgnore*(self: SoftBody3D): NodePath {.loadfrom("get_parent_collision_ignore", 4075236667).}
  proc `disableMode=`*(self: SoftBody3D; mode: SoftBody3D|>DisableMode) {.loadfrom("set_disable_mode", 1104158384).}
  proc disableMode*(self: SoftBody3D): SoftBody3D|>DisableMode {.loadfrom("get_disable_mode", 4135042476).}
  proc getCollisionExceptions*(self: SoftBody3D): TypedArray[PhysicsBody3D] {.loadfrom("get_collision_exceptions", 2915620761).}
  proc addCollisionExceptionWith*(self: SoftBody3D; body: ptr Node) {.loadfrom("add_collision_exception_with", 1078189570).}
  proc removeCollisionExceptionWith*(self: SoftBody3D; body: ptr Node) {.loadfrom("remove_collision_exception_with", 1078189570).}
  proc `simulationPrecision=`*(self: SoftBody3D; simulationPrecision: int32) {.loadfrom("set_simulation_precision", 1286410249).}
  proc simulationPrecision*(self: SoftBody3D): int32 {.loadfrom("get_simulation_precision", 2455072627).}
  proc `totalMass=`*(self: SoftBody3D; mass: Float) {.loadfrom("set_total_mass", 373806689).}
  proc totalMass*(self: SoftBody3D): Float {.loadfrom("get_total_mass", 191475506).}
  proc `linearStiffness=`*(self: SoftBody3D; linearStiffness: Float) {.loadfrom("set_linear_stiffness", 373806689).}
  proc linearStiffness*(self: SoftBody3D): Float {.loadfrom("get_linear_stiffness", 191475506).}
  proc `pressureCoefficient=`*(self: SoftBody3D; pressureCoefficient: Float) {.loadfrom("set_pressure_coefficient", 373806689).}
  proc pressureCoefficient*(self: SoftBody3D): Float {.loadfrom("get_pressure_coefficient", 191475506).}
  proc `dampingCoefficient=`*(self: SoftBody3D; dampingCoefficient: Float) {.loadfrom("set_damping_coefficient", 373806689).}
  proc dampingCoefficient*(self: SoftBody3D): Float {.loadfrom("get_damping_coefficient", 191475506).}
  proc `dragCoefficient=`*(self: SoftBody3D; dragCoefficient: Float) {.loadfrom("set_drag_coefficient", 373806689).}
  proc dragCoefficient*(self: SoftBody3D): Float {.loadfrom("get_drag_coefficient", 191475506).}
  proc getPointTransform*(self: SoftBody3D; pointIndex: int32): Vector3 {.loadfrom("get_point_transform", 871989493).}
  proc setPointPinned*(self: SoftBody3D; pointIndex: int32; pinned: Bool; attachmentPath: NodePath = NodePath|>init()) {.loadfrom("set_point_pinned", 3814935226).}
  proc isPointPinned*(self: SoftBody3D; pointIndex: int32): Bool {.loadfrom("is_point_pinned", 1116898809).}
  proc `rayPickable=`*(self: SoftBody3D; rayPickable: Bool) {.loadfrom("set_ray_pickable", 2586408642).}
  proc isRayPickable*(self: SoftBody3D): Bool {.loadfrom("is_ray_pickable", 36873697).}

# AnimatedSprite3D
define_godot_engine_class_essencials(AnimatedSprite3D, SpriteBase3D)
AnimatedSprite3D.memberProcs:
  proc `spriteFrames=`*(self: AnimatedSprite3D; spriteFrames: Ref[SpriteFrames]) {.loadfrom("set_sprite_frames", 905781144).}
  proc spriteFrames*(self: AnimatedSprite3D): Ref[SpriteFrames] {.loadfrom("get_sprite_frames", 3804851214).}
  proc `animation=`*(self: AnimatedSprite3D; name: StringName) {.loadfrom("set_animation", 3304788590).}
  proc animation*(self: AnimatedSprite3D): StringName {.loadfrom("get_animation", 2002593661).}
  proc `autoplay=`*(self: AnimatedSprite3D; name: String) {.loadfrom("set_autoplay", 83702148).}
  proc autoplay*(self: AnimatedSprite3D): String {.loadfrom("get_autoplay", 201670096).}
  proc isPlaying*(self: AnimatedSprite3D): Bool {.loadfrom("is_playing", 36873697).}
  proc play*(self: AnimatedSprite3D; name: StringName = ""; customSpeed: Float = 1.0; fromEnd: Bool = false) {.loadfrom("play", 2372066587).}
  proc playBackwards*(self: AnimatedSprite3D; name: StringName = "") {.loadfrom("play_backwards", 1421762485).}
  proc pause*(self: AnimatedSprite3D) {.loadfrom("pause", 3218959716).}
  proc stop*(self: AnimatedSprite3D) {.loadfrom("stop", 3218959716).}
  proc `frame=`*(self: AnimatedSprite3D; frame: int32) {.loadfrom("set_frame", 1286410249).}
  proc frame*(self: AnimatedSprite3D): int32 {.loadfrom("get_frame", 3905245786).}
  proc `frameProgress=`*(self: AnimatedSprite3D; progress: Float) {.loadfrom("set_frame_progress", 373806689).}
  proc frameProgress*(self: AnimatedSprite3D): Float {.loadfrom("get_frame_progress", 1740695150).}
  proc setFrameAndProgress*(self: AnimatedSprite3D; frame: int32; progress: Float) {.loadfrom("set_frame_and_progress", 1602489585).}
  proc `speedScale=`*(self: AnimatedSprite3D; speedScale: Float) {.loadfrom("set_speed_scale", 373806689).}
  proc speedScale*(self: AnimatedSprite3D): Float {.loadfrom("get_speed_scale", 1740695150).}
  proc getPlayingSpeed*(self: AnimatedSprite3D): Float {.loadfrom("get_playing_speed", 1740695150).}

# Sprite3D
define_godot_engine_class_essencials(Sprite3D, SpriteBase3D)
Sprite3D.memberProcs:
  proc `texture=`*(self: Sprite3D; texture: Ref[Texture2D]) {.loadfrom("set_texture", 4051416890).}
  proc texture*(self: Sprite3D): Ref[Texture2D] {.loadfrom("get_texture", 3635182373).}
  proc `regionEnabled=`*(self: Sprite3D; enabled: Bool) {.loadfrom("set_region_enabled", 2586408642).}
  proc isRegionEnabled*(self: Sprite3D): Bool {.loadfrom("is_region_enabled", 36873697).}
  proc `regionRect=`*(self: Sprite3D; rect: Rect2) {.loadfrom("set_region_rect", 2046264180).}
  proc regionRect*(self: Sprite3D): Rect2 {.loadfrom("get_region_rect", 1639390495).}
  proc `frame=`*(self: Sprite3D; frame: int32) {.loadfrom("set_frame", 1286410249).}
  proc frame*(self: Sprite3D): int32 {.loadfrom("get_frame", 3905245786).}
  proc `frameCoords=`*(self: Sprite3D; coords: Vector2i) {.loadfrom("set_frame_coords", 1130785943).}
  proc frameCoords*(self: Sprite3D): Vector2i {.loadfrom("get_frame_coords", 3690982128).}
  proc `vframes=`*(self: Sprite3D; vframes: int32) {.loadfrom("set_vframes", 1286410249).}
  proc vframes*(self: Sprite3D): int32 {.loadfrom("get_vframes", 3905245786).}
  proc `hframes=`*(self: Sprite3D; hframes: int32) {.loadfrom("set_hframes", 1286410249).}
  proc hframes*(self: Sprite3D): int32 {.loadfrom("get_hframes", 3905245786).}

# EditorCommandPalette
define_godot_engine_class_essencials(EditorCommandPalette, ConfirmationDialog)
EditorCommandPalette.memberProcs:
  proc addCommand*(self: EditorCommandPalette; commandName: String; keyName: String; bindedCallable: Callable; shortcutText: String = "None") {.loadfrom("add_command", 3664614892).}
  proc removeCommand*(self: EditorCommandPalette; keyName: String) {.loadfrom("remove_command", 83702148).}

# EditorFileDialog
define_godot_engine_class_essencials(EditorFileDialog, ConfirmationDialog)
EditorFileDialog.memberProcs:
  proc clearFilters*(self: EditorFileDialog) {.loadfrom("clear_filters", 3218959716).}
  proc addFilter*(self: EditorFileDialog; filter: String; description: String = "") {.loadfrom("add_filter", 233059325).}
  proc `filters=`*(self: EditorFileDialog; filters: PackedStringArray) {.loadfrom("set_filters", 4015028928).}
  proc filters*(self: EditorFileDialog): PackedStringArray {.loadfrom("get_filters", 1139954409).}
  proc currentDir*(self: EditorFileDialog): String {.loadfrom("get_current_dir", 201670096).}
  proc currentFile*(self: EditorFileDialog): String {.loadfrom("get_current_file", 201670096).}
  proc currentPath*(self: EditorFileDialog): String {.loadfrom("get_current_path", 201670096).}
  proc `currentDir=`*(self: EditorFileDialog; dir: String) {.loadfrom("set_current_dir", 83702148).}
  proc `currentFile=`*(self: EditorFileDialog; file: String) {.loadfrom("set_current_file", 83702148).}
  proc `currentPath=`*(self: EditorFileDialog; path: String) {.loadfrom("set_current_path", 83702148).}
  proc `fileMode=`*(self: EditorFileDialog; mode: EditorFileDialog|>FileMode) {.loadfrom("set_file_mode", 274150415).}
  proc fileMode*(self: EditorFileDialog): EditorFileDialog|>FileMode {.loadfrom("get_file_mode", 2681044145).}
  proc getVbox*(self: EditorFileDialog): VBoxContainer {.loadfrom("get_vbox", 915758477).}
  proc getLineEdit*(self: EditorFileDialog): LineEdit {.loadfrom("get_line_edit", 4071694264).}
  proc `access=`*(self: EditorFileDialog; access: EditorFileDialog|>Access) {.loadfrom("set_access", 3882893764).}
  proc access*(self: EditorFileDialog): EditorFileDialog|>Access {.loadfrom("get_access", 778734016).}
  proc `showHiddenFiles=`*(self: EditorFileDialog; show: Bool) {.loadfrom("set_show_hidden_files", 2586408642).}
  proc isShowingHiddenFiles*(self: EditorFileDialog): Bool {.loadfrom("is_showing_hidden_files", 36873697).}
  proc `displayMode=`*(self: EditorFileDialog; mode: EditorFileDialog|>DisplayMode) {.loadfrom("set_display_mode", 3049004050).}
  proc displayMode*(self: EditorFileDialog): EditorFileDialog|>DisplayMode {.loadfrom("get_display_mode", 3517174669).}
  proc `disableOverwriteWarning=`*(self: EditorFileDialog; disable: Bool) {.loadfrom("set_disable_overwrite_warning", 2586408642).}
  proc isOverwriteWarningDisabled*(self: EditorFileDialog): Bool {.loadfrom("is_overwrite_warning_disabled", 36873697).}
  proc invalidate*(self: EditorFileDialog) {.loadfrom("invalidate", 3218959716).}

# FileDialog
define_godot_engine_class_essencials(FileDialog, ConfirmationDialog)
FileDialog.memberProcs:
  proc clearFilters*(self: FileDialog) {.loadfrom("clear_filters", 3218959716).}
  proc addFilter*(self: FileDialog; filter: String; description: String = "") {.loadfrom("add_filter", 233059325).}
  proc `filters=`*(self: FileDialog; filters: PackedStringArray) {.loadfrom("set_filters", 4015028928).}
  proc filters*(self: FileDialog): PackedStringArray {.loadfrom("get_filters", 1139954409).}
  proc currentDir*(self: FileDialog): String {.loadfrom("get_current_dir", 201670096).}
  proc currentFile*(self: FileDialog): String {.loadfrom("get_current_file", 201670096).}
  proc currentPath*(self: FileDialog): String {.loadfrom("get_current_path", 201670096).}
  proc `currentDir=`*(self: FileDialog; dir: String) {.loadfrom("set_current_dir", 83702148).}
  proc `currentFile=`*(self: FileDialog; file: String) {.loadfrom("set_current_file", 83702148).}
  proc `currentPath=`*(self: FileDialog; path: String) {.loadfrom("set_current_path", 83702148).}
  proc `modeOverridesTitle=`*(self: FileDialog; override: Bool) {.loadfrom("set_mode_overrides_title", 2586408642).}
  proc isModeOverridingTitle*(self: FileDialog): Bool {.loadfrom("is_mode_overriding_title", 36873697).}
  proc `fileMode=`*(self: FileDialog; mode: FileDialog|>FileMode) {.loadfrom("set_file_mode", 3654936397).}
  proc fileMode*(self: FileDialog): FileDialog|>FileMode {.loadfrom("get_file_mode", 4074825319).}
  proc getVbox*(self: FileDialog): VBoxContainer {.loadfrom("get_vbox", 915758477).}
  proc getLineEdit*(self: FileDialog): LineEdit {.loadfrom("get_line_edit", 4071694264).}
  proc `access=`*(self: FileDialog; access: FileDialog|>Access) {.loadfrom("set_access", 4104413466).}
  proc access*(self: FileDialog): FileDialog|>Access {.loadfrom("get_access", 3344081076).}
  proc `rootSubfolder=`*(self: FileDialog; dir: String) {.loadfrom("set_root_subfolder", 83702148).}
  proc rootSubfolder*(self: FileDialog): String {.loadfrom("get_root_subfolder", 201670096).}
  proc `showHiddenFiles=`*(self: FileDialog; show: Bool) {.loadfrom("set_show_hidden_files", 2586408642).}
  proc isShowingHiddenFiles*(self: FileDialog): Bool {.loadfrom("is_showing_hidden_files", 36873697).}
  proc deselectAll*(self: FileDialog) {.loadfrom("deselect_all", 3218959716).}
  proc invalidate*(self: FileDialog) {.loadfrom("invalidate", 3218959716).}

# ScriptCreateDialog
define_godot_engine_class_essencials(ScriptCreateDialog, ConfirmationDialog)
ScriptCreateDialog.memberProcs:
  proc config*(self: ScriptCreateDialog; inherits: String; path: String; builtInEnabled: Bool = true; loadEnabled: Bool = true) {.loadfrom("config", 4210001628).}

# InputEventGesture
define_godot_engine_class_essencials(InputEventGesture, InputEventWithModifiers)
InputEventGesture.memberProcs:
  proc `position=`*(self: Ref[InputEventGesture]; position: Vector2) {.loadfrom("set_position", 743155724).}
  proc position*(self: Ref[InputEventGesture]): Vector2 {.loadfrom("get_position", 3341600327).}

# InputEventKey
define_godot_engine_class_essencials(InputEventKey, InputEventWithModifiers)
InputEventKey.memberProcs:
  proc `pressed=`*(self: Ref[InputEventKey]; pressed: Bool) {.loadfrom("set_pressed", 2586408642).}
  proc `keycode=`*(self: Ref[InputEventKey]; keycode: Key) {.loadfrom("set_keycode", 888074362).}
  proc keycode*(self: Ref[InputEventKey]): Key {.loadfrom("get_keycode", 1585896689).}
  proc `physicalKeycode=`*(self: Ref[InputEventKey]; physicalKeycode: Key) {.loadfrom("set_physical_keycode", 888074362).}
  proc physicalKeycode*(self: Ref[InputEventKey]): Key {.loadfrom("get_physical_keycode", 1585896689).}
  proc `keyLabel=`*(self: Ref[InputEventKey]; keyLabel: Key) {.loadfrom("set_key_label", 888074362).}
  proc keyLabel*(self: Ref[InputEventKey]): Key {.loadfrom("get_key_label", 1585896689).}
  proc `unicode=`*(self: Ref[InputEventKey]; unicode: Int) {.loadfrom("set_unicode", 1286410249).}
  proc unicode*(self: Ref[InputEventKey]): Int {.loadfrom("get_unicode", 3905245786).}
  proc `echo=`*(self: Ref[InputEventKey]; echo: Bool) {.loadfrom("set_echo", 2586408642).}
  proc getKeycodeWithModifiers*(self: Ref[InputEventKey]): Key {.loadfrom("get_keycode_with_modifiers", 1585896689).}
  proc getPhysicalKeycodeWithModifiers*(self: Ref[InputEventKey]): Key {.loadfrom("get_physical_keycode_with_modifiers", 1585896689).}
  proc getKeyLabelWithModifiers*(self: Ref[InputEventKey]): Key {.loadfrom("get_key_label_with_modifiers", 1585896689).}
  proc asTextKeycode*(self: Ref[InputEventKey]): String {.loadfrom("as_text_keycode", 201670096).}
  proc asTextPhysicalKeycode*(self: Ref[InputEventKey]): String {.loadfrom("as_text_physical_keycode", 201670096).}
  proc asTextKeyLabel*(self: Ref[InputEventKey]): String {.loadfrom("as_text_key_label", 201670096).}

# InputEventMouse
define_godot_engine_class_essencials(InputEventMouse, InputEventWithModifiers)
InputEventMouse.memberProcs:
  proc `buttonMask=`*(self: Ref[InputEventMouse]; buttonMask: set[MouseButtonMask]) {.loadfrom("set_button_mask", 3950145251).}
  proc buttonMask*(self: Ref[InputEventMouse]): set[MouseButtonMask] {.loadfrom("get_button_mask", 2512161324).}
  proc `position=`*(self: Ref[InputEventMouse]; position: Vector2) {.loadfrom("set_position", 743155724).}
  proc position*(self: Ref[InputEventMouse]): Vector2 {.loadfrom("get_position", 3341600327).}
  proc `globalPosition=`*(self: Ref[InputEventMouse]; globalPosition: Vector2) {.loadfrom("set_global_position", 743155724).}
  proc globalPosition*(self: Ref[InputEventMouse]): Vector2 {.loadfrom("get_global_position", 3341600327).}

# QuadMesh
define_godot_engine_class_essencials(QuadMesh, PlaneMesh)

# CompressedCubemap
define_godot_engine_class_essencials(CompressedCubemap, CompressedTextureLayered)

# CompressedCubemapArray
define_godot_engine_class_essencials(CompressedCubemapArray, CompressedTextureLayered)

# CompressedTexture2DArray
define_godot_engine_class_essencials(CompressedTexture2DArray, CompressedTextureLayered)

# Cubemap
define_godot_engine_class_essencials(Cubemap, ImageTextureLayered)
Cubemap.memberProcs:
  proc createPlaceholder*(self: Ref[Cubemap]): Ref[Resource] {.loadfrom("create_placeholder", 121922552).}

# CubemapArray
define_godot_engine_class_essencials(CubemapArray, ImageTextureLayered)
CubemapArray.memberProcs:
  proc createPlaceholder*(self: Ref[CubemapArray]): Ref[Resource] {.loadfrom("create_placeholder", 121922552).}

# Texture2DArray
define_godot_engine_class_essencials(Texture2DArray, ImageTextureLayered)
Texture2DArray.memberProcs:
  proc createPlaceholder*(self: Ref[Texture2DArray]): Ref[Resource] {.loadfrom("create_placeholder", 121922552).}

# PlaceholderCubemap
define_godot_engine_class_essencials(PlaceholderCubemap, PlaceholderTextureLayered)

# PlaceholderCubemapArray
define_godot_engine_class_essencials(PlaceholderCubemapArray, PlaceholderTextureLayered)

# PlaceholderTexture2DArray
define_godot_engine_class_essencials(PlaceholderTexture2DArray, PlaceholderTextureLayered)

# VisualShaderNodeCubemapParameter
define_godot_engine_class_essencials(VisualShaderNodeCubemapParameter, VisualShaderNodeTextureParameter)

# VisualShaderNodeTexture2DArrayParameter
define_godot_engine_class_essencials(VisualShaderNodeTexture2DArrayParameter, VisualShaderNodeTextureParameter)

# VisualShaderNodeTexture2DParameter
define_godot_engine_class_essencials(VisualShaderNodeTexture2DParameter, VisualShaderNodeTextureParameter)

# VisualShaderNodeTexture3DParameter
define_godot_engine_class_essencials(VisualShaderNodeTexture3DParameter, VisualShaderNodeTextureParameter)

# VisualShaderNodeTextureParameterTriplanar
define_godot_engine_class_essencials(VisualShaderNodeTextureParameterTriplanar, VisualShaderNodeTextureParameter)

# VisualShaderNodeExpression
define_godot_engine_class_essencials(VisualShaderNodeExpression, VisualShaderNodeGroupBase)
VisualShaderNodeExpression.memberProcs:
  proc `expression=`*(self: Ref[VisualShaderNodeExpression]; expression: String) {.loadfrom("set_expression", 83702148).}
  proc expression*(self: Ref[VisualShaderNodeExpression]): String {.loadfrom("get_expression", 201670096).}

# EditorResourcePicker
define_godot_engine_class_essencials(EditorResourcePicker, HBoxContainer)
method setCreateOptions*(self: EditorResourcePicker; menuNode: ptr Object) {.base.} = (discard)
method handleMenuSelected*(self: EditorResourcePicker; id: int32): Bool {.base.} = (discard)
EditorResourcePicker.memberProcs:
  proc `baseType=`*(self: EditorResourcePicker; baseType: String) {.loadfrom("set_base_type", 83702148).}
  proc baseType*(self: EditorResourcePicker): String {.loadfrom("get_base_type", 201670096).}
  proc getAllowedTypes*(self: EditorResourcePicker): PackedStringArray {.loadfrom("get_allowed_types", 1139954409).}
  proc `editedResource=`*(self: EditorResourcePicker; resource: Ref[Resource]) {.loadfrom("set_edited_resource", 968641751).}
  proc editedResource*(self: EditorResourcePicker): Ref[Resource] {.loadfrom("get_edited_resource", 2674603643).}
  proc `toggleMode=`*(self: EditorResourcePicker; enable: Bool) {.loadfrom("set_toggle_mode", 2586408642).}
  proc isToggleMode*(self: EditorResourcePicker): Bool {.loadfrom("is_toggle_mode", 36873697).}
  proc setTogglePressed*(self: EditorResourcePicker; pressed: Bool) {.loadfrom("set_toggle_pressed", 2586408642).}
  proc `editable=`*(self: EditorResourcePicker; enable: Bool) {.loadfrom("set_editable", 2586408642).}
  proc isEditable*(self: EditorResourcePicker): Bool {.loadfrom("is_editable", 36873697).}

# ColorPicker
define_godot_engine_class_essencials(ColorPicker, VBoxContainer)
ColorPicker.memberProcs:
  proc `pickColor=`*(self: ColorPicker; color: Color) {.loadfrom("set_pick_color", 2920490490).}
  proc pickColor*(self: ColorPicker): Color {.loadfrom("get_pick_color", 3444240500).}
  proc `deferredMode=`*(self: ColorPicker; mode: Bool) {.loadfrom("set_deferred_mode", 2586408642).}
  proc isDeferredMode*(self: ColorPicker): Bool {.loadfrom("is_deferred_mode", 36873697).}
  proc `colorMode=`*(self: ColorPicker; colorMode: ColorPicker|>ColorModeType) {.loadfrom("set_color_mode", 1579114136).}
  proc colorMode*(self: ColorPicker): ColorPicker|>ColorModeType {.loadfrom("get_color_mode", 392907674).}
  proc `editAlpha=`*(self: ColorPicker; show: Bool) {.loadfrom("set_edit_alpha", 2586408642).}
  proc isEditingAlpha*(self: ColorPicker): Bool {.loadfrom("is_editing_alpha", 36873697).}
  proc `canAddSwatches=`*(self: ColorPicker; enabled: Bool) {.loadfrom("set_can_add_swatches", 2586408642).}
  proc areSwatchesEnabled*(self: ColorPicker): Bool {.loadfrom("are_swatches_enabled", 36873697).}
  proc `presetsVisible=`*(self: ColorPicker; visible: Bool) {.loadfrom("set_presets_visible", 2586408642).}
  proc arePresetsVisible*(self: ColorPicker): Bool {.loadfrom("are_presets_visible", 36873697).}
  proc `modesVisible=`*(self: ColorPicker; visible: Bool) {.loadfrom("set_modes_visible", 2586408642).}
  proc areModesVisible*(self: ColorPicker): Bool {.loadfrom("are_modes_visible", 36873697).}
  proc `samplerVisible=`*(self: ColorPicker; visible: Bool) {.loadfrom("set_sampler_visible", 2586408642).}
  proc isSamplerVisible*(self: ColorPicker): Bool {.loadfrom("is_sampler_visible", 36873697).}
  proc `slidersVisible=`*(self: ColorPicker; visible: Bool) {.loadfrom("set_sliders_visible", 2586408642).}
  proc areSlidersVisible*(self: ColorPicker): Bool {.loadfrom("are_sliders_visible", 36873697).}
  proc `hexVisible=`*(self: ColorPicker; visible: Bool) {.loadfrom("set_hex_visible", 2586408642).}
  proc isHexVisible*(self: ColorPicker): Bool {.loadfrom("is_hex_visible", 36873697).}
  proc addPreset*(self: ColorPicker; color: Color) {.loadfrom("add_preset", 2920490490).}
  proc erasePreset*(self: ColorPicker; color: Color) {.loadfrom("erase_preset", 2920490490).}
  proc getPresets*(self: ColorPicker): PackedColorArray {.loadfrom("get_presets", 1392750486).}
  proc addRecentPreset*(self: ColorPicker; color: Color) {.loadfrom("add_recent_preset", 2920490490).}
  proc eraseRecentPreset*(self: ColorPicker; color: Color) {.loadfrom("erase_recent_preset", 2920490490).}
  proc getRecentPresets*(self: ColorPicker): PackedColorArray {.loadfrom("get_recent_presets", 1392750486).}
  proc `pickerShape=`*(self: ColorPicker; shape: ColorPicker|>PickerShapeType) {.loadfrom("set_picker_shape", 3981373861).}
  proc pickerShape*(self: ColorPicker): ColorPicker|>PickerShapeType {.loadfrom("get_picker_shape", 1143229889).}

# FileSystemDock
define_godot_engine_class_essencials(FileSystemDock, VBoxContainer)
FileSystemDock.memberProcs:
  proc navigateToPath*(self: FileSystemDock; path: String) {.loadfrom("navigate_to_path", 83702148).}
  proc addResourceTooltipPlugin*(self: FileSystemDock; plugin: Ref[EditorResourceTooltipPlugin]) {.loadfrom("add_resource_tooltip_plugin", 2258356838).}
  proc removeResourceTooltipPlugin*(self: FileSystemDock; plugin: Ref[EditorResourceTooltipPlugin]) {.loadfrom("remove_resource_tooltip_plugin", 2258356838).}

# ScriptEditorBase
define_godot_engine_class_essencials(ScriptEditorBase, VBoxContainer)
ScriptEditorBase.memberProcs:
  proc getBaseEditor*(self: ScriptEditorBase): Control {.loadfrom("get_base_editor", 2783021301).}
  proc addSyntaxHighlighter*(self: ScriptEditorBase; highlighter: Ref[EditorSyntaxHighlighter]) {.loadfrom("add_syntax_highlighter", 1092774468).}

# PhysicalBone2D
define_godot_engine_class_essencials(PhysicalBone2D, RigidBody2D)
PhysicalBone2D.memberProcs:
  proc getJoint*(self: PhysicalBone2D): Joint2D {.loadfrom("get_joint", 3582132112).}
  proc autoConfigureJoint*(self: PhysicalBone2D): Bool {.loadfrom("get_auto_configure_joint", 36873697).}
  proc `autoConfigureJoint=`*(self: PhysicalBone2D; autoConfigureJoint: Bool) {.loadfrom("set_auto_configure_joint", 2586408642).}
  proc `simulatePhysics=`*(self: PhysicalBone2D; simulatePhysics: Bool) {.loadfrom("set_simulate_physics", 2586408642).}
  proc simulatePhysics*(self: PhysicalBone2D): Bool {.loadfrom("get_simulate_physics", 36873697).}
  proc isSimulatingPhysics*(self: PhysicalBone2D): Bool {.loadfrom("is_simulating_physics", 36873697).}
  proc `bone2dNodepath=`*(self: PhysicalBone2D; nodepath: NodePath) {.loadfrom("set_bone2d_nodepath", 1348162250).}
  proc bone2dNodepath*(self: PhysicalBone2D): NodePath {.loadfrom("get_bone2d_nodepath", 4075236667).}
  proc `bone2dIndex=`*(self: PhysicalBone2D; boneIndex: int32) {.loadfrom("set_bone2d_index", 1286410249).}
  proc bone2dIndex*(self: PhysicalBone2D): int32 {.loadfrom("get_bone2d_index", 3905245786).}
  proc `followBoneWhenSimulating=`*(self: PhysicalBone2D; followBone: Bool) {.loadfrom("set_follow_bone_when_simulating", 2586408642).}
  proc followBoneWhenSimulating*(self: PhysicalBone2D): Bool {.loadfrom("get_follow_bone_when_simulating", 36873697).}

# AnimatableBody2D
define_godot_engine_class_essencials(AnimatableBody2D, StaticBody2D)
AnimatableBody2D.memberProcs:
  proc `syncToPhysics=`*(self: AnimatableBody2D; enable: Bool) {.loadfrom("set_sync_to_physics", 2586408642).}
  proc isSyncToPhysicsEnabled*(self: AnimatableBody2D): Bool {.loadfrom("is_sync_to_physics_enabled", 36873697).}

# CSGBox3D
define_godot_engine_class_essencials(CSGBox3D, CSGPrimitive3D)
CSGBox3D.memberProcs:
  proc `size=`*(self: CSGBox3D; size: Vector3) {.loadfrom("set_size", 3460891852).}
  proc size*(self: CSGBox3D): Vector3 {.loadfrom("get_size", 3360562783).}
  proc `material=`*(self: CSGBox3D; material: Ref[Material]) {.loadfrom("set_material", 2757459619).}
  proc material*(self: CSGBox3D): Ref[Material] {.loadfrom("get_material", 5934680).}

# CSGCylinder3D
define_godot_engine_class_essencials(CSGCylinder3D, CSGPrimitive3D)
CSGCylinder3D.memberProcs:
  proc `radius=`*(self: CSGCylinder3D; radius: Float) {.loadfrom("set_radius", 373806689).}
  proc radius*(self: CSGCylinder3D): Float {.loadfrom("get_radius", 1740695150).}
  proc `height=`*(self: CSGCylinder3D; height: Float) {.loadfrom("set_height", 373806689).}
  proc height*(self: CSGCylinder3D): Float {.loadfrom("get_height", 1740695150).}
  proc `sides=`*(self: CSGCylinder3D; sides: int32) {.loadfrom("set_sides", 1286410249).}
  proc sides*(self: CSGCylinder3D): int32 {.loadfrom("get_sides", 3905245786).}
  proc `cone=`*(self: CSGCylinder3D; cone: Bool) {.loadfrom("set_cone", 2586408642).}
  proc isCone*(self: CSGCylinder3D): Bool {.loadfrom("is_cone", 36873697).}
  proc `material=`*(self: CSGCylinder3D; material: Ref[Material]) {.loadfrom("set_material", 2757459619).}
  proc material*(self: CSGCylinder3D): Ref[Material] {.loadfrom("get_material", 5934680).}
  proc `smoothFaces=`*(self: CSGCylinder3D; smoothFaces: Bool) {.loadfrom("set_smooth_faces", 2586408642).}
  proc smoothFaces*(self: CSGCylinder3D): Bool {.loadfrom("get_smooth_faces", 36873697).}

# CSGMesh3D
define_godot_engine_class_essencials(CSGMesh3D, CSGPrimitive3D)
CSGMesh3D.memberProcs:
  proc `mesh=`*(self: CSGMesh3D; mesh: Ref[Mesh]) {.loadfrom("set_mesh", 194775623).}
  proc mesh*(self: CSGMesh3D): Ref[Mesh] {.loadfrom("get_mesh", 4081188045).}
  proc `material=`*(self: CSGMesh3D; material: Ref[Material]) {.loadfrom("set_material", 2757459619).}
  proc material*(self: CSGMesh3D): Ref[Material] {.loadfrom("get_material", 5934680).}

# CSGPolygon3D
define_godot_engine_class_essencials(CSGPolygon3D, CSGPrimitive3D)
CSGPolygon3D.memberProcs:
  proc `polygon=`*(self: CSGPolygon3D; polygon: PackedVector2Array) {.loadfrom("set_polygon", 1509147220).}
  proc polygon*(self: CSGPolygon3D): PackedVector2Array {.loadfrom("get_polygon", 2961356807).}
  proc `mode=`*(self: CSGPolygon3D; mode: CSGPolygon3D|>Mode) {.loadfrom("set_mode", 3158377035).}
  proc mode*(self: CSGPolygon3D): CSGPolygon3D|>Mode {.loadfrom("get_mode", 1201612222).}
  proc `depth=`*(self: CSGPolygon3D; depth: Float) {.loadfrom("set_depth", 373806689).}
  proc depth*(self: CSGPolygon3D): Float {.loadfrom("get_depth", 1740695150).}
  proc `spinDegrees=`*(self: CSGPolygon3D; degrees: Float) {.loadfrom("set_spin_degrees", 373806689).}
  proc spinDegrees*(self: CSGPolygon3D): Float {.loadfrom("get_spin_degrees", 1740695150).}
  proc `spinSides=`*(self: CSGPolygon3D; spinSides: int32) {.loadfrom("set_spin_sides", 1286410249).}
  proc spinSides*(self: CSGPolygon3D): int32 {.loadfrom("get_spin_sides", 3905245786).}
  proc `pathNode=`*(self: CSGPolygon3D; path: NodePath) {.loadfrom("set_path_node", 1348162250).}
  proc pathNode*(self: CSGPolygon3D): NodePath {.loadfrom("get_path_node", 4075236667).}
  proc `pathIntervalType=`*(self: CSGPolygon3D; intervalType: CSGPolygon3D|>PathIntervalType) {.loadfrom("set_path_interval_type", 3744240707).}
  proc pathIntervalType*(self: CSGPolygon3D): CSGPolygon3D|>PathIntervalType {.loadfrom("get_path_interval_type", 3434618397).}
  proc `pathInterval=`*(self: CSGPolygon3D; interval: Float) {.loadfrom("set_path_interval", 373806689).}
  proc pathInterval*(self: CSGPolygon3D): Float {.loadfrom("get_path_interval", 1740695150).}
  proc `pathSimplifyAngle=`*(self: CSGPolygon3D; degrees: Float) {.loadfrom("set_path_simplify_angle", 373806689).}
  proc pathSimplifyAngle*(self: CSGPolygon3D): Float {.loadfrom("get_path_simplify_angle", 1740695150).}
  proc `pathRotation=`*(self: CSGPolygon3D; pathRotation: CSGPolygon3D|>PathRotation) {.loadfrom("set_path_rotation", 1412947288).}
  proc pathRotation*(self: CSGPolygon3D): CSGPolygon3D|>PathRotation {.loadfrom("get_path_rotation", 647219346).}
  proc `pathLocal=`*(self: CSGPolygon3D; enable: Bool) {.loadfrom("set_path_local", 2586408642).}
  proc isPathLocal*(self: CSGPolygon3D): Bool {.loadfrom("is_path_local", 36873697).}
  proc `pathContinuousU=`*(self: CSGPolygon3D; enable: Bool) {.loadfrom("set_path_continuous_u", 2586408642).}
  proc isPathContinuousU*(self: CSGPolygon3D): Bool {.loadfrom("is_path_continuous_u", 36873697).}
  proc `pathUDistance=`*(self: CSGPolygon3D; distance: Float) {.loadfrom("set_path_u_distance", 373806689).}
  proc pathUDistance*(self: CSGPolygon3D): Float {.loadfrom("get_path_u_distance", 1740695150).}
  proc `pathJoined=`*(self: CSGPolygon3D; enable: Bool) {.loadfrom("set_path_joined", 2586408642).}
  proc isPathJoined*(self: CSGPolygon3D): Bool {.loadfrom("is_path_joined", 36873697).}
  proc `material=`*(self: CSGPolygon3D; material: Ref[Material]) {.loadfrom("set_material", 2757459619).}
  proc material*(self: CSGPolygon3D): Ref[Material] {.loadfrom("get_material", 5934680).}
  proc `smoothFaces=`*(self: CSGPolygon3D; smoothFaces: Bool) {.loadfrom("set_smooth_faces", 2586408642).}
  proc smoothFaces*(self: CSGPolygon3D): Bool {.loadfrom("get_smooth_faces", 36873697).}

# CSGSphere3D
define_godot_engine_class_essencials(CSGSphere3D, CSGPrimitive3D)
CSGSphere3D.memberProcs:
  proc `radius=`*(self: CSGSphere3D; radius: Float) {.loadfrom("set_radius", 373806689).}
  proc radius*(self: CSGSphere3D): Float {.loadfrom("get_radius", 1740695150).}
  proc `radialSegments=`*(self: CSGSphere3D; radialSegments: int32) {.loadfrom("set_radial_segments", 1286410249).}
  proc radialSegments*(self: CSGSphere3D): int32 {.loadfrom("get_radial_segments", 3905245786).}
  proc `rings=`*(self: CSGSphere3D; rings: int32) {.loadfrom("set_rings", 1286410249).}
  proc rings*(self: CSGSphere3D): int32 {.loadfrom("get_rings", 3905245786).}
  proc `smoothFaces=`*(self: CSGSphere3D; smoothFaces: Bool) {.loadfrom("set_smooth_faces", 2586408642).}
  proc smoothFaces*(self: CSGSphere3D): Bool {.loadfrom("get_smooth_faces", 36873697).}
  proc `material=`*(self: CSGSphere3D; material: Ref[Material]) {.loadfrom("set_material", 2757459619).}
  proc material*(self: CSGSphere3D): Ref[Material] {.loadfrom("get_material", 5934680).}

# CSGTorus3D
define_godot_engine_class_essencials(CSGTorus3D, CSGPrimitive3D)
CSGTorus3D.memberProcs:
  proc `innerRadius=`*(self: CSGTorus3D; radius: Float) {.loadfrom("set_inner_radius", 373806689).}
  proc innerRadius*(self: CSGTorus3D): Float {.loadfrom("get_inner_radius", 1740695150).}
  proc `outerRadius=`*(self: CSGTorus3D; radius: Float) {.loadfrom("set_outer_radius", 373806689).}
  proc outerRadius*(self: CSGTorus3D): Float {.loadfrom("get_outer_radius", 1740695150).}
  proc `sides=`*(self: CSGTorus3D; sides: int32) {.loadfrom("set_sides", 1286410249).}
  proc sides*(self: CSGTorus3D): int32 {.loadfrom("get_sides", 3905245786).}
  proc `ringSides=`*(self: CSGTorus3D; sides: int32) {.loadfrom("set_ring_sides", 1286410249).}
  proc ringSides*(self: CSGTorus3D): int32 {.loadfrom("get_ring_sides", 3905245786).}
  proc `material=`*(self: CSGTorus3D; material: Ref[Material]) {.loadfrom("set_material", 2757459619).}
  proc material*(self: CSGTorus3D): Ref[Material] {.loadfrom("get_material", 5934680).}
  proc `smoothFaces=`*(self: CSGTorus3D; smoothFaces: Bool) {.loadfrom("set_smooth_faces", 2586408642).}
  proc smoothFaces*(self: CSGTorus3D): Bool {.loadfrom("get_smooth_faces", 36873697).}

# InputEventMagnifyGesture
define_godot_engine_class_essencials(InputEventMagnifyGesture, InputEventGesture)
InputEventMagnifyGesture.memberProcs:
  proc `factor=`*(self: Ref[InputEventMagnifyGesture]; factor: Float) {.loadfrom("set_factor", 373806689).}
  proc factor*(self: Ref[InputEventMagnifyGesture]): Float {.loadfrom("get_factor", 1740695150).}

# InputEventPanGesture
define_godot_engine_class_essencials(InputEventPanGesture, InputEventGesture)
InputEventPanGesture.memberProcs:
  proc `delta=`*(self: Ref[InputEventPanGesture]; delta: Vector2) {.loadfrom("set_delta", 743155724).}
  proc delta*(self: Ref[InputEventPanGesture]): Vector2 {.loadfrom("get_delta", 3341600327).}

# InputEventMouseButton
define_godot_engine_class_essencials(InputEventMouseButton, InputEventMouse)
InputEventMouseButton.memberProcs:
  proc `factor=`*(self: Ref[InputEventMouseButton]; factor: Float) {.loadfrom("set_factor", 373806689).}
  proc factor*(self: Ref[InputEventMouseButton]): Float {.loadfrom("get_factor", 1740695150).}
  proc `buttonIndex=`*(self: Ref[InputEventMouseButton]; buttonIndex: MouseButton) {.loadfrom("set_button_index", 3624991109).}
  proc buttonIndex*(self: Ref[InputEventMouseButton]): MouseButton {.loadfrom("get_button_index", 1132662608).}
  proc `pressed=`*(self: Ref[InputEventMouseButton]; pressed: Bool) {.loadfrom("set_pressed", 2586408642).}
  proc `canceled=`*(self: Ref[InputEventMouseButton]; canceled: Bool) {.loadfrom("set_canceled", 2586408642).}
  proc `doubleClick=`*(self: Ref[InputEventMouseButton]; doubleClick: Bool) {.loadfrom("set_double_click", 2586408642).}
  proc isDoubleClick*(self: Ref[InputEventMouseButton]): Bool {.loadfrom("is_double_click", 36873697).}

# InputEventMouseMotion
define_godot_engine_class_essencials(InputEventMouseMotion, InputEventMouse)
InputEventMouseMotion.memberProcs:
  proc `tilt=`*(self: Ref[InputEventMouseMotion]; tilt: Vector2) {.loadfrom("set_tilt", 743155724).}
  proc tilt*(self: Ref[InputEventMouseMotion]): Vector2 {.loadfrom("get_tilt", 3341600327).}
  proc `pressure=`*(self: Ref[InputEventMouseMotion]; pressure: Float) {.loadfrom("set_pressure", 373806689).}
  proc pressure*(self: Ref[InputEventMouseMotion]): Float {.loadfrom("get_pressure", 1740695150).}
  proc `penInverted=`*(self: Ref[InputEventMouseMotion]; penInverted: Bool) {.loadfrom("set_pen_inverted", 2586408642).}
  proc penInverted*(self: Ref[InputEventMouseMotion]): Bool {.loadfrom("get_pen_inverted", 36873697).}
  proc `relative=`*(self: Ref[InputEventMouseMotion]; relative: Vector2) {.loadfrom("set_relative", 743155724).}
  proc relative*(self: Ref[InputEventMouseMotion]): Vector2 {.loadfrom("get_relative", 3341600327).}
  proc `velocity=`*(self: Ref[InputEventMouseMotion]; velocity: Vector2) {.loadfrom("set_velocity", 743155724).}
  proc velocity*(self: Ref[InputEventMouseMotion]): Vector2 {.loadfrom("get_velocity", 3341600327).}

# VisualShaderNodeGlobalExpression
define_godot_engine_class_essencials(VisualShaderNodeGlobalExpression, VisualShaderNodeExpression)

# EditorScriptPicker
define_godot_engine_class_essencials(EditorScriptPicker, EditorResourcePicker)
EditorScriptPicker.memberProcs:
  proc `scriptOwner=`*(self: EditorScriptPicker; ownerNode: ptr Node) {.loadfrom("set_script_owner", 1078189570).}
  proc scriptOwner*(self: EditorScriptPicker): Node {.loadfrom("get_script_owner", 3160264692).}
