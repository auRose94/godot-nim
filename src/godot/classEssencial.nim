# ======================================== #
# This module was generated automatically. #
# Edits will be lost.                      #
# ======================================== #
import ./helper/engineClassDefiner

define_godot_engine_class_essencials(Object, ObjectBase)
define_godot_engine_class_essencials(AudioServer, Object)
define_godot_engine_class_essencials(CameraServer, Object)
define_godot_engine_class_essencials(ClassDB, Object)
define_godot_engine_class_essencials(DisplayServer, Object)
define_godot_engine_class_essencials(EditorFileSystemDirectory, Object)
define_godot_engine_class_essencials(EditorInterface, Object)
define_godot_engine_class_essencials(EditorPaths, Object)
define_godot_engine_class_essencials(EditorSelection, Object)
define_godot_engine_class_essencials(EditorUndoRedoManager, Object)
define_godot_engine_class_essencials(EditorVCSInterface, Object)
method initialize*(self: EditorVCSInterface; projectPath: String): Bool {.base.} = (discard)
method setCredentials*(self: EditorVCSInterface; username: String; password: String; sshPublicKeyPath: String; sshPrivateKeyPath: String; sshPassphrase: String) {.base.} = (discard)
method getModifiedFilesData*(self: EditorVCSInterface): TypedArray[Dictionary] {.base.} = (discard)
method stageFile*(self: EditorVCSInterface; filePath: String) {.base.} = (discard)
method unstageFile*(self: EditorVCSInterface; filePath: String) {.base.} = (discard)
method discardFile*(self: EditorVCSInterface; filePath: String) {.base.} = (discard)
method commit*(self: EditorVCSInterface; msg: String) {.base.} = (discard)
method getDiff*(self: EditorVCSInterface; identifier: String; area: int32): TypedArray[Dictionary] {.base.} = (discard)
method shutDown*(self: EditorVCSInterface): Bool {.base.} = (discard)
method getVcsName*(self: EditorVCSInterface): String {.base.} = (discard)
method getPreviousCommits*(self: EditorVCSInterface; maxCommits: int32): TypedArray[Dictionary] {.base.} = (discard)
method getBranchList*(self: EditorVCSInterface): TypedArray[String] {.base.} = (discard)
method getRemotes*(self: EditorVCSInterface): TypedArray[String] {.base.} = (discard)
method createBranch*(self: EditorVCSInterface; branchName: String) {.base.} = (discard)
method removeBranch*(self: EditorVCSInterface; branchName: String) {.base.} = (discard)
method createRemote*(self: EditorVCSInterface; remoteName: String; remoteUrl: String) {.base.} = (discard)
method removeRemote*(self: EditorVCSInterface; remoteName: String) {.base.} = (discard)
method getCurrentBranchName*(self: EditorVCSInterface): String {.base.} = (discard)
method checkoutBranch*(self: EditorVCSInterface; branchName: String): Bool {.base.} = (discard)
method pull*(self: EditorVCSInterface; remote: String) {.base.} = (discard)
method push*(self: EditorVCSInterface; remote: String; force: Bool) {.base.} = (discard)
method fetch*(self: EditorVCSInterface; remote: String) {.base.} = (discard)
method getLineDiff*(self: EditorVCSInterface; filePath: String; text: String): TypedArray[Dictionary] {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorVCSInterface]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_initialize"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).initialize(p_args[0].decode(String)).encode(r_ret)
  table["_set_credentials"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).setCredentials(p_args[0].decode(String), p_args[1].decode(String), p_args[2].decode(String), p_args[3].decode(String), p_args[4].decode(String))
  table["_get_modified_files_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).getModifiedFilesData().encode(r_ret)
  table["_stage_file"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).stageFile(p_args[0].decode(String))
  table["_unstage_file"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).unstageFile(p_args[0].decode(String))
  table["_discard_file"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).discardFile(p_args[0].decode(String))
  table["_commit"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).commit(p_args[0].decode(String))
  table["_get_diff"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).getDiff(p_args[0].decode(String), p_args[1].decode(int32)).encode(r_ret)
  table["_shut_down"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).shutDown().encode(r_ret)
  table["_get_vcs_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).getVcsName().encode(r_ret)
  table["_get_previous_commits"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).getPreviousCommits(p_args[0].decode(int32)).encode(r_ret)
  table["_get_branch_list"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).getBranchList().encode(r_ret)
  table["_get_remotes"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).getRemotes().encode(r_ret)
  table["_create_branch"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).createBranch(p_args[0].decode(String))
  table["_remove_branch"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).removeBranch(p_args[0].decode(String))
  table["_create_remote"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).createRemote(p_args[0].decode(String), p_args[1].decode(String))
  table["_remove_remote"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).removeRemote(p_args[0].decode(String))
  table["_get_current_branch_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).getCurrentBranchName().encode(r_ret)
  table["_checkout_branch"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).checkoutBranch(p_args[0].decode(String)).encode(r_ret)
  table["_pull"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).pull(p_args[0].decode(String))
  table["_push"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).push(p_args[0].decode(String), p_args[1].decode(Bool))
  table["_fetch"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).fetch(p_args[0].decode(String))
  table["_get_line_diff"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorVCSInterface](p_instance).getLineDiff(p_args[0].decode(String), p_args[1].decode(String)).encode(r_ret)

define_godot_engine_class_essencials(Engine, Object)
define_godot_engine_class_essencials(EngineDebugger, Object)
define_godot_engine_class_essencials(FramebufferCacheRD, Object)
define_godot_engine_class_essencials(GDExtensionManager, Object)
define_godot_engine_class_essencials(Geometry2D, Object)
define_godot_engine_class_essencials(Geometry3D, Object)
define_godot_engine_class_essencials(IP, Object)
define_godot_engine_class_essencials(Input, Object)
define_godot_engine_class_essencials(InputMap, Object)
define_godot_engine_class_essencials(JNISingleton, Object)
define_godot_engine_class_essencials(JSONRPC, Object)
define_godot_engine_class_essencials(JavaClassWrapper, Object)
define_godot_engine_class_essencials(JavaScriptBridge, Object)
define_godot_engine_class_essencials(MainLoop, Object)
method initialize*(self: MainLoop) {.base.} = (discard)
method physicsProcess*(self: MainLoop; delta: float64): Bool {.base.} = (discard)
method process*(self: MainLoop; delta: float64): Bool {.base.} = (discard)
method finalize*(self: MainLoop) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[MainLoop]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_initialize"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[MainLoop](p_instance).initialize()
  table["_physics_process"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[MainLoop](p_instance).physicsProcess(p_args[0].decode(float64)).encode(r_ret)
  table["_process"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[MainLoop](p_instance).process(p_args[0].decode(float64)).encode(r_ret)
  table["_finalize"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[MainLoop](p_instance).finalize()

define_godot_engine_class_essencials(Marshalls, Object)
define_godot_engine_class_essencials(MovieWriter, Object)
method getAudioMixRate*(self: MovieWriter): uint32 {.base.} = (discard)
method getAudioSpeakerMode*(self: MovieWriter): AudioServer_SpeakerMode {.base.} = (discard)
method handlesFile*(self: MovieWriter; path: String): Bool {.base.} = (discard)
method writeBegin*(self: MovieWriter; movieSize: Vector2i; fps: uint32; basePath: String): Error {.base.} = (discard)
method writeFrame*(self: MovieWriter; frameImage: Ref[Image]; audioFrameBlock: pointer): Error {.base.} = (discard)
method writeEnd*(self: MovieWriter) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[MovieWriter]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_audio_mix_rate"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[MovieWriter](p_instance).getAudioMixRate().encode(r_ret)
  table["_get_audio_speaker_mode"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[MovieWriter](p_instance).getAudioSpeakerMode().encode(r_ret)
  table["_handles_file"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[MovieWriter](p_instance).handlesFile(p_args[0].decode(String)).encode(r_ret)
  table["_write_begin"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[MovieWriter](p_instance).writeBegin(p_args[0].decode(Vector2i), p_args[1].decode(uint32), p_args[2].decode(String)).encode(r_ret)
  table["_write_frame"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[MovieWriter](p_instance).writeFrame(p_args[0].decode(Ref[Image]), p_args[1].decode(pointer)).encode(r_ret)
  table["_write_end"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[MovieWriter](p_instance).writeEnd()

define_godot_engine_class_essencials(NavigationMeshGenerator, Object)
define_godot_engine_class_essencials(NavigationServer2D, Object)
define_godot_engine_class_essencials(NavigationServer3D, Object)
define_godot_engine_class_essencials(Node, Object)
method process*(self: Node; delta: float64) {.base.} = (discard)
method physicsProcess*(self: Node; delta: float64) {.base.} = (discard)
method enterTree*(self: Node) {.base.} = (discard)
method exitTree*(self: Node) {.base.} = (discard)
method ready*(self: Node) {.base.} = (discard)
method getConfigurationWarnings*(self: Node): PackedStringArray {.base.} = (discard)
method input*(self: Node; event: Ref[InputEvent]) {.base.} = (discard)
method shortcutInput*(self: Node; event: Ref[InputEvent]) {.base.} = (discard)
method unhandledInput*(self: Node; event: Ref[InputEvent]) {.base.} = (discard)
method unhandledKeyInput*(self: Node; event: Ref[InputEvent]) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[Node]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_process"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Node](p_instance).process(p_args[0].decode(float64))
  table["_physics_process"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Node](p_instance).physicsProcess(p_args[0].decode(float64))
  table["_enter_tree"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Node](p_instance).enterTree()
  table["_exit_tree"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Node](p_instance).exitTree()
  table["_ready"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Node](p_instance).ready()
  table["_get_configuration_warnings"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Node](p_instance).getConfigurationWarnings().encode(r_ret)
  table["_input"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Node](p_instance).input(p_args[0].decode(Ref[InputEvent]))
  table["_shortcut_input"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Node](p_instance).shortcutInput(p_args[0].decode(Ref[InputEvent]))
  table["_unhandled_input"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Node](p_instance).unhandledInput(p_args[0].decode(Ref[InputEvent]))
  table["_unhandled_key_input"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Node](p_instance).unhandledKeyInput(p_args[0].decode(Ref[InputEvent]))

define_godot_engine_class_essencials(OS, Object)
define_godot_engine_class_essencials(Performance, Object)
define_godot_engine_class_essencials(PhysicsDirectBodyState2D, Object)
define_godot_engine_class_essencials(PhysicsDirectBodyState3D, Object)
define_godot_engine_class_essencials(PhysicsDirectSpaceState2D, Object)
define_godot_engine_class_essencials(PhysicsDirectSpaceState3D, Object)
define_godot_engine_class_essencials(PhysicsServer2D, Object)
define_godot_engine_class_essencials(PhysicsServer2DManager, Object)
define_godot_engine_class_essencials(PhysicsServer3D, Object)
define_godot_engine_class_essencials(PhysicsServer3DManager, Object)
define_godot_engine_class_essencials(PhysicsServer3DRenderingServerHandler, Object)
method setVertex*(self: PhysicsServer3DRenderingServerHandler; vertexId: int32; vertices: pointer) {.base.} = (discard)
method setNormal*(self: PhysicsServer3DRenderingServerHandler; vertexId: int32; normals: pointer) {.base.} = (discard)
method setAabb*(self: PhysicsServer3DRenderingServerHandler; aabb: AABB) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[PhysicsServer3DRenderingServerHandler]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_set_vertex"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DRenderingServerHandler](p_instance).setVertex(p_args[0].decode(int32), p_args[1].decode(pointer))
  table["_set_normal"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DRenderingServerHandler](p_instance).setNormal(p_args[0].decode(int32), p_args[1].decode(pointer))
  table["_set_aabb"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DRenderingServerHandler](p_instance).setAabb(p_args[0].decode(AABB))

define_godot_engine_class_essencials(ProjectSettings, Object)
define_godot_engine_class_essencials(RefCounted, Object)
define_godot_engine_class_essencials(RenderingDevice, Object)
define_godot_engine_class_essencials(RenderingServer, Object)
define_godot_engine_class_essencials(ResourceLoader, Object)
define_godot_engine_class_essencials(ResourceSaver, Object)
define_godot_engine_class_essencials(ResourceUID, Object)
define_godot_engine_class_essencials(ScriptLanguage, Object)
define_godot_engine_class_essencials(TextServerManager, Object)
define_godot_engine_class_essencials(ThemeDB, Object)
define_godot_engine_class_essencials(TileData, Object)
define_godot_engine_class_essencials(Time, Object)
define_godot_engine_class_essencials(TranslationServer, Object)
define_godot_engine_class_essencials(TreeItem, Object)
define_godot_engine_class_essencials(UndoRedo, Object)
define_godot_engine_class_essencials(UniformSetCacheRD, Object)
define_godot_engine_class_essencials(WorkerThreadPool, Object)
define_godot_engine_class_essencials(XRServer, Object)
define_godot_engine_class_essencials(IPUnix, IP)
define_godot_engine_class_essencials(SceneTree, MainLoop)
define_godot_engine_class_essencials(MovieWriterMJPEG, MovieWriter)
define_godot_engine_class_essencials(MovieWriterPNGWAV, MovieWriter)
define_godot_engine_class_essencials(AnimationPlayer, Node)
method postProcessKeyValue*(self: AnimationPlayer; animation: Ref[Animation]; track: int32; value: ptr Variant; `object`: ptr Object; objectIdx: int32): Variant {.base.} = (discard)
proc bind_virtuals*(S: typedesc[AnimationPlayer]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_post_process_key_value"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[AnimationPlayer](p_instance).postProcessKeyValue(p_args[0].decode(Ref[Animation]), p_args[1].decode(int32), p_args[2].decode(ptr Variant), p_args[3].decode(ptr Object), p_args[4].decode(int32)).encode(r_ret)

define_godot_engine_class_essencials(AnimationTree, Node)
method postProcessKeyValue*(self: AnimationTree; animation: Ref[Animation]; track: int32; value: ptr Variant; `object`: ptr Object; objectIdx: int32): Variant {.base.} = (discard)
proc bind_virtuals*(S: typedesc[AnimationTree]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_post_process_key_value"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[AnimationTree](p_instance).postProcessKeyValue(p_args[0].decode(Ref[Animation]), p_args[1].decode(int32), p_args[2].decode(ptr Variant), p_args[3].decode(ptr Object), p_args[4].decode(int32)).encode(r_ret)

define_godot_engine_class_essencials(AudioStreamPlayer, Node)
define_godot_engine_class_essencials(CanvasItem, Node)
method draw*(self: CanvasItem) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[CanvasItem]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_draw"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[CanvasItem](p_instance).draw()

define_godot_engine_class_essencials(CanvasLayer, Node)
define_godot_engine_class_essencials(EditorFileSystem, Node)
define_godot_engine_class_essencials(EditorPlugin, Node)
method forwardCanvasGuiInput*(self: EditorPlugin; event: Ref[InputEvent]): Bool {.base.} = (discard)
method forwardCanvasDrawOverViewport*(self: EditorPlugin; viewportControl: Control) {.base.} = (discard)
method forwardCanvasForceDrawOverViewport*(self: EditorPlugin; viewportControl: Control) {.base.} = (discard)
method forward3dGuiInput*(self: EditorPlugin; viewportCamera: Camera3D; event: Ref[InputEvent]): int32 {.base.} = (discard)
method forward3dDrawOverViewport*(self: EditorPlugin; viewportControl: Control) {.base.} = (discard)
method forward3dForceDrawOverViewport*(self: EditorPlugin; viewportControl: Control) {.base.} = (discard)
method getPluginName*(self: EditorPlugin): String {.base.} = (discard)
method getPluginIcon*(self: EditorPlugin): Ref[Texture2D] {.base.} = (discard)
method hasMainScreen*(self: EditorPlugin): Bool {.base.} = (discard)
method makeVisible*(self: EditorPlugin; visible: Bool) {.base.} = (discard)
method edit*(self: EditorPlugin; `object`: ptr Object) {.base.} = (discard)
method handles*(self: EditorPlugin; `object`: ptr Object): Bool {.base.} = (discard)
method getState*(self: EditorPlugin): Dictionary {.base.} = (discard)
method setState*(self: EditorPlugin; state: Dictionary) {.base.} = (discard)
method clear*(self: EditorPlugin) {.base.} = (discard)
method saveExternalData*(self: EditorPlugin) {.base.} = (discard)
method applyChanges*(self: EditorPlugin) {.base.} = (discard)
method getBreakpoints*(self: EditorPlugin): PackedStringArray {.base.} = (discard)
method setWindowLayout*(self: EditorPlugin; configuration: Ref[ConfigFile]) {.base.} = (discard)
method getWindowLayout*(self: EditorPlugin; configuration: Ref[ConfigFile]) {.base.} = (discard)
method build*(self: EditorPlugin): Bool {.base.} = (discard)
method enablePlugin*(self: EditorPlugin) {.base.} = (discard)
method disablePlugin*(self: EditorPlugin) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorPlugin]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_forward_canvas_gui_input"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).forwardCanvasGuiInput(p_args[0].decode(Ref[InputEvent])).encode(r_ret)
  table["_forward_canvas_draw_over_viewport"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).forwardCanvasDrawOverViewport(p_args[0].decode(Control))
  table["_forward_canvas_force_draw_over_viewport"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).forwardCanvasForceDrawOverViewport(p_args[0].decode(Control))
  table["_forward_3d_gui_input"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).forward3dGuiInput(p_args[0].decode(Camera3D), p_args[1].decode(Ref[InputEvent])).encode(r_ret)
  table["_forward_3d_draw_over_viewport"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).forward3dDrawOverViewport(p_args[0].decode(Control))
  table["_forward_3d_force_draw_over_viewport"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).forward3dForceDrawOverViewport(p_args[0].decode(Control))
  table["_get_plugin_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).getPluginName().encode(r_ret)
  table["_get_plugin_icon"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).getPluginIcon().encode(r_ret)
  table["_has_main_screen"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).hasMainScreen().encode(r_ret)
  table["_make_visible"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).makeVisible(p_args[0].decode(Bool))
  table["_edit"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).edit(p_args[0].decode(ptr Object))
  table["_handles"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).handles(p_args[0].decode(ptr Object)).encode(r_ret)
  table["_get_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).getState().encode(r_ret)
  table["_set_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).setState(p_args[0].decode(Dictionary))
  table["_clear"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).clear()
  table["_save_external_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).saveExternalData()
  table["_apply_changes"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).applyChanges()
  table["_get_breakpoints"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).getBreakpoints().encode(r_ret)
  table["_set_window_layout"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).setWindowLayout(p_args[0].decode(Ref[ConfigFile]))
  table["_get_window_layout"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).getWindowLayout(p_args[0].decode(Ref[ConfigFile]))
  table["_build"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).build().encode(r_ret)
  table["_enable_plugin"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).enablePlugin()
  table["_disable_plugin"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorPlugin](p_instance).disablePlugin()

define_godot_engine_class_essencials(EditorResourcePreview, Node)
define_godot_engine_class_essencials(HTTPRequest, Node)
define_godot_engine_class_essencials(InstancePlaceholder, Node)
define_godot_engine_class_essencials(MissingNode, Node)
define_godot_engine_class_essencials(MultiplayerSpawner, Node)
define_godot_engine_class_essencials(MultiplayerSynchronizer, Node)
define_godot_engine_class_essencials(NavigationAgent2D, Node)
define_godot_engine_class_essencials(NavigationAgent3D, Node)
define_godot_engine_class_essencials(Node3D, Node)
define_godot_engine_class_essencials(ResourcePreloader, Node)
define_godot_engine_class_essencials(ShaderGlobalsOverride, Node)
define_godot_engine_class_essencials(SkeletonIK3D, Node)
define_godot_engine_class_essencials(Timer, Node)
define_godot_engine_class_essencials(Viewport, Node)
define_godot_engine_class_essencials(WorldEnvironment, Node)
define_godot_engine_class_essencials(PhysicsDirectBodyState2DExtension, PhysicsDirectBodyState2D)
method getTotalGravity*(self: PhysicsDirectBodyState2DExtension): Vector2 {.base.} = (discard)
method getTotalLinearDamp*(self: PhysicsDirectBodyState2DExtension): Float {.base.} = (discard)
method getTotalAngularDamp*(self: PhysicsDirectBodyState2DExtension): Float {.base.} = (discard)
method getCenterOfMass*(self: PhysicsDirectBodyState2DExtension): Vector2 {.base.} = (discard)
method getCenterOfMassLocal*(self: PhysicsDirectBodyState2DExtension): Vector2 {.base.} = (discard)
method getInverseMass*(self: PhysicsDirectBodyState2DExtension): Float {.base.} = (discard)
method getInverseInertia*(self: PhysicsDirectBodyState2DExtension): Float {.base.} = (discard)
method setLinearVelocity*(self: PhysicsDirectBodyState2DExtension; velocity: Vector2) {.base.} = (discard)
method getLinearVelocity*(self: PhysicsDirectBodyState2DExtension): Vector2 {.base.} = (discard)
method setAngularVelocity*(self: PhysicsDirectBodyState2DExtension; velocity: Float) {.base.} = (discard)
method getAngularVelocity*(self: PhysicsDirectBodyState2DExtension): Float {.base.} = (discard)
method setTransform*(self: PhysicsDirectBodyState2DExtension; transform: Transform2D) {.base.} = (discard)
method getTransform*(self: PhysicsDirectBodyState2DExtension): Transform2D {.base.} = (discard)
method getVelocityAtLocalPosition*(self: PhysicsDirectBodyState2DExtension; localPosition: Vector2): Vector2 {.base.} = (discard)
method applyCentralImpulse*(self: PhysicsDirectBodyState2DExtension; impulse: Vector2) {.base.} = (discard)
method applyImpulse*(self: PhysicsDirectBodyState2DExtension; impulse: Vector2; position: Vector2) {.base.} = (discard)
method applyTorqueImpulse*(self: PhysicsDirectBodyState2DExtension; impulse: Float) {.base.} = (discard)
method applyCentralForce*(self: PhysicsDirectBodyState2DExtension; force: Vector2) {.base.} = (discard)
method applyForce*(self: PhysicsDirectBodyState2DExtension; force: Vector2; position: Vector2) {.base.} = (discard)
method applyTorque*(self: PhysicsDirectBodyState2DExtension; torque: Float) {.base.} = (discard)
method addConstantCentralForce*(self: PhysicsDirectBodyState2DExtension; force: Vector2) {.base.} = (discard)
method addConstantForce*(self: PhysicsDirectBodyState2DExtension; force: Vector2; position: Vector2) {.base.} = (discard)
method addConstantTorque*(self: PhysicsDirectBodyState2DExtension; torque: Float) {.base.} = (discard)
method setConstantForce*(self: PhysicsDirectBodyState2DExtension; force: Vector2) {.base.} = (discard)
method getConstantForce*(self: PhysicsDirectBodyState2DExtension): Vector2 {.base.} = (discard)
method setConstantTorque*(self: PhysicsDirectBodyState2DExtension; torque: Float) {.base.} = (discard)
method getConstantTorque*(self: PhysicsDirectBodyState2DExtension): Float {.base.} = (discard)
method setSleepState*(self: PhysicsDirectBodyState2DExtension; enabled: Bool) {.base.} = (discard)
method isSleeping*(self: PhysicsDirectBodyState2DExtension): Bool {.base.} = (discard)
method getContactCount*(self: PhysicsDirectBodyState2DExtension): int32 {.base.} = (discard)
method getContactLocalPosition*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): Vector2 {.base.} = (discard)
method getContactLocalNormal*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): Vector2 {.base.} = (discard)
method getContactLocalShape*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): int32 {.base.} = (discard)
method getContactLocalVelocityAtPosition*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): Vector2 {.base.} = (discard)
method getContactCollider*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): RID {.base.} = (discard)
method getContactColliderPosition*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): Vector2 {.base.} = (discard)
method getContactColliderId*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): uint64 {.base.} = (discard)
method getContactColliderObject*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): Object {.base.} = (discard)
method getContactColliderShape*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): int32 {.base.} = (discard)
method getContactColliderVelocityAtPosition*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): Vector2 {.base.} = (discard)
method getContactImpulse*(self: PhysicsDirectBodyState2DExtension; contactIdx: int32): Vector2 {.base.} = (discard)
method getStep*(self: PhysicsDirectBodyState2DExtension): Float {.base.} = (discard)
method integrateForces*(self: PhysicsDirectBodyState2DExtension) {.base.} = (discard)
method getSpaceState*(self: PhysicsDirectBodyState2DExtension): PhysicsDirectSpaceState2D {.base.} = (discard)
proc bind_virtuals*(S: typedesc[PhysicsDirectBodyState2DExtension]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_total_gravity"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getTotalGravity().encode(r_ret)
  table["_get_total_linear_damp"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getTotalLinearDamp().encode(r_ret)
  table["_get_total_angular_damp"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getTotalAngularDamp().encode(r_ret)
  table["_get_center_of_mass"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getCenterOfMass().encode(r_ret)
  table["_get_center_of_mass_local"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getCenterOfMassLocal().encode(r_ret)
  table["_get_inverse_mass"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getInverseMass().encode(r_ret)
  table["_get_inverse_inertia"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getInverseInertia().encode(r_ret)
  table["_set_linear_velocity"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).setLinearVelocity(p_args[0].decode(Vector2))
  table["_get_linear_velocity"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getLinearVelocity().encode(r_ret)
  table["_set_angular_velocity"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).setAngularVelocity(p_args[0].decode(Float))
  table["_get_angular_velocity"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getAngularVelocity().encode(r_ret)
  table["_set_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).setTransform(p_args[0].decode(Transform2D))
  table["_get_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getTransform().encode(r_ret)
  table["_get_velocity_at_local_position"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getVelocityAtLocalPosition(p_args[0].decode(Vector2)).encode(r_ret)
  table["_apply_central_impulse"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).applyCentralImpulse(p_args[0].decode(Vector2))
  table["_apply_impulse"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).applyImpulse(p_args[0].decode(Vector2), p_args[1].decode(Vector2))
  table["_apply_torque_impulse"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).applyTorqueImpulse(p_args[0].decode(Float))
  table["_apply_central_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).applyCentralForce(p_args[0].decode(Vector2))
  table["_apply_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).applyForce(p_args[0].decode(Vector2), p_args[1].decode(Vector2))
  table["_apply_torque"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).applyTorque(p_args[0].decode(Float))
  table["_add_constant_central_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).addConstantCentralForce(p_args[0].decode(Vector2))
  table["_add_constant_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).addConstantForce(p_args[0].decode(Vector2), p_args[1].decode(Vector2))
  table["_add_constant_torque"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).addConstantTorque(p_args[0].decode(Float))
  table["_set_constant_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).setConstantForce(p_args[0].decode(Vector2))
  table["_get_constant_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getConstantForce().encode(r_ret)
  table["_set_constant_torque"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).setConstantTorque(p_args[0].decode(Float))
  table["_get_constant_torque"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getConstantTorque().encode(r_ret)
  table["_set_sleep_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).setSleepState(p_args[0].decode(Bool))
  table["_is_sleeping"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).isSleeping().encode(r_ret)
  table["_get_contact_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getContactCount().encode(r_ret)
  table["_get_contact_local_position"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getContactLocalPosition(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_local_normal"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getContactLocalNormal(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_local_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getContactLocalShape(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_local_velocity_at_position"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getContactLocalVelocityAtPosition(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_collider"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getContactCollider(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_collider_position"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getContactColliderPosition(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_collider_id"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getContactColliderId(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_collider_object"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getContactColliderObject(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_collider_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getContactColliderShape(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_collider_velocity_at_position"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getContactColliderVelocityAtPosition(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_impulse"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getContactImpulse(p_args[0].decode(int32)).encode(r_ret)
  table["_get_step"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getStep().encode(r_ret)
  table["_integrate_forces"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).integrateForces()
  table["_get_space_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState2DExtension](p_instance).getSpaceState().encode(r_ret)

define_godot_engine_class_essencials(PhysicsDirectBodyState3DExtension, PhysicsDirectBodyState3D)
method getTotalGravity*(self: PhysicsDirectBodyState3DExtension): Vector3 {.base.} = (discard)
method getTotalLinearDamp*(self: PhysicsDirectBodyState3DExtension): Float {.base.} = (discard)
method getTotalAngularDamp*(self: PhysicsDirectBodyState3DExtension): Float {.base.} = (discard)
method getCenterOfMass*(self: PhysicsDirectBodyState3DExtension): Vector3 {.base.} = (discard)
method getCenterOfMassLocal*(self: PhysicsDirectBodyState3DExtension): Vector3 {.base.} = (discard)
method getPrincipalInertiaAxes*(self: PhysicsDirectBodyState3DExtension): Basis {.base.} = (discard)
method getInverseMass*(self: PhysicsDirectBodyState3DExtension): Float {.base.} = (discard)
method getInverseInertia*(self: PhysicsDirectBodyState3DExtension): Vector3 {.base.} = (discard)
method getInverseInertiaTensor*(self: PhysicsDirectBodyState3DExtension): Basis {.base.} = (discard)
method setLinearVelocity*(self: PhysicsDirectBodyState3DExtension; velocity: Vector3) {.base.} = (discard)
method getLinearVelocity*(self: PhysicsDirectBodyState3DExtension): Vector3 {.base.} = (discard)
method setAngularVelocity*(self: PhysicsDirectBodyState3DExtension; velocity: Vector3) {.base.} = (discard)
method getAngularVelocity*(self: PhysicsDirectBodyState3DExtension): Vector3 {.base.} = (discard)
method setTransform*(self: PhysicsDirectBodyState3DExtension; transform: Transform3D) {.base.} = (discard)
method getTransform*(self: PhysicsDirectBodyState3DExtension): Transform3D {.base.} = (discard)
method getVelocityAtLocalPosition*(self: PhysicsDirectBodyState3DExtension; localPosition: Vector3): Vector3 {.base.} = (discard)
method applyCentralImpulse*(self: PhysicsDirectBodyState3DExtension; impulse: Vector3) {.base.} = (discard)
method applyImpulse*(self: PhysicsDirectBodyState3DExtension; impulse: Vector3; position: Vector3) {.base.} = (discard)
method applyTorqueImpulse*(self: PhysicsDirectBodyState3DExtension; impulse: Vector3) {.base.} = (discard)
method applyCentralForce*(self: PhysicsDirectBodyState3DExtension; force: Vector3) {.base.} = (discard)
method applyForce*(self: PhysicsDirectBodyState3DExtension; force: Vector3; position: Vector3) {.base.} = (discard)
method applyTorque*(self: PhysicsDirectBodyState3DExtension; torque: Vector3) {.base.} = (discard)
method addConstantCentralForce*(self: PhysicsDirectBodyState3DExtension; force: Vector3) {.base.} = (discard)
method addConstantForce*(self: PhysicsDirectBodyState3DExtension; force: Vector3; position: Vector3) {.base.} = (discard)
method addConstantTorque*(self: PhysicsDirectBodyState3DExtension; torque: Vector3) {.base.} = (discard)
method setConstantForce*(self: PhysicsDirectBodyState3DExtension; force: Vector3) {.base.} = (discard)
method getConstantForce*(self: PhysicsDirectBodyState3DExtension): Vector3 {.base.} = (discard)
method setConstantTorque*(self: PhysicsDirectBodyState3DExtension; torque: Vector3) {.base.} = (discard)
method getConstantTorque*(self: PhysicsDirectBodyState3DExtension): Vector3 {.base.} = (discard)
method setSleepState*(self: PhysicsDirectBodyState3DExtension; enabled: Bool) {.base.} = (discard)
method isSleeping*(self: PhysicsDirectBodyState3DExtension): Bool {.base.} = (discard)
method getContactCount*(self: PhysicsDirectBodyState3DExtension): int32 {.base.} = (discard)
method getContactLocalPosition*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): Vector3 {.base.} = (discard)
method getContactLocalNormal*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): Vector3 {.base.} = (discard)
method getContactImpulse*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): Vector3 {.base.} = (discard)
method getContactLocalShape*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): int32 {.base.} = (discard)
method getContactLocalVelocityAtPosition*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): Vector3 {.base.} = (discard)
method getContactCollider*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): RID {.base.} = (discard)
method getContactColliderPosition*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): Vector3 {.base.} = (discard)
method getContactColliderId*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): uint64 {.base.} = (discard)
method getContactColliderObject*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): Object {.base.} = (discard)
method getContactColliderShape*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): int32 {.base.} = (discard)
method getContactColliderVelocityAtPosition*(self: PhysicsDirectBodyState3DExtension; contactIdx: int32): Vector3 {.base.} = (discard)
method getStep*(self: PhysicsDirectBodyState3DExtension): Float {.base.} = (discard)
method integrateForces*(self: PhysicsDirectBodyState3DExtension) {.base.} = (discard)
method getSpaceState*(self: PhysicsDirectBodyState3DExtension): PhysicsDirectSpaceState3D {.base.} = (discard)
proc bind_virtuals*(S: typedesc[PhysicsDirectBodyState3DExtension]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_total_gravity"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getTotalGravity().encode(r_ret)
  table["_get_total_linear_damp"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getTotalLinearDamp().encode(r_ret)
  table["_get_total_angular_damp"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getTotalAngularDamp().encode(r_ret)
  table["_get_center_of_mass"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getCenterOfMass().encode(r_ret)
  table["_get_center_of_mass_local"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getCenterOfMassLocal().encode(r_ret)
  table["_get_principal_inertia_axes"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getPrincipalInertiaAxes().encode(r_ret)
  table["_get_inverse_mass"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getInverseMass().encode(r_ret)
  table["_get_inverse_inertia"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getInverseInertia().encode(r_ret)
  table["_get_inverse_inertia_tensor"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getInverseInertiaTensor().encode(r_ret)
  table["_set_linear_velocity"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).setLinearVelocity(p_args[0].decode(Vector3))
  table["_get_linear_velocity"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getLinearVelocity().encode(r_ret)
  table["_set_angular_velocity"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).setAngularVelocity(p_args[0].decode(Vector3))
  table["_get_angular_velocity"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getAngularVelocity().encode(r_ret)
  table["_set_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).setTransform(p_args[0].decode(Transform3D))
  table["_get_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getTransform().encode(r_ret)
  table["_get_velocity_at_local_position"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getVelocityAtLocalPosition(p_args[0].decode(Vector3)).encode(r_ret)
  table["_apply_central_impulse"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).applyCentralImpulse(p_args[0].decode(Vector3))
  table["_apply_impulse"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).applyImpulse(p_args[0].decode(Vector3), p_args[1].decode(Vector3))
  table["_apply_torque_impulse"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).applyTorqueImpulse(p_args[0].decode(Vector3))
  table["_apply_central_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).applyCentralForce(p_args[0].decode(Vector3))
  table["_apply_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).applyForce(p_args[0].decode(Vector3), p_args[1].decode(Vector3))
  table["_apply_torque"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).applyTorque(p_args[0].decode(Vector3))
  table["_add_constant_central_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).addConstantCentralForce(p_args[0].decode(Vector3))
  table["_add_constant_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).addConstantForce(p_args[0].decode(Vector3), p_args[1].decode(Vector3))
  table["_add_constant_torque"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).addConstantTorque(p_args[0].decode(Vector3))
  table["_set_constant_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).setConstantForce(p_args[0].decode(Vector3))
  table["_get_constant_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getConstantForce().encode(r_ret)
  table["_set_constant_torque"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).setConstantTorque(p_args[0].decode(Vector3))
  table["_get_constant_torque"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getConstantTorque().encode(r_ret)
  table["_set_sleep_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).setSleepState(p_args[0].decode(Bool))
  table["_is_sleeping"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).isSleeping().encode(r_ret)
  table["_get_contact_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getContactCount().encode(r_ret)
  table["_get_contact_local_position"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getContactLocalPosition(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_local_normal"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getContactLocalNormal(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_impulse"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getContactImpulse(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_local_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getContactLocalShape(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_local_velocity_at_position"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getContactLocalVelocityAtPosition(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_collider"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getContactCollider(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_collider_position"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getContactColliderPosition(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_collider_id"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getContactColliderId(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_collider_object"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getContactColliderObject(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_collider_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getContactColliderShape(p_args[0].decode(int32)).encode(r_ret)
  table["_get_contact_collider_velocity_at_position"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getContactColliderVelocityAtPosition(p_args[0].decode(int32)).encode(r_ret)
  table["_get_step"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getStep().encode(r_ret)
  table["_integrate_forces"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).integrateForces()
  table["_get_space_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectBodyState3DExtension](p_instance).getSpaceState().encode(r_ret)

define_godot_engine_class_essencials(PhysicsDirectSpaceState2DExtension, PhysicsDirectSpaceState2D)
method intersectRay*(self: PhysicsDirectSpaceState2DExtension; `from`: Vector2; to: Vector2; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; hitFromInside: Bool; retval: ptr PhysicsServer2DExtensionRayResult): Bool {.base.} = (discard)
method intersectPoint*(self: PhysicsDirectSpaceState2DExtension; position: Vector2; canvasInstanceId: uint64; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; retvals: ptr PhysicsServer2DExtensionShapeResult; maxRetvals: int32): int32 {.base.} = (discard)
method intersectShape*(self: PhysicsDirectSpaceState2DExtension; shapeRid: RID; transform: Transform2D; motion: Vector2; margin: Float; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; retval: ptr PhysicsServer2DExtensionShapeResult; maxRetvals: int32): int32 {.base.} = (discard)
method castMotion*(self: PhysicsDirectSpaceState2DExtension; shapeRid: RID; transform: Transform2D; motion: Vector2; margin: Float; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; closestSafe: ptr Float; closestUnsafe: ptr Float): Bool {.base.} = (discard)
method collideShape*(self: PhysicsDirectSpaceState2DExtension; shapeRid: RID; transform: Transform2D; motion: Vector2; margin: Float; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; retvals: pointer; maxRetvals: int32; retvalCount: ptr int32): Bool {.base.} = (discard)
method restInfo*(self: PhysicsDirectSpaceState2DExtension; shapeRid: RID; transform: Transform2D; motion: Vector2; margin: Float; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; restInfo: ptr PhysicsServer2DExtensionShapeRestInfo): Bool {.base.} = (discard)
proc bind_virtuals*(S: typedesc[PhysicsDirectSpaceState2DExtension]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_intersect_ray"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectSpaceState2DExtension](p_instance).intersectRay(p_args[0].decode(Vector2), p_args[1].decode(Vector2), p_args[2].decode(uint32), p_args[3].decode(Bool), p_args[4].decode(Bool), p_args[5].decode(Bool), p_args[6].decode(ptr PhysicsServer2DExtensionRayResult)).encode(r_ret)
  table["_intersect_point"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectSpaceState2DExtension](p_instance).intersectPoint(p_args[0].decode(Vector2), p_args[1].decode(uint64), p_args[2].decode(uint32), p_args[3].decode(Bool), p_args[4].decode(Bool), p_args[5].decode(ptr PhysicsServer2DExtensionShapeResult), p_args[6].decode(int32)).encode(r_ret)
  table["_intersect_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectSpaceState2DExtension](p_instance).intersectShape(p_args[0].decode(RID), p_args[1].decode(Transform2D), p_args[2].decode(Vector2), p_args[3].decode(Float), p_args[4].decode(uint32), p_args[5].decode(Bool), p_args[6].decode(Bool), p_args[7].decode(ptr PhysicsServer2DExtensionShapeResult), p_args[8].decode(int32)).encode(r_ret)
  table["_cast_motion"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectSpaceState2DExtension](p_instance).castMotion(p_args[0].decode(RID), p_args[1].decode(Transform2D), p_args[2].decode(Vector2), p_args[3].decode(Float), p_args[4].decode(uint32), p_args[5].decode(Bool), p_args[6].decode(Bool), p_args[7].decode(ptr Float), p_args[8].decode(ptr Float)).encode(r_ret)
  table["_collide_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectSpaceState2DExtension](p_instance).collideShape(p_args[0].decode(RID), p_args[1].decode(Transform2D), p_args[2].decode(Vector2), p_args[3].decode(Float), p_args[4].decode(uint32), p_args[5].decode(Bool), p_args[6].decode(Bool), p_args[7].decode(pointer), p_args[8].decode(int32), p_args[9].decode(ptr int32)).encode(r_ret)
  table["_rest_info"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectSpaceState2DExtension](p_instance).restInfo(p_args[0].decode(RID), p_args[1].decode(Transform2D), p_args[2].decode(Vector2), p_args[3].decode(Float), p_args[4].decode(uint32), p_args[5].decode(Bool), p_args[6].decode(Bool), p_args[7].decode(ptr PhysicsServer2DExtensionShapeRestInfo)).encode(r_ret)

define_godot_engine_class_essencials(PhysicsDirectSpaceState3DExtension, PhysicsDirectSpaceState3D)
method intersectRay*(self: PhysicsDirectSpaceState3DExtension; `from`: Vector3; to: Vector3; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; hitFromInside: Bool; hitBackFaces: Bool; pickRay: Bool; retval: ptr PhysicsServer3DExtensionRayResult): Bool {.base.} = (discard)
method intersectPoint*(self: PhysicsDirectSpaceState3DExtension; position: Vector3; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; retvals: ptr PhysicsServer3DExtensionShapeResult; maxRetvals: int32): int32 {.base.} = (discard)
method intersectShape*(self: PhysicsDirectSpaceState3DExtension; shapeRid: RID; transform: Transform3D; motion: Vector3; margin: Float; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; retvalCount: ptr PhysicsServer3DExtensionShapeResult; maxRetvals: int32): int32 {.base.} = (discard)
method castMotion*(self: PhysicsDirectSpaceState3DExtension; shapeRid: RID; transform: Transform3D; motion: Vector3; margin: Float; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; closestSafe: ptr Float; closestUnsafe: ptr Float; info: ptr PhysicsServer3DExtensionShapeRestInfo): Bool {.base.} = (discard)
method collideShape*(self: PhysicsDirectSpaceState3DExtension; shapeRid: RID; transform: Transform3D; motion: Vector3; margin: Float; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; retvals: pointer; maxRetvals: int32; retvalCount: ptr int32): Bool {.base.} = (discard)
method restInfo*(self: PhysicsDirectSpaceState3DExtension; shapeRid: RID; transform: Transform3D; motion: Vector3; margin: Float; collisionMask: uint32; collideWithBodies: Bool; collideWithAreas: Bool; restInfo: ptr PhysicsServer3DExtensionShapeRestInfo): Bool {.base.} = (discard)
method getClosestPointToObjectVolume*(self: PhysicsDirectSpaceState3DExtension; `object`: RID; point: Vector3): Vector3 {.base.} = (discard)
proc bind_virtuals*(S: typedesc[PhysicsDirectSpaceState3DExtension]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_intersect_ray"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectSpaceState3DExtension](p_instance).intersectRay(p_args[0].decode(Vector3), p_args[1].decode(Vector3), p_args[2].decode(uint32), p_args[3].decode(Bool), p_args[4].decode(Bool), p_args[5].decode(Bool), p_args[6].decode(Bool), p_args[7].decode(Bool), p_args[8].decode(ptr PhysicsServer3DExtensionRayResult)).encode(r_ret)
  table["_intersect_point"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectSpaceState3DExtension](p_instance).intersectPoint(p_args[0].decode(Vector3), p_args[1].decode(uint32), p_args[2].decode(Bool), p_args[3].decode(Bool), p_args[4].decode(ptr PhysicsServer3DExtensionShapeResult), p_args[5].decode(int32)).encode(r_ret)
  table["_intersect_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectSpaceState3DExtension](p_instance).intersectShape(p_args[0].decode(RID), p_args[1].decode(Transform3D), p_args[2].decode(Vector3), p_args[3].decode(Float), p_args[4].decode(uint32), p_args[5].decode(Bool), p_args[6].decode(Bool), p_args[7].decode(ptr PhysicsServer3DExtensionShapeResult), p_args[8].decode(int32)).encode(r_ret)
  table["_cast_motion"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectSpaceState3DExtension](p_instance).castMotion(p_args[0].decode(RID), p_args[1].decode(Transform3D), p_args[2].decode(Vector3), p_args[3].decode(Float), p_args[4].decode(uint32), p_args[5].decode(Bool), p_args[6].decode(Bool), p_args[7].decode(ptr Float), p_args[8].decode(ptr Float), p_args[9].decode(ptr PhysicsServer3DExtensionShapeRestInfo)).encode(r_ret)
  table["_collide_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectSpaceState3DExtension](p_instance).collideShape(p_args[0].decode(RID), p_args[1].decode(Transform3D), p_args[2].decode(Vector3), p_args[3].decode(Float), p_args[4].decode(uint32), p_args[5].decode(Bool), p_args[6].decode(Bool), p_args[7].decode(pointer), p_args[8].decode(int32), p_args[9].decode(ptr int32)).encode(r_ret)
  table["_rest_info"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectSpaceState3DExtension](p_instance).restInfo(p_args[0].decode(RID), p_args[1].decode(Transform3D), p_args[2].decode(Vector3), p_args[3].decode(Float), p_args[4].decode(uint32), p_args[5].decode(Bool), p_args[6].decode(Bool), p_args[7].decode(ptr PhysicsServer3DExtensionShapeRestInfo)).encode(r_ret)
  table["_get_closest_point_to_object_volume"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsDirectSpaceState3DExtension](p_instance).getClosestPointToObjectVolume(p_args[0].decode(RID), p_args[1].decode(Vector3)).encode(r_ret)

define_godot_engine_class_essencials(GodotPhysicsServer2D, PhysicsServer2D)
define_godot_engine_class_essencials(PhysicsServer2DExtension, PhysicsServer2D)
method worldBoundaryShapeCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method separationRayShapeCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method segmentShapeCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method circleShapeCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method rectangleShapeCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method capsuleShapeCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method convexPolygonShapeCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method concavePolygonShapeCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method shapeSetData*(self: PhysicsServer2DExtension; shape: RID; data: ptr Variant) {.base.} = (discard)
method shapeSetCustomSolverBias*(self: PhysicsServer2DExtension; shape: RID; bias: Float) {.base.} = (discard)
method shapeGetType*(self: PhysicsServer2DExtension; shape: RID): PhysicsServer2D_ShapeType {.base.} = (discard)
method shapeGetData*(self: PhysicsServer2DExtension; shape: RID): Variant {.base.} = (discard)
method shapeGetCustomSolverBias*(self: PhysicsServer2DExtension; shape: RID): Float {.base.} = (discard)
method shapeCollide*(self: PhysicsServer2DExtension; shapeA: RID; xformA: Transform2D; motionA: Vector2; shapeB: RID; xformB: Transform2D; motionB: Vector2; retvals: pointer; retvalMax: int32; retvalCount: ptr int32): Bool {.base.} = (discard)
method spaceCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method spaceSetActive*(self: PhysicsServer2DExtension; space: RID; active: Bool) {.base.} = (discard)
method spaceIsActive*(self: PhysicsServer2DExtension; space: RID): Bool {.base.} = (discard)
method spaceSetParam*(self: PhysicsServer2DExtension; space: RID; param: PhysicsServer2D_SpaceParameter; value: Float) {.base.} = (discard)
method spaceGetParam*(self: PhysicsServer2DExtension; space: RID; param: PhysicsServer2D_SpaceParameter): Float {.base.} = (discard)
method spaceGetDirectState*(self: PhysicsServer2DExtension; space: RID): PhysicsDirectSpaceState2D {.base.} = (discard)
method spaceSetDebugContacts*(self: PhysicsServer2DExtension; space: RID; maxContacts: int32) {.base.} = (discard)
method spaceGetContacts*(self: PhysicsServer2DExtension; space: RID): PackedVector2Array {.base.} = (discard)
method spaceGetContactCount*(self: PhysicsServer2DExtension; space: RID): int32 {.base.} = (discard)
method areaCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method areaSetSpace*(self: PhysicsServer2DExtension; area: RID; space: RID) {.base.} = (discard)
method areaGetSpace*(self: PhysicsServer2DExtension; area: RID): RID {.base.} = (discard)
method areaAddShape*(self: PhysicsServer2DExtension; area: RID; shape: RID; transform: Transform2D; disabled: Bool) {.base.} = (discard)
method areaSetShape*(self: PhysicsServer2DExtension; area: RID; shapeIdx: int32; shape: RID) {.base.} = (discard)
method areaSetShapeTransform*(self: PhysicsServer2DExtension; area: RID; shapeIdx: int32; transform: Transform2D) {.base.} = (discard)
method areaSetShapeDisabled*(self: PhysicsServer2DExtension; area: RID; shapeIdx: int32; disabled: Bool) {.base.} = (discard)
method areaGetShapeCount*(self: PhysicsServer2DExtension; area: RID): int32 {.base.} = (discard)
method areaGetShape*(self: PhysicsServer2DExtension; area: RID; shapeIdx: int32): RID {.base.} = (discard)
method areaGetShapeTransform*(self: PhysicsServer2DExtension; area: RID; shapeIdx: int32): Transform2D {.base.} = (discard)
method areaRemoveShape*(self: PhysicsServer2DExtension; area: RID; shapeIdx: int32) {.base.} = (discard)
method areaClearShapes*(self: PhysicsServer2DExtension; area: RID) {.base.} = (discard)
method areaAttachObjectInstanceId*(self: PhysicsServer2DExtension; area: RID; id: uint64) {.base.} = (discard)
method areaGetObjectInstanceId*(self: PhysicsServer2DExtension; area: RID): uint64 {.base.} = (discard)
method areaAttachCanvasInstanceId*(self: PhysicsServer2DExtension; area: RID; id: uint64) {.base.} = (discard)
method areaGetCanvasInstanceId*(self: PhysicsServer2DExtension; area: RID): uint64 {.base.} = (discard)
method areaSetParam*(self: PhysicsServer2DExtension; area: RID; param: PhysicsServer2D_AreaParameter; value: ptr Variant) {.base.} = (discard)
method areaSetTransform*(self: PhysicsServer2DExtension; area: RID; transform: Transform2D) {.base.} = (discard)
method areaGetParam*(self: PhysicsServer2DExtension; area: RID; param: PhysicsServer2D_AreaParameter): Variant {.base.} = (discard)
method areaGetTransform*(self: PhysicsServer2DExtension; area: RID): Transform2D {.base.} = (discard)
method areaSetCollisionLayer*(self: PhysicsServer2DExtension; area: RID; layer: uint32) {.base.} = (discard)
method areaGetCollisionLayer*(self: PhysicsServer2DExtension; area: RID): uint32 {.base.} = (discard)
method areaSetCollisionMask*(self: PhysicsServer2DExtension; area: RID; mask: uint32) {.base.} = (discard)
method areaGetCollisionMask*(self: PhysicsServer2DExtension; area: RID): uint32 {.base.} = (discard)
method areaSetMonitorable*(self: PhysicsServer2DExtension; area: RID; monitorable: Bool) {.base.} = (discard)
method areaSetPickable*(self: PhysicsServer2DExtension; area: RID; pickable: Bool) {.base.} = (discard)
method areaSetMonitorCallback*(self: PhysicsServer2DExtension; area: RID; callback: Callable) {.base.} = (discard)
method areaSetAreaMonitorCallback*(self: PhysicsServer2DExtension; area: RID; callback: Callable) {.base.} = (discard)
method bodyCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method bodySetSpace*(self: PhysicsServer2DExtension; body: RID; space: RID) {.base.} = (discard)
method bodyGetSpace*(self: PhysicsServer2DExtension; body: RID): RID {.base.} = (discard)
method bodySetMode*(self: PhysicsServer2DExtension; body: RID; mode: PhysicsServer2D_BodyMode) {.base.} = (discard)
method bodyGetMode*(self: PhysicsServer2DExtension; body: RID): PhysicsServer2D_BodyMode {.base.} = (discard)
method bodyAddShape*(self: PhysicsServer2DExtension; body: RID; shape: RID; transform: Transform2D; disabled: Bool) {.base.} = (discard)
method bodySetShape*(self: PhysicsServer2DExtension; body: RID; shapeIdx: int32; shape: RID) {.base.} = (discard)
method bodySetShapeTransform*(self: PhysicsServer2DExtension; body: RID; shapeIdx: int32; transform: Transform2D) {.base.} = (discard)
method bodyGetShapeCount*(self: PhysicsServer2DExtension; body: RID): int32 {.base.} = (discard)
method bodyGetShape*(self: PhysicsServer2DExtension; body: RID; shapeIdx: int32): RID {.base.} = (discard)
method bodyGetShapeTransform*(self: PhysicsServer2DExtension; body: RID; shapeIdx: int32): Transform2D {.base.} = (discard)
method bodySetShapeDisabled*(self: PhysicsServer2DExtension; body: RID; shapeIdx: int32; disabled: Bool) {.base.} = (discard)
method bodySetShapeAsOneWayCollision*(self: PhysicsServer2DExtension; body: RID; shapeIdx: int32; enable: Bool; margin: Float) {.base.} = (discard)
method bodyRemoveShape*(self: PhysicsServer2DExtension; body: RID; shapeIdx: int32) {.base.} = (discard)
method bodyClearShapes*(self: PhysicsServer2DExtension; body: RID) {.base.} = (discard)
method bodyAttachObjectInstanceId*(self: PhysicsServer2DExtension; body: RID; id: uint64) {.base.} = (discard)
method bodyGetObjectInstanceId*(self: PhysicsServer2DExtension; body: RID): uint64 {.base.} = (discard)
method bodyAttachCanvasInstanceId*(self: PhysicsServer2DExtension; body: RID; id: uint64) {.base.} = (discard)
method bodyGetCanvasInstanceId*(self: PhysicsServer2DExtension; body: RID): uint64 {.base.} = (discard)
method bodySetContinuousCollisionDetectionMode*(self: PhysicsServer2DExtension; body: RID; mode: PhysicsServer2D_CCDMode) {.base.} = (discard)
method bodyGetContinuousCollisionDetectionMode*(self: PhysicsServer2DExtension; body: RID): PhysicsServer2D_CCDMode {.base.} = (discard)
method bodySetCollisionLayer*(self: PhysicsServer2DExtension; body: RID; layer: uint32) {.base.} = (discard)
method bodyGetCollisionLayer*(self: PhysicsServer2DExtension; body: RID): uint32 {.base.} = (discard)
method bodySetCollisionMask*(self: PhysicsServer2DExtension; body: RID; mask: uint32) {.base.} = (discard)
method bodyGetCollisionMask*(self: PhysicsServer2DExtension; body: RID): uint32 {.base.} = (discard)
method bodySetCollisionPriority*(self: PhysicsServer2DExtension; body: RID; priority: Float) {.base.} = (discard)
method bodyGetCollisionPriority*(self: PhysicsServer2DExtension; body: RID): Float {.base.} = (discard)
method bodySetParam*(self: PhysicsServer2DExtension; body: RID; param: PhysicsServer2D_BodyParameter; value: ptr Variant) {.base.} = (discard)
method bodyGetParam*(self: PhysicsServer2DExtension; body: RID; param: PhysicsServer2D_BodyParameter): Variant {.base.} = (discard)
method bodyResetMassProperties*(self: PhysicsServer2DExtension; body: RID) {.base.} = (discard)
method bodySetState*(self: PhysicsServer2DExtension; body: RID; state: PhysicsServer2D_BodyState; value: ptr Variant) {.base.} = (discard)
method bodyGetState*(self: PhysicsServer2DExtension; body: RID; state: PhysicsServer2D_BodyState): Variant {.base.} = (discard)
method bodyApplyCentralImpulse*(self: PhysicsServer2DExtension; body: RID; impulse: Vector2) {.base.} = (discard)
method bodyApplyTorqueImpulse*(self: PhysicsServer2DExtension; body: RID; impulse: Float) {.base.} = (discard)
method bodyApplyImpulse*(self: PhysicsServer2DExtension; body: RID; impulse: Vector2; position: Vector2) {.base.} = (discard)
method bodyApplyCentralForce*(self: PhysicsServer2DExtension; body: RID; force: Vector2) {.base.} = (discard)
method bodyApplyForce*(self: PhysicsServer2DExtension; body: RID; force: Vector2; position: Vector2) {.base.} = (discard)
method bodyApplyTorque*(self: PhysicsServer2DExtension; body: RID; torque: Float) {.base.} = (discard)
method bodyAddConstantCentralForce*(self: PhysicsServer2DExtension; body: RID; force: Vector2) {.base.} = (discard)
method bodyAddConstantForce*(self: PhysicsServer2DExtension; body: RID; force: Vector2; position: Vector2) {.base.} = (discard)
method bodyAddConstantTorque*(self: PhysicsServer2DExtension; body: RID; torque: Float) {.base.} = (discard)
method bodySetConstantForce*(self: PhysicsServer2DExtension; body: RID; force: Vector2) {.base.} = (discard)
method bodyGetConstantForce*(self: PhysicsServer2DExtension; body: RID): Vector2 {.base.} = (discard)
method bodySetConstantTorque*(self: PhysicsServer2DExtension; body: RID; torque: Float) {.base.} = (discard)
method bodyGetConstantTorque*(self: PhysicsServer2DExtension; body: RID): Float {.base.} = (discard)
method bodySetAxisVelocity*(self: PhysicsServer2DExtension; body: RID; axisVelocity: Vector2) {.base.} = (discard)
method bodyAddCollisionException*(self: PhysicsServer2DExtension; body: RID; exceptedBody: RID) {.base.} = (discard)
method bodyRemoveCollisionException*(self: PhysicsServer2DExtension; body: RID; exceptedBody: RID) {.base.} = (discard)
method bodyGetCollisionExceptions*(self: PhysicsServer2DExtension; body: RID): TypedArray[RID] {.base.} = (discard)
method bodySetMaxContactsReported*(self: PhysicsServer2DExtension; body: RID; amount: int32) {.base.} = (discard)
method bodyGetMaxContactsReported*(self: PhysicsServer2DExtension; body: RID): int32 {.base.} = (discard)
method bodySetContactsReportedDepthThreshold*(self: PhysicsServer2DExtension; body: RID; threshold: Float) {.base.} = (discard)
method bodyGetContactsReportedDepthThreshold*(self: PhysicsServer2DExtension; body: RID): Float {.base.} = (discard)
method bodySetOmitForceIntegration*(self: PhysicsServer2DExtension; body: RID; enable: Bool) {.base.} = (discard)
method bodyIsOmittingForceIntegration*(self: PhysicsServer2DExtension; body: RID): Bool {.base.} = (discard)
method bodySetStateSyncCallback*(self: PhysicsServer2DExtension; body: RID; callable: Callable) {.base.} = (discard)
method bodySetForceIntegrationCallback*(self: PhysicsServer2DExtension; body: RID; callable: Callable; userdata: ptr Variant) {.base.} = (discard)
method bodyCollideShape*(self: PhysicsServer2DExtension; body: RID; bodyShape: int32; shape: RID; shapeXform: Transform2D; motion: Vector2; retvals: pointer; retvalMax: int32; retvalCount: ptr int32): Bool {.base.} = (discard)
method bodySetPickable*(self: PhysicsServer2DExtension; body: RID; pickable: Bool) {.base.} = (discard)
method bodyGetDirectState*(self: PhysicsServer2DExtension; body: RID): PhysicsDirectBodyState2D {.base.} = (discard)
method bodyTestMotion*(self: PhysicsServer2DExtension; body: RID; `from`: Transform2D; motion: Vector2; margin: Float; collideSeparationRay: Bool; recoveryAsCollision: Bool; retval: ptr PhysicsServer2DExtensionMotionResult): Bool {.base.} = (discard)
method jointCreate*(self: PhysicsServer2DExtension): RID {.base.} = (discard)
method jointClear*(self: PhysicsServer2DExtension; joint: RID) {.base.} = (discard)
method jointSetParam*(self: PhysicsServer2DExtension; joint: RID; param: PhysicsServer2D_JointParam; value: Float) {.base.} = (discard)
method jointGetParam*(self: PhysicsServer2DExtension; joint: RID; param: PhysicsServer2D_JointParam): Float {.base.} = (discard)
method jointDisableCollisionsBetweenBodies*(self: PhysicsServer2DExtension; joint: RID; disable: Bool) {.base.} = (discard)
method jointIsDisabledCollisionsBetweenBodies*(self: PhysicsServer2DExtension; joint: RID): Bool {.base.} = (discard)
method jointMakePin*(self: PhysicsServer2DExtension; joint: RID; anchor: Vector2; bodyA: RID; bodyB: RID) {.base.} = (discard)
method jointMakeGroove*(self: PhysicsServer2DExtension; joint: RID; aGroove1: Vector2; aGroove2: Vector2; bAnchor: Vector2; bodyA: RID; bodyB: RID) {.base.} = (discard)
method jointMakeDampedSpring*(self: PhysicsServer2DExtension; joint: RID; anchorA: Vector2; anchorB: Vector2; bodyA: RID; bodyB: RID) {.base.} = (discard)
method pinJointSetParam*(self: PhysicsServer2DExtension; joint: RID; param: PhysicsServer2D_PinJointParam; value: Float) {.base.} = (discard)
method pinJointGetParam*(self: PhysicsServer2DExtension; joint: RID; param: PhysicsServer2D_PinJointParam): Float {.base.} = (discard)
method dampedSpringJointSetParam*(self: PhysicsServer2DExtension; joint: RID; param: PhysicsServer2D_DampedSpringParam; value: Float) {.base.} = (discard)
method dampedSpringJointGetParam*(self: PhysicsServer2DExtension; joint: RID; param: PhysicsServer2D_DampedSpringParam): Float {.base.} = (discard)
method jointGetType*(self: PhysicsServer2DExtension; joint: RID): PhysicsServer2D_JointType {.base.} = (discard)
method freeRid*(self: PhysicsServer2DExtension; rid: RID) {.base.} = (discard)
method setActive*(self: PhysicsServer2DExtension; active: Bool) {.base.} = (discard)
method init*(self: PhysicsServer2DExtension) {.base.} = (discard)
method step*(self: PhysicsServer2DExtension; step: Float) {.base.} = (discard)
method sync*(self: PhysicsServer2DExtension) {.base.} = (discard)
method flushQueries*(self: PhysicsServer2DExtension) {.base.} = (discard)
method endSync*(self: PhysicsServer2DExtension) {.base.} = (discard)
method finish*(self: PhysicsServer2DExtension) {.base.} = (discard)
method isFlushingQueries*(self: PhysicsServer2DExtension): Bool {.base.} = (discard)
method getProcessInfo*(self: PhysicsServer2DExtension; processInfo: PhysicsServer2D_ProcessInfo): int32 {.base.} = (discard)
proc bind_virtuals*(S: typedesc[PhysicsServer2DExtension]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_world_boundary_shape_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).worldBoundaryShapeCreate().encode(r_ret)
  table["_separation_ray_shape_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).separationRayShapeCreate().encode(r_ret)
  table["_segment_shape_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).segmentShapeCreate().encode(r_ret)
  table["_circle_shape_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).circleShapeCreate().encode(r_ret)
  table["_rectangle_shape_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).rectangleShapeCreate().encode(r_ret)
  table["_capsule_shape_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).capsuleShapeCreate().encode(r_ret)
  table["_convex_polygon_shape_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).convexPolygonShapeCreate().encode(r_ret)
  table["_concave_polygon_shape_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).concavePolygonShapeCreate().encode(r_ret)
  table["_shape_set_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).shapeSetData(p_args[0].decode(RID), p_args[1].decode(ptr Variant))
  table["_shape_set_custom_solver_bias"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).shapeSetCustomSolverBias(p_args[0].decode(RID), p_args[1].decode(Float))
  table["_shape_get_type"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).shapeGetType(p_args[0].decode(RID)).encode(r_ret)
  table["_shape_get_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).shapeGetData(p_args[0].decode(RID)).encode(r_ret)
  table["_shape_get_custom_solver_bias"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).shapeGetCustomSolverBias(p_args[0].decode(RID)).encode(r_ret)
  table["_shape_collide"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).shapeCollide(p_args[0].decode(RID), p_args[1].decode(Transform2D), p_args[2].decode(Vector2), p_args[3].decode(RID), p_args[4].decode(Transform2D), p_args[5].decode(Vector2), p_args[6].decode(pointer), p_args[7].decode(int32), p_args[8].decode(ptr int32)).encode(r_ret)
  table["_space_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).spaceCreate().encode(r_ret)
  table["_space_set_active"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).spaceSetActive(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_space_is_active"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).spaceIsActive(p_args[0].decode(RID)).encode(r_ret)
  table["_space_set_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).spaceSetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer2D_SpaceParameter), p_args[2].decode(Float))
  table["_space_get_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).spaceGetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer2D_SpaceParameter)).encode(r_ret)
  table["_space_get_direct_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).spaceGetDirectState(p_args[0].decode(RID)).encode(r_ret)
  table["_space_set_debug_contacts"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).spaceSetDebugContacts(p_args[0].decode(RID), p_args[1].decode(int32))
  table["_space_get_contacts"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).spaceGetContacts(p_args[0].decode(RID)).encode(r_ret)
  table["_space_get_contact_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).spaceGetContactCount(p_args[0].decode(RID)).encode(r_ret)
  table["_area_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaCreate().encode(r_ret)
  table["_area_set_space"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaSetSpace(p_args[0].decode(RID), p_args[1].decode(RID))
  table["_area_get_space"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaGetSpace(p_args[0].decode(RID)).encode(r_ret)
  table["_area_add_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaAddShape(p_args[0].decode(RID), p_args[1].decode(RID), p_args[2].decode(Transform2D), p_args[3].decode(Bool))
  table["_area_set_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaSetShape(p_args[0].decode(RID), p_args[1].decode(int32), p_args[2].decode(RID))
  table["_area_set_shape_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaSetShapeTransform(p_args[0].decode(RID), p_args[1].decode(int32), p_args[2].decode(Transform2D))
  table["_area_set_shape_disabled"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaSetShapeDisabled(p_args[0].decode(RID), p_args[1].decode(int32), p_args[2].decode(Bool))
  table["_area_get_shape_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaGetShapeCount(p_args[0].decode(RID)).encode(r_ret)
  table["_area_get_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaGetShape(p_args[0].decode(RID), p_args[1].decode(int32)).encode(r_ret)
  table["_area_get_shape_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaGetShapeTransform(p_args[0].decode(RID), p_args[1].decode(int32)).encode(r_ret)
  table["_area_remove_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaRemoveShape(p_args[0].decode(RID), p_args[1].decode(int32))
  table["_area_clear_shapes"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaClearShapes(p_args[0].decode(RID))
  table["_area_attach_object_instance_id"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaAttachObjectInstanceId(p_args[0].decode(RID), p_args[1].decode(uint64))
  table["_area_get_object_instance_id"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaGetObjectInstanceId(p_args[0].decode(RID)).encode(r_ret)
  table["_area_attach_canvas_instance_id"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaAttachCanvasInstanceId(p_args[0].decode(RID), p_args[1].decode(uint64))
  table["_area_get_canvas_instance_id"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaGetCanvasInstanceId(p_args[0].decode(RID)).encode(r_ret)
  table["_area_set_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaSetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer2D_AreaParameter), p_args[2].decode(ptr Variant))
  table["_area_set_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaSetTransform(p_args[0].decode(RID), p_args[1].decode(Transform2D))
  table["_area_get_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaGetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer2D_AreaParameter)).encode(r_ret)
  table["_area_get_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaGetTransform(p_args[0].decode(RID)).encode(r_ret)
  table["_area_set_collision_layer"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaSetCollisionLayer(p_args[0].decode(RID), p_args[1].decode(uint32))
  table["_area_get_collision_layer"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaGetCollisionLayer(p_args[0].decode(RID)).encode(r_ret)
  table["_area_set_collision_mask"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaSetCollisionMask(p_args[0].decode(RID), p_args[1].decode(uint32))
  table["_area_get_collision_mask"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaGetCollisionMask(p_args[0].decode(RID)).encode(r_ret)
  table["_area_set_monitorable"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaSetMonitorable(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_area_set_pickable"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaSetPickable(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_area_set_monitor_callback"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaSetMonitorCallback(p_args[0].decode(RID), p_args[1].decode(Callable))
  table["_area_set_area_monitor_callback"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).areaSetAreaMonitorCallback(p_args[0].decode(RID), p_args[1].decode(Callable))
  table["_body_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyCreate().encode(r_ret)
  table["_body_set_space"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetSpace(p_args[0].decode(RID), p_args[1].decode(RID))
  table["_body_get_space"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyGetSpace(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_mode"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetMode(p_args[0].decode(RID), p_args[1].decode(PhysicsServer2D_BodyMode))
  table["_body_get_mode"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyGetMode(p_args[0].decode(RID)).encode(r_ret)
  table["_body_add_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyAddShape(p_args[0].decode(RID), p_args[1].decode(RID), p_args[2].decode(Transform2D), p_args[3].decode(Bool))
  table["_body_set_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetShape(p_args[0].decode(RID), p_args[1].decode(int32), p_args[2].decode(RID))
  table["_body_set_shape_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetShapeTransform(p_args[0].decode(RID), p_args[1].decode(int32), p_args[2].decode(Transform2D))
  table["_body_get_shape_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyGetShapeCount(p_args[0].decode(RID)).encode(r_ret)
  table["_body_get_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyGetShape(p_args[0].decode(RID), p_args[1].decode(int32)).encode(r_ret)
  table["_body_get_shape_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyGetShapeTransform(p_args[0].decode(RID), p_args[1].decode(int32)).encode(r_ret)
  table["_body_set_shape_disabled"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetShapeDisabled(p_args[0].decode(RID), p_args[1].decode(int32), p_args[2].decode(Bool))
  table["_body_set_shape_as_one_way_collision"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetShapeAsOneWayCollision(p_args[0].decode(RID), p_args[1].decode(int32), p_args[2].decode(Bool), p_args[3].decode(Float))
  table["_body_remove_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyRemoveShape(p_args[0].decode(RID), p_args[1].decode(int32))
  table["_body_clear_shapes"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyClearShapes(p_args[0].decode(RID))
  table["_body_attach_object_instance_id"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyAttachObjectInstanceId(p_args[0].decode(RID), p_args[1].decode(uint64))
  table["_body_get_object_instance_id"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyGetObjectInstanceId(p_args[0].decode(RID)).encode(r_ret)
  table["_body_attach_canvas_instance_id"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyAttachCanvasInstanceId(p_args[0].decode(RID), p_args[1].decode(uint64))
  table["_body_get_canvas_instance_id"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyGetCanvasInstanceId(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_continuous_collision_detection_mode"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetContinuousCollisionDetectionMode(p_args[0].decode(RID), p_args[1].decode(PhysicsServer2D_CCDMode))
  table["_body_get_continuous_collision_detection_mode"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyGetContinuousCollisionDetectionMode(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_collision_layer"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetCollisionLayer(p_args[0].decode(RID), p_args[1].decode(uint32))
  table["_body_get_collision_layer"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyGetCollisionLayer(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_collision_mask"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetCollisionMask(p_args[0].decode(RID), p_args[1].decode(uint32))
  table["_body_get_collision_mask"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyGetCollisionMask(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_collision_priority"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetCollisionPriority(p_args[0].decode(RID), p_args[1].decode(Float))
  table["_body_get_collision_priority"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyGetCollisionPriority(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer2D_BodyParameter), p_args[2].decode(ptr Variant))
  table["_body_get_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyGetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer2D_BodyParameter)).encode(r_ret)
  table["_body_reset_mass_properties"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyResetMassProperties(p_args[0].decode(RID))
  table["_body_set_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetState(p_args[0].decode(RID), p_args[1].decode(PhysicsServer2D_BodyState), p_args[2].decode(ptr Variant))
  table["_body_get_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyGetState(p_args[0].decode(RID), p_args[1].decode(PhysicsServer2D_BodyState)).encode(r_ret)
  table["_body_apply_central_impulse"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyApplyCentralImpulse(p_args[0].decode(RID), p_args[1].decode(Vector2))
  table["_body_apply_torque_impulse"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyApplyTorqueImpulse(p_args[0].decode(RID), p_args[1].decode(Float))
  table["_body_apply_impulse"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyApplyImpulse(p_args[0].decode(RID), p_args[1].decode(Vector2), p_args[2].decode(Vector2))
  table["_body_apply_central_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyApplyCentralForce(p_args[0].decode(RID), p_args[1].decode(Vector2))
  table["_body_apply_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyApplyForce(p_args[0].decode(RID), p_args[1].decode(Vector2), p_args[2].decode(Vector2))
  table["_body_apply_torque"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyApplyTorque(p_args[0].decode(RID), p_args[1].decode(Float))
  table["_body_add_constant_central_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyAddConstantCentralForce(p_args[0].decode(RID), p_args[1].decode(Vector2))
  table["_body_add_constant_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyAddConstantForce(p_args[0].decode(RID), p_args[1].decode(Vector2), p_args[2].decode(Vector2))
  table["_body_add_constant_torque"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyAddConstantTorque(p_args[0].decode(RID), p_args[1].decode(Float))
  table["_body_set_constant_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetConstantForce(p_args[0].decode(RID), p_args[1].decode(Vector2))
  table["_body_get_constant_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyGetConstantForce(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_constant_torque"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetConstantTorque(p_args[0].decode(RID), p_args[1].decode(Float))
  table["_body_get_constant_torque"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyGetConstantTorque(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_axis_velocity"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetAxisVelocity(p_args[0].decode(RID), p_args[1].decode(Vector2))
  table["_body_add_collision_exception"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyAddCollisionException(p_args[0].decode(RID), p_args[1].decode(RID))
  table["_body_remove_collision_exception"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyRemoveCollisionException(p_args[0].decode(RID), p_args[1].decode(RID))
  table["_body_get_collision_exceptions"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyGetCollisionExceptions(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_max_contacts_reported"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetMaxContactsReported(p_args[0].decode(RID), p_args[1].decode(int32))
  table["_body_get_max_contacts_reported"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyGetMaxContactsReported(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_contacts_reported_depth_threshold"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetContactsReportedDepthThreshold(p_args[0].decode(RID), p_args[1].decode(Float))
  table["_body_get_contacts_reported_depth_threshold"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyGetContactsReportedDepthThreshold(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_omit_force_integration"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetOmitForceIntegration(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_body_is_omitting_force_integration"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyIsOmittingForceIntegration(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_state_sync_callback"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetStateSyncCallback(p_args[0].decode(RID), p_args[1].decode(Callable))
  table["_body_set_force_integration_callback"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetForceIntegrationCallback(p_args[0].decode(RID), p_args[1].decode(Callable), p_args[2].decode(ptr Variant))
  table["_body_collide_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyCollideShape(p_args[0].decode(RID), p_args[1].decode(int32), p_args[2].decode(RID), p_args[3].decode(Transform2D), p_args[4].decode(Vector2), p_args[5].decode(pointer), p_args[6].decode(int32), p_args[7].decode(ptr int32)).encode(r_ret)
  table["_body_set_pickable"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodySetPickable(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_body_get_direct_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyGetDirectState(p_args[0].decode(RID)).encode(r_ret)
  table["_body_test_motion"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).bodyTestMotion(p_args[0].decode(RID), p_args[1].decode(Transform2D), p_args[2].decode(Vector2), p_args[3].decode(Float), p_args[4].decode(Bool), p_args[5].decode(Bool), p_args[6].decode(ptr PhysicsServer2DExtensionMotionResult)).encode(r_ret)
  table["_joint_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).jointCreate().encode(r_ret)
  table["_joint_clear"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).jointClear(p_args[0].decode(RID))
  table["_joint_set_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).jointSetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer2D_JointParam), p_args[2].decode(Float))
  table["_joint_get_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).jointGetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer2D_JointParam)).encode(r_ret)
  table["_joint_disable_collisions_between_bodies"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).jointDisableCollisionsBetweenBodies(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_joint_is_disabled_collisions_between_bodies"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).jointIsDisabledCollisionsBetweenBodies(p_args[0].decode(RID)).encode(r_ret)
  table["_joint_make_pin"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).jointMakePin(p_args[0].decode(RID), p_args[1].decode(Vector2), p_args[2].decode(RID), p_args[3].decode(RID))
  table["_joint_make_groove"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).jointMakeGroove(p_args[0].decode(RID), p_args[1].decode(Vector2), p_args[2].decode(Vector2), p_args[3].decode(Vector2), p_args[4].decode(RID), p_args[5].decode(RID))
  table["_joint_make_damped_spring"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).jointMakeDampedSpring(p_args[0].decode(RID), p_args[1].decode(Vector2), p_args[2].decode(Vector2), p_args[3].decode(RID), p_args[4].decode(RID))
  table["_pin_joint_set_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).pinJointSetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer2D_PinJointParam), p_args[2].decode(Float))
  table["_pin_joint_get_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).pinJointGetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer2D_PinJointParam)).encode(r_ret)
  table["_damped_spring_joint_set_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).dampedSpringJointSetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer2D_DampedSpringParam), p_args[2].decode(Float))
  table["_damped_spring_joint_get_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).dampedSpringJointGetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer2D_DampedSpringParam)).encode(r_ret)
  table["_joint_get_type"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).jointGetType(p_args[0].decode(RID)).encode(r_ret)
  table["_free_rid"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).freeRid(p_args[0].decode(RID))
  table["_set_active"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).setActive(p_args[0].decode(Bool))
  table["_init"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).init()
  table["_step"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).step(p_args[0].decode(Float))
  table["_sync"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).sync()
  table["_flush_queries"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).flushQueries()
  table["_end_sync"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).endSync()
  table["_finish"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).finish()
  table["_is_flushing_queries"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).isFlushingQueries().encode(r_ret)
  table["_get_process_info"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer2DExtension](p_instance).getProcessInfo(p_args[0].decode(PhysicsServer2D_ProcessInfo)).encode(r_ret)

define_godot_engine_class_essencials(GodotPhysicsServer3D, PhysicsServer3D)
define_godot_engine_class_essencials(PhysicsServer3DExtension, PhysicsServer3D)
method worldBoundaryShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method separationRayShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method sphereShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method boxShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method capsuleShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method cylinderShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method convexPolygonShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method concavePolygonShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method heightmapShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method customShapeCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method shapeSetData*(self: PhysicsServer3DExtension; shape: RID; data: ptr Variant) {.base.} = (discard)
method shapeSetCustomSolverBias*(self: PhysicsServer3DExtension; shape: RID; bias: Float) {.base.} = (discard)
method shapeSetMargin*(self: PhysicsServer3DExtension; shape: RID; margin: Float) {.base.} = (discard)
method shapeGetMargin*(self: PhysicsServer3DExtension; shape: RID): Float {.base.} = (discard)
method shapeGetType*(self: PhysicsServer3DExtension; shape: RID): PhysicsServer3D_ShapeType {.base.} = (discard)
method shapeGetData*(self: PhysicsServer3DExtension; shape: RID): Variant {.base.} = (discard)
method shapeGetCustomSolverBias*(self: PhysicsServer3DExtension; shape: RID): Float {.base.} = (discard)
method spaceCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method spaceSetActive*(self: PhysicsServer3DExtension; space: RID; active: Bool) {.base.} = (discard)
method spaceIsActive*(self: PhysicsServer3DExtension; space: RID): Bool {.base.} = (discard)
method spaceSetParam*(self: PhysicsServer3DExtension; space: RID; param: PhysicsServer3D_SpaceParameter; value: Float) {.base.} = (discard)
method spaceGetParam*(self: PhysicsServer3DExtension; space: RID; param: PhysicsServer3D_SpaceParameter): Float {.base.} = (discard)
method spaceGetDirectState*(self: PhysicsServer3DExtension; space: RID): PhysicsDirectSpaceState3D {.base.} = (discard)
method spaceSetDebugContacts*(self: PhysicsServer3DExtension; space: RID; maxContacts: int32) {.base.} = (discard)
method spaceGetContacts*(self: PhysicsServer3DExtension; space: RID): PackedVector3Array {.base.} = (discard)
method spaceGetContactCount*(self: PhysicsServer3DExtension; space: RID): int32 {.base.} = (discard)
method areaCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method areaSetSpace*(self: PhysicsServer3DExtension; area: RID; space: RID) {.base.} = (discard)
method areaGetSpace*(self: PhysicsServer3DExtension; area: RID): RID {.base.} = (discard)
method areaAddShape*(self: PhysicsServer3DExtension; area: RID; shape: RID; transform: Transform3D; disabled: Bool) {.base.} = (discard)
method areaSetShape*(self: PhysicsServer3DExtension; area: RID; shapeIdx: int32; shape: RID) {.base.} = (discard)
method areaSetShapeTransform*(self: PhysicsServer3DExtension; area: RID; shapeIdx: int32; transform: Transform3D) {.base.} = (discard)
method areaSetShapeDisabled*(self: PhysicsServer3DExtension; area: RID; shapeIdx: int32; disabled: Bool) {.base.} = (discard)
method areaGetShapeCount*(self: PhysicsServer3DExtension; area: RID): int32 {.base.} = (discard)
method areaGetShape*(self: PhysicsServer3DExtension; area: RID; shapeIdx: int32): RID {.base.} = (discard)
method areaGetShapeTransform*(self: PhysicsServer3DExtension; area: RID; shapeIdx: int32): Transform3D {.base.} = (discard)
method areaRemoveShape*(self: PhysicsServer3DExtension; area: RID; shapeIdx: int32) {.base.} = (discard)
method areaClearShapes*(self: PhysicsServer3DExtension; area: RID) {.base.} = (discard)
method areaAttachObjectInstanceId*(self: PhysicsServer3DExtension; area: RID; id: uint64) {.base.} = (discard)
method areaGetObjectInstanceId*(self: PhysicsServer3DExtension; area: RID): uint64 {.base.} = (discard)
method areaSetParam*(self: PhysicsServer3DExtension; area: RID; param: PhysicsServer3D_AreaParameter; value: ptr Variant) {.base.} = (discard)
method areaSetTransform*(self: PhysicsServer3DExtension; area: RID; transform: Transform3D) {.base.} = (discard)
method areaGetParam*(self: PhysicsServer3DExtension; area: RID; param: PhysicsServer3D_AreaParameter): Variant {.base.} = (discard)
method areaGetTransform*(self: PhysicsServer3DExtension; area: RID): Transform3D {.base.} = (discard)
method areaSetCollisionLayer*(self: PhysicsServer3DExtension; area: RID; layer: uint32) {.base.} = (discard)
method areaGetCollisionLayer*(self: PhysicsServer3DExtension; area: RID): uint32 {.base.} = (discard)
method areaSetCollisionMask*(self: PhysicsServer3DExtension; area: RID; mask: uint32) {.base.} = (discard)
method areaGetCollisionMask*(self: PhysicsServer3DExtension; area: RID): uint32 {.base.} = (discard)
method areaSetMonitorable*(self: PhysicsServer3DExtension; area: RID; monitorable: Bool) {.base.} = (discard)
method areaSetRayPickable*(self: PhysicsServer3DExtension; area: RID; enable: Bool) {.base.} = (discard)
method areaSetMonitorCallback*(self: PhysicsServer3DExtension; area: RID; callback: Callable) {.base.} = (discard)
method areaSetAreaMonitorCallback*(self: PhysicsServer3DExtension; area: RID; callback: Callable) {.base.} = (discard)
method bodyCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method bodySetSpace*(self: PhysicsServer3DExtension; body: RID; space: RID) {.base.} = (discard)
method bodyGetSpace*(self: PhysicsServer3DExtension; body: RID): RID {.base.} = (discard)
method bodySetMode*(self: PhysicsServer3DExtension; body: RID; mode: PhysicsServer3D_BodyMode) {.base.} = (discard)
method bodyGetMode*(self: PhysicsServer3DExtension; body: RID): PhysicsServer3D_BodyMode {.base.} = (discard)
method bodyAddShape*(self: PhysicsServer3DExtension; body: RID; shape: RID; transform: Transform3D; disabled: Bool) {.base.} = (discard)
method bodySetShape*(self: PhysicsServer3DExtension; body: RID; shapeIdx: int32; shape: RID) {.base.} = (discard)
method bodySetShapeTransform*(self: PhysicsServer3DExtension; body: RID; shapeIdx: int32; transform: Transform3D) {.base.} = (discard)
method bodySetShapeDisabled*(self: PhysicsServer3DExtension; body: RID; shapeIdx: int32; disabled: Bool) {.base.} = (discard)
method bodyGetShapeCount*(self: PhysicsServer3DExtension; body: RID): int32 {.base.} = (discard)
method bodyGetShape*(self: PhysicsServer3DExtension; body: RID; shapeIdx: int32): RID {.base.} = (discard)
method bodyGetShapeTransform*(self: PhysicsServer3DExtension; body: RID; shapeIdx: int32): Transform3D {.base.} = (discard)
method bodyRemoveShape*(self: PhysicsServer3DExtension; body: RID; shapeIdx: int32) {.base.} = (discard)
method bodyClearShapes*(self: PhysicsServer3DExtension; body: RID) {.base.} = (discard)
method bodyAttachObjectInstanceId*(self: PhysicsServer3DExtension; body: RID; id: uint64) {.base.} = (discard)
method bodyGetObjectInstanceId*(self: PhysicsServer3DExtension; body: RID): uint64 {.base.} = (discard)
method bodySetEnableContinuousCollisionDetection*(self: PhysicsServer3DExtension; body: RID; enable: Bool) {.base.} = (discard)
method bodyIsContinuousCollisionDetectionEnabled*(self: PhysicsServer3DExtension; body: RID): Bool {.base.} = (discard)
method bodySetCollisionLayer*(self: PhysicsServer3DExtension; body: RID; layer: uint32) {.base.} = (discard)
method bodyGetCollisionLayer*(self: PhysicsServer3DExtension; body: RID): uint32 {.base.} = (discard)
method bodySetCollisionMask*(self: PhysicsServer3DExtension; body: RID; mask: uint32) {.base.} = (discard)
method bodyGetCollisionMask*(self: PhysicsServer3DExtension; body: RID): uint32 {.base.} = (discard)
method bodySetCollisionPriority*(self: PhysicsServer3DExtension; body: RID; priority: Float) {.base.} = (discard)
method bodyGetCollisionPriority*(self: PhysicsServer3DExtension; body: RID): Float {.base.} = (discard)
method bodySetUserFlags*(self: PhysicsServer3DExtension; body: RID; flags: uint32) {.base.} = (discard)
method bodyGetUserFlags*(self: PhysicsServer3DExtension; body: RID): uint32 {.base.} = (discard)
method bodySetParam*(self: PhysicsServer3DExtension; body: RID; param: PhysicsServer3D_BodyParameter; value: ptr Variant) {.base.} = (discard)
method bodyGetParam*(self: PhysicsServer3DExtension; body: RID; param: PhysicsServer3D_BodyParameter): Variant {.base.} = (discard)
method bodyResetMassProperties*(self: PhysicsServer3DExtension; body: RID) {.base.} = (discard)
method bodySetState*(self: PhysicsServer3DExtension; body: RID; state: PhysicsServer3D_BodyState; value: ptr Variant) {.base.} = (discard)
method bodyGetState*(self: PhysicsServer3DExtension; body: RID; state: PhysicsServer3D_BodyState): Variant {.base.} = (discard)
method bodyApplyCentralImpulse*(self: PhysicsServer3DExtension; body: RID; impulse: Vector3) {.base.} = (discard)
method bodyApplyImpulse*(self: PhysicsServer3DExtension; body: RID; impulse: Vector3; position: Vector3) {.base.} = (discard)
method bodyApplyTorqueImpulse*(self: PhysicsServer3DExtension; body: RID; impulse: Vector3) {.base.} = (discard)
method bodyApplyCentralForce*(self: PhysicsServer3DExtension; body: RID; force: Vector3) {.base.} = (discard)
method bodyApplyForce*(self: PhysicsServer3DExtension; body: RID; force: Vector3; position: Vector3) {.base.} = (discard)
method bodyApplyTorque*(self: PhysicsServer3DExtension; body: RID; torque: Vector3) {.base.} = (discard)
method bodyAddConstantCentralForce*(self: PhysicsServer3DExtension; body: RID; force: Vector3) {.base.} = (discard)
method bodyAddConstantForce*(self: PhysicsServer3DExtension; body: RID; force: Vector3; position: Vector3) {.base.} = (discard)
method bodyAddConstantTorque*(self: PhysicsServer3DExtension; body: RID; torque: Vector3) {.base.} = (discard)
method bodySetConstantForce*(self: PhysicsServer3DExtension; body: RID; force: Vector3) {.base.} = (discard)
method bodyGetConstantForce*(self: PhysicsServer3DExtension; body: RID): Vector3 {.base.} = (discard)
method bodySetConstantTorque*(self: PhysicsServer3DExtension; body: RID; torque: Vector3) {.base.} = (discard)
method bodyGetConstantTorque*(self: PhysicsServer3DExtension; body: RID): Vector3 {.base.} = (discard)
method bodySetAxisVelocity*(self: PhysicsServer3DExtension; body: RID; axisVelocity: Vector3) {.base.} = (discard)
method bodySetAxisLock*(self: PhysicsServer3DExtension; body: RID; axis: PhysicsServer3D_BodyAxis; lock: Bool) {.base.} = (discard)
method bodyIsAxisLocked*(self: PhysicsServer3DExtension; body: RID; axis: PhysicsServer3D_BodyAxis): Bool {.base.} = (discard)
method bodyAddCollisionException*(self: PhysicsServer3DExtension; body: RID; exceptedBody: RID) {.base.} = (discard)
method bodyRemoveCollisionException*(self: PhysicsServer3DExtension; body: RID; exceptedBody: RID) {.base.} = (discard)
method bodyGetCollisionExceptions*(self: PhysicsServer3DExtension; body: RID): TypedArray[RID] {.base.} = (discard)
method bodySetMaxContactsReported*(self: PhysicsServer3DExtension; body: RID; amount: int32) {.base.} = (discard)
method bodyGetMaxContactsReported*(self: PhysicsServer3DExtension; body: RID): int32 {.base.} = (discard)
method bodySetContactsReportedDepthThreshold*(self: PhysicsServer3DExtension; body: RID; threshold: Float) {.base.} = (discard)
method bodyGetContactsReportedDepthThreshold*(self: PhysicsServer3DExtension; body: RID): Float {.base.} = (discard)
method bodySetOmitForceIntegration*(self: PhysicsServer3DExtension; body: RID; enable: Bool) {.base.} = (discard)
method bodyIsOmittingForceIntegration*(self: PhysicsServer3DExtension; body: RID): Bool {.base.} = (discard)
method bodySetStateSyncCallback*(self: PhysicsServer3DExtension; body: RID; callable: Callable) {.base.} = (discard)
method bodySetForceIntegrationCallback*(self: PhysicsServer3DExtension; body: RID; callable: Callable; userdata: ptr Variant) {.base.} = (discard)
method bodySetRayPickable*(self: PhysicsServer3DExtension; body: RID; enable: Bool) {.base.} = (discard)
method bodyTestMotion*(self: PhysicsServer3DExtension; body: RID; `from`: Transform3D; motion: Vector3; margin: Float; maxCollisions: int32; collideSeparationRay: Bool; recoveryAsCollision: Bool; retval: ptr PhysicsServer3DExtensionMotionResult): Bool {.base.} = (discard)
method bodyGetDirectState*(self: PhysicsServer3DExtension; body: RID): PhysicsDirectBodyState3D {.base.} = (discard)
method softBodyCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method softBodyUpdateRenderingServer*(self: PhysicsServer3DExtension; body: RID; renderingServerHandler: PhysicsServer3DRenderingServerHandler) {.base.} = (discard)
method softBodySetSpace*(self: PhysicsServer3DExtension; body: RID; space: RID) {.base.} = (discard)
method softBodyGetSpace*(self: PhysicsServer3DExtension; body: RID): RID {.base.} = (discard)
method softBodySetRayPickable*(self: PhysicsServer3DExtension; body: RID; enable: Bool) {.base.} = (discard)
method softBodySetCollisionLayer*(self: PhysicsServer3DExtension; body: RID; layer: uint32) {.base.} = (discard)
method softBodyGetCollisionLayer*(self: PhysicsServer3DExtension; body: RID): uint32 {.base.} = (discard)
method softBodySetCollisionMask*(self: PhysicsServer3DExtension; body: RID; mask: uint32) {.base.} = (discard)
method softBodyGetCollisionMask*(self: PhysicsServer3DExtension; body: RID): uint32 {.base.} = (discard)
method softBodyAddCollisionException*(self: PhysicsServer3DExtension; body: RID; bodyB: RID) {.base.} = (discard)
method softBodyRemoveCollisionException*(self: PhysicsServer3DExtension; body: RID; bodyB: RID) {.base.} = (discard)
method softBodyGetCollisionExceptions*(self: PhysicsServer3DExtension; body: RID): TypedArray[RID] {.base.} = (discard)
method softBodySetState*(self: PhysicsServer3DExtension; body: RID; state: PhysicsServer3D_BodyState; variant: ptr Variant) {.base.} = (discard)
method softBodyGetState*(self: PhysicsServer3DExtension; body: RID; state: PhysicsServer3D_BodyState): Variant {.base.} = (discard)
method softBodySetTransform*(self: PhysicsServer3DExtension; body: RID; transform: Transform3D) {.base.} = (discard)
method softBodySetSimulationPrecision*(self: PhysicsServer3DExtension; body: RID; simulationPrecision: int32) {.base.} = (discard)
method softBodyGetSimulationPrecision*(self: PhysicsServer3DExtension; body: RID): int32 {.base.} = (discard)
method softBodySetTotalMass*(self: PhysicsServer3DExtension; body: RID; totalMass: Float) {.base.} = (discard)
method softBodyGetTotalMass*(self: PhysicsServer3DExtension; body: RID): Float {.base.} = (discard)
method softBodySetLinearStiffness*(self: PhysicsServer3DExtension; body: RID; linearStiffness: Float) {.base.} = (discard)
method softBodyGetLinearStiffness*(self: PhysicsServer3DExtension; body: RID): Float {.base.} = (discard)
method softBodySetPressureCoefficient*(self: PhysicsServer3DExtension; body: RID; pressureCoefficient: Float) {.base.} = (discard)
method softBodyGetPressureCoefficient*(self: PhysicsServer3DExtension; body: RID): Float {.base.} = (discard)
method softBodySetDampingCoefficient*(self: PhysicsServer3DExtension; body: RID; dampingCoefficient: Float) {.base.} = (discard)
method softBodyGetDampingCoefficient*(self: PhysicsServer3DExtension; body: RID): Float {.base.} = (discard)
method softBodySetDragCoefficient*(self: PhysicsServer3DExtension; body: RID; dragCoefficient: Float) {.base.} = (discard)
method softBodyGetDragCoefficient*(self: PhysicsServer3DExtension; body: RID): Float {.base.} = (discard)
method softBodySetMesh*(self: PhysicsServer3DExtension; body: RID; mesh: RID) {.base.} = (discard)
method softBodyGetBounds*(self: PhysicsServer3DExtension; body: RID): AABB {.base.} = (discard)
method softBodyMovePoint*(self: PhysicsServer3DExtension; body: RID; pointIndex: int32; globalPosition: Vector3) {.base.} = (discard)
method softBodyGetPointGlobalPosition*(self: PhysicsServer3DExtension; body: RID; pointIndex: int32): Vector3 {.base.} = (discard)
method softBodyRemoveAllPinnedPoints*(self: PhysicsServer3DExtension; body: RID) {.base.} = (discard)
method softBodyPinPoint*(self: PhysicsServer3DExtension; body: RID; pointIndex: int32; pin: Bool) {.base.} = (discard)
method softBodyIsPointPinned*(self: PhysicsServer3DExtension; body: RID; pointIndex: int32): Bool {.base.} = (discard)
method jointCreate*(self: PhysicsServer3DExtension): RID {.base.} = (discard)
method jointClear*(self: PhysicsServer3DExtension; joint: RID) {.base.} = (discard)
method jointMakePin*(self: PhysicsServer3DExtension; joint: RID; bodyA: RID; localA: Vector3; bodyB: RID; localB: Vector3) {.base.} = (discard)
method pinJointSetParam*(self: PhysicsServer3DExtension; joint: RID; param: PhysicsServer3D_PinJointParam; value: Float) {.base.} = (discard)
method pinJointGetParam*(self: PhysicsServer3DExtension; joint: RID; param: PhysicsServer3D_PinJointParam): Float {.base.} = (discard)
method pinJointSetLocalA*(self: PhysicsServer3DExtension; joint: RID; localA: Vector3) {.base.} = (discard)
method pinJointGetLocalA*(self: PhysicsServer3DExtension; joint: RID): Vector3 {.base.} = (discard)
method pinJointSetLocalB*(self: PhysicsServer3DExtension; joint: RID; localB: Vector3) {.base.} = (discard)
method pinJointGetLocalB*(self: PhysicsServer3DExtension; joint: RID): Vector3 {.base.} = (discard)
method jointMakeHinge*(self: PhysicsServer3DExtension; joint: RID; bodyA: RID; hingeA: Transform3D; bodyB: RID; hingeB: Transform3D) {.base.} = (discard)
method jointMakeHingeSimple*(self: PhysicsServer3DExtension; joint: RID; bodyA: RID; pivotA: Vector3; axisA: Vector3; bodyB: RID; pivotB: Vector3; axisB: Vector3) {.base.} = (discard)
method hingeJointSetParam*(self: PhysicsServer3DExtension; joint: RID; param: PhysicsServer3D_HingeJointParam; value: Float) {.base.} = (discard)
method hingeJointGetParam*(self: PhysicsServer3DExtension; joint: RID; param: PhysicsServer3D_HingeJointParam): Float {.base.} = (discard)
method hingeJointSetFlag*(self: PhysicsServer3DExtension; joint: RID; flag: PhysicsServer3D_HingeJointFlag; enabled: Bool) {.base.} = (discard)
method hingeJointGetFlag*(self: PhysicsServer3DExtension; joint: RID; flag: PhysicsServer3D_HingeJointFlag): Bool {.base.} = (discard)
method jointMakeSlider*(self: PhysicsServer3DExtension; joint: RID; bodyA: RID; localRefA: Transform3D; bodyB: RID; localRefB: Transform3D) {.base.} = (discard)
method sliderJointSetParam*(self: PhysicsServer3DExtension; joint: RID; param: PhysicsServer3D_SliderJointParam; value: Float) {.base.} = (discard)
method sliderJointGetParam*(self: PhysicsServer3DExtension; joint: RID; param: PhysicsServer3D_SliderJointParam): Float {.base.} = (discard)
method jointMakeConeTwist*(self: PhysicsServer3DExtension; joint: RID; bodyA: RID; localRefA: Transform3D; bodyB: RID; localRefB: Transform3D) {.base.} = (discard)
method coneTwistJointSetParam*(self: PhysicsServer3DExtension; joint: RID; param: PhysicsServer3D_ConeTwistJointParam; value: Float) {.base.} = (discard)
method coneTwistJointGetParam*(self: PhysicsServer3DExtension; joint: RID; param: PhysicsServer3D_ConeTwistJointParam): Float {.base.} = (discard)
method jointMakeGeneric6dof*(self: PhysicsServer3DExtension; joint: RID; bodyA: RID; localRefA: Transform3D; bodyB: RID; localRefB: Transform3D) {.base.} = (discard)
method generic6dofJointSetParam*(self: PhysicsServer3DExtension; joint: RID; axis: Vector3_Axis; param: PhysicsServer3D_G6DOFJointAxisParam; value: Float) {.base.} = (discard)
method generic6dofJointGetParam*(self: PhysicsServer3DExtension; joint: RID; axis: Vector3_Axis; param: PhysicsServer3D_G6DOFJointAxisParam): Float {.base.} = (discard)
method generic6dofJointSetFlag*(self: PhysicsServer3DExtension; joint: RID; axis: Vector3_Axis; flag: PhysicsServer3D_G6DOFJointAxisFlag; enable: Bool) {.base.} = (discard)
method generic6dofJointGetFlag*(self: PhysicsServer3DExtension; joint: RID; axis: Vector3_Axis; flag: PhysicsServer3D_G6DOFJointAxisFlag): Bool {.base.} = (discard)
method jointGetType*(self: PhysicsServer3DExtension; joint: RID): PhysicsServer3D_JointType {.base.} = (discard)
method jointSetSolverPriority*(self: PhysicsServer3DExtension; joint: RID; priority: int32) {.base.} = (discard)
method jointGetSolverPriority*(self: PhysicsServer3DExtension; joint: RID): int32 {.base.} = (discard)
method jointDisableCollisionsBetweenBodies*(self: PhysicsServer3DExtension; joint: RID; disable: Bool) {.base.} = (discard)
method jointIsDisabledCollisionsBetweenBodies*(self: PhysicsServer3DExtension; joint: RID): Bool {.base.} = (discard)
method freeRid*(self: PhysicsServer3DExtension; rid: RID) {.base.} = (discard)
method setActive*(self: PhysicsServer3DExtension; active: Bool) {.base.} = (discard)
method init*(self: PhysicsServer3DExtension) {.base.} = (discard)
method step*(self: PhysicsServer3DExtension; step: Float) {.base.} = (discard)
method sync*(self: PhysicsServer3DExtension) {.base.} = (discard)
method flushQueries*(self: PhysicsServer3DExtension) {.base.} = (discard)
method endSync*(self: PhysicsServer3DExtension) {.base.} = (discard)
method finish*(self: PhysicsServer3DExtension) {.base.} = (discard)
method isFlushingQueries*(self: PhysicsServer3DExtension): Bool {.base.} = (discard)
method getProcessInfo*(self: PhysicsServer3DExtension; processInfo: PhysicsServer3D_ProcessInfo): int32 {.base.} = (discard)
proc bind_virtuals*(S: typedesc[PhysicsServer3DExtension]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_world_boundary_shape_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).worldBoundaryShapeCreate().encode(r_ret)
  table["_separation_ray_shape_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).separationRayShapeCreate().encode(r_ret)
  table["_sphere_shape_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).sphereShapeCreate().encode(r_ret)
  table["_box_shape_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).boxShapeCreate().encode(r_ret)
  table["_capsule_shape_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).capsuleShapeCreate().encode(r_ret)
  table["_cylinder_shape_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).cylinderShapeCreate().encode(r_ret)
  table["_convex_polygon_shape_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).convexPolygonShapeCreate().encode(r_ret)
  table["_concave_polygon_shape_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).concavePolygonShapeCreate().encode(r_ret)
  table["_heightmap_shape_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).heightmapShapeCreate().encode(r_ret)
  table["_custom_shape_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).customShapeCreate().encode(r_ret)
  table["_shape_set_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).shapeSetData(p_args[0].decode(RID), p_args[1].decode(ptr Variant))
  table["_shape_set_custom_solver_bias"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).shapeSetCustomSolverBias(p_args[0].decode(RID), p_args[1].decode(Float))
  table["_shape_set_margin"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).shapeSetMargin(p_args[0].decode(RID), p_args[1].decode(Float))
  table["_shape_get_margin"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).shapeGetMargin(p_args[0].decode(RID)).encode(r_ret)
  table["_shape_get_type"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).shapeGetType(p_args[0].decode(RID)).encode(r_ret)
  table["_shape_get_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).shapeGetData(p_args[0].decode(RID)).encode(r_ret)
  table["_shape_get_custom_solver_bias"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).shapeGetCustomSolverBias(p_args[0].decode(RID)).encode(r_ret)
  table["_space_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).spaceCreate().encode(r_ret)
  table["_space_set_active"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).spaceSetActive(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_space_is_active"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).spaceIsActive(p_args[0].decode(RID)).encode(r_ret)
  table["_space_set_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).spaceSetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_SpaceParameter), p_args[2].decode(Float))
  table["_space_get_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).spaceGetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_SpaceParameter)).encode(r_ret)
  table["_space_get_direct_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).spaceGetDirectState(p_args[0].decode(RID)).encode(r_ret)
  table["_space_set_debug_contacts"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).spaceSetDebugContacts(p_args[0].decode(RID), p_args[1].decode(int32))
  table["_space_get_contacts"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).spaceGetContacts(p_args[0].decode(RID)).encode(r_ret)
  table["_space_get_contact_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).spaceGetContactCount(p_args[0].decode(RID)).encode(r_ret)
  table["_area_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaCreate().encode(r_ret)
  table["_area_set_space"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaSetSpace(p_args[0].decode(RID), p_args[1].decode(RID))
  table["_area_get_space"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaGetSpace(p_args[0].decode(RID)).encode(r_ret)
  table["_area_add_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaAddShape(p_args[0].decode(RID), p_args[1].decode(RID), p_args[2].decode(Transform3D), p_args[3].decode(Bool))
  table["_area_set_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaSetShape(p_args[0].decode(RID), p_args[1].decode(int32), p_args[2].decode(RID))
  table["_area_set_shape_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaSetShapeTransform(p_args[0].decode(RID), p_args[1].decode(int32), p_args[2].decode(Transform3D))
  table["_area_set_shape_disabled"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaSetShapeDisabled(p_args[0].decode(RID), p_args[1].decode(int32), p_args[2].decode(Bool))
  table["_area_get_shape_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaGetShapeCount(p_args[0].decode(RID)).encode(r_ret)
  table["_area_get_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaGetShape(p_args[0].decode(RID), p_args[1].decode(int32)).encode(r_ret)
  table["_area_get_shape_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaGetShapeTransform(p_args[0].decode(RID), p_args[1].decode(int32)).encode(r_ret)
  table["_area_remove_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaRemoveShape(p_args[0].decode(RID), p_args[1].decode(int32))
  table["_area_clear_shapes"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaClearShapes(p_args[0].decode(RID))
  table["_area_attach_object_instance_id"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaAttachObjectInstanceId(p_args[0].decode(RID), p_args[1].decode(uint64))
  table["_area_get_object_instance_id"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaGetObjectInstanceId(p_args[0].decode(RID)).encode(r_ret)
  table["_area_set_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaSetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_AreaParameter), p_args[2].decode(ptr Variant))
  table["_area_set_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaSetTransform(p_args[0].decode(RID), p_args[1].decode(Transform3D))
  table["_area_get_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaGetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_AreaParameter)).encode(r_ret)
  table["_area_get_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaGetTransform(p_args[0].decode(RID)).encode(r_ret)
  table["_area_set_collision_layer"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaSetCollisionLayer(p_args[0].decode(RID), p_args[1].decode(uint32))
  table["_area_get_collision_layer"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaGetCollisionLayer(p_args[0].decode(RID)).encode(r_ret)
  table["_area_set_collision_mask"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaSetCollisionMask(p_args[0].decode(RID), p_args[1].decode(uint32))
  table["_area_get_collision_mask"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaGetCollisionMask(p_args[0].decode(RID)).encode(r_ret)
  table["_area_set_monitorable"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaSetMonitorable(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_area_set_ray_pickable"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaSetRayPickable(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_area_set_monitor_callback"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaSetMonitorCallback(p_args[0].decode(RID), p_args[1].decode(Callable))
  table["_area_set_area_monitor_callback"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).areaSetAreaMonitorCallback(p_args[0].decode(RID), p_args[1].decode(Callable))
  table["_body_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyCreate().encode(r_ret)
  table["_body_set_space"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetSpace(p_args[0].decode(RID), p_args[1].decode(RID))
  table["_body_get_space"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyGetSpace(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_mode"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetMode(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_BodyMode))
  table["_body_get_mode"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyGetMode(p_args[0].decode(RID)).encode(r_ret)
  table["_body_add_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyAddShape(p_args[0].decode(RID), p_args[1].decode(RID), p_args[2].decode(Transform3D), p_args[3].decode(Bool))
  table["_body_set_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetShape(p_args[0].decode(RID), p_args[1].decode(int32), p_args[2].decode(RID))
  table["_body_set_shape_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetShapeTransform(p_args[0].decode(RID), p_args[1].decode(int32), p_args[2].decode(Transform3D))
  table["_body_set_shape_disabled"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetShapeDisabled(p_args[0].decode(RID), p_args[1].decode(int32), p_args[2].decode(Bool))
  table["_body_get_shape_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyGetShapeCount(p_args[0].decode(RID)).encode(r_ret)
  table["_body_get_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyGetShape(p_args[0].decode(RID), p_args[1].decode(int32)).encode(r_ret)
  table["_body_get_shape_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyGetShapeTransform(p_args[0].decode(RID), p_args[1].decode(int32)).encode(r_ret)
  table["_body_remove_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyRemoveShape(p_args[0].decode(RID), p_args[1].decode(int32))
  table["_body_clear_shapes"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyClearShapes(p_args[0].decode(RID))
  table["_body_attach_object_instance_id"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyAttachObjectInstanceId(p_args[0].decode(RID), p_args[1].decode(uint64))
  table["_body_get_object_instance_id"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyGetObjectInstanceId(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_enable_continuous_collision_detection"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetEnableContinuousCollisionDetection(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_body_is_continuous_collision_detection_enabled"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyIsContinuousCollisionDetectionEnabled(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_collision_layer"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetCollisionLayer(p_args[0].decode(RID), p_args[1].decode(uint32))
  table["_body_get_collision_layer"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyGetCollisionLayer(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_collision_mask"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetCollisionMask(p_args[0].decode(RID), p_args[1].decode(uint32))
  table["_body_get_collision_mask"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyGetCollisionMask(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_collision_priority"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetCollisionPriority(p_args[0].decode(RID), p_args[1].decode(Float))
  table["_body_get_collision_priority"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyGetCollisionPriority(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_user_flags"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetUserFlags(p_args[0].decode(RID), p_args[1].decode(uint32))
  table["_body_get_user_flags"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyGetUserFlags(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_BodyParameter), p_args[2].decode(ptr Variant))
  table["_body_get_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyGetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_BodyParameter)).encode(r_ret)
  table["_body_reset_mass_properties"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyResetMassProperties(p_args[0].decode(RID))
  table["_body_set_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetState(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_BodyState), p_args[2].decode(ptr Variant))
  table["_body_get_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyGetState(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_BodyState)).encode(r_ret)
  table["_body_apply_central_impulse"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyApplyCentralImpulse(p_args[0].decode(RID), p_args[1].decode(Vector3))
  table["_body_apply_impulse"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyApplyImpulse(p_args[0].decode(RID), p_args[1].decode(Vector3), p_args[2].decode(Vector3))
  table["_body_apply_torque_impulse"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyApplyTorqueImpulse(p_args[0].decode(RID), p_args[1].decode(Vector3))
  table["_body_apply_central_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyApplyCentralForce(p_args[0].decode(RID), p_args[1].decode(Vector3))
  table["_body_apply_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyApplyForce(p_args[0].decode(RID), p_args[1].decode(Vector3), p_args[2].decode(Vector3))
  table["_body_apply_torque"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyApplyTorque(p_args[0].decode(RID), p_args[1].decode(Vector3))
  table["_body_add_constant_central_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyAddConstantCentralForce(p_args[0].decode(RID), p_args[1].decode(Vector3))
  table["_body_add_constant_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyAddConstantForce(p_args[0].decode(RID), p_args[1].decode(Vector3), p_args[2].decode(Vector3))
  table["_body_add_constant_torque"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyAddConstantTorque(p_args[0].decode(RID), p_args[1].decode(Vector3))
  table["_body_set_constant_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetConstantForce(p_args[0].decode(RID), p_args[1].decode(Vector3))
  table["_body_get_constant_force"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyGetConstantForce(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_constant_torque"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetConstantTorque(p_args[0].decode(RID), p_args[1].decode(Vector3))
  table["_body_get_constant_torque"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyGetConstantTorque(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_axis_velocity"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetAxisVelocity(p_args[0].decode(RID), p_args[1].decode(Vector3))
  table["_body_set_axis_lock"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetAxisLock(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_BodyAxis), p_args[2].decode(Bool))
  table["_body_is_axis_locked"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyIsAxisLocked(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_BodyAxis)).encode(r_ret)
  table["_body_add_collision_exception"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyAddCollisionException(p_args[0].decode(RID), p_args[1].decode(RID))
  table["_body_remove_collision_exception"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyRemoveCollisionException(p_args[0].decode(RID), p_args[1].decode(RID))
  table["_body_get_collision_exceptions"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyGetCollisionExceptions(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_max_contacts_reported"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetMaxContactsReported(p_args[0].decode(RID), p_args[1].decode(int32))
  table["_body_get_max_contacts_reported"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyGetMaxContactsReported(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_contacts_reported_depth_threshold"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetContactsReportedDepthThreshold(p_args[0].decode(RID), p_args[1].decode(Float))
  table["_body_get_contacts_reported_depth_threshold"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyGetContactsReportedDepthThreshold(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_omit_force_integration"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetOmitForceIntegration(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_body_is_omitting_force_integration"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyIsOmittingForceIntegration(p_args[0].decode(RID)).encode(r_ret)
  table["_body_set_state_sync_callback"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetStateSyncCallback(p_args[0].decode(RID), p_args[1].decode(Callable))
  table["_body_set_force_integration_callback"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetForceIntegrationCallback(p_args[0].decode(RID), p_args[1].decode(Callable), p_args[2].decode(ptr Variant))
  table["_body_set_ray_pickable"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodySetRayPickable(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_body_test_motion"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyTestMotion(p_args[0].decode(RID), p_args[1].decode(Transform3D), p_args[2].decode(Vector3), p_args[3].decode(Float), p_args[4].decode(int32), p_args[5].decode(Bool), p_args[6].decode(Bool), p_args[7].decode(ptr PhysicsServer3DExtensionMotionResult)).encode(r_ret)
  table["_body_get_direct_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).bodyGetDirectState(p_args[0].decode(RID)).encode(r_ret)
  table["_soft_body_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyCreate().encode(r_ret)
  table["_soft_body_update_rendering_server"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyUpdateRenderingServer(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3DRenderingServerHandler))
  table["_soft_body_set_space"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodySetSpace(p_args[0].decode(RID), p_args[1].decode(RID))
  table["_soft_body_get_space"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyGetSpace(p_args[0].decode(RID)).encode(r_ret)
  table["_soft_body_set_ray_pickable"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodySetRayPickable(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_soft_body_set_collision_layer"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodySetCollisionLayer(p_args[0].decode(RID), p_args[1].decode(uint32))
  table["_soft_body_get_collision_layer"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyGetCollisionLayer(p_args[0].decode(RID)).encode(r_ret)
  table["_soft_body_set_collision_mask"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodySetCollisionMask(p_args[0].decode(RID), p_args[1].decode(uint32))
  table["_soft_body_get_collision_mask"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyGetCollisionMask(p_args[0].decode(RID)).encode(r_ret)
  table["_soft_body_add_collision_exception"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyAddCollisionException(p_args[0].decode(RID), p_args[1].decode(RID))
  table["_soft_body_remove_collision_exception"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyRemoveCollisionException(p_args[0].decode(RID), p_args[1].decode(RID))
  table["_soft_body_get_collision_exceptions"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyGetCollisionExceptions(p_args[0].decode(RID)).encode(r_ret)
  table["_soft_body_set_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodySetState(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_BodyState), p_args[2].decode(ptr Variant))
  table["_soft_body_get_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyGetState(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_BodyState)).encode(r_ret)
  table["_soft_body_set_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodySetTransform(p_args[0].decode(RID), p_args[1].decode(Transform3D))
  table["_soft_body_set_simulation_precision"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodySetSimulationPrecision(p_args[0].decode(RID), p_args[1].decode(int32))
  table["_soft_body_get_simulation_precision"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyGetSimulationPrecision(p_args[0].decode(RID)).encode(r_ret)
  table["_soft_body_set_total_mass"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodySetTotalMass(p_args[0].decode(RID), p_args[1].decode(Float))
  table["_soft_body_get_total_mass"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyGetTotalMass(p_args[0].decode(RID)).encode(r_ret)
  table["_soft_body_set_linear_stiffness"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodySetLinearStiffness(p_args[0].decode(RID), p_args[1].decode(Float))
  table["_soft_body_get_linear_stiffness"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyGetLinearStiffness(p_args[0].decode(RID)).encode(r_ret)
  table["_soft_body_set_pressure_coefficient"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodySetPressureCoefficient(p_args[0].decode(RID), p_args[1].decode(Float))
  table["_soft_body_get_pressure_coefficient"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyGetPressureCoefficient(p_args[0].decode(RID)).encode(r_ret)
  table["_soft_body_set_damping_coefficient"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodySetDampingCoefficient(p_args[0].decode(RID), p_args[1].decode(Float))
  table["_soft_body_get_damping_coefficient"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyGetDampingCoefficient(p_args[0].decode(RID)).encode(r_ret)
  table["_soft_body_set_drag_coefficient"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodySetDragCoefficient(p_args[0].decode(RID), p_args[1].decode(Float))
  table["_soft_body_get_drag_coefficient"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyGetDragCoefficient(p_args[0].decode(RID)).encode(r_ret)
  table["_soft_body_set_mesh"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodySetMesh(p_args[0].decode(RID), p_args[1].decode(RID))
  table["_soft_body_get_bounds"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyGetBounds(p_args[0].decode(RID)).encode(r_ret)
  table["_soft_body_move_point"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyMovePoint(p_args[0].decode(RID), p_args[1].decode(int32), p_args[2].decode(Vector3))
  table["_soft_body_get_point_global_position"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyGetPointGlobalPosition(p_args[0].decode(RID), p_args[1].decode(int32)).encode(r_ret)
  table["_soft_body_remove_all_pinned_points"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyRemoveAllPinnedPoints(p_args[0].decode(RID))
  table["_soft_body_pin_point"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyPinPoint(p_args[0].decode(RID), p_args[1].decode(int32), p_args[2].decode(Bool))
  table["_soft_body_is_point_pinned"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).softBodyIsPointPinned(p_args[0].decode(RID), p_args[1].decode(int32)).encode(r_ret)
  table["_joint_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).jointCreate().encode(r_ret)
  table["_joint_clear"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).jointClear(p_args[0].decode(RID))
  table["_joint_make_pin"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).jointMakePin(p_args[0].decode(RID), p_args[1].decode(RID), p_args[2].decode(Vector3), p_args[3].decode(RID), p_args[4].decode(Vector3))
  table["_pin_joint_set_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).pinJointSetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_PinJointParam), p_args[2].decode(Float))
  table["_pin_joint_get_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).pinJointGetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_PinJointParam)).encode(r_ret)
  table["_pin_joint_set_local_a"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).pinJointSetLocalA(p_args[0].decode(RID), p_args[1].decode(Vector3))
  table["_pin_joint_get_local_a"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).pinJointGetLocalA(p_args[0].decode(RID)).encode(r_ret)
  table["_pin_joint_set_local_b"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).pinJointSetLocalB(p_args[0].decode(RID), p_args[1].decode(Vector3))
  table["_pin_joint_get_local_b"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).pinJointGetLocalB(p_args[0].decode(RID)).encode(r_ret)
  table["_joint_make_hinge"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).jointMakeHinge(p_args[0].decode(RID), p_args[1].decode(RID), p_args[2].decode(Transform3D), p_args[3].decode(RID), p_args[4].decode(Transform3D))
  table["_joint_make_hinge_simple"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).jointMakeHingeSimple(p_args[0].decode(RID), p_args[1].decode(RID), p_args[2].decode(Vector3), p_args[3].decode(Vector3), p_args[4].decode(RID), p_args[5].decode(Vector3), p_args[6].decode(Vector3))
  table["_hinge_joint_set_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).hingeJointSetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_HingeJointParam), p_args[2].decode(Float))
  table["_hinge_joint_get_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).hingeJointGetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_HingeJointParam)).encode(r_ret)
  table["_hinge_joint_set_flag"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).hingeJointSetFlag(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_HingeJointFlag), p_args[2].decode(Bool))
  table["_hinge_joint_get_flag"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).hingeJointGetFlag(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_HingeJointFlag)).encode(r_ret)
  table["_joint_make_slider"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).jointMakeSlider(p_args[0].decode(RID), p_args[1].decode(RID), p_args[2].decode(Transform3D), p_args[3].decode(RID), p_args[4].decode(Transform3D))
  table["_slider_joint_set_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).sliderJointSetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_SliderJointParam), p_args[2].decode(Float))
  table["_slider_joint_get_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).sliderJointGetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_SliderJointParam)).encode(r_ret)
  table["_joint_make_cone_twist"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).jointMakeConeTwist(p_args[0].decode(RID), p_args[1].decode(RID), p_args[2].decode(Transform3D), p_args[3].decode(RID), p_args[4].decode(Transform3D))
  table["_cone_twist_joint_set_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).coneTwistJointSetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_ConeTwistJointParam), p_args[2].decode(Float))
  table["_cone_twist_joint_get_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).coneTwistJointGetParam(p_args[0].decode(RID), p_args[1].decode(PhysicsServer3D_ConeTwistJointParam)).encode(r_ret)
  table["_joint_make_generic_6dof"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).jointMakeGeneric6dof(p_args[0].decode(RID), p_args[1].decode(RID), p_args[2].decode(Transform3D), p_args[3].decode(RID), p_args[4].decode(Transform3D))
  table["_generic_6dof_joint_set_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).generic6dofJointSetParam(p_args[0].decode(RID), p_args[1].decode(Vector3_Axis), p_args[2].decode(PhysicsServer3D_G6DOFJointAxisParam), p_args[3].decode(Float))
  table["_generic_6dof_joint_get_param"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).generic6dofJointGetParam(p_args[0].decode(RID), p_args[1].decode(Vector3_Axis), p_args[2].decode(PhysicsServer3D_G6DOFJointAxisParam)).encode(r_ret)
  table["_generic_6dof_joint_set_flag"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).generic6dofJointSetFlag(p_args[0].decode(RID), p_args[1].decode(Vector3_Axis), p_args[2].decode(PhysicsServer3D_G6DOFJointAxisFlag), p_args[3].decode(Bool))
  table["_generic_6dof_joint_get_flag"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).generic6dofJointGetFlag(p_args[0].decode(RID), p_args[1].decode(Vector3_Axis), p_args[2].decode(PhysicsServer3D_G6DOFJointAxisFlag)).encode(r_ret)
  table["_joint_get_type"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).jointGetType(p_args[0].decode(RID)).encode(r_ret)
  table["_joint_set_solver_priority"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).jointSetSolverPriority(p_args[0].decode(RID), p_args[1].decode(int32))
  table["_joint_get_solver_priority"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).jointGetSolverPriority(p_args[0].decode(RID)).encode(r_ret)
  table["_joint_disable_collisions_between_bodies"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).jointDisableCollisionsBetweenBodies(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_joint_is_disabled_collisions_between_bodies"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).jointIsDisabledCollisionsBetweenBodies(p_args[0].decode(RID)).encode(r_ret)
  table["_free_rid"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).freeRid(p_args[0].decode(RID))
  table["_set_active"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).setActive(p_args[0].decode(Bool))
  table["_init"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).init()
  table["_step"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).step(p_args[0].decode(Float))
  table["_sync"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).sync()
  table["_flush_queries"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).flushQueries()
  table["_end_sync"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).endSync()
  table["_finish"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).finish()
  table["_is_flushing_queries"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).isFlushingQueries().encode(r_ret)
  table["_get_process_info"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicsServer3DExtension](p_instance).getProcessInfo(p_args[0].decode(PhysicsServer3D_ProcessInfo)).encode(r_ret)

define_godot_engine_class_essencials(AESContext, RefCounted)
define_godot_engine_class_essencials(AStar2D, RefCounted)
method estimateCost*(self: Ref[AStar2D]; fromId: int64; toId: int64): Float {.base.} = (discard)
method computeCost*(self: Ref[AStar2D]; fromId: int64; toId: int64): Float {.base.} = (discard)
proc bind_virtuals*(S: typedesc[AStar2D]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_estimate_cost"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AStar2D]](p_instance).estimateCost(p_args[0].decode(int64), p_args[1].decode(int64)).encode(r_ret)
  table["_compute_cost"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AStar2D]](p_instance).computeCost(p_args[0].decode(int64), p_args[1].decode(int64)).encode(r_ret)

define_godot_engine_class_essencials(AStar3D, RefCounted)
method estimateCost*(self: Ref[AStar3D]; fromId: int64; toId: int64): Float {.base.} = (discard)
method computeCost*(self: Ref[AStar3D]; fromId: int64; toId: int64): Float {.base.} = (discard)
proc bind_virtuals*(S: typedesc[AStar3D]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_estimate_cost"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AStar3D]](p_instance).estimateCost(p_args[0].decode(int64), p_args[1].decode(int64)).encode(r_ret)
  table["_compute_cost"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AStar3D]](p_instance).computeCost(p_args[0].decode(int64), p_args[1].decode(int64)).encode(r_ret)

define_godot_engine_class_essencials(AStarGrid2D, RefCounted)
method estimateCost*(self: Ref[AStarGrid2D]; fromId: Vector2i; toId: Vector2i): Float {.base.} = (discard)
method computeCost*(self: Ref[AStarGrid2D]; fromId: Vector2i; toId: Vector2i): Float {.base.} = (discard)
proc bind_virtuals*(S: typedesc[AStarGrid2D]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_estimate_cost"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AStarGrid2D]](p_instance).estimateCost(p_args[0].decode(Vector2i), p_args[1].decode(Vector2i)).encode(r_ret)
  table["_compute_cost"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AStarGrid2D]](p_instance).computeCost(p_args[0].decode(Vector2i), p_args[1].decode(Vector2i)).encode(r_ret)

define_godot_engine_class_essencials(AudioEffectInstance, RefCounted)
method process*(self: Ref[AudioEffectInstance]; srcBuffer: pointer; dstBuffer: ptr AudioFrame; frameCount: int32) {.base.} = (discard)
method processSilence*(self: Ref[AudioEffectInstance]): Bool {.base.} = (discard)
proc bind_virtuals*(S: typedesc[AudioEffectInstance]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_process"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AudioEffectInstance]](p_instance).process(p_args[0].decode(pointer), p_args[1].decode(ptr AudioFrame), p_args[2].decode(int32))
  table["_process_silence"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AudioEffectInstance]](p_instance).processSilence().encode(r_ret)

define_godot_engine_class_essencials(AudioStreamPlayback, RefCounted)
method start*(self: Ref[AudioStreamPlayback]; fromPos: float64) {.base.} = (discard)
method stop*(self: Ref[AudioStreamPlayback]) {.base.} = (discard)
method isPlaying*(self: Ref[AudioStreamPlayback]): Bool {.base.} = (discard)
method getLoopCount*(self: Ref[AudioStreamPlayback]): int32 {.base.} = (discard)
method getPlaybackPosition*(self: Ref[AudioStreamPlayback]): float64 {.base.} = (discard)
method seek*(self: Ref[AudioStreamPlayback]; position: float64) {.base.} = (discard)
method mix*(self: Ref[AudioStreamPlayback]; buffer: ptr AudioFrame; rateScale: Float; frames: int32): int32 {.base.} = (discard)
method tagUsedStreams*(self: Ref[AudioStreamPlayback]) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[AudioStreamPlayback]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_start"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AudioStreamPlayback]](p_instance).start(p_args[0].decode(float64))
  table["_stop"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AudioStreamPlayback]](p_instance).stop()
  table["_is_playing"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AudioStreamPlayback]](p_instance).isPlaying().encode(r_ret)
  table["_get_loop_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AudioStreamPlayback]](p_instance).getLoopCount().encode(r_ret)
  table["_get_playback_position"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AudioStreamPlayback]](p_instance).getPlaybackPosition().encode(r_ret)
  table["_seek"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AudioStreamPlayback]](p_instance).seek(p_args[0].decode(float64))
  table["_mix"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AudioStreamPlayback]](p_instance).mix(p_args[0].decode(ptr AudioFrame), p_args[1].decode(Float), p_args[2].decode(int32)).encode(r_ret)
  table["_tag_used_streams"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AudioStreamPlayback]](p_instance).tagUsedStreams()

define_godot_engine_class_essencials(CameraFeed, RefCounted)
define_godot_engine_class_essencials(CharFXTransform, RefCounted)
define_godot_engine_class_essencials(ConfigFile, RefCounted)
define_godot_engine_class_essencials(Crypto, RefCounted)
define_godot_engine_class_essencials(DTLSServer, RefCounted)
define_godot_engine_class_essencials(DirAccess, RefCounted)
define_godot_engine_class_essencials(ENetConnection, RefCounted)
define_godot_engine_class_essencials(EditorDebuggerPlugin, RefCounted)
method setupSession*(self: Ref[EditorDebuggerPlugin]; sessionId: int32) {.base.} = (discard)
method hasCapture*(self: Ref[EditorDebuggerPlugin]; capture: String): Bool {.base.} = (discard)
method capture*(self: Ref[EditorDebuggerPlugin]; message: String; data: Array; sessionId: int32): Bool {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorDebuggerPlugin]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_setup_session"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorDebuggerPlugin]](p_instance).setupSession(p_args[0].decode(int32))
  table["_has_capture"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorDebuggerPlugin]](p_instance).hasCapture(p_args[0].decode(String)).encode(r_ret)
  table["_capture"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorDebuggerPlugin]](p_instance).capture(p_args[0].decode(String), p_args[1].decode(Array), p_args[2].decode(int32)).encode(r_ret)

define_godot_engine_class_essencials(EditorDebuggerSession, RefCounted)
define_godot_engine_class_essencials(EditorExportPlatform, RefCounted)
define_godot_engine_class_essencials(EditorExportPlugin, RefCounted)
method exportFile*(self: Ref[EditorExportPlugin]; path: String; `type`: String; features: PackedStringArray) {.base.} = (discard)
method exportBegin*(self: Ref[EditorExportPlugin]; features: PackedStringArray; isDebug: Bool; path: String; flags: uint32) {.base.} = (discard)
method exportEnd*(self: Ref[EditorExportPlugin]) {.base.} = (discard)
method beginCustomizeResources*(self: Ref[EditorExportPlugin]; platform: Ref[EditorExportPlatform]; features: PackedStringArray): Bool {.base.} = (discard)
method customizeResource*(self: Ref[EditorExportPlugin]; resource: Ref[Resource]; path: String): Ref[Resource] {.base.} = (discard)
method beginCustomizeScenes*(self: Ref[EditorExportPlugin]; platform: Ref[EditorExportPlatform]; features: PackedStringArray): Bool {.base.} = (discard)
method customizeScene*(self: Ref[EditorExportPlugin]; scene: ptr Node; path: String): Node {.base.} = (discard)
method getCustomizationConfigurationHash*(self: Ref[EditorExportPlugin]): uint64 {.base.} = (discard)
method endCustomizeScenes*(self: Ref[EditorExportPlugin]) {.base.} = (discard)
method endCustomizeResources*(self: Ref[EditorExportPlugin]) {.base.} = (discard)
method getExportOptions*(self: Ref[EditorExportPlugin]; platform: Ref[EditorExportPlatform]): TypedArray[Dictionary] {.base.} = (discard)
method shouldUpdateExportOptions*(self: Ref[EditorExportPlugin]; platform: Ref[EditorExportPlatform]): Bool {.base.} = (discard)
method getExportFeatures*(self: Ref[EditorExportPlugin]; platform: Ref[EditorExportPlatform]; debug: Bool): PackedStringArray {.base.} = (discard)
method getName*(self: Ref[EditorExportPlugin]): String {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorExportPlugin]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_export_file"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorExportPlugin]](p_instance).exportFile(p_args[0].decode(String), p_args[1].decode(String), p_args[2].decode(PackedStringArray))
  table["_export_begin"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorExportPlugin]](p_instance).exportBegin(p_args[0].decode(PackedStringArray), p_args[1].decode(Bool), p_args[2].decode(String), p_args[3].decode(uint32))
  table["_export_end"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorExportPlugin]](p_instance).exportEnd()
  table["_begin_customize_resources"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorExportPlugin]](p_instance).beginCustomizeResources(p_args[0].decode(Ref[EditorExportPlatform]), p_args[1].decode(PackedStringArray)).encode(r_ret)
  table["_customize_resource"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorExportPlugin]](p_instance).customizeResource(p_args[0].decode(Ref[Resource]), p_args[1].decode(String)).encode(r_ret)
  table["_begin_customize_scenes"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorExportPlugin]](p_instance).beginCustomizeScenes(p_args[0].decode(Ref[EditorExportPlatform]), p_args[1].decode(PackedStringArray)).encode(r_ret)
  table["_customize_scene"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorExportPlugin]](p_instance).customizeScene(p_args[0].decode(ptr Node), p_args[1].decode(String)).encode(r_ret)
  table["_get_customization_configuration_hash"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorExportPlugin]](p_instance).getCustomizationConfigurationHash().encode(r_ret)
  table["_end_customize_scenes"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorExportPlugin]](p_instance).endCustomizeScenes()
  table["_end_customize_resources"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorExportPlugin]](p_instance).endCustomizeResources()
  table["_get_export_options"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorExportPlugin]](p_instance).getExportOptions(p_args[0].decode(Ref[EditorExportPlatform])).encode(r_ret)
  table["_should_update_export_options"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorExportPlugin]](p_instance).shouldUpdateExportOptions(p_args[0].decode(Ref[EditorExportPlatform])).encode(r_ret)
  table["_get_export_features"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorExportPlugin]](p_instance).getExportFeatures(p_args[0].decode(Ref[EditorExportPlatform]), p_args[1].decode(Bool)).encode(r_ret)
  table["_get_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorExportPlugin]](p_instance).getName().encode(r_ret)

define_godot_engine_class_essencials(EditorFeatureProfile, RefCounted)
define_godot_engine_class_essencials(EditorFileSystemImportFormatSupportQuery, RefCounted)
method isActive*(self: Ref[EditorFileSystemImportFormatSupportQuery]): Bool {.base.} = (discard)
method getFileExtensions*(self: Ref[EditorFileSystemImportFormatSupportQuery]): PackedStringArray {.base.} = (discard)
method query*(self: Ref[EditorFileSystemImportFormatSupportQuery]): Bool {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorFileSystemImportFormatSupportQuery]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_is_active"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorFileSystemImportFormatSupportQuery]](p_instance).isActive().encode(r_ret)
  table["_get_file_extensions"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorFileSystemImportFormatSupportQuery]](p_instance).getFileExtensions().encode(r_ret)
  table["_query"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorFileSystemImportFormatSupportQuery]](p_instance).query().encode(r_ret)

define_godot_engine_class_essencials(EditorInspectorPlugin, RefCounted)
method canHandle*(self: Ref[EditorInspectorPlugin]; `object`: ptr Object): Bool {.base.} = (discard)
method parseBegin*(self: Ref[EditorInspectorPlugin]; `object`: ptr Object) {.base.} = (discard)
method parseCategory*(self: Ref[EditorInspectorPlugin]; `object`: ptr Object; category: String) {.base.} = (discard)
method parseGroup*(self: Ref[EditorInspectorPlugin]; `object`: ptr Object; group: String) {.base.} = (discard)
method parseProperty*(self: Ref[EditorInspectorPlugin]; `object`: ptr Object; `type`: Variant_Type; name: String; hintType: PropertyHint; hintString: String; usageFlags: set[PropertyUsageFlags]; wide: Bool): Bool {.base.} = (discard)
method parseEnd*(self: Ref[EditorInspectorPlugin]; `object`: ptr Object) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorInspectorPlugin]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_can_handle"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorInspectorPlugin]](p_instance).canHandle(p_args[0].decode(ptr Object)).encode(r_ret)
  table["_parse_begin"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorInspectorPlugin]](p_instance).parseBegin(p_args[0].decode(ptr Object))
  table["_parse_category"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorInspectorPlugin]](p_instance).parseCategory(p_args[0].decode(ptr Object), p_args[1].decode(String))
  table["_parse_group"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorInspectorPlugin]](p_instance).parseGroup(p_args[0].decode(ptr Object), p_args[1].decode(String))
  table["_parse_property"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorInspectorPlugin]](p_instance).parseProperty(p_args[0].decode(ptr Object), p_args[1].decode(Variant_Type), p_args[2].decode(String), p_args[3].decode(PropertyHint), p_args[4].decode(String), p_args[5].decode(set[PropertyUsageFlags]), p_args[6].decode(Bool)).encode(r_ret)
  table["_parse_end"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorInspectorPlugin]](p_instance).parseEnd(p_args[0].decode(ptr Object))

define_godot_engine_class_essencials(EditorResourceConversionPlugin, RefCounted)
method convertsTo*(self: Ref[EditorResourceConversionPlugin]): String {.base.} = (discard)
method handles*(self: Ref[EditorResourceConversionPlugin]; resource: Ref[Resource]): Bool {.base.} = (discard)
method convert*(self: Ref[EditorResourceConversionPlugin]; resource: Ref[Resource]): Ref[Resource] {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorResourceConversionPlugin]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_converts_to"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorResourceConversionPlugin]](p_instance).convertsTo().encode(r_ret)
  table["_handles"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorResourceConversionPlugin]](p_instance).handles(p_args[0].decode(Ref[Resource])).encode(r_ret)
  table["_convert"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorResourceConversionPlugin]](p_instance).convert(p_args[0].decode(Ref[Resource])).encode(r_ret)

define_godot_engine_class_essencials(EditorResourcePreviewGenerator, RefCounted)
method handles*(self: Ref[EditorResourcePreviewGenerator]; `type`: String): Bool {.base.} = (discard)
method generate*(self: Ref[EditorResourcePreviewGenerator]; resource: Ref[Resource]; size: Vector2i; metadata: Dictionary): Ref[Texture2D] {.base.} = (discard)
method generateFromPath*(self: Ref[EditorResourcePreviewGenerator]; path: String; size: Vector2i; metadata: Dictionary): Ref[Texture2D] {.base.} = (discard)
method generateSmallPreviewAutomatically*(self: Ref[EditorResourcePreviewGenerator]): Bool {.base.} = (discard)
method canGenerateSmallPreview*(self: Ref[EditorResourcePreviewGenerator]): Bool {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorResourcePreviewGenerator]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_handles"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorResourcePreviewGenerator]](p_instance).handles(p_args[0].decode(String)).encode(r_ret)
  table["_generate"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorResourcePreviewGenerator]](p_instance).generate(p_args[0].decode(Ref[Resource]), p_args[1].decode(Vector2i), p_args[2].decode(Dictionary)).encode(r_ret)
  table["_generate_from_path"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorResourcePreviewGenerator]](p_instance).generateFromPath(p_args[0].decode(String), p_args[1].decode(Vector2i), p_args[2].decode(Dictionary)).encode(r_ret)
  table["_generate_small_preview_automatically"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorResourcePreviewGenerator]](p_instance).generateSmallPreviewAutomatically().encode(r_ret)
  table["_can_generate_small_preview"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorResourcePreviewGenerator]](p_instance).canGenerateSmallPreview().encode(r_ret)

define_godot_engine_class_essencials(EditorResourceTooltipPlugin, RefCounted)
method handles*(self: Ref[EditorResourceTooltipPlugin]; `type`: String): Bool {.base.} = (discard)
method makeTooltipForPath*(self: Ref[EditorResourceTooltipPlugin]; path: String; metadata: Dictionary; base: Control): Control {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorResourceTooltipPlugin]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_handles"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorResourceTooltipPlugin]](p_instance).handles(p_args[0].decode(String)).encode(r_ret)
  table["_make_tooltip_for_path"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorResourceTooltipPlugin]](p_instance).makeTooltipForPath(p_args[0].decode(String), p_args[1].decode(Dictionary), p_args[2].decode(Control)).encode(r_ret)

define_godot_engine_class_essencials(EditorSceneFormatImporter, RefCounted)
method getImportFlags*(self: Ref[EditorSceneFormatImporter]): uint32 {.base.} = (discard)
method getExtensions*(self: Ref[EditorSceneFormatImporter]): PackedStringArray {.base.} = (discard)
method importScene*(self: Ref[EditorSceneFormatImporter]; path: String; flags: uint32; options: Dictionary): Object {.base.} = (discard)
method getImportOptions*(self: Ref[EditorSceneFormatImporter]; path: String) {.base.} = (discard)
method getOptionVisibility*(self: Ref[EditorSceneFormatImporter]; path: String; forAnimation: Bool; option: String): Variant {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorSceneFormatImporter]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_import_flags"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorSceneFormatImporter]](p_instance).getImportFlags().encode(r_ret)
  table["_get_extensions"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorSceneFormatImporter]](p_instance).getExtensions().encode(r_ret)
  table["_import_scene"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorSceneFormatImporter]](p_instance).importScene(p_args[0].decode(String), p_args[1].decode(uint32), p_args[2].decode(Dictionary)).encode(r_ret)
  table["_get_import_options"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorSceneFormatImporter]](p_instance).getImportOptions(p_args[0].decode(String))
  table["_get_option_visibility"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorSceneFormatImporter]](p_instance).getOptionVisibility(p_args[0].decode(String), p_args[1].decode(Bool), p_args[2].decode(String)).encode(r_ret)

define_godot_engine_class_essencials(EditorScenePostImport, RefCounted)
method postImport*(self: Ref[EditorScenePostImport]; scene: ptr Node): Object {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorScenePostImport]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_post_import"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorScenePostImport]](p_instance).postImport(p_args[0].decode(ptr Node)).encode(r_ret)

define_godot_engine_class_essencials(EditorScenePostImportPlugin, RefCounted)
method getInternalImportOptions*(self: Ref[EditorScenePostImportPlugin]; category: int32) {.base.} = (discard)
method getInternalOptionVisibility*(self: Ref[EditorScenePostImportPlugin]; category: int32; forAnimation: Bool; option: String): Variant {.base.} = (discard)
method getInternalOptionUpdateViewRequired*(self: Ref[EditorScenePostImportPlugin]; category: int32; option: String): Variant {.base.} = (discard)
method internalProcess*(self: Ref[EditorScenePostImportPlugin]; category: int32; baseNode: ptr Node; node: ptr Node; resource: Ref[Resource]) {.base.} = (discard)
method getImportOptions*(self: Ref[EditorScenePostImportPlugin]; path: String) {.base.} = (discard)
method getOptionVisibility*(self: Ref[EditorScenePostImportPlugin]; path: String; forAnimation: Bool; option: String): Variant {.base.} = (discard)
method preProcess*(self: Ref[EditorScenePostImportPlugin]; scene: ptr Node) {.base.} = (discard)
method postProcess*(self: Ref[EditorScenePostImportPlugin]; scene: ptr Node) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorScenePostImportPlugin]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_internal_import_options"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorScenePostImportPlugin]](p_instance).getInternalImportOptions(p_args[0].decode(int32))
  table["_get_internal_option_visibility"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorScenePostImportPlugin]](p_instance).getInternalOptionVisibility(p_args[0].decode(int32), p_args[1].decode(Bool), p_args[2].decode(String)).encode(r_ret)
  table["_get_internal_option_update_view_required"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorScenePostImportPlugin]](p_instance).getInternalOptionUpdateViewRequired(p_args[0].decode(int32), p_args[1].decode(String)).encode(r_ret)
  table["_internal_process"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorScenePostImportPlugin]](p_instance).internalProcess(p_args[0].decode(int32), p_args[1].decode(ptr Node), p_args[2].decode(ptr Node), p_args[3].decode(Ref[Resource]))
  table["_get_import_options"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorScenePostImportPlugin]](p_instance).getImportOptions(p_args[0].decode(String))
  table["_get_option_visibility"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorScenePostImportPlugin]](p_instance).getOptionVisibility(p_args[0].decode(String), p_args[1].decode(Bool), p_args[2].decode(String)).encode(r_ret)
  table["_pre_process"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorScenePostImportPlugin]](p_instance).preProcess(p_args[0].decode(ptr Node))
  table["_post_process"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorScenePostImportPlugin]](p_instance).postProcess(p_args[0].decode(ptr Node))

define_godot_engine_class_essencials(EditorScript, RefCounted)
method run*(self: Ref[EditorScript]) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorScript]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_run"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorScript]](p_instance).run()

define_godot_engine_class_essencials(EditorTranslationParserPlugin, RefCounted)
method parseFile*(self: Ref[EditorTranslationParserPlugin]; path: String; msgids: TypedArray[String]; msgidsContextPlural: TypedArray[Array]) {.base.} = (discard)
method getRecognizedExtensions*(self: Ref[EditorTranslationParserPlugin]): PackedStringArray {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorTranslationParserPlugin]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_parse_file"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorTranslationParserPlugin]](p_instance).parseFile(p_args[0].decode(String), p_args[1].decode(TypedArray[String]), p_args[2].decode(TypedArray[Array]))
  table["_get_recognized_extensions"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorTranslationParserPlugin]](p_instance).getRecognizedExtensions().encode(r_ret)

define_godot_engine_class_essencials(EncodedObjectAsID, RefCounted)
define_godot_engine_class_essencials(EngineProfiler, RefCounted)
method toggle*(self: Ref[EngineProfiler]; enable: Bool; options: Array) {.base.} = (discard)
method addFrame*(self: Ref[EngineProfiler]; data: Array) {.base.} = (discard)
method tick*(self: Ref[EngineProfiler]; frameTime: float64; processTime: float64; physicsTime: float64; physicsFrameTime: float64) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EngineProfiler]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_toggle"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EngineProfiler]](p_instance).toggle(p_args[0].decode(Bool), p_args[1].decode(Array))
  table["_add_frame"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EngineProfiler]](p_instance).addFrame(p_args[0].decode(Array))
  table["_tick"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EngineProfiler]](p_instance).tick(p_args[0].decode(float64), p_args[1].decode(float64), p_args[2].decode(float64), p_args[3].decode(float64))

define_godot_engine_class_essencials(Expression, RefCounted)
define_godot_engine_class_essencials(FileAccess, RefCounted)
define_godot_engine_class_essencials(GDScriptNativeClass, RefCounted)
define_godot_engine_class_essencials(HMACContext, RefCounted)
define_godot_engine_class_essencials(HTTPClient, RefCounted)
define_godot_engine_class_essencials(HashingContext, RefCounted)
define_godot_engine_class_essencials(ImageFormatLoader, RefCounted)
define_godot_engine_class_essencials(JavaClass, RefCounted)
define_godot_engine_class_essencials(JavaScriptObject, RefCounted)
define_godot_engine_class_essencials(KinematicCollision2D, RefCounted)
define_godot_engine_class_essencials(KinematicCollision3D, RefCounted)
define_godot_engine_class_essencials(Lightmapper, RefCounted)
define_godot_engine_class_essencials(MeshConvexDecompositionSettings, RefCounted)
define_godot_engine_class_essencials(MeshDataTool, RefCounted)
define_godot_engine_class_essencials(MultiplayerAPI, RefCounted)
define_godot_engine_class_essencials(Mutex, RefCounted)
define_godot_engine_class_essencials(NavigationPathQueryParameters2D, RefCounted)
define_godot_engine_class_essencials(NavigationPathQueryParameters3D, RefCounted)
define_godot_engine_class_essencials(NavigationPathQueryResult2D, RefCounted)
define_godot_engine_class_essencials(NavigationPathQueryResult3D, RefCounted)
define_godot_engine_class_essencials(Node3DGizmo, RefCounted)
define_godot_engine_class_essencials(OggPacketSequencePlayback, RefCounted)
define_godot_engine_class_essencials(PCKPacker, RefCounted)
define_godot_engine_class_essencials(PackedDataContainerRef, RefCounted)
define_godot_engine_class_essencials(PacketPeer, RefCounted)
define_godot_engine_class_essencials(PhysicsPointQueryParameters2D, RefCounted)
define_godot_engine_class_essencials(PhysicsPointQueryParameters3D, RefCounted)
define_godot_engine_class_essencials(PhysicsRayQueryParameters2D, RefCounted)
define_godot_engine_class_essencials(PhysicsRayQueryParameters3D, RefCounted)
define_godot_engine_class_essencials(PhysicsShapeQueryParameters2D, RefCounted)
define_godot_engine_class_essencials(PhysicsShapeQueryParameters3D, RefCounted)
define_godot_engine_class_essencials(PhysicsTestMotionParameters2D, RefCounted)
define_godot_engine_class_essencials(PhysicsTestMotionParameters3D, RefCounted)
define_godot_engine_class_essencials(PhysicsTestMotionResult2D, RefCounted)
define_godot_engine_class_essencials(PhysicsTestMotionResult3D, RefCounted)
define_godot_engine_class_essencials(RDAttachmentFormat, RefCounted)
define_godot_engine_class_essencials(RDFramebufferPass, RefCounted)
define_godot_engine_class_essencials(RDPipelineColorBlendState, RefCounted)
define_godot_engine_class_essencials(RDPipelineColorBlendStateAttachment, RefCounted)
define_godot_engine_class_essencials(RDPipelineDepthStencilState, RefCounted)
define_godot_engine_class_essencials(RDPipelineMultisampleState, RefCounted)
define_godot_engine_class_essencials(RDPipelineRasterizationState, RefCounted)
define_godot_engine_class_essencials(RDPipelineSpecializationConstant, RefCounted)
define_godot_engine_class_essencials(RDSamplerState, RefCounted)
define_godot_engine_class_essencials(RDShaderSource, RefCounted)
define_godot_engine_class_essencials(RDTextureFormat, RefCounted)
define_godot_engine_class_essencials(RDTextureView, RefCounted)
define_godot_engine_class_essencials(RDUniform, RefCounted)
define_godot_engine_class_essencials(RDVertexAttribute, RefCounted)
define_godot_engine_class_essencials(RandomNumberGenerator, RefCounted)
define_godot_engine_class_essencials(RegEx, RefCounted)
define_godot_engine_class_essencials(RegExMatch, RefCounted)
define_godot_engine_class_essencials(Resource, RefCounted)
define_godot_engine_class_essencials(ResourceFormatLoader, RefCounted)
method getRecognizedExtensions*(self: Ref[ResourceFormatLoader]): PackedStringArray {.base.} = (discard)
method recognizePath*(self: Ref[ResourceFormatLoader]; path: String; `type`: StringName): Bool {.base.} = (discard)
method handlesType*(self: Ref[ResourceFormatLoader]; `type`: StringName): Bool {.base.} = (discard)
method getResourceType*(self: Ref[ResourceFormatLoader]; path: String): String {.base.} = (discard)
method getResourceScriptClass*(self: Ref[ResourceFormatLoader]; path: String): String {.base.} = (discard)
method getResourceUid*(self: Ref[ResourceFormatLoader]; path: String): int64 {.base.} = (discard)
method getDependencies*(self: Ref[ResourceFormatLoader]; path: String; addTypes: Bool): PackedStringArray {.base.} = (discard)
method renameDependencies*(self: Ref[ResourceFormatLoader]; path: String; renames: Dictionary): Error {.base.} = (discard)
method exists*(self: Ref[ResourceFormatLoader]; path: String): Bool {.base.} = (discard)
method getClassesUsed*(self: Ref[ResourceFormatLoader]; path: String): PackedStringArray {.base.} = (discard)
method load*(self: Ref[ResourceFormatLoader]; path: String; originalPath: String; useSubThreads: Bool; cacheMode: int32): Variant {.base.} = (discard)
proc bind_virtuals*(S: typedesc[ResourceFormatLoader]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_recognized_extensions"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ResourceFormatLoader]](p_instance).getRecognizedExtensions().encode(r_ret)
  table["_recognize_path"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ResourceFormatLoader]](p_instance).recognizePath(p_args[0].decode(String), p_args[1].decode(StringName)).encode(r_ret)
  table["_handles_type"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ResourceFormatLoader]](p_instance).handlesType(p_args[0].decode(StringName)).encode(r_ret)
  table["_get_resource_type"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ResourceFormatLoader]](p_instance).getResourceType(p_args[0].decode(String)).encode(r_ret)
  table["_get_resource_script_class"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ResourceFormatLoader]](p_instance).getResourceScriptClass(p_args[0].decode(String)).encode(r_ret)
  table["_get_resource_uid"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ResourceFormatLoader]](p_instance).getResourceUid(p_args[0].decode(String)).encode(r_ret)
  table["_get_dependencies"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ResourceFormatLoader]](p_instance).getDependencies(p_args[0].decode(String), p_args[1].decode(Bool)).encode(r_ret)
  table["_rename_dependencies"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ResourceFormatLoader]](p_instance).renameDependencies(p_args[0].decode(String), p_args[1].decode(Dictionary)).encode(r_ret)
  table["_exists"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ResourceFormatLoader]](p_instance).exists(p_args[0].decode(String)).encode(r_ret)
  table["_get_classes_used"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ResourceFormatLoader]](p_instance).getClassesUsed(p_args[0].decode(String)).encode(r_ret)
  table["_load"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ResourceFormatLoader]](p_instance).load(p_args[0].decode(String), p_args[1].decode(String), p_args[2].decode(Bool), p_args[3].decode(int32)).encode(r_ret)

define_godot_engine_class_essencials(ResourceFormatSaver, RefCounted)
method save*(self: Ref[ResourceFormatSaver]; resource: Ref[Resource]; path: String; flags: uint32): Error {.base.} = (discard)
method setUid*(self: Ref[ResourceFormatSaver]; path: String; uid: int64): Error {.base.} = (discard)
method recognize*(self: Ref[ResourceFormatSaver]; resource: Ref[Resource]): Bool {.base.} = (discard)
method getRecognizedExtensions*(self: Ref[ResourceFormatSaver]; resource: Ref[Resource]): PackedStringArray {.base.} = (discard)
method recognizePath*(self: Ref[ResourceFormatSaver]; resource: Ref[Resource]; path: String): Bool {.base.} = (discard)
proc bind_virtuals*(S: typedesc[ResourceFormatSaver]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_save"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ResourceFormatSaver]](p_instance).save(p_args[0].decode(Ref[Resource]), p_args[1].decode(String), p_args[2].decode(uint32)).encode(r_ret)
  table["_set_uid"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ResourceFormatSaver]](p_instance).setUid(p_args[0].decode(String), p_args[1].decode(int64)).encode(r_ret)
  table["_recognize"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ResourceFormatSaver]](p_instance).recognize(p_args[0].decode(Ref[Resource])).encode(r_ret)
  table["_get_recognized_extensions"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ResourceFormatSaver]](p_instance).getRecognizedExtensions(p_args[0].decode(Ref[Resource])).encode(r_ret)
  table["_recognize_path"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ResourceFormatSaver]](p_instance).recognizePath(p_args[0].decode(Ref[Resource]), p_args[1].decode(String)).encode(r_ret)

define_godot_engine_class_essencials(ResourceImporter, RefCounted)
define_godot_engine_class_essencials(SceneState, RefCounted)
define_godot_engine_class_essencials(SceneTreeTimer, RefCounted)
define_godot_engine_class_essencials(Semaphore, RefCounted)
define_godot_engine_class_essencials(SkinReference, RefCounted)
define_godot_engine_class_essencials(StreamPeer, RefCounted)
define_godot_engine_class_essencials(SurfaceTool, RefCounted)
define_godot_engine_class_essencials(TCPServer, RefCounted)
define_godot_engine_class_essencials(TLSOptions, RefCounted)
define_godot_engine_class_essencials(TextLine, RefCounted)
define_godot_engine_class_essencials(TextParagraph, RefCounted)
define_godot_engine_class_essencials(TextServer, RefCounted)
define_godot_engine_class_essencials(GodotThread, RefCounted)
define_godot_engine_class_essencials(TriangleMesh, RefCounted)
define_godot_engine_class_essencials(Tween, RefCounted)
define_godot_engine_class_essencials(Tweener, RefCounted)
define_godot_engine_class_essencials(UDPServer, RefCounted)
define_godot_engine_class_essencials(UPNP, RefCounted)
define_godot_engine_class_essencials(UPNPDevice, RefCounted)
define_godot_engine_class_essencials(WeakRef, RefCounted)
define_godot_engine_class_essencials(WebRTCPeerConnection, RefCounted)
define_godot_engine_class_essencials(XMLParser, RefCounted)
define_godot_engine_class_essencials(XRInterface, RefCounted)
define_godot_engine_class_essencials(XRPose, RefCounted)
define_godot_engine_class_essencials(XRPositionalTracker, RefCounted)
define_godot_engine_class_essencials(ZIPPacker, RefCounted)
define_godot_engine_class_essencials(ZIPReader, RefCounted)
define_godot_engine_class_essencials(ScriptLanguageExtension, ScriptLanguage)
method getName*(self: ScriptLanguageExtension): String {.base.} = (discard)
method init*(self: ScriptLanguageExtension) {.base.} = (discard)
method getType*(self: ScriptLanguageExtension): String {.base.} = (discard)
method getExtension*(self: ScriptLanguageExtension): String {.base.} = (discard)
method finish*(self: ScriptLanguageExtension) {.base.} = (discard)
method getReservedWords*(self: ScriptLanguageExtension): PackedStringArray {.base.} = (discard)
method isControlFlowKeyword*(self: ScriptLanguageExtension; keyword: String): Bool {.base.} = (discard)
method getCommentDelimiters*(self: ScriptLanguageExtension): PackedStringArray {.base.} = (discard)
method getStringDelimiters*(self: ScriptLanguageExtension): PackedStringArray {.base.} = (discard)
method makeTemplate*(self: ScriptLanguageExtension; `template`: String; className: String; baseClassName: String): Ref[Script] {.base.} = (discard)
method getBuiltInTemplates*(self: ScriptLanguageExtension; `object`: StringName): TypedArray[Dictionary] {.base.} = (discard)
method isUsingTemplates*(self: ScriptLanguageExtension): Bool {.base.} = (discard)
method validate*(self: ScriptLanguageExtension; script: String; path: String; validateFunctions: Bool; validateErrors: Bool; validateWarnings: Bool; validateSafeLines: Bool): Dictionary {.base.} = (discard)
method validatePath*(self: ScriptLanguageExtension; path: String): String {.base.} = (discard)
method createScript*(self: ScriptLanguageExtension): Object {.base.} = (discard)
method hasNamedClasses*(self: ScriptLanguageExtension): Bool {.base.} = (discard)
method supportsBuiltinMode*(self: ScriptLanguageExtension): Bool {.base.} = (discard)
method supportsDocumentation*(self: ScriptLanguageExtension): Bool {.base.} = (discard)
method canInheritFromFile*(self: ScriptLanguageExtension): Bool {.base.} = (discard)
method findFunction*(self: ScriptLanguageExtension; className: String; functionName: String): int32 {.base.} = (discard)
method makeFunction*(self: ScriptLanguageExtension; className: String; functionName: String; functionArgs: PackedStringArray): String {.base.} = (discard)
method openInExternalEditor*(self: ScriptLanguageExtension; script: Ref[Script]; line: int32; column: int32): Error {.base.} = (discard)
method overridesExternalEditor*(self: ScriptLanguageExtension): Bool {.base.} = (discard)
method completeCode*(self: ScriptLanguageExtension; code: String; path: String; owner: ptr Object): Dictionary {.base.} = (discard)
method lookupCode*(self: ScriptLanguageExtension; code: String; symbol: String; path: String; owner: ptr Object): Dictionary {.base.} = (discard)
method autoIndentCode*(self: ScriptLanguageExtension; code: String; fromLine: int32; toLine: int32): String {.base.} = (discard)
method addGlobalConstant*(self: ScriptLanguageExtension; name: StringName; value: ptr Variant) {.base.} = (discard)
method addNamedGlobalConstant*(self: ScriptLanguageExtension; name: StringName; value: ptr Variant) {.base.} = (discard)
method removeNamedGlobalConstant*(self: ScriptLanguageExtension; name: StringName) {.base.} = (discard)
method threadEnter*(self: ScriptLanguageExtension) {.base.} = (discard)
method threadExit*(self: ScriptLanguageExtension) {.base.} = (discard)
method debugGetError*(self: ScriptLanguageExtension): String {.base.} = (discard)
method debugGetStackLevelCount*(self: ScriptLanguageExtension): int32 {.base.} = (discard)
method debugGetStackLevelLine*(self: ScriptLanguageExtension; level: int32): int32 {.base.} = (discard)
method debugGetStackLevelFunction*(self: ScriptLanguageExtension; level: int32): String {.base.} = (discard)
method debugGetStackLevelLocals*(self: ScriptLanguageExtension; level: int32; maxSubitems: int32; maxDepth: int32): Dictionary {.base.} = (discard)
method debugGetStackLevelMembers*(self: ScriptLanguageExtension; level: int32; maxSubitems: int32; maxDepth: int32): Dictionary {.base.} = (discard)
method debugGetStackLevelInstance*(self: ScriptLanguageExtension; level: int32): pointer {.base.} = (discard)
method debugGetGlobals*(self: ScriptLanguageExtension; maxSubitems: int32; maxDepth: int32): Dictionary {.base.} = (discard)
method debugParseStackLevelExpression*(self: ScriptLanguageExtension; level: int32; expression: String; maxSubitems: int32; maxDepth: int32): String {.base.} = (discard)
method debugGetCurrentStackInfo*(self: ScriptLanguageExtension): TypedArray[Dictionary] {.base.} = (discard)
method reloadAllScripts*(self: ScriptLanguageExtension) {.base.} = (discard)
method reloadToolScript*(self: ScriptLanguageExtension; script: Ref[Script]; softReload: Bool) {.base.} = (discard)
method getRecognizedExtensions*(self: ScriptLanguageExtension): PackedStringArray {.base.} = (discard)
method getPublicFunctions*(self: ScriptLanguageExtension): TypedArray[Dictionary] {.base.} = (discard)
method getPublicConstants*(self: ScriptLanguageExtension): Dictionary {.base.} = (discard)
method getPublicAnnotations*(self: ScriptLanguageExtension): TypedArray[Dictionary] {.base.} = (discard)
method profilingStart*(self: ScriptLanguageExtension) {.base.} = (discard)
method profilingStop*(self: ScriptLanguageExtension) {.base.} = (discard)
method profilingGetAccumulatedData*(self: ScriptLanguageExtension; infoArray: ptr ScriptLanguageExtensionProfilingInfo; infoMax: int32): int32 {.base.} = (discard)
method profilingGetFrameData*(self: ScriptLanguageExtension; infoArray: ptr ScriptLanguageExtensionProfilingInfo; infoMax: int32): int32 {.base.} = (discard)
method frame*(self: ScriptLanguageExtension) {.base.} = (discard)
method handlesGlobalClassType*(self: ScriptLanguageExtension; `type`: String): Bool {.base.} = (discard)
method getGlobalClassName*(self: ScriptLanguageExtension; path: String): Dictionary {.base.} = (discard)
proc bind_virtuals*(S: typedesc[ScriptLanguageExtension]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).getName().encode(r_ret)
  table["_init"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).init()
  table["_get_type"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).getType().encode(r_ret)
  table["_get_extension"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).getExtension().encode(r_ret)
  table["_finish"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).finish()
  table["_get_reserved_words"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).getReservedWords().encode(r_ret)
  table["_is_control_flow_keyword"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).isControlFlowKeyword(p_args[0].decode(String)).encode(r_ret)
  table["_get_comment_delimiters"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).getCommentDelimiters().encode(r_ret)
  table["_get_string_delimiters"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).getStringDelimiters().encode(r_ret)
  table["_make_template"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).makeTemplate(p_args[0].decode(String), p_args[1].decode(String), p_args[2].decode(String)).encode(r_ret)
  table["_get_built_in_templates"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).getBuiltInTemplates(p_args[0].decode(StringName)).encode(r_ret)
  table["_is_using_templates"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).isUsingTemplates().encode(r_ret)
  table["_validate"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).validate(p_args[0].decode(String), p_args[1].decode(String), p_args[2].decode(Bool), p_args[3].decode(Bool), p_args[4].decode(Bool), p_args[5].decode(Bool)).encode(r_ret)
  table["_validate_path"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).validatePath(p_args[0].decode(String)).encode(r_ret)
  table["_create_script"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).createScript().encode(r_ret)
  table["_has_named_classes"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).hasNamedClasses().encode(r_ret)
  table["_supports_builtin_mode"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).supportsBuiltinMode().encode(r_ret)
  table["_supports_documentation"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).supportsDocumentation().encode(r_ret)
  table["_can_inherit_from_file"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).canInheritFromFile().encode(r_ret)
  table["_find_function"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).findFunction(p_args[0].decode(String), p_args[1].decode(String)).encode(r_ret)
  table["_make_function"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).makeFunction(p_args[0].decode(String), p_args[1].decode(String), p_args[2].decode(PackedStringArray)).encode(r_ret)
  table["_open_in_external_editor"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).openInExternalEditor(p_args[0].decode(Ref[Script]), p_args[1].decode(int32), p_args[2].decode(int32)).encode(r_ret)
  table["_overrides_external_editor"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).overridesExternalEditor().encode(r_ret)
  table["_complete_code"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).completeCode(p_args[0].decode(String), p_args[1].decode(String), p_args[2].decode(ptr Object)).encode(r_ret)
  table["_lookup_code"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).lookupCode(p_args[0].decode(String), p_args[1].decode(String), p_args[2].decode(String), p_args[3].decode(ptr Object)).encode(r_ret)
  table["_auto_indent_code"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).autoIndentCode(p_args[0].decode(String), p_args[1].decode(int32), p_args[2].decode(int32)).encode(r_ret)
  table["_add_global_constant"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).addGlobalConstant(p_args[0].decode(StringName), p_args[1].decode(ptr Variant))
  table["_add_named_global_constant"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).addNamedGlobalConstant(p_args[0].decode(StringName), p_args[1].decode(ptr Variant))
  table["_remove_named_global_constant"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).removeNamedGlobalConstant(p_args[0].decode(StringName))
  table["_thread_enter"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).threadEnter()
  table["_thread_exit"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).threadExit()
  table["_debug_get_error"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).debugGetError().encode(r_ret)
  table["_debug_get_stack_level_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).debugGetStackLevelCount().encode(r_ret)
  table["_debug_get_stack_level_line"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).debugGetStackLevelLine(p_args[0].decode(int32)).encode(r_ret)
  table["_debug_get_stack_level_function"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).debugGetStackLevelFunction(p_args[0].decode(int32)).encode(r_ret)
  table["_debug_get_stack_level_locals"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).debugGetStackLevelLocals(p_args[0].decode(int32), p_args[1].decode(int32), p_args[2].decode(int32)).encode(r_ret)
  table["_debug_get_stack_level_members"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).debugGetStackLevelMembers(p_args[0].decode(int32), p_args[1].decode(int32), p_args[2].decode(int32)).encode(r_ret)
  table["_debug_get_stack_level_instance"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).debugGetStackLevelInstance(p_args[0].decode(int32)).encode(r_ret)
  table["_debug_get_globals"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).debugGetGlobals(p_args[0].decode(int32), p_args[1].decode(int32)).encode(r_ret)
  table["_debug_parse_stack_level_expression"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).debugParseStackLevelExpression(p_args[0].decode(int32), p_args[1].decode(String), p_args[2].decode(int32), p_args[3].decode(int32)).encode(r_ret)
  table["_debug_get_current_stack_info"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).debugGetCurrentStackInfo().encode(r_ret)
  table["_reload_all_scripts"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).reloadAllScripts()
  table["_reload_tool_script"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).reloadToolScript(p_args[0].decode(Ref[Script]), p_args[1].decode(Bool))
  table["_get_recognized_extensions"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).getRecognizedExtensions().encode(r_ret)
  table["_get_public_functions"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).getPublicFunctions().encode(r_ret)
  table["_get_public_constants"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).getPublicConstants().encode(r_ret)
  table["_get_public_annotations"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).getPublicAnnotations().encode(r_ret)
  table["_profiling_start"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).profilingStart()
  table["_profiling_stop"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).profilingStop()
  table["_profiling_get_accumulated_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).profilingGetAccumulatedData(p_args[0].decode(ptr ScriptLanguageExtensionProfilingInfo), p_args[1].decode(int32)).encode(r_ret)
  table["_profiling_get_frame_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).profilingGetFrameData(p_args[0].decode(ptr ScriptLanguageExtensionProfilingInfo), p_args[1].decode(int32)).encode(r_ret)
  table["_frame"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).frame()
  table["_handles_global_class_type"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).handlesGlobalClassType(p_args[0].decode(String)).encode(r_ret)
  table["_get_global_class_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[ScriptLanguageExtension](p_instance).getGlobalClassName(p_args[0].decode(String)).encode(r_ret)

define_godot_engine_class_essencials(Control, CanvasItem)
method hasPoint*(self: Control; point: Vector2): Bool {.base.} = (discard)
method structuredTextParser*(self: Control; args: Array; text: String): TypedArray[Vector3i] {.base.} = (discard)
method getMinimumSize*(self: Control): Vector2 {.base.} = (discard)
method getTooltip*(self: Control; atPosition: Vector2): String {.base.} = (discard)
method getDragData*(self: Control; atPosition: Vector2): Variant {.base.} = (discard)
method canDropData*(self: Control; atPosition: Vector2; data: ptr Variant): Bool {.base.} = (discard)
method dropData*(self: Control; atPosition: Vector2; data: ptr Variant) {.base.} = (discard)
method makeCustomTooltip*(self: Control; forText: String): Object {.base.} = (discard)
method guiInput*(self: Control; event: Ref[InputEvent]) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[Control]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_has_point"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Control](p_instance).hasPoint(p_args[0].decode(Vector2)).encode(r_ret)
  table["_structured_text_parser"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Control](p_instance).structuredTextParser(p_args[0].decode(Array), p_args[1].decode(String)).encode(r_ret)
  table["_get_minimum_size"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Control](p_instance).getMinimumSize().encode(r_ret)
  table["_get_tooltip"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Control](p_instance).getTooltip(p_args[0].decode(Vector2)).encode(r_ret)
  table["_get_drag_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Control](p_instance).getDragData(p_args[0].decode(Vector2)).encode(r_ret)
  table["_can_drop_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Control](p_instance).canDropData(p_args[0].decode(Vector2), p_args[1].decode(ptr Variant)).encode(r_ret)
  table["_drop_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Control](p_instance).dropData(p_args[0].decode(Vector2), p_args[1].decode(ptr Variant))
  table["_make_custom_tooltip"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Control](p_instance).makeCustomTooltip(p_args[0].decode(String)).encode(r_ret)
  table["_gui_input"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Control](p_instance).guiInput(p_args[0].decode(Ref[InputEvent]))

define_godot_engine_class_essencials(Node2D, CanvasItem)
define_godot_engine_class_essencials(ParallaxBackground, CanvasLayer)
define_godot_engine_class_essencials(AudioListener3D, Node3D)
define_godot_engine_class_essencials(AudioStreamPlayer3D, Node3D)
define_godot_engine_class_essencials(BoneAttachment3D, Node3D)
define_godot_engine_class_essencials(Camera3D, Node3D)
define_godot_engine_class_essencials(CollisionObject3D, Node3D)
method inputEvent*(self: CollisionObject3D; camera: Camera3D; event: Ref[InputEvent]; position: Vector3; normal: Vector3; shapeIdx: int32) {.base.} = (discard)
method mouseEnter*(self: CollisionObject3D) {.base.} = (discard)
method mouseExit*(self: CollisionObject3D) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[CollisionObject3D]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_input_event"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[CollisionObject3D](p_instance).inputEvent(p_args[0].decode(Camera3D), p_args[1].decode(Ref[InputEvent]), p_args[2].decode(Vector3), p_args[3].decode(Vector3), p_args[4].decode(int32))
  table["_mouse_enter"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[CollisionObject3D](p_instance).mouseEnter()
  table["_mouse_exit"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[CollisionObject3D](p_instance).mouseExit()

define_godot_engine_class_essencials(CollisionPolygon3D, Node3D)
define_godot_engine_class_essencials(CollisionShape3D, Node3D)
define_godot_engine_class_essencials(GridMap, Node3D)
define_godot_engine_class_essencials(ImporterMeshInstance3D, Node3D)
define_godot_engine_class_essencials(Joint3D, Node3D)
define_godot_engine_class_essencials(LightmapProbe, Node3D)
define_godot_engine_class_essencials(Marker3D, Node3D)
define_godot_engine_class_essencials(NavigationLink3D, Node3D)
define_godot_engine_class_essencials(NavigationObstacle3D, Node3D)
define_godot_engine_class_essencials(NavigationRegion3D, Node3D)
define_godot_engine_class_essencials(OccluderInstance3D, Node3D)
define_godot_engine_class_essencials(OpenXRHand, Node3D)
define_godot_engine_class_essencials(Path3D, Node3D)
define_godot_engine_class_essencials(PathFollow3D, Node3D)
define_godot_engine_class_essencials(RayCast3D, Node3D)
define_godot_engine_class_essencials(RemoteTransform3D, Node3D)
define_godot_engine_class_essencials(ShapeCast3D, Node3D)
define_godot_engine_class_essencials(Skeleton3D, Node3D)
define_godot_engine_class_essencials(SpringArm3D, Node3D)
define_godot_engine_class_essencials(VehicleWheel3D, Node3D)
define_godot_engine_class_essencials(VisualInstance3D, Node3D)
method getAabb*(self: VisualInstance3D): AABB {.base.} = (discard)
proc bind_virtuals*(S: typedesc[VisualInstance3D]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_aabb"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[VisualInstance3D](p_instance).getAabb().encode(r_ret)

define_godot_engine_class_essencials(XRNode3D, Node3D)
define_godot_engine_class_essencials(XROrigin3D, Node3D)
define_godot_engine_class_essencials(SubViewport, Viewport)
define_godot_engine_class_essencials(Window, Viewport)
define_godot_engine_class_essencials(AudioEffectSpectrumAnalyzerInstance, AudioEffectInstance)
define_godot_engine_class_essencials(AudioStreamPlaybackPolyphonic, AudioStreamPlayback)
define_godot_engine_class_essencials(AudioStreamPlaybackResampled, AudioStreamPlayback)
method mixResampled*(self: Ref[AudioStreamPlaybackResampled]; dstBuffer: ptr AudioFrame; frameCount: int32): int32 {.base.} = (discard)
method getStreamSamplingRate*(self: Ref[AudioStreamPlaybackResampled]): Float {.base.} = (discard)
proc bind_virtuals*(S: typedesc[AudioStreamPlaybackResampled]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_mix_resampled"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AudioStreamPlaybackResampled]](p_instance).mixResampled(p_args[0].decode(ptr AudioFrame), p_args[1].decode(int32)).encode(r_ret)
  table["_get_stream_sampling_rate"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AudioStreamPlaybackResampled]](p_instance).getStreamSamplingRate().encode(r_ret)

define_godot_engine_class_essencials(EditorExportPlatformAndroid, EditorExportPlatform)
define_godot_engine_class_essencials(EditorExportPlatformIOS, EditorExportPlatform)
define_godot_engine_class_essencials(EditorExportPlatformMacOS, EditorExportPlatform)
define_godot_engine_class_essencials(EditorExportPlatformPC, EditorExportPlatform)
define_godot_engine_class_essencials(EditorExportPlatformWeb, EditorExportPlatform)
define_godot_engine_class_essencials(EditorSceneFormatImporterBlend, EditorSceneFormatImporter)
define_godot_engine_class_essencials(EditorSceneFormatImporterFBX, EditorSceneFormatImporter)
define_godot_engine_class_essencials(EditorSceneFormatImporterGLTF, EditorSceneFormatImporter)
define_godot_engine_class_essencials(GDScriptEditorTranslationParserPlugin, EditorTranslationParserPlugin)
define_godot_engine_class_essencials(ImageFormatLoaderExtension, ImageFormatLoader)
method getRecognizedExtensions*(self: Ref[ImageFormatLoaderExtension]): PackedStringArray {.base.} = (discard)
method loadImage*(self: Ref[ImageFormatLoaderExtension]; image: Ref[Image]; fileaccess: Ref[FileAccess]; flags: set[ImageFormatLoader_LoaderFlags]; scale: Float): Error {.base.} = (discard)
proc bind_virtuals*(S: typedesc[ImageFormatLoaderExtension]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_recognized_extensions"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ImageFormatLoaderExtension]](p_instance).getRecognizedExtensions().encode(r_ret)
  table["_load_image"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ImageFormatLoaderExtension]](p_instance).loadImage(p_args[0].decode(Ref[Image]), p_args[1].decode(Ref[FileAccess]), p_args[2].decode(set[ImageFormatLoader_LoaderFlags]), p_args[3].decode(Float)).encode(r_ret)

define_godot_engine_class_essencials(LightmapperRD, Lightmapper)
define_godot_engine_class_essencials(MultiplayerAPIExtension, MultiplayerAPI)
method poll*(self: Ref[MultiplayerAPIExtension]): Error {.base.} = (discard)
method setMultiplayerPeer*(self: Ref[MultiplayerAPIExtension]; multiplayerPeer: Ref[MultiplayerPeer]) {.base.} = (discard)
method getMultiplayerPeer*(self: Ref[MultiplayerAPIExtension]): Ref[MultiplayerPeer] {.base.} = (discard)
method getUniqueId*(self: Ref[MultiplayerAPIExtension]): int32 {.base.} = (discard)
method getPeerIds*(self: Ref[MultiplayerAPIExtension]): PackedInt32Array {.base.} = (discard)
method rpc*(self: Ref[MultiplayerAPIExtension]; peer: int32; `object`: ptr Object; `method`: StringName; args: Array): Error {.base.} = (discard)
method getRemoteSenderId*(self: Ref[MultiplayerAPIExtension]): int32 {.base.} = (discard)
method objectConfigurationAdd*(self: Ref[MultiplayerAPIExtension]; `object`: ptr Object; configuration: ptr Variant): Error {.base.} = (discard)
method objectConfigurationRemove*(self: Ref[MultiplayerAPIExtension]; `object`: ptr Object; configuration: ptr Variant): Error {.base.} = (discard)
proc bind_virtuals*(S: typedesc[MultiplayerAPIExtension]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_poll"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerAPIExtension]](p_instance).poll().encode(r_ret)
  table["_set_multiplayer_peer"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerAPIExtension]](p_instance).setMultiplayerPeer(p_args[0].decode(Ref[MultiplayerPeer]))
  table["_get_multiplayer_peer"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerAPIExtension]](p_instance).getMultiplayerPeer().encode(r_ret)
  table["_get_unique_id"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerAPIExtension]](p_instance).getUniqueId().encode(r_ret)
  table["_get_peer_ids"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerAPIExtension]](p_instance).getPeerIds().encode(r_ret)
  table["_rpc"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerAPIExtension]](p_instance).rpc(p_args[0].decode(int32), p_args[1].decode(ptr Object), p_args[2].decode(StringName), p_args[3].decode(Array)).encode(r_ret)
  table["_get_remote_sender_id"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerAPIExtension]](p_instance).getRemoteSenderId().encode(r_ret)
  table["_object_configuration_add"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerAPIExtension]](p_instance).objectConfigurationAdd(p_args[0].decode(ptr Object), p_args[1].decode(ptr Variant)).encode(r_ret)
  table["_object_configuration_remove"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerAPIExtension]](p_instance).objectConfigurationRemove(p_args[0].decode(ptr Object), p_args[1].decode(ptr Variant)).encode(r_ret)

define_godot_engine_class_essencials(SceneMultiplayer, MultiplayerAPI)
define_godot_engine_class_essencials(EditorNode3DGizmo, Node3DGizmo)
method redraw*(self: Ref[EditorNode3DGizmo]) {.base.} = (discard)
method getHandleName*(self: Ref[EditorNode3DGizmo]; id: int32; secondary: Bool): String {.base.} = (discard)
method isHandleHighlighted*(self: Ref[EditorNode3DGizmo]; id: int32; secondary: Bool): Bool {.base.} = (discard)
method getHandleValue*(self: Ref[EditorNode3DGizmo]; id: int32; secondary: Bool): Variant {.base.} = (discard)
method setHandle*(self: Ref[EditorNode3DGizmo]; id: int32; secondary: Bool; camera: Camera3D; point: Vector2) {.base.} = (discard)
method commitHandle*(self: Ref[EditorNode3DGizmo]; id: int32; secondary: Bool; restore: ptr Variant; cancel: Bool) {.base.} = (discard)
method subgizmosIntersectRay*(self: Ref[EditorNode3DGizmo]; camera: Camera3D; point: Vector2): int32 {.base.} = (discard)
method subgizmosIntersectFrustum*(self: Ref[EditorNode3DGizmo]; camera: Camera3D; frustum: TypedArray[Plane]): PackedInt32Array {.base.} = (discard)
method setSubgizmoTransform*(self: Ref[EditorNode3DGizmo]; id: int32; transform: Transform3D) {.base.} = (discard)
method getSubgizmoTransform*(self: Ref[EditorNode3DGizmo]; id: int32): Transform3D {.base.} = (discard)
method commitSubgizmos*(self: Ref[EditorNode3DGizmo]; ids: PackedInt32Array; restores: TypedArray[Transform3D]; cancel: Bool) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorNode3DGizmo]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_redraw"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmo]](p_instance).redraw()
  table["_get_handle_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmo]](p_instance).getHandleName(p_args[0].decode(int32), p_args[1].decode(Bool)).encode(r_ret)
  table["_is_handle_highlighted"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmo]](p_instance).isHandleHighlighted(p_args[0].decode(int32), p_args[1].decode(Bool)).encode(r_ret)
  table["_get_handle_value"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmo]](p_instance).getHandleValue(p_args[0].decode(int32), p_args[1].decode(Bool)).encode(r_ret)
  table["_set_handle"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmo]](p_instance).setHandle(p_args[0].decode(int32), p_args[1].decode(Bool), p_args[2].decode(Camera3D), p_args[3].decode(Vector2))
  table["_commit_handle"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmo]](p_instance).commitHandle(p_args[0].decode(int32), p_args[1].decode(Bool), p_args[2].decode(ptr Variant), p_args[3].decode(Bool))
  table["_subgizmos_intersect_ray"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmo]](p_instance).subgizmosIntersectRay(p_args[0].decode(Camera3D), p_args[1].decode(Vector2)).encode(r_ret)
  table["_subgizmos_intersect_frustum"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmo]](p_instance).subgizmosIntersectFrustum(p_args[0].decode(Camera3D), p_args[1].decode(TypedArray[Plane])).encode(r_ret)
  table["_set_subgizmo_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmo]](p_instance).setSubgizmoTransform(p_args[0].decode(int32), p_args[1].decode(Transform3D))
  table["_get_subgizmo_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmo]](p_instance).getSubgizmoTransform(p_args[0].decode(int32)).encode(r_ret)
  table["_commit_subgizmos"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmo]](p_instance).commitSubgizmos(p_args[0].decode(PackedInt32Array), p_args[1].decode(TypedArray[Transform3D]), p_args[2].decode(Bool))

define_godot_engine_class_essencials(ENetPacketPeer, PacketPeer)
define_godot_engine_class_essencials(MultiplayerPeer, PacketPeer)
define_godot_engine_class_essencials(PacketPeerDTLS, PacketPeer)
define_godot_engine_class_essencials(PacketPeerExtension, PacketPeer)
method getPacket*(self: Ref[PacketPeerExtension]; rBuffer: ptr ptr uint8; rBufferSize: ptr int32): Error {.base.} = (discard)
method putPacket*(self: Ref[PacketPeerExtension]; pBuffer: ptr uint8; pBufferSize: int32): Error {.base.} = (discard)
method getAvailablePacketCount*(self: Ref[PacketPeerExtension]): int32 {.base.} = (discard)
method getMaxPacketSize*(self: Ref[PacketPeerExtension]): int32 {.base.} = (discard)
proc bind_virtuals*(S: typedesc[PacketPeerExtension]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_packet"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[PacketPeerExtension]](p_instance).getPacket(p_args[0].decode(ptr ptr uint8), p_args[1].decode(ptr int32)).encode(r_ret)
  table["_put_packet"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[PacketPeerExtension]](p_instance).putPacket(p_args[0].decode(ptr uint8), p_args[1].decode(int32)).encode(r_ret)
  table["_get_available_packet_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[PacketPeerExtension]](p_instance).getAvailablePacketCount().encode(r_ret)
  table["_get_max_packet_size"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[PacketPeerExtension]](p_instance).getMaxPacketSize().encode(r_ret)

define_godot_engine_class_essencials(PacketPeerStream, PacketPeer)
define_godot_engine_class_essencials(PacketPeerUDP, PacketPeer)
define_godot_engine_class_essencials(WebRTCDataChannel, PacketPeer)
define_godot_engine_class_essencials(WebSocketPeer, PacketPeer)
define_godot_engine_class_essencials(Animation, Resource)
define_godot_engine_class_essencials(AnimationLibrary, Resource)
define_godot_engine_class_essencials(AnimationNode, Resource)
method getChildNodes*(self: Ref[AnimationNode]): Dictionary {.base.} = (discard)
method getParameterList*(self: Ref[AnimationNode]): Array {.base.} = (discard)
method getChildByName*(self: Ref[AnimationNode]; name: StringName): Ref[AnimationNode] {.base.} = (discard)
method getParameterDefaultValue*(self: Ref[AnimationNode]; parameter: StringName): Variant {.base.} = (discard)
method isParameterReadOnly*(self: Ref[AnimationNode]; parameter: StringName): Bool {.base.} = (discard)
method process*(self: Ref[AnimationNode]; time: float64; seek: Bool; isExternalSeeking: Bool; testOnly: Bool): float64 {.base.} = (discard)
method getCaption*(self: Ref[AnimationNode]): String {.base.} = (discard)
method hasFilter*(self: Ref[AnimationNode]): Bool {.base.} = (discard)
proc bind_virtuals*(S: typedesc[AnimationNode]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_child_nodes"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AnimationNode]](p_instance).getChildNodes().encode(r_ret)
  table["_get_parameter_list"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AnimationNode]](p_instance).getParameterList().encode(r_ret)
  table["_get_child_by_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AnimationNode]](p_instance).getChildByName(p_args[0].decode(StringName)).encode(r_ret)
  table["_get_parameter_default_value"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AnimationNode]](p_instance).getParameterDefaultValue(p_args[0].decode(StringName)).encode(r_ret)
  table["_is_parameter_read_only"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AnimationNode]](p_instance).isParameterReadOnly(p_args[0].decode(StringName)).encode(r_ret)
  table["_process"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AnimationNode]](p_instance).process(p_args[0].decode(float64), p_args[1].decode(Bool), p_args[2].decode(Bool), p_args[3].decode(Bool)).encode(r_ret)
  table["_get_caption"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AnimationNode]](p_instance).getCaption().encode(r_ret)
  table["_has_filter"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AnimationNode]](p_instance).hasFilter().encode(r_ret)

define_godot_engine_class_essencials(AnimationNodeStateMachinePlayback, Resource)
define_godot_engine_class_essencials(AnimationNodeStateMachineTransition, Resource)
define_godot_engine_class_essencials(AudioBusLayout, Resource)
define_godot_engine_class_essencials(AudioEffect, Resource)
method instantiate*(self: Ref[AudioEffect]): Ref[AudioEffectInstance] {.base.} = (discard)
proc bind_virtuals*(S: typedesc[AudioEffect]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_instantiate"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AudioEffect]](p_instance).instantiate().encode(r_ret)

define_godot_engine_class_essencials(AudioStream, Resource)
method instantiatePlayback*(self: Ref[AudioStream]): Ref[AudioStreamPlayback] {.base.} = (discard)
method getStreamName*(self: Ref[AudioStream]): String {.base.} = (discard)
method getLength*(self: Ref[AudioStream]): float64 {.base.} = (discard)
method isMonophonic*(self: Ref[AudioStream]): Bool {.base.} = (discard)
method getBpm*(self: Ref[AudioStream]): float64 {.base.} = (discard)
method getBeatCount*(self: Ref[AudioStream]): int32 {.base.} = (discard)
proc bind_virtuals*(S: typedesc[AudioStream]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_instantiate_playback"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AudioStream]](p_instance).instantiatePlayback().encode(r_ret)
  table["_get_stream_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AudioStream]](p_instance).getStreamName().encode(r_ret)
  table["_get_length"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AudioStream]](p_instance).getLength().encode(r_ret)
  table["_is_monophonic"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AudioStream]](p_instance).isMonophonic().encode(r_ret)
  table["_get_bpm"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AudioStream]](p_instance).getBpm().encode(r_ret)
  table["_get_beat_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[AudioStream]](p_instance).getBeatCount().encode(r_ret)

define_godot_engine_class_essencials(BitMap, Resource)
define_godot_engine_class_essencials(BoneMap, Resource)
define_godot_engine_class_essencials(ButtonGroup, Resource)
define_godot_engine_class_essencials(CameraAttributes, Resource)
define_godot_engine_class_essencials(CryptoKey, Resource)
define_godot_engine_class_essencials(Curve, Resource)
define_godot_engine_class_essencials(Curve2D, Resource)
define_godot_engine_class_essencials(Curve3D, Resource)
define_godot_engine_class_essencials(EditorNode3DGizmoPlugin, Resource)
method hasGizmo*(self: Ref[EditorNode3DGizmoPlugin]; forNode3d: Node3D): Bool {.base.} = (discard)
method createGizmo*(self: Ref[EditorNode3DGizmoPlugin]; forNode3d: Node3D): Ref[EditorNode3DGizmo] {.base.} = (discard)
method getGizmoName*(self: Ref[EditorNode3DGizmoPlugin]): String {.base.} = (discard)
method getPriority*(self: Ref[EditorNode3DGizmoPlugin]): int32 {.base.} = (discard)
method canBeHidden*(self: Ref[EditorNode3DGizmoPlugin]): Bool {.base.} = (discard)
method isSelectableWhenHidden*(self: Ref[EditorNode3DGizmoPlugin]): Bool {.base.} = (discard)
method redraw*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]) {.base.} = (discard)
method getHandleName*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; handleId: int32; secondary: Bool): String {.base.} = (discard)
method isHandleHighlighted*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; handleId: int32; secondary: Bool): Bool {.base.} = (discard)
method getHandleValue*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; handleId: int32; secondary: Bool): Variant {.base.} = (discard)
method setHandle*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; handleId: int32; secondary: Bool; camera: Camera3D; screenPos: Vector2) {.base.} = (discard)
method commitHandle*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; handleId: int32; secondary: Bool; restore: ptr Variant; cancel: Bool) {.base.} = (discard)
method subgizmosIntersectRay*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; camera: Camera3D; screenPos: Vector2): int32 {.base.} = (discard)
method subgizmosIntersectFrustum*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; camera: Camera3D; frustumPlanes: TypedArray[Plane]): PackedInt32Array {.base.} = (discard)
method getSubgizmoTransform*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; subgizmoId: int32): Transform3D {.base.} = (discard)
method setSubgizmoTransform*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; subgizmoId: int32; transform: Transform3D) {.base.} = (discard)
method commitSubgizmos*(self: Ref[EditorNode3DGizmoPlugin]; gizmo: Ref[EditorNode3DGizmo]; ids: PackedInt32Array; restores: TypedArray[Transform3D]; cancel: Bool) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorNode3DGizmoPlugin]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_has_gizmo"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmoPlugin]](p_instance).hasGizmo(p_args[0].decode(Node3D)).encode(r_ret)
  table["_create_gizmo"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmoPlugin]](p_instance).createGizmo(p_args[0].decode(Node3D)).encode(r_ret)
  table["_get_gizmo_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmoPlugin]](p_instance).getGizmoName().encode(r_ret)
  table["_get_priority"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmoPlugin]](p_instance).getPriority().encode(r_ret)
  table["_can_be_hidden"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmoPlugin]](p_instance).canBeHidden().encode(r_ret)
  table["_is_selectable_when_hidden"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmoPlugin]](p_instance).isSelectableWhenHidden().encode(r_ret)
  table["_redraw"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmoPlugin]](p_instance).redraw(p_args[0].decode(Ref[EditorNode3DGizmo]))
  table["_get_handle_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmoPlugin]](p_instance).getHandleName(p_args[0].decode(Ref[EditorNode3DGizmo]), p_args[1].decode(int32), p_args[2].decode(Bool)).encode(r_ret)
  table["_is_handle_highlighted"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmoPlugin]](p_instance).isHandleHighlighted(p_args[0].decode(Ref[EditorNode3DGizmo]), p_args[1].decode(int32), p_args[2].decode(Bool)).encode(r_ret)
  table["_get_handle_value"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmoPlugin]](p_instance).getHandleValue(p_args[0].decode(Ref[EditorNode3DGizmo]), p_args[1].decode(int32), p_args[2].decode(Bool)).encode(r_ret)
  table["_set_handle"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmoPlugin]](p_instance).setHandle(p_args[0].decode(Ref[EditorNode3DGizmo]), p_args[1].decode(int32), p_args[2].decode(Bool), p_args[3].decode(Camera3D), p_args[4].decode(Vector2))
  table["_commit_handle"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmoPlugin]](p_instance).commitHandle(p_args[0].decode(Ref[EditorNode3DGizmo]), p_args[1].decode(int32), p_args[2].decode(Bool), p_args[3].decode(ptr Variant), p_args[4].decode(Bool))
  table["_subgizmos_intersect_ray"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmoPlugin]](p_instance).subgizmosIntersectRay(p_args[0].decode(Ref[EditorNode3DGizmo]), p_args[1].decode(Camera3D), p_args[2].decode(Vector2)).encode(r_ret)
  table["_subgizmos_intersect_frustum"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmoPlugin]](p_instance).subgizmosIntersectFrustum(p_args[0].decode(Ref[EditorNode3DGizmo]), p_args[1].decode(Camera3D), p_args[2].decode(TypedArray[Plane])).encode(r_ret)
  table["_get_subgizmo_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmoPlugin]](p_instance).getSubgizmoTransform(p_args[0].decode(Ref[EditorNode3DGizmo]), p_args[1].decode(int32)).encode(r_ret)
  table["_set_subgizmo_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmoPlugin]](p_instance).setSubgizmoTransform(p_args[0].decode(Ref[EditorNode3DGizmo]), p_args[1].decode(int32), p_args[2].decode(Transform3D))
  table["_commit_subgizmos"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorNode3DGizmoPlugin]](p_instance).commitSubgizmos(p_args[0].decode(Ref[EditorNode3DGizmo]), p_args[1].decode(PackedInt32Array), p_args[2].decode(TypedArray[Transform3D]), p_args[3].decode(Bool))

define_godot_engine_class_essencials(EditorSettings, Resource)
define_godot_engine_class_essencials(Environment, Resource)
define_godot_engine_class_essencials(Font, Resource)
define_godot_engine_class_essencials(GDExtension, Resource)
define_godot_engine_class_essencials(GLTFAccessor, Resource)
define_godot_engine_class_essencials(GLTFAnimation, Resource)
define_godot_engine_class_essencials(GLTFBufferView, Resource)
define_godot_engine_class_essencials(GLTFCamera, Resource)
define_godot_engine_class_essencials(GLTFDocument, Resource)
define_godot_engine_class_essencials(GLTFDocumentExtension, Resource)
method importPreflight*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; extensions: PackedStringArray): Error {.base.} = (discard)
method getSupportedExtensions*(self: Ref[GLTFDocumentExtension]): PackedStringArray {.base.} = (discard)
method parseNodeExtensions*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; gltfNode: Ref[GLTFNode]; extensions: Dictionary): Error {.base.} = (discard)
method parseImageData*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; imageData: PackedByteArray; mimeType: String; retImage: Ref[Image]): Error {.base.} = (discard)
method parseTextureJson*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; textureJson: Dictionary; retGltfTexture: Ref[GLTFTexture]): Error {.base.} = (discard)
method generateSceneNode*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; gltfNode: Ref[GLTFNode]; sceneParent: ptr Node): Node3D {.base.} = (discard)
method importPostParse*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]): Error {.base.} = (discard)
method importNode*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; gltfNode: Ref[GLTFNode]; json: Dictionary; node: ptr Node): Error {.base.} = (discard)
method importPost*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; root: ptr Node): Error {.base.} = (discard)
method exportPreflight*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; root: ptr Node): Error {.base.} = (discard)
method convertSceneNode*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; gltfNode: Ref[GLTFNode]; sceneNode: ptr Node) {.base.} = (discard)
method exportNode*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]; gltfNode: Ref[GLTFNode]; json: Dictionary; node: ptr Node): Error {.base.} = (discard)
method exportPost*(self: Ref[GLTFDocumentExtension]; state: Ref[GLTFState]): Error {.base.} = (discard)
proc bind_virtuals*(S: typedesc[GLTFDocumentExtension]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_import_preflight"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[GLTFDocumentExtension]](p_instance).importPreflight(p_args[0].decode(Ref[GLTFState]), p_args[1].decode(PackedStringArray)).encode(r_ret)
  table["_get_supported_extensions"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[GLTFDocumentExtension]](p_instance).getSupportedExtensions().encode(r_ret)
  table["_parse_node_extensions"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[GLTFDocumentExtension]](p_instance).parseNodeExtensions(p_args[0].decode(Ref[GLTFState]), p_args[1].decode(Ref[GLTFNode]), p_args[2].decode(Dictionary)).encode(r_ret)
  table["_parse_image_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[GLTFDocumentExtension]](p_instance).parseImageData(p_args[0].decode(Ref[GLTFState]), p_args[1].decode(PackedByteArray), p_args[2].decode(String), p_args[3].decode(Ref[Image])).encode(r_ret)
  table["_parse_texture_json"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[GLTFDocumentExtension]](p_instance).parseTextureJson(p_args[0].decode(Ref[GLTFState]), p_args[1].decode(Dictionary), p_args[2].decode(Ref[GLTFTexture])).encode(r_ret)
  table["_generate_scene_node"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[GLTFDocumentExtension]](p_instance).generateSceneNode(p_args[0].decode(Ref[GLTFState]), p_args[1].decode(Ref[GLTFNode]), p_args[2].decode(ptr Node)).encode(r_ret)
  table["_import_post_parse"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[GLTFDocumentExtension]](p_instance).importPostParse(p_args[0].decode(Ref[GLTFState])).encode(r_ret)
  table["_import_node"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[GLTFDocumentExtension]](p_instance).importNode(p_args[0].decode(Ref[GLTFState]), p_args[1].decode(Ref[GLTFNode]), p_args[2].decode(Dictionary), p_args[3].decode(ptr Node)).encode(r_ret)
  table["_import_post"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[GLTFDocumentExtension]](p_instance).importPost(p_args[0].decode(Ref[GLTFState]), p_args[1].decode(ptr Node)).encode(r_ret)
  table["_export_preflight"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[GLTFDocumentExtension]](p_instance).exportPreflight(p_args[0].decode(Ref[GLTFState]), p_args[1].decode(ptr Node)).encode(r_ret)
  table["_convert_scene_node"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[GLTFDocumentExtension]](p_instance).convertSceneNode(p_args[0].decode(Ref[GLTFState]), p_args[1].decode(Ref[GLTFNode]), p_args[2].decode(ptr Node))
  table["_export_node"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[GLTFDocumentExtension]](p_instance).exportNode(p_args[0].decode(Ref[GLTFState]), p_args[1].decode(Ref[GLTFNode]), p_args[2].decode(Dictionary), p_args[3].decode(ptr Node)).encode(r_ret)
  table["_export_post"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[GLTFDocumentExtension]](p_instance).exportPost(p_args[0].decode(Ref[GLTFState])).encode(r_ret)

define_godot_engine_class_essencials(GLTFLight, Resource)
define_godot_engine_class_essencials(GLTFMesh, Resource)
define_godot_engine_class_essencials(GLTFNode, Resource)
define_godot_engine_class_essencials(GLTFPhysicsBody, Resource)
define_godot_engine_class_essencials(GLTFPhysicsShape, Resource)
define_godot_engine_class_essencials(GLTFSkeleton, Resource)
define_godot_engine_class_essencials(GLTFSkin, Resource)
define_godot_engine_class_essencials(GLTFSpecGloss, Resource)
define_godot_engine_class_essencials(GLTFState, Resource)
define_godot_engine_class_essencials(GLTFTexture, Resource)
define_godot_engine_class_essencials(GLTFTextureSampler, Resource)
define_godot_engine_class_essencials(Gradient, Resource)
define_godot_engine_class_essencials(Image, Resource)
define_godot_engine_class_essencials(ImporterMesh, Resource)
define_godot_engine_class_essencials(InputEvent, Resource)
define_godot_engine_class_essencials(JSON, Resource)
define_godot_engine_class_essencials(LabelSettings, Resource)
define_godot_engine_class_essencials(LightmapGIData, Resource)
define_godot_engine_class_essencials(Material, Resource)
method getShaderRid*(self: Ref[Material]): RID {.base.} = (discard)
method getShaderMode*(self: Ref[Material]): Shader_Mode {.base.} = (discard)
method canDoNextPass*(self: Ref[Material]): Bool {.base.} = (discard)
method canUseRenderPriority*(self: Ref[Material]): Bool {.base.} = (discard)
proc bind_virtuals*(S: typedesc[Material]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_shader_rid"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Material]](p_instance).getShaderRid().encode(r_ret)
  table["_get_shader_mode"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Material]](p_instance).getShaderMode().encode(r_ret)
  table["_can_do_next_pass"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Material]](p_instance).canDoNextPass().encode(r_ret)
  table["_can_use_render_priority"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Material]](p_instance).canUseRenderPriority().encode(r_ret)

define_godot_engine_class_essencials(Mesh, Resource)
method getSurfaceCount*(self: Ref[Mesh]): int32 {.base.} = (discard)
method surfaceGetArrayLen*(self: Ref[Mesh]; index: int32): int32 {.base.} = (discard)
method surfaceGetArrayIndexLen*(self: Ref[Mesh]; index: int32): int32 {.base.} = (discard)
method surfaceGetArrays*(self: Ref[Mesh]; index: int32): Array {.base.} = (discard)
method surfaceGetBlendShapeArrays*(self: Ref[Mesh]; index: int32): TypedArray[Array] {.base.} = (discard)
method surfaceGetLods*(self: Ref[Mesh]; index: int32): Dictionary {.base.} = (discard)
method surfaceGetFormat*(self: Ref[Mesh]; index: int32): uint32 {.base.} = (discard)
method surfaceGetPrimitiveType*(self: Ref[Mesh]; index: int32): uint32 {.base.} = (discard)
method surfaceSetMaterial*(self: Ref[Mesh]; index: int32; material: Ref[Material]) {.base.} = (discard)
method surfaceGetMaterial*(self: Ref[Mesh]; index: int32): Ref[Material] {.base.} = (discard)
method getBlendShapeCount*(self: Ref[Mesh]): int32 {.base.} = (discard)
method getBlendShapeName*(self: Ref[Mesh]; index: int32): StringName {.base.} = (discard)
method setBlendShapeName*(self: Ref[Mesh]; index: int32; name: StringName) {.base.} = (discard)
method getAabb*(self: Ref[Mesh]): AABB {.base.} = (discard)
proc bind_virtuals*(S: typedesc[Mesh]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_surface_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Mesh]](p_instance).getSurfaceCount().encode(r_ret)
  table["_surface_get_array_len"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Mesh]](p_instance).surfaceGetArrayLen(p_args[0].decode(int32)).encode(r_ret)
  table["_surface_get_array_index_len"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Mesh]](p_instance).surfaceGetArrayIndexLen(p_args[0].decode(int32)).encode(r_ret)
  table["_surface_get_arrays"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Mesh]](p_instance).surfaceGetArrays(p_args[0].decode(int32)).encode(r_ret)
  table["_surface_get_blend_shape_arrays"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Mesh]](p_instance).surfaceGetBlendShapeArrays(p_args[0].decode(int32)).encode(r_ret)
  table["_surface_get_lods"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Mesh]](p_instance).surfaceGetLods(p_args[0].decode(int32)).encode(r_ret)
  table["_surface_get_format"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Mesh]](p_instance).surfaceGetFormat(p_args[0].decode(int32)).encode(r_ret)
  table["_surface_get_primitive_type"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Mesh]](p_instance).surfaceGetPrimitiveType(p_args[0].decode(int32)).encode(r_ret)
  table["_surface_set_material"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Mesh]](p_instance).surfaceSetMaterial(p_args[0].decode(int32), p_args[1].decode(Ref[Material]))
  table["_surface_get_material"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Mesh]](p_instance).surfaceGetMaterial(p_args[0].decode(int32)).encode(r_ret)
  table["_get_blend_shape_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Mesh]](p_instance).getBlendShapeCount().encode(r_ret)
  table["_get_blend_shape_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Mesh]](p_instance).getBlendShapeName(p_args[0].decode(int32)).encode(r_ret)
  table["_set_blend_shape_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Mesh]](p_instance).setBlendShapeName(p_args[0].decode(int32), p_args[1].decode(StringName))
  table["_get_aabb"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Mesh]](p_instance).getAabb().encode(r_ret)

define_godot_engine_class_essencials(MeshLibrary, Resource)
define_godot_engine_class_essencials(MissingResource, Resource)
define_godot_engine_class_essencials(MultiMesh, Resource)
define_godot_engine_class_essencials(NavigationMesh, Resource)
define_godot_engine_class_essencials(NavigationMeshSourceGeometryData3D, Resource)
define_godot_engine_class_essencials(NavigationPolygon, Resource)
define_godot_engine_class_essencials(Noise, Resource)
define_godot_engine_class_essencials(Occluder3D, Resource)
define_godot_engine_class_essencials(OccluderPolygon2D, Resource)
define_godot_engine_class_essencials(OggPacketSequence, Resource)
define_godot_engine_class_essencials(OpenXRAction, Resource)
define_godot_engine_class_essencials(OpenXRActionMap, Resource)
define_godot_engine_class_essencials(OpenXRActionSet, Resource)
define_godot_engine_class_essencials(OpenXRIPBinding, Resource)
define_godot_engine_class_essencials(OpenXRInteractionProfile, Resource)
define_godot_engine_class_essencials(PackedDataContainer, Resource)
define_godot_engine_class_essencials(PackedScene, Resource)
define_godot_engine_class_essencials(PhysicsMaterial, Resource)
define_godot_engine_class_essencials(PolygonPathFinder, Resource)
define_godot_engine_class_essencials(RDShaderFile, Resource)
define_godot_engine_class_essencials(RDShaderSPIRV, Resource)
define_godot_engine_class_essencials(RichTextEffect, Resource)
method processCustomFx*(self: Ref[RichTextEffect]; charFx: Ref[CharFXTransform]): Bool {.base.} = (discard)
proc bind_virtuals*(S: typedesc[RichTextEffect]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_process_custom_fx"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[RichTextEffect]](p_instance).processCustomFx(p_args[0].decode(Ref[CharFXTransform])).encode(r_ret)

define_godot_engine_class_essencials(SceneReplicationConfig, Resource)
define_godot_engine_class_essencials(Script, Resource)
define_godot_engine_class_essencials(Shader, Resource)
define_godot_engine_class_essencials(ShaderInclude, Resource)
define_godot_engine_class_essencials(Shape2D, Resource)
define_godot_engine_class_essencials(Shape3D, Resource)
define_godot_engine_class_essencials(Shortcut, Resource)
define_godot_engine_class_essencials(SkeletonModification2D, Resource)
method execute*(self: Ref[SkeletonModification2D]; delta: float64) {.base.} = (discard)
method setupModification*(self: Ref[SkeletonModification2D]; modificationStack: Ref[SkeletonModificationStack2D]) {.base.} = (discard)
method drawEditorGizmo*(self: Ref[SkeletonModification2D]) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[SkeletonModification2D]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_execute"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[SkeletonModification2D]](p_instance).execute(p_args[0].decode(float64))
  table["_setup_modification"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[SkeletonModification2D]](p_instance).setupModification(p_args[0].decode(Ref[SkeletonModificationStack2D]))
  table["_draw_editor_gizmo"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[SkeletonModification2D]](p_instance).drawEditorGizmo()

define_godot_engine_class_essencials(SkeletonModificationStack2D, Resource)
define_godot_engine_class_essencials(SkeletonProfile, Resource)
define_godot_engine_class_essencials(Skin, Resource)
define_godot_engine_class_essencials(Sky, Resource)
define_godot_engine_class_essencials(SpriteFrames, Resource)
define_godot_engine_class_essencials(StyleBox, Resource)
method draw*(self: Ref[StyleBox]; toCanvasItem: RID; rect: Rect2) {.base.} = (discard)
method getDrawRect*(self: Ref[StyleBox]; rect: Rect2): Rect2 {.base.} = (discard)
method getMinimumSize*(self: Ref[StyleBox]): Vector2 {.base.} = (discard)
method testMask*(self: Ref[StyleBox]; point: Vector2; rect: Rect2): Bool {.base.} = (discard)
proc bind_virtuals*(S: typedesc[StyleBox]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_draw"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[StyleBox]](p_instance).draw(p_args[0].decode(RID), p_args[1].decode(Rect2))
  table["_get_draw_rect"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[StyleBox]](p_instance).getDrawRect(p_args[0].decode(Rect2)).encode(r_ret)
  table["_get_minimum_size"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[StyleBox]](p_instance).getMinimumSize().encode(r_ret)
  table["_test_mask"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[StyleBox]](p_instance).testMask(p_args[0].decode(Vector2), p_args[1].decode(Rect2)).encode(r_ret)

define_godot_engine_class_essencials(SyntaxHighlighter, Resource)
method getLineSyntaxHighlighting*(self: Ref[SyntaxHighlighter]; line: int32): Dictionary {.base.} = (discard)
method clearHighlightingCache*(self: Ref[SyntaxHighlighter]) {.base.} = (discard)
method updateCache*(self: Ref[SyntaxHighlighter]) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[SyntaxHighlighter]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_line_syntax_highlighting"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[SyntaxHighlighter]](p_instance).getLineSyntaxHighlighting(p_args[0].decode(int32)).encode(r_ret)
  table["_clear_highlighting_cache"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[SyntaxHighlighter]](p_instance).clearHighlightingCache()
  table["_update_cache"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[SyntaxHighlighter]](p_instance).updateCache()

define_godot_engine_class_essencials(Texture, Resource)
define_godot_engine_class_essencials(Theme, Resource)
define_godot_engine_class_essencials(TileMapPattern, Resource)
define_godot_engine_class_essencials(TileSet, Resource)
define_godot_engine_class_essencials(TileSetSource, Resource)
define_godot_engine_class_essencials(Translation, Resource)
method getPluralMessage*(self: Ref[Translation]; srcMessage: StringName; srcPluralMessage: StringName; n: int32; context: StringName): StringName {.base.} = (discard)
method getMessage*(self: Ref[Translation]; srcMessage: StringName; context: StringName): StringName {.base.} = (discard)
proc bind_virtuals*(S: typedesc[Translation]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_plural_message"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Translation]](p_instance).getPluralMessage(p_args[0].decode(StringName), p_args[1].decode(StringName), p_args[2].decode(int32), p_args[3].decode(StringName)).encode(r_ret)
  table["_get_message"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Translation]](p_instance).getMessage(p_args[0].decode(StringName), p_args[1].decode(StringName)).encode(r_ret)

define_godot_engine_class_essencials(VideoStream, Resource)
method instantiatePlayback*(self: Ref[VideoStream]): Ref[VideoStreamPlayback] {.base.} = (discard)
proc bind_virtuals*(S: typedesc[VideoStream]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_instantiate_playback"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VideoStream]](p_instance).instantiatePlayback().encode(r_ret)

define_godot_engine_class_essencials(VideoStreamPlayback, Resource)
method stop*(self: Ref[VideoStreamPlayback]) {.base.} = (discard)
method play*(self: Ref[VideoStreamPlayback]) {.base.} = (discard)
method isPlaying*(self: Ref[VideoStreamPlayback]): Bool {.base.} = (discard)
method setPaused*(self: Ref[VideoStreamPlayback]; paused: Bool) {.base.} = (discard)
method isPaused*(self: Ref[VideoStreamPlayback]): Bool {.base.} = (discard)
method getLength*(self: Ref[VideoStreamPlayback]): float64 {.base.} = (discard)
method getPlaybackPosition*(self: Ref[VideoStreamPlayback]): float64 {.base.} = (discard)
method seek*(self: Ref[VideoStreamPlayback]; time: float64) {.base.} = (discard)
method setAudioTrack*(self: Ref[VideoStreamPlayback]; idx: int32) {.base.} = (discard)
method getTexture*(self: Ref[VideoStreamPlayback]): Ref[Texture2D] {.base.} = (discard)
method update*(self: Ref[VideoStreamPlayback]; delta: float64) {.base.} = (discard)
method getChannels*(self: Ref[VideoStreamPlayback]): int32 {.base.} = (discard)
method getMixRate*(self: Ref[VideoStreamPlayback]): int32 {.base.} = (discard)
proc bind_virtuals*(S: typedesc[VideoStreamPlayback]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_stop"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VideoStreamPlayback]](p_instance).stop()
  table["_play"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VideoStreamPlayback]](p_instance).play()
  table["_is_playing"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VideoStreamPlayback]](p_instance).isPlaying().encode(r_ret)
  table["_set_paused"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VideoStreamPlayback]](p_instance).setPaused(p_args[0].decode(Bool))
  table["_is_paused"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VideoStreamPlayback]](p_instance).isPaused().encode(r_ret)
  table["_get_length"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VideoStreamPlayback]](p_instance).getLength().encode(r_ret)
  table["_get_playback_position"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VideoStreamPlayback]](p_instance).getPlaybackPosition().encode(r_ret)
  table["_seek"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VideoStreamPlayback]](p_instance).seek(p_args[0].decode(float64))
  table["_set_audio_track"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VideoStreamPlayback]](p_instance).setAudioTrack(p_args[0].decode(int32))
  table["_get_texture"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VideoStreamPlayback]](p_instance).getTexture().encode(r_ret)
  table["_update"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VideoStreamPlayback]](p_instance).update(p_args[0].decode(float64))
  table["_get_channels"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VideoStreamPlayback]](p_instance).getChannels().encode(r_ret)
  table["_get_mix_rate"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VideoStreamPlayback]](p_instance).getMixRate().encode(r_ret)

define_godot_engine_class_essencials(VisualShaderNode, Resource)
define_godot_engine_class_essencials(VoxelGIData, Resource)
define_godot_engine_class_essencials(World2D, Resource)
define_godot_engine_class_essencials(World3D, Resource)
define_godot_engine_class_essencials(X509Certificate, Resource)
define_godot_engine_class_essencials(ResourceFormatImporterSaver, ResourceFormatSaver)
define_godot_engine_class_essencials(EditorImportPlugin, ResourceImporter)
method getImporterName*(self: Ref[EditorImportPlugin]): String {.base.} = (discard)
method getVisibleName*(self: Ref[EditorImportPlugin]): String {.base.} = (discard)
method getPresetCount*(self: Ref[EditorImportPlugin]): int32 {.base.} = (discard)
method getPresetName*(self: Ref[EditorImportPlugin]; presetIndex: int32): String {.base.} = (discard)
method getRecognizedExtensions*(self: Ref[EditorImportPlugin]): PackedStringArray {.base.} = (discard)
method getImportOptions*(self: Ref[EditorImportPlugin]; path: String; presetIndex: int32): TypedArray[Dictionary] {.base.} = (discard)
method getSaveExtension*(self: Ref[EditorImportPlugin]): String {.base.} = (discard)
method getResourceType*(self: Ref[EditorImportPlugin]): String {.base.} = (discard)
method getPriority*(self: Ref[EditorImportPlugin]): Float {.base.} = (discard)
method getImportOrder*(self: Ref[EditorImportPlugin]): int32 {.base.} = (discard)
method getOptionVisibility*(self: Ref[EditorImportPlugin]; path: String; optionName: StringName; options: Dictionary): Bool {.base.} = (discard)
method `import`*(self: Ref[EditorImportPlugin]; sourceFile: String; savePath: String; options: Dictionary; platformVariants: TypedArray[String]; genFiles: TypedArray[String]): Error {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorImportPlugin]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_importer_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorImportPlugin]](p_instance).getImporterName().encode(r_ret)
  table["_get_visible_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorImportPlugin]](p_instance).getVisibleName().encode(r_ret)
  table["_get_preset_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorImportPlugin]](p_instance).getPresetCount().encode(r_ret)
  table["_get_preset_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorImportPlugin]](p_instance).getPresetName(p_args[0].decode(int32)).encode(r_ret)
  table["_get_recognized_extensions"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorImportPlugin]](p_instance).getRecognizedExtensions().encode(r_ret)
  table["_get_import_options"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorImportPlugin]](p_instance).getImportOptions(p_args[0].decode(String), p_args[1].decode(int32)).encode(r_ret)
  table["_get_save_extension"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorImportPlugin]](p_instance).getSaveExtension().encode(r_ret)
  table["_get_resource_type"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorImportPlugin]](p_instance).getResourceType().encode(r_ret)
  table["_get_priority"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorImportPlugin]](p_instance).getPriority().encode(r_ret)
  table["_get_import_order"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorImportPlugin]](p_instance).getImportOrder().encode(r_ret)
  table["_get_option_visibility"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorImportPlugin]](p_instance).getOptionVisibility(p_args[0].decode(String), p_args[1].decode(StringName), p_args[2].decode(Dictionary)).encode(r_ret)
  table["_import"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorImportPlugin]](p_instance).`import`(p_args[0].decode(String), p_args[1].decode(String), p_args[2].decode(Dictionary), p_args[3].decode(TypedArray[String]), p_args[4].decode(TypedArray[String])).encode(r_ret)

define_godot_engine_class_essencials(StreamPeerBuffer, StreamPeer)
define_godot_engine_class_essencials(StreamPeerExtension, StreamPeer)
method getData*(self: Ref[StreamPeerExtension]; rBuffer: ptr uint8; rBytes: int32; rReceived: ptr int32): Error {.base.} = (discard)
method getPartialData*(self: Ref[StreamPeerExtension]; rBuffer: ptr uint8; rBytes: int32; rReceived: ptr int32): Error {.base.} = (discard)
method putData*(self: Ref[StreamPeerExtension]; pData: ptr uint8; pBytes: int32; rSent: ptr int32): Error {.base.} = (discard)
method putPartialData*(self: Ref[StreamPeerExtension]; pData: ptr uint8; pBytes: int32; rSent: ptr int32): Error {.base.} = (discard)
method getAvailableBytes*(self: Ref[StreamPeerExtension]): int32 {.base.} = (discard)
proc bind_virtuals*(S: typedesc[StreamPeerExtension]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[StreamPeerExtension]](p_instance).getData(p_args[0].decode(ptr uint8), p_args[1].decode(int32), p_args[2].decode(ptr int32)).encode(r_ret)
  table["_get_partial_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[StreamPeerExtension]](p_instance).getPartialData(p_args[0].decode(ptr uint8), p_args[1].decode(int32), p_args[2].decode(ptr int32)).encode(r_ret)
  table["_put_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[StreamPeerExtension]](p_instance).putData(p_args[0].decode(ptr uint8), p_args[1].decode(int32), p_args[2].decode(ptr int32)).encode(r_ret)
  table["_put_partial_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[StreamPeerExtension]](p_instance).putPartialData(p_args[0].decode(ptr uint8), p_args[1].decode(int32), p_args[2].decode(ptr int32)).encode(r_ret)
  table["_get_available_bytes"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[StreamPeerExtension]](p_instance).getAvailableBytes().encode(r_ret)

define_godot_engine_class_essencials(StreamPeerGZIP, StreamPeer)
define_godot_engine_class_essencials(StreamPeerTCP, StreamPeer)
define_godot_engine_class_essencials(StreamPeerTLS, StreamPeer)
define_godot_engine_class_essencials(TextServerExtension, TextServer)
method hasFeature*(self: Ref[TextServerExtension]; feature: TextServer_Feature): Bool {.base.} = (discard)
method getName*(self: Ref[TextServerExtension]): String {.base.} = (discard)
method getFeatures*(self: Ref[TextServerExtension]): int64 {.base.} = (discard)
method freeRid*(self: Ref[TextServerExtension]; rid: RID) {.base.} = (discard)
method has*(self: Ref[TextServerExtension]; rid: RID): Bool {.base.} = (discard)
method loadSupportData*(self: Ref[TextServerExtension]; filename: String): Bool {.base.} = (discard)
method getSupportDataFilename*(self: Ref[TextServerExtension]): String {.base.} = (discard)
method getSupportDataInfo*(self: Ref[TextServerExtension]): String {.base.} = (discard)
method saveSupportData*(self: Ref[TextServerExtension]; filename: String): Bool {.base.} = (discard)
method isLocaleRightToLeft*(self: Ref[TextServerExtension]; locale: String): Bool {.base.} = (discard)
method nameToTag*(self: Ref[TextServerExtension]; name: String): int64 {.base.} = (discard)
method tagToName*(self: Ref[TextServerExtension]; tag: int64): String {.base.} = (discard)
method createFont*(self: Ref[TextServerExtension]): RID {.base.} = (discard)
method fontSetData*(self: Ref[TextServerExtension]; fontRid: RID; data: PackedByteArray) {.base.} = (discard)
method fontSetDataPtr*(self: Ref[TextServerExtension]; fontRid: RID; dataPtr: ptr uint8; dataSize: int64) {.base.} = (discard)
method fontSetFaceIndex*(self: Ref[TextServerExtension]; fontRid: RID; faceIndex: int64) {.base.} = (discard)
method fontGetFaceIndex*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontGetFaceCount*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontSetStyle*(self: Ref[TextServerExtension]; fontRid: RID; style: set[TextServer_FontStyle]) {.base.} = (discard)
method fontGetStyle*(self: Ref[TextServerExtension]; fontRid: RID): set[TextServer_FontStyle] {.base.} = (discard)
method fontSetName*(self: Ref[TextServerExtension]; fontRid: RID; name: String) {.base.} = (discard)
method fontGetName*(self: Ref[TextServerExtension]; fontRid: RID): String {.base.} = (discard)
method fontGetOtNameStrings*(self: Ref[TextServerExtension]; fontRid: RID): Dictionary {.base.} = (discard)
method fontSetStyleName*(self: Ref[TextServerExtension]; fontRid: RID; nameStyle: String) {.base.} = (discard)
method fontGetStyleName*(self: Ref[TextServerExtension]; fontRid: RID): String {.base.} = (discard)
method fontSetWeight*(self: Ref[TextServerExtension]; fontRid: RID; weight: int64) {.base.} = (discard)
method fontGetWeight*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontSetStretch*(self: Ref[TextServerExtension]; fontRid: RID; stretch: int64) {.base.} = (discard)
method fontGetStretch*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontSetAntialiasing*(self: Ref[TextServerExtension]; fontRid: RID; antialiasing: TextServer_FontAntialiasing) {.base.} = (discard)
method fontGetAntialiasing*(self: Ref[TextServerExtension]; fontRid: RID): TextServer_FontAntialiasing {.base.} = (discard)
method fontSetGenerateMipmaps*(self: Ref[TextServerExtension]; fontRid: RID; generateMipmaps: Bool) {.base.} = (discard)
method fontGetGenerateMipmaps*(self: Ref[TextServerExtension]; fontRid: RID): Bool {.base.} = (discard)
method fontSetMultichannelSignedDistanceField*(self: Ref[TextServerExtension]; fontRid: RID; msdf: Bool) {.base.} = (discard)
method fontIsMultichannelSignedDistanceField*(self: Ref[TextServerExtension]; fontRid: RID): Bool {.base.} = (discard)
method fontSetMsdfPixelRange*(self: Ref[TextServerExtension]; fontRid: RID; msdfPixelRange: int64) {.base.} = (discard)
method fontGetMsdfPixelRange*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontSetMsdfSize*(self: Ref[TextServerExtension]; fontRid: RID; msdfSize: int64) {.base.} = (discard)
method fontGetMsdfSize*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontSetFixedSize*(self: Ref[TextServerExtension]; fontRid: RID; fixedSize: int64) {.base.} = (discard)
method fontGetFixedSize*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontSetAllowSystemFallback*(self: Ref[TextServerExtension]; fontRid: RID; allowSystemFallback: Bool) {.base.} = (discard)
method fontIsAllowSystemFallback*(self: Ref[TextServerExtension]; fontRid: RID): Bool {.base.} = (discard)
method fontSetForceAutohinter*(self: Ref[TextServerExtension]; fontRid: RID; forceAutohinter: Bool) {.base.} = (discard)
method fontIsForceAutohinter*(self: Ref[TextServerExtension]; fontRid: RID): Bool {.base.} = (discard)
method fontSetHinting*(self: Ref[TextServerExtension]; fontRid: RID; hinting: TextServer_Hinting) {.base.} = (discard)
method fontGetHinting*(self: Ref[TextServerExtension]; fontRid: RID): TextServer_Hinting {.base.} = (discard)
method fontSetSubpixelPositioning*(self: Ref[TextServerExtension]; fontRid: RID; subpixelPositioning: TextServer_SubpixelPositioning) {.base.} = (discard)
method fontGetSubpixelPositioning*(self: Ref[TextServerExtension]; fontRid: RID): TextServer_SubpixelPositioning {.base.} = (discard)
method fontSetEmbolden*(self: Ref[TextServerExtension]; fontRid: RID; strength: float64) {.base.} = (discard)
method fontGetEmbolden*(self: Ref[TextServerExtension]; fontRid: RID): float64 {.base.} = (discard)
method fontSetTransform*(self: Ref[TextServerExtension]; fontRid: RID; transform: Transform2D) {.base.} = (discard)
method fontGetTransform*(self: Ref[TextServerExtension]; fontRid: RID): Transform2D {.base.} = (discard)
method fontSetVariationCoordinates*(self: Ref[TextServerExtension]; fontRid: RID; variationCoordinates: Dictionary) {.base.} = (discard)
method fontGetVariationCoordinates*(self: Ref[TextServerExtension]; fontRid: RID): Dictionary {.base.} = (discard)
method fontSetOversampling*(self: Ref[TextServerExtension]; fontRid: RID; oversampling: float64) {.base.} = (discard)
method fontGetOversampling*(self: Ref[TextServerExtension]; fontRid: RID): float64 {.base.} = (discard)
method fontGetSizeCacheList*(self: Ref[TextServerExtension]; fontRid: RID): TypedArray[Vector2i] {.base.} = (discard)
method fontClearSizeCache*(self: Ref[TextServerExtension]; fontRid: RID) {.base.} = (discard)
method fontRemoveSizeCache*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i) {.base.} = (discard)
method fontSetAscent*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; ascent: float64) {.base.} = (discard)
method fontGetAscent*(self: Ref[TextServerExtension]; fontRid: RID; size: int64): float64 {.base.} = (discard)
method fontSetDescent*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; descent: float64) {.base.} = (discard)
method fontGetDescent*(self: Ref[TextServerExtension]; fontRid: RID; size: int64): float64 {.base.} = (discard)
method fontSetUnderlinePosition*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; underlinePosition: float64) {.base.} = (discard)
method fontGetUnderlinePosition*(self: Ref[TextServerExtension]; fontRid: RID; size: int64): float64 {.base.} = (discard)
method fontSetUnderlineThickness*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; underlineThickness: float64) {.base.} = (discard)
method fontGetUnderlineThickness*(self: Ref[TextServerExtension]; fontRid: RID; size: int64): float64 {.base.} = (discard)
method fontSetScale*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; scale: float64) {.base.} = (discard)
method fontGetScale*(self: Ref[TextServerExtension]; fontRid: RID; size: int64): float64 {.base.} = (discard)
method fontGetTextureCount*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i): int64 {.base.} = (discard)
method fontClearTextures*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i) {.base.} = (discard)
method fontRemoveTexture*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; textureIndex: int64) {.base.} = (discard)
method fontSetTextureImage*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; textureIndex: int64; image: Ref[Image]) {.base.} = (discard)
method fontGetTextureImage*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; textureIndex: int64): Ref[Image] {.base.} = (discard)
method fontSetTextureOffsets*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; textureIndex: int64; offset: PackedInt32Array) {.base.} = (discard)
method fontGetTextureOffsets*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; textureIndex: int64): PackedInt32Array {.base.} = (discard)
method fontGetGlyphList*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i): PackedInt32Array {.base.} = (discard)
method fontClearGlyphs*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i) {.base.} = (discard)
method fontRemoveGlyph*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64) {.base.} = (discard)
method fontGetGlyphAdvance*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; glyph: int64): Vector2 {.base.} = (discard)
method fontSetGlyphAdvance*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; glyph: int64; advance: Vector2) {.base.} = (discard)
method fontGetGlyphOffset*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64): Vector2 {.base.} = (discard)
method fontSetGlyphOffset*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64; offset: Vector2) {.base.} = (discard)
method fontGetGlyphSize*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64): Vector2 {.base.} = (discard)
method fontSetGlyphSize*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64; glSize: Vector2) {.base.} = (discard)
method fontGetGlyphUvRect*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64): Rect2 {.base.} = (discard)
method fontSetGlyphUvRect*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64; uvRect: Rect2) {.base.} = (discard)
method fontGetGlyphTextureIdx*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64): int64 {.base.} = (discard)
method fontSetGlyphTextureIdx*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64; textureIdx: int64) {.base.} = (discard)
method fontGetGlyphTextureRid*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64): RID {.base.} = (discard)
method fontGetGlyphTextureSize*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64): Vector2 {.base.} = (discard)
method fontGetGlyphContours*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; index: int64): Dictionary {.base.} = (discard)
method fontGetKerningList*(self: Ref[TextServerExtension]; fontRid: RID; size: int64): TypedArray[Vector2i] {.base.} = (discard)
method fontClearKerningMap*(self: Ref[TextServerExtension]; fontRid: RID; size: int64) {.base.} = (discard)
method fontRemoveKerning*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; glyphPair: Vector2i) {.base.} = (discard)
method fontSetKerning*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; glyphPair: Vector2i; kerning: Vector2) {.base.} = (discard)
method fontGetKerning*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; glyphPair: Vector2i): Vector2 {.base.} = (discard)
method fontGetGlyphIndex*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; char: int64; variationSelector: int64): int64 {.base.} = (discard)
method fontGetCharFromGlyphIndex*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; glyphIndex: int64): int64 {.base.} = (discard)
method fontHasChar*(self: Ref[TextServerExtension]; fontRid: RID; char: int64): Bool {.base.} = (discard)
method fontGetSupportedChars*(self: Ref[TextServerExtension]; fontRid: RID): String {.base.} = (discard)
method fontRenderRange*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; start: int64; `end`: int64) {.base.} = (discard)
method fontRenderGlyph*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; index: int64) {.base.} = (discard)
method fontDrawGlyph*(self: Ref[TextServerExtension]; fontRid: RID; canvas: RID; size: int64; pos: Vector2; index: int64; color: Color) {.base.} = (discard)
method fontDrawGlyphOutline*(self: Ref[TextServerExtension]; fontRid: RID; canvas: RID; size: int64; outlineSize: int64; pos: Vector2; index: int64; color: Color) {.base.} = (discard)
method fontIsLanguageSupported*(self: Ref[TextServerExtension]; fontRid: RID; language: String): Bool {.base.} = (discard)
method fontSetLanguageSupportOverride*(self: Ref[TextServerExtension]; fontRid: RID; language: String; supported: Bool) {.base.} = (discard)
method fontGetLanguageSupportOverride*(self: Ref[TextServerExtension]; fontRid: RID; language: String): Bool {.base.} = (discard)
method fontRemoveLanguageSupportOverride*(self: Ref[TextServerExtension]; fontRid: RID; language: String) {.base.} = (discard)
method fontGetLanguageSupportOverrides*(self: Ref[TextServerExtension]; fontRid: RID): PackedStringArray {.base.} = (discard)
method fontIsScriptSupported*(self: Ref[TextServerExtension]; fontRid: RID; script: String): Bool {.base.} = (discard)
method fontSetScriptSupportOverride*(self: Ref[TextServerExtension]; fontRid: RID; script: String; supported: Bool) {.base.} = (discard)
method fontGetScriptSupportOverride*(self: Ref[TextServerExtension]; fontRid: RID; script: String): Bool {.base.} = (discard)
method fontRemoveScriptSupportOverride*(self: Ref[TextServerExtension]; fontRid: RID; script: String) {.base.} = (discard)
method fontGetScriptSupportOverrides*(self: Ref[TextServerExtension]; fontRid: RID): PackedStringArray {.base.} = (discard)
method fontSetOpentypeFeatureOverrides*(self: Ref[TextServerExtension]; fontRid: RID; overrides: Dictionary) {.base.} = (discard)
method fontGetOpentypeFeatureOverrides*(self: Ref[TextServerExtension]; fontRid: RID): Dictionary {.base.} = (discard)
method fontSupportedFeatureList*(self: Ref[TextServerExtension]; fontRid: RID): Dictionary {.base.} = (discard)
method fontSupportedVariationList*(self: Ref[TextServerExtension]; fontRid: RID): Dictionary {.base.} = (discard)
method fontGetGlobalOversampling*(self: Ref[TextServerExtension]): float64 {.base.} = (discard)
method fontSetGlobalOversampling*(self: Ref[TextServerExtension]; oversampling: float64) {.base.} = (discard)
method getHexCodeBoxSize*(self: Ref[TextServerExtension]; size: int64; index: int64): Vector2 {.base.} = (discard)
method drawHexCodeBox*(self: Ref[TextServerExtension]; canvas: RID; size: int64; pos: Vector2; index: int64; color: Color) {.base.} = (discard)
method createShapedText*(self: Ref[TextServerExtension]; direction: TextServer_Direction; orientation: TextServer_Orientation): RID {.base.} = (discard)
method shapedTextClear*(self: Ref[TextServerExtension]; shaped: RID) {.base.} = (discard)
method shapedTextSetDirection*(self: Ref[TextServerExtension]; shaped: RID; direction: TextServer_Direction) {.base.} = (discard)
method shapedTextGetDirection*(self: Ref[TextServerExtension]; shaped: RID): TextServer_Direction {.base.} = (discard)
method shapedTextGetInferredDirection*(self: Ref[TextServerExtension]; shaped: RID): TextServer_Direction {.base.} = (discard)
method shapedTextSetBidiOverride*(self: Ref[TextServerExtension]; shaped: RID; override: Array) {.base.} = (discard)
method shapedTextSetCustomPunctuation*(self: Ref[TextServerExtension]; shaped: RID; punct: String) {.base.} = (discard)
method shapedTextGetCustomPunctuation*(self: Ref[TextServerExtension]; shaped: RID): String {.base.} = (discard)
method shapedTextSetOrientation*(self: Ref[TextServerExtension]; shaped: RID; orientation: TextServer_Orientation) {.base.} = (discard)
method shapedTextGetOrientation*(self: Ref[TextServerExtension]; shaped: RID): TextServer_Orientation {.base.} = (discard)
method shapedTextSetPreserveInvalid*(self: Ref[TextServerExtension]; shaped: RID; enabled: Bool) {.base.} = (discard)
method shapedTextGetPreserveInvalid*(self: Ref[TextServerExtension]; shaped: RID): Bool {.base.} = (discard)
method shapedTextSetPreserveControl*(self: Ref[TextServerExtension]; shaped: RID; enabled: Bool) {.base.} = (discard)
method shapedTextGetPreserveControl*(self: Ref[TextServerExtension]; shaped: RID): Bool {.base.} = (discard)
method shapedTextSetSpacing*(self: Ref[TextServerExtension]; shaped: RID; spacing: TextServer_SpacingType; value: int64) {.base.} = (discard)
method shapedTextGetSpacing*(self: Ref[TextServerExtension]; shaped: RID; spacing: TextServer_SpacingType): int64 {.base.} = (discard)
method shapedTextAddString*(self: Ref[TextServerExtension]; shaped: RID; text: String; fonts: TypedArray[RID]; size: int64; opentypeFeatures: Dictionary; language: String; meta: ptr Variant): Bool {.base.} = (discard)
method shapedTextAddObject*(self: Ref[TextServerExtension]; shaped: RID; key: ptr Variant; size: Vector2; inlineAlign: InlineAlignment; length: int64; baseline: float64): Bool {.base.} = (discard)
method shapedTextResizeObject*(self: Ref[TextServerExtension]; shaped: RID; key: ptr Variant; size: Vector2; inlineAlign: InlineAlignment; baseline: float64): Bool {.base.} = (discard)
method shapedGetSpanCount*(self: Ref[TextServerExtension]; shaped: RID): int64 {.base.} = (discard)
method shapedGetSpanMeta*(self: Ref[TextServerExtension]; shaped: RID; index: int64): Variant {.base.} = (discard)
method shapedSetSpanUpdateFont*(self: Ref[TextServerExtension]; shaped: RID; index: int64; fonts: TypedArray[RID]; size: int64; opentypeFeatures: Dictionary) {.base.} = (discard)
method shapedTextSubstr*(self: Ref[TextServerExtension]; shaped: RID; start: int64; length: int64): RID {.base.} = (discard)
method shapedTextGetParent*(self: Ref[TextServerExtension]; shaped: RID): RID {.base.} = (discard)
method shapedTextFitToWidth*(self: Ref[TextServerExtension]; shaped: RID; width: float64; justificationFlags: set[TextServer_JustificationFlag]): float64 {.base.} = (discard)
method shapedTextTabAlign*(self: Ref[TextServerExtension]; shaped: RID; tabStops: PackedFloat32Array): float64 {.base.} = (discard)
method shapedTextShape*(self: Ref[TextServerExtension]; shaped: RID): Bool {.base.} = (discard)
method shapedTextUpdateBreaks*(self: Ref[TextServerExtension]; shaped: RID): Bool {.base.} = (discard)
method shapedTextUpdateJustificationOps*(self: Ref[TextServerExtension]; shaped: RID): Bool {.base.} = (discard)
method shapedTextIsReady*(self: Ref[TextServerExtension]; shaped: RID): Bool {.base.} = (discard)
method shapedTextGetGlyphs*(self: Ref[TextServerExtension]; shaped: RID): ptr Glyph {.base.} = (discard)
method shapedTextSortLogical*(self: Ref[TextServerExtension]; shaped: RID): ptr Glyph {.base.} = (discard)
method shapedTextGetGlyphCount*(self: Ref[TextServerExtension]; shaped: RID): int64 {.base.} = (discard)
method shapedTextGetRange*(self: Ref[TextServerExtension]; shaped: RID): Vector2i {.base.} = (discard)
method shapedTextGetLineBreaksAdv*(self: Ref[TextServerExtension]; shaped: RID; width: PackedFloat32Array; start: int64; once: Bool; breakFlags: set[TextServer_LineBreakFlag]): PackedInt32Array {.base.} = (discard)
method shapedTextGetLineBreaks*(self: Ref[TextServerExtension]; shaped: RID; width: float64; start: int64; breakFlags: set[TextServer_LineBreakFlag]): PackedInt32Array {.base.} = (discard)
method shapedTextGetWordBreaks*(self: Ref[TextServerExtension]; shaped: RID; graphemeFlags: set[TextServer_GraphemeFlag]): PackedInt32Array {.base.} = (discard)
method shapedTextGetTrimPos*(self: Ref[TextServerExtension]; shaped: RID): int64 {.base.} = (discard)
method shapedTextGetEllipsisPos*(self: Ref[TextServerExtension]; shaped: RID): int64 {.base.} = (discard)
method shapedTextGetEllipsisGlyphCount*(self: Ref[TextServerExtension]; shaped: RID): int64 {.base.} = (discard)
method shapedTextGetEllipsisGlyphs*(self: Ref[TextServerExtension]; shaped: RID): ptr Glyph {.base.} = (discard)
method shapedTextOverrunTrimToWidth*(self: Ref[TextServerExtension]; shaped: RID; width: float64; trimFlags: set[TextServer_TextOverrunFlag]) {.base.} = (discard)
method shapedTextGetObjects*(self: Ref[TextServerExtension]; shaped: RID): Array {.base.} = (discard)
method shapedTextGetObjectRect*(self: Ref[TextServerExtension]; shaped: RID; key: ptr Variant): Rect2 {.base.} = (discard)
method shapedTextGetSize*(self: Ref[TextServerExtension]; shaped: RID): Vector2 {.base.} = (discard)
method shapedTextGetAscent*(self: Ref[TextServerExtension]; shaped: RID): float64 {.base.} = (discard)
method shapedTextGetDescent*(self: Ref[TextServerExtension]; shaped: RID): float64 {.base.} = (discard)
method shapedTextGetWidth*(self: Ref[TextServerExtension]; shaped: RID): float64 {.base.} = (discard)
method shapedTextGetUnderlinePosition*(self: Ref[TextServerExtension]; shaped: RID): float64 {.base.} = (discard)
method shapedTextGetUnderlineThickness*(self: Ref[TextServerExtension]; shaped: RID): float64 {.base.} = (discard)
method shapedTextGetDominantDirectionInRange*(self: Ref[TextServerExtension]; shaped: RID; start: int64; `end`: int64): int64 {.base.} = (discard)
method shapedTextGetCarets*(self: Ref[TextServerExtension]; shaped: RID; position: int64; caret: ptr CaretInfo) {.base.} = (discard)
method shapedTextGetSelection*(self: Ref[TextServerExtension]; shaped: RID; start: int64; `end`: int64): PackedVector2Array {.base.} = (discard)
method shapedTextHitTestGrapheme*(self: Ref[TextServerExtension]; shaped: RID; coord: float64): int64 {.base.} = (discard)
method shapedTextHitTestPosition*(self: Ref[TextServerExtension]; shaped: RID; coord: float64): int64 {.base.} = (discard)
method shapedTextDraw*(self: Ref[TextServerExtension]; shaped: RID; canvas: RID; pos: Vector2; clipL: float64; clipR: float64; color: Color) {.base.} = (discard)
method shapedTextDrawOutline*(self: Ref[TextServerExtension]; shaped: RID; canvas: RID; pos: Vector2; clipL: float64; clipR: float64; outlineSize: int64; color: Color) {.base.} = (discard)
method shapedTextGetGraphemeBounds*(self: Ref[TextServerExtension]; shaped: RID; pos: int64): Vector2 {.base.} = (discard)
method shapedTextNextGraphemePos*(self: Ref[TextServerExtension]; shaped: RID; pos: int64): int64 {.base.} = (discard)
method shapedTextPrevGraphemePos*(self: Ref[TextServerExtension]; shaped: RID; pos: int64): int64 {.base.} = (discard)
method formatNumber*(self: Ref[TextServerExtension]; string: String; language: String): String {.base.} = (discard)
method parseNumber*(self: Ref[TextServerExtension]; string: String; language: String): String {.base.} = (discard)
method percentSign*(self: Ref[TextServerExtension]; language: String): String {.base.} = (discard)
method stripDiacritics*(self: Ref[TextServerExtension]; string: String): String {.base.} = (discard)
method isValidIdentifier*(self: Ref[TextServerExtension]; string: String): Bool {.base.} = (discard)
method stringGetWordBreaks*(self: Ref[TextServerExtension]; string: String; language: String; charsPerLine: int64): PackedInt32Array {.base.} = (discard)
method isConfusable*(self: Ref[TextServerExtension]; string: String; dict: PackedStringArray): int64 {.base.} = (discard)
method spoofCheck*(self: Ref[TextServerExtension]; string: String): Bool {.base.} = (discard)
method stringToUpper*(self: Ref[TextServerExtension]; string: String; language: String): String {.base.} = (discard)
method stringToLower*(self: Ref[TextServerExtension]; string: String; language: String): String {.base.} = (discard)
method parseStructuredText*(self: Ref[TextServerExtension]; parserType: TextServer_StructuredTextParser; args: Array; text: String): TypedArray[Vector3i] {.base.} = (discard)
method cleanup*(self: Ref[TextServerExtension]) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[TextServerExtension]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_has_feature"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).hasFeature(p_args[0].decode(TextServer_Feature)).encode(r_ret)
  table["_get_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).getName().encode(r_ret)
  table["_get_features"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).getFeatures().encode(r_ret)
  table["_free_rid"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).freeRid(p_args[0].decode(RID))
  table["_has"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).has(p_args[0].decode(RID)).encode(r_ret)
  table["_load_support_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).loadSupportData(p_args[0].decode(String)).encode(r_ret)
  table["_get_support_data_filename"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).getSupportDataFilename().encode(r_ret)
  table["_get_support_data_info"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).getSupportDataInfo().encode(r_ret)
  table["_save_support_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).saveSupportData(p_args[0].decode(String)).encode(r_ret)
  table["_is_locale_right_to_left"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).isLocaleRightToLeft(p_args[0].decode(String)).encode(r_ret)
  table["_name_to_tag"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).nameToTag(p_args[0].decode(String)).encode(r_ret)
  table["_tag_to_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).tagToName(p_args[0].decode(int64)).encode(r_ret)
  table["_create_font"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).createFont().encode(r_ret)
  table["_font_set_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetData(p_args[0].decode(RID), p_args[1].decode(PackedByteArray))
  table["_font_set_data_ptr"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetDataPtr(p_args[0].decode(RID), p_args[1].decode(ptr uint8), p_args[2].decode(int64))
  table["_font_set_face_index"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetFaceIndex(p_args[0].decode(RID), p_args[1].decode(int64))
  table["_font_get_face_index"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetFaceIndex(p_args[0].decode(RID)).encode(r_ret)
  table["_font_get_face_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetFaceCount(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_style"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetStyle(p_args[0].decode(RID), p_args[1].decode(set[TextServer_FontStyle]))
  table["_font_get_style"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetStyle(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetName(p_args[0].decode(RID), p_args[1].decode(String))
  table["_font_get_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetName(p_args[0].decode(RID)).encode(r_ret)
  table["_font_get_ot_name_strings"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetOtNameStrings(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_style_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetStyleName(p_args[0].decode(RID), p_args[1].decode(String))
  table["_font_get_style_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetStyleName(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_weight"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetWeight(p_args[0].decode(RID), p_args[1].decode(int64))
  table["_font_get_weight"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetWeight(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_stretch"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetStretch(p_args[0].decode(RID), p_args[1].decode(int64))
  table["_font_get_stretch"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetStretch(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_antialiasing"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetAntialiasing(p_args[0].decode(RID), p_args[1].decode(TextServer_FontAntialiasing))
  table["_font_get_antialiasing"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetAntialiasing(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_generate_mipmaps"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetGenerateMipmaps(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_font_get_generate_mipmaps"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetGenerateMipmaps(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_multichannel_signed_distance_field"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetMultichannelSignedDistanceField(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_font_is_multichannel_signed_distance_field"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontIsMultichannelSignedDistanceField(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_msdf_pixel_range"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetMsdfPixelRange(p_args[0].decode(RID), p_args[1].decode(int64))
  table["_font_get_msdf_pixel_range"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetMsdfPixelRange(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_msdf_size"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetMsdfSize(p_args[0].decode(RID), p_args[1].decode(int64))
  table["_font_get_msdf_size"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetMsdfSize(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_fixed_size"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetFixedSize(p_args[0].decode(RID), p_args[1].decode(int64))
  table["_font_get_fixed_size"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetFixedSize(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_allow_system_fallback"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetAllowSystemFallback(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_font_is_allow_system_fallback"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontIsAllowSystemFallback(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_force_autohinter"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetForceAutohinter(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_font_is_force_autohinter"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontIsForceAutohinter(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_hinting"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetHinting(p_args[0].decode(RID), p_args[1].decode(TextServer_Hinting))
  table["_font_get_hinting"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetHinting(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_subpixel_positioning"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetSubpixelPositioning(p_args[0].decode(RID), p_args[1].decode(TextServer_SubpixelPositioning))
  table["_font_get_subpixel_positioning"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetSubpixelPositioning(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_embolden"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetEmbolden(p_args[0].decode(RID), p_args[1].decode(float64))
  table["_font_get_embolden"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetEmbolden(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetTransform(p_args[0].decode(RID), p_args[1].decode(Transform2D))
  table["_font_get_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetTransform(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_variation_coordinates"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetVariationCoordinates(p_args[0].decode(RID), p_args[1].decode(Dictionary))
  table["_font_get_variation_coordinates"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetVariationCoordinates(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_oversampling"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetOversampling(p_args[0].decode(RID), p_args[1].decode(float64))
  table["_font_get_oversampling"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetOversampling(p_args[0].decode(RID)).encode(r_ret)
  table["_font_get_size_cache_list"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetSizeCacheList(p_args[0].decode(RID)).encode(r_ret)
  table["_font_clear_size_cache"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontClearSizeCache(p_args[0].decode(RID))
  table["_font_remove_size_cache"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontRemoveSizeCache(p_args[0].decode(RID), p_args[1].decode(Vector2i))
  table["_font_set_ascent"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetAscent(p_args[0].decode(RID), p_args[1].decode(int64), p_args[2].decode(float64))
  table["_font_get_ascent"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetAscent(p_args[0].decode(RID), p_args[1].decode(int64)).encode(r_ret)
  table["_font_set_descent"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetDescent(p_args[0].decode(RID), p_args[1].decode(int64), p_args[2].decode(float64))
  table["_font_get_descent"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetDescent(p_args[0].decode(RID), p_args[1].decode(int64)).encode(r_ret)
  table["_font_set_underline_position"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetUnderlinePosition(p_args[0].decode(RID), p_args[1].decode(int64), p_args[2].decode(float64))
  table["_font_get_underline_position"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetUnderlinePosition(p_args[0].decode(RID), p_args[1].decode(int64)).encode(r_ret)
  table["_font_set_underline_thickness"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetUnderlineThickness(p_args[0].decode(RID), p_args[1].decode(int64), p_args[2].decode(float64))
  table["_font_get_underline_thickness"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetUnderlineThickness(p_args[0].decode(RID), p_args[1].decode(int64)).encode(r_ret)
  table["_font_set_scale"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetScale(p_args[0].decode(RID), p_args[1].decode(int64), p_args[2].decode(float64))
  table["_font_get_scale"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetScale(p_args[0].decode(RID), p_args[1].decode(int64)).encode(r_ret)
  table["_font_get_texture_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetTextureCount(p_args[0].decode(RID), p_args[1].decode(Vector2i)).encode(r_ret)
  table["_font_clear_textures"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontClearTextures(p_args[0].decode(RID), p_args[1].decode(Vector2i))
  table["_font_remove_texture"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontRemoveTexture(p_args[0].decode(RID), p_args[1].decode(Vector2i), p_args[2].decode(int64))
  table["_font_set_texture_image"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetTextureImage(p_args[0].decode(RID), p_args[1].decode(Vector2i), p_args[2].decode(int64), p_args[3].decode(Ref[Image]))
  table["_font_get_texture_image"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetTextureImage(p_args[0].decode(RID), p_args[1].decode(Vector2i), p_args[2].decode(int64)).encode(r_ret)
  table["_font_set_texture_offsets"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetTextureOffsets(p_args[0].decode(RID), p_args[1].decode(Vector2i), p_args[2].decode(int64), p_args[3].decode(PackedInt32Array))
  table["_font_get_texture_offsets"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetTextureOffsets(p_args[0].decode(RID), p_args[1].decode(Vector2i), p_args[2].decode(int64)).encode(r_ret)
  table["_font_get_glyph_list"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetGlyphList(p_args[0].decode(RID), p_args[1].decode(Vector2i)).encode(r_ret)
  table["_font_clear_glyphs"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontClearGlyphs(p_args[0].decode(RID), p_args[1].decode(Vector2i))
  table["_font_remove_glyph"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontRemoveGlyph(p_args[0].decode(RID), p_args[1].decode(Vector2i), p_args[2].decode(int64))
  table["_font_get_glyph_advance"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetGlyphAdvance(p_args[0].decode(RID), p_args[1].decode(int64), p_args[2].decode(int64)).encode(r_ret)
  table["_font_set_glyph_advance"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetGlyphAdvance(p_args[0].decode(RID), p_args[1].decode(int64), p_args[2].decode(int64), p_args[3].decode(Vector2))
  table["_font_get_glyph_offset"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetGlyphOffset(p_args[0].decode(RID), p_args[1].decode(Vector2i), p_args[2].decode(int64)).encode(r_ret)
  table["_font_set_glyph_offset"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetGlyphOffset(p_args[0].decode(RID), p_args[1].decode(Vector2i), p_args[2].decode(int64), p_args[3].decode(Vector2))
  table["_font_get_glyph_size"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetGlyphSize(p_args[0].decode(RID), p_args[1].decode(Vector2i), p_args[2].decode(int64)).encode(r_ret)
  table["_font_set_glyph_size"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetGlyphSize(p_args[0].decode(RID), p_args[1].decode(Vector2i), p_args[2].decode(int64), p_args[3].decode(Vector2))
  table["_font_get_glyph_uv_rect"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetGlyphUvRect(p_args[0].decode(RID), p_args[1].decode(Vector2i), p_args[2].decode(int64)).encode(r_ret)
  table["_font_set_glyph_uv_rect"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetGlyphUvRect(p_args[0].decode(RID), p_args[1].decode(Vector2i), p_args[2].decode(int64), p_args[3].decode(Rect2))
  table["_font_get_glyph_texture_idx"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetGlyphTextureIdx(p_args[0].decode(RID), p_args[1].decode(Vector2i), p_args[2].decode(int64)).encode(r_ret)
  table["_font_set_glyph_texture_idx"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetGlyphTextureIdx(p_args[0].decode(RID), p_args[1].decode(Vector2i), p_args[2].decode(int64), p_args[3].decode(int64))
  table["_font_get_glyph_texture_rid"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetGlyphTextureRid(p_args[0].decode(RID), p_args[1].decode(Vector2i), p_args[2].decode(int64)).encode(r_ret)
  table["_font_get_glyph_texture_size"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetGlyphTextureSize(p_args[0].decode(RID), p_args[1].decode(Vector2i), p_args[2].decode(int64)).encode(r_ret)
  table["_font_get_glyph_contours"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetGlyphContours(p_args[0].decode(RID), p_args[1].decode(int64), p_args[2].decode(int64)).encode(r_ret)
  table["_font_get_kerning_list"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetKerningList(p_args[0].decode(RID), p_args[1].decode(int64)).encode(r_ret)
  table["_font_clear_kerning_map"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontClearKerningMap(p_args[0].decode(RID), p_args[1].decode(int64))
  table["_font_remove_kerning"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontRemoveKerning(p_args[0].decode(RID), p_args[1].decode(int64), p_args[2].decode(Vector2i))
  table["_font_set_kerning"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetKerning(p_args[0].decode(RID), p_args[1].decode(int64), p_args[2].decode(Vector2i), p_args[3].decode(Vector2))
  table["_font_get_kerning"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetKerning(p_args[0].decode(RID), p_args[1].decode(int64), p_args[2].decode(Vector2i)).encode(r_ret)
  table["_font_get_glyph_index"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetGlyphIndex(p_args[0].decode(RID), p_args[1].decode(int64), p_args[2].decode(int64), p_args[3].decode(int64)).encode(r_ret)
  table["_font_get_char_from_glyph_index"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetCharFromGlyphIndex(p_args[0].decode(RID), p_args[1].decode(int64), p_args[2].decode(int64)).encode(r_ret)
  table["_font_has_char"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontHasChar(p_args[0].decode(RID), p_args[1].decode(int64)).encode(r_ret)
  table["_font_get_supported_chars"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetSupportedChars(p_args[0].decode(RID)).encode(r_ret)
  table["_font_render_range"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontRenderRange(p_args[0].decode(RID), p_args[1].decode(Vector2i), p_args[2].decode(int64), p_args[3].decode(int64))
  table["_font_render_glyph"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontRenderGlyph(p_args[0].decode(RID), p_args[1].decode(Vector2i), p_args[2].decode(int64))
  table["_font_draw_glyph"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontDrawGlyph(p_args[0].decode(RID), p_args[1].decode(RID), p_args[2].decode(int64), p_args[3].decode(Vector2), p_args[4].decode(int64), p_args[5].decode(Color))
  table["_font_draw_glyph_outline"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontDrawGlyphOutline(p_args[0].decode(RID), p_args[1].decode(RID), p_args[2].decode(int64), p_args[3].decode(int64), p_args[4].decode(Vector2), p_args[5].decode(int64), p_args[6].decode(Color))
  table["_font_is_language_supported"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontIsLanguageSupported(p_args[0].decode(RID), p_args[1].decode(String)).encode(r_ret)
  table["_font_set_language_support_override"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetLanguageSupportOverride(p_args[0].decode(RID), p_args[1].decode(String), p_args[2].decode(Bool))
  table["_font_get_language_support_override"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetLanguageSupportOverride(p_args[0].decode(RID), p_args[1].decode(String)).encode(r_ret)
  table["_font_remove_language_support_override"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontRemoveLanguageSupportOverride(p_args[0].decode(RID), p_args[1].decode(String))
  table["_font_get_language_support_overrides"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetLanguageSupportOverrides(p_args[0].decode(RID)).encode(r_ret)
  table["_font_is_script_supported"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontIsScriptSupported(p_args[0].decode(RID), p_args[1].decode(String)).encode(r_ret)
  table["_font_set_script_support_override"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetScriptSupportOverride(p_args[0].decode(RID), p_args[1].decode(String), p_args[2].decode(Bool))
  table["_font_get_script_support_override"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetScriptSupportOverride(p_args[0].decode(RID), p_args[1].decode(String)).encode(r_ret)
  table["_font_remove_script_support_override"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontRemoveScriptSupportOverride(p_args[0].decode(RID), p_args[1].decode(String))
  table["_font_get_script_support_overrides"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetScriptSupportOverrides(p_args[0].decode(RID)).encode(r_ret)
  table["_font_set_opentype_feature_overrides"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetOpentypeFeatureOverrides(p_args[0].decode(RID), p_args[1].decode(Dictionary))
  table["_font_get_opentype_feature_overrides"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetOpentypeFeatureOverrides(p_args[0].decode(RID)).encode(r_ret)
  table["_font_supported_feature_list"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSupportedFeatureList(p_args[0].decode(RID)).encode(r_ret)
  table["_font_supported_variation_list"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSupportedVariationList(p_args[0].decode(RID)).encode(r_ret)
  table["_font_get_global_oversampling"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontGetGlobalOversampling().encode(r_ret)
  table["_font_set_global_oversampling"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).fontSetGlobalOversampling(p_args[0].decode(float64))
  table["_get_hex_code_box_size"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).getHexCodeBoxSize(p_args[0].decode(int64), p_args[1].decode(int64)).encode(r_ret)
  table["_draw_hex_code_box"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).drawHexCodeBox(p_args[0].decode(RID), p_args[1].decode(int64), p_args[2].decode(Vector2), p_args[3].decode(int64), p_args[4].decode(Color))
  table["_create_shaped_text"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).createShapedText(p_args[0].decode(TextServer_Direction), p_args[1].decode(TextServer_Orientation)).encode(r_ret)
  table["_shaped_text_clear"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextClear(p_args[0].decode(RID))
  table["_shaped_text_set_direction"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextSetDirection(p_args[0].decode(RID), p_args[1].decode(TextServer_Direction))
  table["_shaped_text_get_direction"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetDirection(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_get_inferred_direction"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetInferredDirection(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_set_bidi_override"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextSetBidiOverride(p_args[0].decode(RID), p_args[1].decode(Array))
  table["_shaped_text_set_custom_punctuation"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextSetCustomPunctuation(p_args[0].decode(RID), p_args[1].decode(String))
  table["_shaped_text_get_custom_punctuation"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetCustomPunctuation(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_set_orientation"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextSetOrientation(p_args[0].decode(RID), p_args[1].decode(TextServer_Orientation))
  table["_shaped_text_get_orientation"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetOrientation(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_set_preserve_invalid"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextSetPreserveInvalid(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_shaped_text_get_preserve_invalid"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetPreserveInvalid(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_set_preserve_control"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextSetPreserveControl(p_args[0].decode(RID), p_args[1].decode(Bool))
  table["_shaped_text_get_preserve_control"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetPreserveControl(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_set_spacing"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextSetSpacing(p_args[0].decode(RID), p_args[1].decode(TextServer_SpacingType), p_args[2].decode(int64))
  table["_shaped_text_get_spacing"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetSpacing(p_args[0].decode(RID), p_args[1].decode(TextServer_SpacingType)).encode(r_ret)
  table["_shaped_text_add_string"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextAddString(p_args[0].decode(RID), p_args[1].decode(String), p_args[2].decode(TypedArray[RID]), p_args[3].decode(int64), p_args[4].decode(Dictionary), p_args[5].decode(String), p_args[6].decode(ptr Variant)).encode(r_ret)
  table["_shaped_text_add_object"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextAddObject(p_args[0].decode(RID), p_args[1].decode(ptr Variant), p_args[2].decode(Vector2), p_args[3].decode(InlineAlignment), p_args[4].decode(int64), p_args[5].decode(float64)).encode(r_ret)
  table["_shaped_text_resize_object"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextResizeObject(p_args[0].decode(RID), p_args[1].decode(ptr Variant), p_args[2].decode(Vector2), p_args[3].decode(InlineAlignment), p_args[4].decode(float64)).encode(r_ret)
  table["_shaped_get_span_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedGetSpanCount(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_get_span_meta"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedGetSpanMeta(p_args[0].decode(RID), p_args[1].decode(int64)).encode(r_ret)
  table["_shaped_set_span_update_font"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedSetSpanUpdateFont(p_args[0].decode(RID), p_args[1].decode(int64), p_args[2].decode(TypedArray[RID]), p_args[3].decode(int64), p_args[4].decode(Dictionary))
  table["_shaped_text_substr"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextSubstr(p_args[0].decode(RID), p_args[1].decode(int64), p_args[2].decode(int64)).encode(r_ret)
  table["_shaped_text_get_parent"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetParent(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_fit_to_width"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextFitToWidth(p_args[0].decode(RID), p_args[1].decode(float64), p_args[2].decode(set[TextServer_JustificationFlag])).encode(r_ret)
  table["_shaped_text_tab_align"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextTabAlign(p_args[0].decode(RID), p_args[1].decode(PackedFloat32Array)).encode(r_ret)
  table["_shaped_text_shape"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextShape(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_update_breaks"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextUpdateBreaks(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_update_justification_ops"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextUpdateJustificationOps(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_is_ready"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextIsReady(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_get_glyphs"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetGlyphs(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_sort_logical"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextSortLogical(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_get_glyph_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetGlyphCount(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_get_range"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetRange(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_get_line_breaks_adv"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetLineBreaksAdv(p_args[0].decode(RID), p_args[1].decode(PackedFloat32Array), p_args[2].decode(int64), p_args[3].decode(Bool), p_args[4].decode(set[TextServer_LineBreakFlag])).encode(r_ret)
  table["_shaped_text_get_line_breaks"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetLineBreaks(p_args[0].decode(RID), p_args[1].decode(float64), p_args[2].decode(int64), p_args[3].decode(set[TextServer_LineBreakFlag])).encode(r_ret)
  table["_shaped_text_get_word_breaks"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetWordBreaks(p_args[0].decode(RID), p_args[1].decode(set[TextServer_GraphemeFlag])).encode(r_ret)
  table["_shaped_text_get_trim_pos"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetTrimPos(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_get_ellipsis_pos"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetEllipsisPos(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_get_ellipsis_glyph_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetEllipsisGlyphCount(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_get_ellipsis_glyphs"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetEllipsisGlyphs(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_overrun_trim_to_width"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextOverrunTrimToWidth(p_args[0].decode(RID), p_args[1].decode(float64), p_args[2].decode(set[TextServer_TextOverrunFlag]))
  table["_shaped_text_get_objects"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetObjects(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_get_object_rect"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetObjectRect(p_args[0].decode(RID), p_args[1].decode(ptr Variant)).encode(r_ret)
  table["_shaped_text_get_size"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetSize(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_get_ascent"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetAscent(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_get_descent"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetDescent(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_get_width"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetWidth(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_get_underline_position"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetUnderlinePosition(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_get_underline_thickness"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetUnderlineThickness(p_args[0].decode(RID)).encode(r_ret)
  table["_shaped_text_get_dominant_direction_in_range"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetDominantDirectionInRange(p_args[0].decode(RID), p_args[1].decode(int64), p_args[2].decode(int64)).encode(r_ret)
  table["_shaped_text_get_carets"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetCarets(p_args[0].decode(RID), p_args[1].decode(int64), p_args[2].decode(ptr CaretInfo))
  table["_shaped_text_get_selection"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetSelection(p_args[0].decode(RID), p_args[1].decode(int64), p_args[2].decode(int64)).encode(r_ret)
  table["_shaped_text_hit_test_grapheme"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextHitTestGrapheme(p_args[0].decode(RID), p_args[1].decode(float64)).encode(r_ret)
  table["_shaped_text_hit_test_position"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextHitTestPosition(p_args[0].decode(RID), p_args[1].decode(float64)).encode(r_ret)
  table["_shaped_text_draw"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextDraw(p_args[0].decode(RID), p_args[1].decode(RID), p_args[2].decode(Vector2), p_args[3].decode(float64), p_args[4].decode(float64), p_args[5].decode(Color))
  table["_shaped_text_draw_outline"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextDrawOutline(p_args[0].decode(RID), p_args[1].decode(RID), p_args[2].decode(Vector2), p_args[3].decode(float64), p_args[4].decode(float64), p_args[5].decode(int64), p_args[6].decode(Color))
  table["_shaped_text_get_grapheme_bounds"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextGetGraphemeBounds(p_args[0].decode(RID), p_args[1].decode(int64)).encode(r_ret)
  table["_shaped_text_next_grapheme_pos"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextNextGraphemePos(p_args[0].decode(RID), p_args[1].decode(int64)).encode(r_ret)
  table["_shaped_text_prev_grapheme_pos"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).shapedTextPrevGraphemePos(p_args[0].decode(RID), p_args[1].decode(int64)).encode(r_ret)
  table["_format_number"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).formatNumber(p_args[0].decode(String), p_args[1].decode(String)).encode(r_ret)
  table["_parse_number"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).parseNumber(p_args[0].decode(String), p_args[1].decode(String)).encode(r_ret)
  table["_percent_sign"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).percentSign(p_args[0].decode(String)).encode(r_ret)
  table["_strip_diacritics"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).stripDiacritics(p_args[0].decode(String)).encode(r_ret)
  table["_is_valid_identifier"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).isValidIdentifier(p_args[0].decode(String)).encode(r_ret)
  table["_string_get_word_breaks"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).stringGetWordBreaks(p_args[0].decode(String), p_args[1].decode(String), p_args[2].decode(int64)).encode(r_ret)
  table["_is_confusable"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).isConfusable(p_args[0].decode(String), p_args[1].decode(PackedStringArray)).encode(r_ret)
  table["_spoof_check"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).spoofCheck(p_args[0].decode(String)).encode(r_ret)
  table["_string_to_upper"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).stringToUpper(p_args[0].decode(String), p_args[1].decode(String)).encode(r_ret)
  table["_string_to_lower"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).stringToLower(p_args[0].decode(String), p_args[1].decode(String)).encode(r_ret)
  table["_parse_structured_text"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).parseStructuredText(p_args[0].decode(TextServer_StructuredTextParser), p_args[1].decode(Array), p_args[2].decode(String)).encode(r_ret)
  table["_cleanup"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextServerExtension]](p_instance).cleanup()

define_godot_engine_class_essencials(CallbackTweener, Tweener)
define_godot_engine_class_essencials(IntervalTweener, Tweener)
define_godot_engine_class_essencials(MethodTweener, Tweener)
define_godot_engine_class_essencials(PropertyTweener, Tweener)
define_godot_engine_class_essencials(WebRTCPeerConnectionExtension, WebRTCPeerConnection)
method getConnectionState*(self: Ref[WebRTCPeerConnectionExtension]): WebRTCPeerConnection_ConnectionState {.base.} = (discard)
method getGatheringState*(self: Ref[WebRTCPeerConnectionExtension]): WebRTCPeerConnection_GatheringState {.base.} = (discard)
method getSignalingState*(self: Ref[WebRTCPeerConnectionExtension]): WebRTCPeerConnection_SignalingState {.base.} = (discard)
method initialize*(self: Ref[WebRTCPeerConnectionExtension]; pConfig: Dictionary): Error {.base.} = (discard)
method createDataChannel*(self: Ref[WebRTCPeerConnectionExtension]; pLabel: String; pConfig: Dictionary): Ref[WebRTCDataChannel] {.base.} = (discard)
method createOffer*(self: Ref[WebRTCPeerConnectionExtension]): Error {.base.} = (discard)
method setRemoteDescription*(self: Ref[WebRTCPeerConnectionExtension]; pType: String; pSdp: String): Error {.base.} = (discard)
method setLocalDescription*(self: Ref[WebRTCPeerConnectionExtension]; pType: String; pSdp: String): Error {.base.} = (discard)
method addIceCandidate*(self: Ref[WebRTCPeerConnectionExtension]; pSdpMidName: String; pSdpMlineIndex: int32; pSdpName: String): Error {.base.} = (discard)
method poll*(self: Ref[WebRTCPeerConnectionExtension]): Error {.base.} = (discard)
method close*(self: Ref[WebRTCPeerConnectionExtension]) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[WebRTCPeerConnectionExtension]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_connection_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCPeerConnectionExtension]](p_instance).getConnectionState().encode(r_ret)
  table["_get_gathering_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCPeerConnectionExtension]](p_instance).getGatheringState().encode(r_ret)
  table["_get_signaling_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCPeerConnectionExtension]](p_instance).getSignalingState().encode(r_ret)
  table["_initialize"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCPeerConnectionExtension]](p_instance).initialize(p_args[0].decode(Dictionary)).encode(r_ret)
  table["_create_data_channel"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCPeerConnectionExtension]](p_instance).createDataChannel(p_args[0].decode(String), p_args[1].decode(Dictionary)).encode(r_ret)
  table["_create_offer"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCPeerConnectionExtension]](p_instance).createOffer().encode(r_ret)
  table["_set_remote_description"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCPeerConnectionExtension]](p_instance).setRemoteDescription(p_args[0].decode(String), p_args[1].decode(String)).encode(r_ret)
  table["_set_local_description"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCPeerConnectionExtension]](p_instance).setLocalDescription(p_args[0].decode(String), p_args[1].decode(String)).encode(r_ret)
  table["_add_ice_candidate"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCPeerConnectionExtension]](p_instance).addIceCandidate(p_args[0].decode(String), p_args[1].decode(int32), p_args[2].decode(String)).encode(r_ret)
  table["_poll"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCPeerConnectionExtension]](p_instance).poll().encode(r_ret)
  table["_close"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCPeerConnectionExtension]](p_instance).close()

define_godot_engine_class_essencials(MobileVRInterface, XRInterface)
define_godot_engine_class_essencials(OpenXRInterface, XRInterface)
define_godot_engine_class_essencials(WebXRInterface, XRInterface)
define_godot_engine_class_essencials(XRInterfaceExtension, XRInterface)
method getName*(self: Ref[XRInterfaceExtension]): StringName {.base.} = (discard)
method getCapabilities*(self: Ref[XRInterfaceExtension]): uint32 {.base.} = (discard)
method isInitialized*(self: Ref[XRInterfaceExtension]): Bool {.base.} = (discard)
method initialize*(self: Ref[XRInterfaceExtension]): Bool {.base.} = (discard)
method uninitialize*(self: Ref[XRInterfaceExtension]) {.base.} = (discard)
method getSystemInfo*(self: Ref[XRInterfaceExtension]): Dictionary {.base.} = (discard)
method supportsPlayAreaMode*(self: Ref[XRInterfaceExtension]; mode: XRInterface_PlayAreaMode): Bool {.base.} = (discard)
method getPlayAreaMode*(self: Ref[XRInterfaceExtension]): XRInterface_PlayAreaMode {.base.} = (discard)
method setPlayAreaMode*(self: Ref[XRInterfaceExtension]; mode: XRInterface_PlayAreaMode): Bool {.base.} = (discard)
method getPlayArea*(self: Ref[XRInterfaceExtension]): PackedVector3Array {.base.} = (discard)
method getRenderTargetSize*(self: Ref[XRInterfaceExtension]): Vector2 {.base.} = (discard)
method getViewCount*(self: Ref[XRInterfaceExtension]): uint32 {.base.} = (discard)
method getCameraTransform*(self: Ref[XRInterfaceExtension]): Transform3D {.base.} = (discard)
method getTransformForView*(self: Ref[XRInterfaceExtension]; view: uint32; camTransform: Transform3D): Transform3D {.base.} = (discard)
method getProjectionForView*(self: Ref[XRInterfaceExtension]; view: uint32; aspect: float64; zNear: float64; zFar: float64): PackedFloat64Array {.base.} = (discard)
method getVrsTexture*(self: Ref[XRInterfaceExtension]): RID {.base.} = (discard)
method process*(self: Ref[XRInterfaceExtension]) {.base.} = (discard)
method preRender*(self: Ref[XRInterfaceExtension]) {.base.} = (discard)
method preDrawViewport*(self: Ref[XRInterfaceExtension]; renderTarget: RID): Bool {.base.} = (discard)
method postDrawViewport*(self: Ref[XRInterfaceExtension]; renderTarget: RID; screenRect: Rect2) {.base.} = (discard)
method endFrame*(self: Ref[XRInterfaceExtension]) {.base.} = (discard)
method getSuggestedTrackerNames*(self: Ref[XRInterfaceExtension]): PackedStringArray {.base.} = (discard)
method getSuggestedPoseNames*(self: Ref[XRInterfaceExtension]; trackerName: StringName): PackedStringArray {.base.} = (discard)
method getTrackingStatus*(self: Ref[XRInterfaceExtension]): XRInterface_TrackingStatus {.base.} = (discard)
method triggerHapticPulse*(self: Ref[XRInterfaceExtension]; actionName: String; trackerName: StringName; frequency: float64; amplitude: float64; durationSec: float64; delaySec: float64) {.base.} = (discard)
method getAnchorDetectionIsEnabled*(self: Ref[XRInterfaceExtension]): Bool {.base.} = (discard)
method setAnchorDetectionIsEnabled*(self: Ref[XRInterfaceExtension]; enabled: Bool) {.base.} = (discard)
method getCameraFeedId*(self: Ref[XRInterfaceExtension]): int32 {.base.} = (discard)
method getColorTexture*(self: Ref[XRInterfaceExtension]): RID {.base.} = (discard)
method getDepthTexture*(self: Ref[XRInterfaceExtension]): RID {.base.} = (discard)
method getVelocityTexture*(self: Ref[XRInterfaceExtension]): RID {.base.} = (discard)
proc bind_virtuals*(S: typedesc[XRInterfaceExtension]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).getName().encode(r_ret)
  table["_get_capabilities"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).getCapabilities().encode(r_ret)
  table["_is_initialized"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).isInitialized().encode(r_ret)
  table["_initialize"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).initialize().encode(r_ret)
  table["_uninitialize"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).uninitialize()
  table["_get_system_info"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).getSystemInfo().encode(r_ret)
  table["_supports_play_area_mode"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).supportsPlayAreaMode(p_args[0].decode(XRInterface_PlayAreaMode)).encode(r_ret)
  table["_get_play_area_mode"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).getPlayAreaMode().encode(r_ret)
  table["_set_play_area_mode"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).setPlayAreaMode(p_args[0].decode(XRInterface_PlayAreaMode)).encode(r_ret)
  table["_get_play_area"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).getPlayArea().encode(r_ret)
  table["_get_render_target_size"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).getRenderTargetSize().encode(r_ret)
  table["_get_view_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).getViewCount().encode(r_ret)
  table["_get_camera_transform"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).getCameraTransform().encode(r_ret)
  table["_get_transform_for_view"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).getTransformForView(p_args[0].decode(uint32), p_args[1].decode(Transform3D)).encode(r_ret)
  table["_get_projection_for_view"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).getProjectionForView(p_args[0].decode(uint32), p_args[1].decode(float64), p_args[2].decode(float64), p_args[3].decode(float64)).encode(r_ret)
  table["_get_vrs_texture"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).getVrsTexture().encode(r_ret)
  table["_process"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).process()
  table["_pre_render"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).preRender()
  table["_pre_draw_viewport"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).preDrawViewport(p_args[0].decode(RID)).encode(r_ret)
  table["_post_draw_viewport"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).postDrawViewport(p_args[0].decode(RID), p_args[1].decode(Rect2))
  table["_end_frame"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).endFrame()
  table["_get_suggested_tracker_names"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).getSuggestedTrackerNames().encode(r_ret)
  table["_get_suggested_pose_names"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).getSuggestedPoseNames(p_args[0].decode(StringName)).encode(r_ret)
  table["_get_tracking_status"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).getTrackingStatus().encode(r_ret)
  table["_trigger_haptic_pulse"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).triggerHapticPulse(p_args[0].decode(String), p_args[1].decode(StringName), p_args[2].decode(float64), p_args[3].decode(float64), p_args[4].decode(float64), p_args[5].decode(float64))
  table["_get_anchor_detection_is_enabled"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).getAnchorDetectionIsEnabled().encode(r_ret)
  table["_set_anchor_detection_is_enabled"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).setAnchorDetectionIsEnabled(p_args[0].decode(Bool))
  table["_get_camera_feed_id"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).getCameraFeedId().encode(r_ret)
  table["_get_color_texture"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).getColorTexture().encode(r_ret)
  table["_get_depth_texture"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).getDepthTexture().encode(r_ret)
  table["_get_velocity_texture"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[XRInterfaceExtension]](p_instance).getVelocityTexture().encode(r_ret)

define_godot_engine_class_essencials(BaseButton, Control)
method pressed*(self: BaseButton) {.base.} = (discard)
method toggled*(self: BaseButton; buttonPressed: Bool) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[BaseButton]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_pressed"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[BaseButton](p_instance).pressed()
  table["_toggled"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[BaseButton](p_instance).toggled(p_args[0].decode(Bool))

define_godot_engine_class_essencials(ColorRect, Control)
define_godot_engine_class_essencials(Container, Control)
method getAllowedSizeFlagsHorizontal*(self: Container): PackedInt32Array {.base.} = (discard)
method getAllowedSizeFlagsVertical*(self: Container): PackedInt32Array {.base.} = (discard)
proc bind_virtuals*(S: typedesc[Container]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_allowed_size_flags_horizontal"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Container](p_instance).getAllowedSizeFlagsHorizontal().encode(r_ret)
  table["_get_allowed_size_flags_vertical"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Container](p_instance).getAllowedSizeFlagsVertical().encode(r_ret)

define_godot_engine_class_essencials(GraphEdit, Control)
method isInInputHotzone*(self: GraphEdit; inNode: ptr Object; inPort: int32; mousePosition: Vector2): Bool {.base.} = (discard)
method isInOutputHotzone*(self: GraphEdit; inNode: ptr Object; inPort: int32; mousePosition: Vector2): Bool {.base.} = (discard)
method getConnectionLine*(self: GraphEdit; fromPosition: Vector2; toPosition: Vector2): PackedVector2Array {.base.} = (discard)
method isNodeHoverValid*(self: GraphEdit; fromNode: StringName; fromPort: int32; toNode: StringName; toPort: int32): Bool {.base.} = (discard)
proc bind_virtuals*(S: typedesc[GraphEdit]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_is_in_input_hotzone"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[GraphEdit](p_instance).isInInputHotzone(p_args[0].decode(ptr Object), p_args[1].decode(int32), p_args[2].decode(Vector2)).encode(r_ret)
  table["_is_in_output_hotzone"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[GraphEdit](p_instance).isInOutputHotzone(p_args[0].decode(ptr Object), p_args[1].decode(int32), p_args[2].decode(Vector2)).encode(r_ret)
  table["_get_connection_line"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[GraphEdit](p_instance).getConnectionLine(p_args[0].decode(Vector2), p_args[1].decode(Vector2)).encode(r_ret)
  table["_is_node_hover_valid"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[GraphEdit](p_instance).isNodeHoverValid(p_args[0].decode(StringName), p_args[1].decode(int32), p_args[2].decode(StringName), p_args[3].decode(int32)).encode(r_ret)

define_godot_engine_class_essencials(ItemList, Control)
define_godot_engine_class_essencials(Label, Control)
define_godot_engine_class_essencials(LineEdit, Control)
define_godot_engine_class_essencials(MenuBar, Control)
define_godot_engine_class_essencials(NinePatchRect, Control)
define_godot_engine_class_essencials(Panel, Control)
define_godot_engine_class_essencials(Range, Control)
method valueChanged*(self: Range; newValue: float64) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[Range]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_value_changed"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Range](p_instance).valueChanged(p_args[0].decode(float64))

define_godot_engine_class_essencials(ReferenceRect, Control)
define_godot_engine_class_essencials(RichTextLabel, Control)
define_godot_engine_class_essencials(Separator, Control)
define_godot_engine_class_essencials(TabBar, Control)
define_godot_engine_class_essencials(TextEdit, Control)
method handleUnicodeInput*(self: TextEdit; unicodeChar: int32; caretIndex: int32) {.base.} = (discard)
method backspace*(self: TextEdit; caretIndex: int32) {.base.} = (discard)
method cut*(self: TextEdit; caretIndex: int32) {.base.} = (discard)
method copy*(self: TextEdit; caretIndex: int32) {.base.} = (discard)
method paste*(self: TextEdit; caretIndex: int32) {.base.} = (discard)
method pastePrimaryClipboard*(self: TextEdit; caretIndex: int32) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[TextEdit]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_handle_unicode_input"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[TextEdit](p_instance).handleUnicodeInput(p_args[0].decode(int32), p_args[1].decode(int32))
  table["_backspace"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[TextEdit](p_instance).backspace(p_args[0].decode(int32))
  table["_cut"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[TextEdit](p_instance).cut(p_args[0].decode(int32))
  table["_copy"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[TextEdit](p_instance).copy(p_args[0].decode(int32))
  table["_paste"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[TextEdit](p_instance).paste(p_args[0].decode(int32))
  table["_paste_primary_clipboard"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[TextEdit](p_instance).pastePrimaryClipboard(p_args[0].decode(int32))

define_godot_engine_class_essencials(TextureRect, Control)
define_godot_engine_class_essencials(Tree, Control)
define_godot_engine_class_essencials(VideoStreamPlayer, Control)
define_godot_engine_class_essencials(AnimatedSprite2D, Node2D)
define_godot_engine_class_essencials(AudioListener2D, Node2D)
define_godot_engine_class_essencials(AudioStreamPlayer2D, Node2D)
define_godot_engine_class_essencials(BackBufferCopy, Node2D)
define_godot_engine_class_essencials(Bone2D, Node2D)
define_godot_engine_class_essencials(CPUParticles2D, Node2D)
define_godot_engine_class_essencials(Camera2D, Node2D)
define_godot_engine_class_essencials(CanvasGroup, Node2D)
define_godot_engine_class_essencials(CanvasModulate, Node2D)
define_godot_engine_class_essencials(CollisionObject2D, Node2D)
method inputEvent*(self: CollisionObject2D; viewport: Viewport; event: Ref[InputEvent]; shapeIdx: int32) {.base.} = (discard)
method mouseEnter*(self: CollisionObject2D) {.base.} = (discard)
method mouseExit*(self: CollisionObject2D) {.base.} = (discard)
method mouseShapeEnter*(self: CollisionObject2D; shapeIdx: int32) {.base.} = (discard)
method mouseShapeExit*(self: CollisionObject2D; shapeIdx: int32) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[CollisionObject2D]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_input_event"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[CollisionObject2D](p_instance).inputEvent(p_args[0].decode(Viewport), p_args[1].decode(Ref[InputEvent]), p_args[2].decode(int32))
  table["_mouse_enter"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[CollisionObject2D](p_instance).mouseEnter()
  table["_mouse_exit"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[CollisionObject2D](p_instance).mouseExit()
  table["_mouse_shape_enter"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[CollisionObject2D](p_instance).mouseShapeEnter(p_args[0].decode(int32))
  table["_mouse_shape_exit"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[CollisionObject2D](p_instance).mouseShapeExit(p_args[0].decode(int32))

define_godot_engine_class_essencials(CollisionPolygon2D, Node2D)
define_godot_engine_class_essencials(CollisionShape2D, Node2D)
define_godot_engine_class_essencials(GPUParticles2D, Node2D)
define_godot_engine_class_essencials(Joint2D, Node2D)
define_godot_engine_class_essencials(Light2D, Node2D)
define_godot_engine_class_essencials(LightOccluder2D, Node2D)
define_godot_engine_class_essencials(Line2D, Node2D)
define_godot_engine_class_essencials(Marker2D, Node2D)
define_godot_engine_class_essencials(MeshInstance2D, Node2D)
define_godot_engine_class_essencials(MultiMeshInstance2D, Node2D)
define_godot_engine_class_essencials(NavigationLink2D, Node2D)
define_godot_engine_class_essencials(NavigationObstacle2D, Node2D)
define_godot_engine_class_essencials(NavigationRegion2D, Node2D)
define_godot_engine_class_essencials(ParallaxLayer, Node2D)
define_godot_engine_class_essencials(Path2D, Node2D)
define_godot_engine_class_essencials(PathFollow2D, Node2D)
define_godot_engine_class_essencials(Polygon2D, Node2D)
define_godot_engine_class_essencials(RayCast2D, Node2D)
define_godot_engine_class_essencials(RemoteTransform2D, Node2D)
define_godot_engine_class_essencials(ShapeCast2D, Node2D)
define_godot_engine_class_essencials(Skeleton2D, Node2D)
define_godot_engine_class_essencials(Sprite2D, Node2D)
define_godot_engine_class_essencials(TileMap, Node2D)
method useTileDataRuntimeUpdate*(self: TileMap; layer: int32; coords: Vector2i): Bool {.base.} = (discard)
method tileDataRuntimeUpdate*(self: TileMap; layer: int32; coords: Vector2i; tileData: TileData) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[TileMap]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_use_tile_data_runtime_update"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[TileMap](p_instance).useTileDataRuntimeUpdate(p_args[0].decode(int32), p_args[1].decode(Vector2i)).encode(r_ret)
  table["_tile_data_runtime_update"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[TileMap](p_instance).tileDataRuntimeUpdate(p_args[0].decode(int32), p_args[1].decode(Vector2i), p_args[2].decode(TileData))

define_godot_engine_class_essencials(TouchScreenButton, Node2D)
define_godot_engine_class_essencials(VisibleOnScreenNotifier2D, Node2D)
define_godot_engine_class_essencials(XRCamera3D, Camera3D)
define_godot_engine_class_essencials(Area3D, CollisionObject3D)
define_godot_engine_class_essencials(PhysicsBody3D, CollisionObject3D)
define_godot_engine_class_essencials(ConeTwistJoint3D, Joint3D)
define_godot_engine_class_essencials(Generic6DOFJoint3D, Joint3D)
define_godot_engine_class_essencials(HingeJoint3D, Joint3D)
define_godot_engine_class_essencials(PinJoint3D, Joint3D)
define_godot_engine_class_essencials(SliderJoint3D, Joint3D)
define_godot_engine_class_essencials(Decal, VisualInstance3D)
define_godot_engine_class_essencials(FogVolume, VisualInstance3D)
define_godot_engine_class_essencials(GPUParticlesAttractor3D, VisualInstance3D)
define_godot_engine_class_essencials(GPUParticlesCollision3D, VisualInstance3D)
define_godot_engine_class_essencials(GeometryInstance3D, VisualInstance3D)
define_godot_engine_class_essencials(Light3D, VisualInstance3D)
define_godot_engine_class_essencials(LightmapGI, VisualInstance3D)
define_godot_engine_class_essencials(ReflectionProbe, VisualInstance3D)
define_godot_engine_class_essencials(RootMotionView, VisualInstance3D)
define_godot_engine_class_essencials(VisibleOnScreenNotifier3D, VisualInstance3D)
define_godot_engine_class_essencials(VoxelGI, VisualInstance3D)
define_godot_engine_class_essencials(XRAnchor3D, XRNode3D)
define_godot_engine_class_essencials(XRController3D, XRNode3D)
define_godot_engine_class_essencials(AcceptDialog, Window)
define_godot_engine_class_essencials(Popup, Window)
define_godot_engine_class_essencials(AudioStreamGeneratorPlayback, AudioStreamPlaybackResampled)
define_godot_engine_class_essencials(AudioStreamPlaybackOggVorbis, AudioStreamPlaybackResampled)
define_godot_engine_class_essencials(EditorExportPlatformLinuxBSD, EditorExportPlatformPC)
define_godot_engine_class_essencials(EditorExportPlatformWindows, EditorExportPlatformPC)
define_godot_engine_class_essencials(ENetMultiplayerPeer, MultiplayerPeer)
define_godot_engine_class_essencials(MultiplayerPeerExtension, MultiplayerPeer)
method getPacket*(self: Ref[MultiplayerPeerExtension]; rBuffer: ptr ptr uint8; rBufferSize: ptr int32): Error {.base.} = (discard)
method putPacket*(self: Ref[MultiplayerPeerExtension]; pBuffer: ptr uint8; pBufferSize: int32): Error {.base.} = (discard)
method getAvailablePacketCount*(self: Ref[MultiplayerPeerExtension]): int32 {.base.} = (discard)
method getMaxPacketSize*(self: Ref[MultiplayerPeerExtension]): int32 {.base.} = (discard)
method getPacketScript*(self: Ref[MultiplayerPeerExtension]): PackedByteArray {.base.} = (discard)
method putPacketScript*(self: Ref[MultiplayerPeerExtension]; pBuffer: PackedByteArray): Error {.base.} = (discard)
method getPacketChannel*(self: Ref[MultiplayerPeerExtension]): int32 {.base.} = (discard)
method getPacketMode*(self: Ref[MultiplayerPeerExtension]): MultiplayerPeer_TransferMode {.base.} = (discard)
method setTransferChannel*(self: Ref[MultiplayerPeerExtension]; pChannel: int32) {.base.} = (discard)
method getTransferChannel*(self: Ref[MultiplayerPeerExtension]): int32 {.base.} = (discard)
method setTransferMode*(self: Ref[MultiplayerPeerExtension]; pMode: MultiplayerPeer_TransferMode) {.base.} = (discard)
method getTransferMode*(self: Ref[MultiplayerPeerExtension]): MultiplayerPeer_TransferMode {.base.} = (discard)
method setTargetPeer*(self: Ref[MultiplayerPeerExtension]; pPeer: int32) {.base.} = (discard)
method getPacketPeer*(self: Ref[MultiplayerPeerExtension]): int32 {.base.} = (discard)
method isServer*(self: Ref[MultiplayerPeerExtension]): Bool {.base.} = (discard)
method poll*(self: Ref[MultiplayerPeerExtension]) {.base.} = (discard)
method close*(self: Ref[MultiplayerPeerExtension]) {.base.} = (discard)
method disconnectPeer*(self: Ref[MultiplayerPeerExtension]; pPeer: int32; pForce: Bool) {.base.} = (discard)
method getUniqueId*(self: Ref[MultiplayerPeerExtension]): int32 {.base.} = (discard)
method setRefuseNewConnections*(self: Ref[MultiplayerPeerExtension]; pEnable: Bool) {.base.} = (discard)
method isRefusingNewConnections*(self: Ref[MultiplayerPeerExtension]): Bool {.base.} = (discard)
method isServerRelaySupported*(self: Ref[MultiplayerPeerExtension]): Bool {.base.} = (discard)
method getConnectionStatus*(self: Ref[MultiplayerPeerExtension]): MultiplayerPeer_ConnectionStatus {.base.} = (discard)
proc bind_virtuals*(S: typedesc[MultiplayerPeerExtension]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_packet"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).getPacket(p_args[0].decode(ptr ptr uint8), p_args[1].decode(ptr int32)).encode(r_ret)
  table["_put_packet"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).putPacket(p_args[0].decode(ptr uint8), p_args[1].decode(int32)).encode(r_ret)
  table["_get_available_packet_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).getAvailablePacketCount().encode(r_ret)
  table["_get_max_packet_size"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).getMaxPacketSize().encode(r_ret)
  table["_get_packet_script"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).getPacketScript().encode(r_ret)
  table["_put_packet_script"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).putPacketScript(p_args[0].decode(PackedByteArray)).encode(r_ret)
  table["_get_packet_channel"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).getPacketChannel().encode(r_ret)
  table["_get_packet_mode"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).getPacketMode().encode(r_ret)
  table["_set_transfer_channel"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).setTransferChannel(p_args[0].decode(int32))
  table["_get_transfer_channel"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).getTransferChannel().encode(r_ret)
  table["_set_transfer_mode"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).setTransferMode(p_args[0].decode(MultiplayerPeer_TransferMode))
  table["_get_transfer_mode"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).getTransferMode().encode(r_ret)
  table["_set_target_peer"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).setTargetPeer(p_args[0].decode(int32))
  table["_get_packet_peer"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).getPacketPeer().encode(r_ret)
  table["_is_server"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).isServer().encode(r_ret)
  table["_poll"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).poll()
  table["_close"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).close()
  table["_disconnect_peer"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).disconnectPeer(p_args[0].decode(int32), p_args[1].decode(Bool))
  table["_get_unique_id"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).getUniqueId().encode(r_ret)
  table["_set_refuse_new_connections"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).setRefuseNewConnections(p_args[0].decode(Bool))
  table["_is_refusing_new_connections"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).isRefusingNewConnections().encode(r_ret)
  table["_is_server_relay_supported"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).isServerRelaySupported().encode(r_ret)
  table["_get_connection_status"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[MultiplayerPeerExtension]](p_instance).getConnectionStatus().encode(r_ret)

define_godot_engine_class_essencials(OfflineMultiplayerPeer, MultiplayerPeer)
define_godot_engine_class_essencials(WebRTCMultiplayerPeer, MultiplayerPeer)
define_godot_engine_class_essencials(WebSocketMultiplayerPeer, MultiplayerPeer)
define_godot_engine_class_essencials(WebRTCDataChannelExtension, WebRTCDataChannel)
method getPacket*(self: Ref[WebRTCDataChannelExtension]; rBuffer: ptr ptr uint8; rBufferSize: ptr int32): Error {.base.} = (discard)
method putPacket*(self: Ref[WebRTCDataChannelExtension]; pBuffer: ptr uint8; pBufferSize: int32): Error {.base.} = (discard)
method getAvailablePacketCount*(self: Ref[WebRTCDataChannelExtension]): int32 {.base.} = (discard)
method getMaxPacketSize*(self: Ref[WebRTCDataChannelExtension]): int32 {.base.} = (discard)
method poll*(self: Ref[WebRTCDataChannelExtension]): Error {.base.} = (discard)
method close*(self: Ref[WebRTCDataChannelExtension]) {.base.} = (discard)
method setWriteMode*(self: Ref[WebRTCDataChannelExtension]; pWriteMode: WebRTCDataChannel_WriteMode) {.base.} = (discard)
method getWriteMode*(self: Ref[WebRTCDataChannelExtension]): WebRTCDataChannel_WriteMode {.base.} = (discard)
method wasStringPacket*(self: Ref[WebRTCDataChannelExtension]): Bool {.base.} = (discard)
method getReadyState*(self: Ref[WebRTCDataChannelExtension]): WebRTCDataChannel_ChannelState {.base.} = (discard)
method getLabel*(self: Ref[WebRTCDataChannelExtension]): String {.base.} = (discard)
method isOrdered*(self: Ref[WebRTCDataChannelExtension]): Bool {.base.} = (discard)
method getId*(self: Ref[WebRTCDataChannelExtension]): int32 {.base.} = (discard)
method getMaxPacketLifeTime*(self: Ref[WebRTCDataChannelExtension]): int32 {.base.} = (discard)
method getMaxRetransmits*(self: Ref[WebRTCDataChannelExtension]): int32 {.base.} = (discard)
method getProtocol*(self: Ref[WebRTCDataChannelExtension]): String {.base.} = (discard)
method isNegotiated*(self: Ref[WebRTCDataChannelExtension]): Bool {.base.} = (discard)
method getBufferedAmount*(self: Ref[WebRTCDataChannelExtension]): int32 {.base.} = (discard)
proc bind_virtuals*(S: typedesc[WebRTCDataChannelExtension]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_packet"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCDataChannelExtension]](p_instance).getPacket(p_args[0].decode(ptr ptr uint8), p_args[1].decode(ptr int32)).encode(r_ret)
  table["_put_packet"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCDataChannelExtension]](p_instance).putPacket(p_args[0].decode(ptr uint8), p_args[1].decode(int32)).encode(r_ret)
  table["_get_available_packet_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCDataChannelExtension]](p_instance).getAvailablePacketCount().encode(r_ret)
  table["_get_max_packet_size"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCDataChannelExtension]](p_instance).getMaxPacketSize().encode(r_ret)
  table["_poll"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCDataChannelExtension]](p_instance).poll().encode(r_ret)
  table["_close"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCDataChannelExtension]](p_instance).close()
  table["_set_write_mode"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCDataChannelExtension]](p_instance).setWriteMode(p_args[0].decode(WebRTCDataChannel_WriteMode))
  table["_get_write_mode"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCDataChannelExtension]](p_instance).getWriteMode().encode(r_ret)
  table["_was_string_packet"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCDataChannelExtension]](p_instance).wasStringPacket().encode(r_ret)
  table["_get_ready_state"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCDataChannelExtension]](p_instance).getReadyState().encode(r_ret)
  table["_get_label"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCDataChannelExtension]](p_instance).getLabel().encode(r_ret)
  table["_is_ordered"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCDataChannelExtension]](p_instance).isOrdered().encode(r_ret)
  table["_get_id"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCDataChannelExtension]](p_instance).getId().encode(r_ret)
  table["_get_max_packet_life_time"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCDataChannelExtension]](p_instance).getMaxPacketLifeTime().encode(r_ret)
  table["_get_max_retransmits"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCDataChannelExtension]](p_instance).getMaxRetransmits().encode(r_ret)
  table["_get_protocol"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCDataChannelExtension]](p_instance).getProtocol().encode(r_ret)
  table["_is_negotiated"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCDataChannelExtension]](p_instance).isNegotiated().encode(r_ret)
  table["_get_buffered_amount"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[WebRTCDataChannelExtension]](p_instance).getBufferedAmount().encode(r_ret)

define_godot_engine_class_essencials(AnimationNodeOutput, AnimationNode)
define_godot_engine_class_essencials(AnimationNodeSync, AnimationNode)
define_godot_engine_class_essencials(AnimationNodeTimeScale, AnimationNode)
define_godot_engine_class_essencials(AnimationNodeTimeSeek, AnimationNode)
define_godot_engine_class_essencials(AnimationRootNode, AnimationNode)
define_godot_engine_class_essencials(AudioEffectAmplify, AudioEffect)
define_godot_engine_class_essencials(AudioEffectCapture, AudioEffect)
define_godot_engine_class_essencials(AudioEffectChorus, AudioEffect)
define_godot_engine_class_essencials(AudioEffectCompressor, AudioEffect)
define_godot_engine_class_essencials(AudioEffectDelay, AudioEffect)
define_godot_engine_class_essencials(AudioEffectDistortion, AudioEffect)
define_godot_engine_class_essencials(AudioEffectEQ, AudioEffect)
define_godot_engine_class_essencials(AudioEffectFilter, AudioEffect)
define_godot_engine_class_essencials(AudioEffectLimiter, AudioEffect)
define_godot_engine_class_essencials(AudioEffectPanner, AudioEffect)
define_godot_engine_class_essencials(AudioEffectPhaser, AudioEffect)
define_godot_engine_class_essencials(AudioEffectPitchShift, AudioEffect)
define_godot_engine_class_essencials(AudioEffectRecord, AudioEffect)
define_godot_engine_class_essencials(AudioEffectReverb, AudioEffect)
define_godot_engine_class_essencials(AudioEffectSpectrumAnalyzer, AudioEffect)
define_godot_engine_class_essencials(AudioEffectStereoEnhance, AudioEffect)
define_godot_engine_class_essencials(AudioStreamGenerator, AudioStream)
define_godot_engine_class_essencials(AudioStreamMP3, AudioStream)
define_godot_engine_class_essencials(AudioStreamMicrophone, AudioStream)
define_godot_engine_class_essencials(AudioStreamOggVorbis, AudioStream)
define_godot_engine_class_essencials(AudioStreamPolyphonic, AudioStream)
define_godot_engine_class_essencials(AudioStreamRandomizer, AudioStream)
define_godot_engine_class_essencials(AudioStreamWAV, AudioStream)
define_godot_engine_class_essencials(CameraAttributesPhysical, CameraAttributes)
define_godot_engine_class_essencials(CameraAttributesPractical, CameraAttributes)
define_godot_engine_class_essencials(FontFile, Font)
define_godot_engine_class_essencials(FontVariation, Font)
define_godot_engine_class_essencials(SystemFont, Font)
define_godot_engine_class_essencials(GLTFDocumentExtensionConvertImporterMesh, GLTFDocumentExtension)
define_godot_engine_class_essencials(GLTFDocumentExtensionPhysics, GLTFDocumentExtension)
define_godot_engine_class_essencials(GLTFDocumentExtensionTextureWebP, GLTFDocumentExtension)
define_godot_engine_class_essencials(InputEventAction, InputEvent)
define_godot_engine_class_essencials(InputEventFromWindow, InputEvent)
define_godot_engine_class_essencials(InputEventJoypadButton, InputEvent)
define_godot_engine_class_essencials(InputEventJoypadMotion, InputEvent)
define_godot_engine_class_essencials(InputEventMIDI, InputEvent)
define_godot_engine_class_essencials(InputEventShortcut, InputEvent)
define_godot_engine_class_essencials(BaseMaterial3D, Material)
define_godot_engine_class_essencials(CanvasItemMaterial, Material)
define_godot_engine_class_essencials(FogMaterial, Material)
define_godot_engine_class_essencials(PanoramaSkyMaterial, Material)
define_godot_engine_class_essencials(ParticleProcessMaterial, Material)
define_godot_engine_class_essencials(PhysicalSkyMaterial, Material)
define_godot_engine_class_essencials(PlaceholderMaterial, Material)
define_godot_engine_class_essencials(ProceduralSkyMaterial, Material)
define_godot_engine_class_essencials(ShaderMaterial, Material)
define_godot_engine_class_essencials(ArrayMesh, Mesh)
define_godot_engine_class_essencials(ImmediateMesh, Mesh)
define_godot_engine_class_essencials(PlaceholderMesh, Mesh)
define_godot_engine_class_essencials(PrimitiveMesh, Mesh)
method createMeshArray*(self: Ref[PrimitiveMesh]): Array {.base.} = (discard)
proc bind_virtuals*(S: typedesc[PrimitiveMesh]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_create_mesh_array"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[PrimitiveMesh]](p_instance).createMeshArray().encode(r_ret)

define_godot_engine_class_essencials(FastNoiseLite, Noise)
define_godot_engine_class_essencials(ArrayOccluder3D, Occluder3D)
define_godot_engine_class_essencials(BoxOccluder3D, Occluder3D)
define_godot_engine_class_essencials(PolygonOccluder3D, Occluder3D)
define_godot_engine_class_essencials(QuadOccluder3D, Occluder3D)
define_godot_engine_class_essencials(SphereOccluder3D, Occluder3D)
define_godot_engine_class_essencials(GDScript, Script)
define_godot_engine_class_essencials(ScriptExtension, Script)
method editorCanReloadFromFile*(self: Ref[ScriptExtension]): Bool {.base.} = (discard)
method placeholderErased*(self: Ref[ScriptExtension]; placeholder: pointer) {.base.} = (discard)
method canInstantiate*(self: Ref[ScriptExtension]): Bool {.base.} = (discard)
method getBaseScript*(self: Ref[ScriptExtension]): Ref[Script] {.base.} = (discard)
method getGlobalName*(self: Ref[ScriptExtension]): StringName {.base.} = (discard)
method inheritsScript*(self: Ref[ScriptExtension]; script: Ref[Script]): Bool {.base.} = (discard)
method getInstanceBaseType*(self: Ref[ScriptExtension]): StringName {.base.} = (discard)
method instanceCreate*(self: Ref[ScriptExtension]; forObject: ptr Object): pointer {.base.} = (discard)
method placeholderInstanceCreate*(self: Ref[ScriptExtension]; forObject: ptr Object): pointer {.base.} = (discard)
method instanceHas*(self: Ref[ScriptExtension]; `object`: ptr Object): Bool {.base.} = (discard)
method hasSourceCode*(self: Ref[ScriptExtension]): Bool {.base.} = (discard)
method getSourceCode*(self: Ref[ScriptExtension]): String {.base.} = (discard)
method setSourceCode*(self: Ref[ScriptExtension]; code: String) {.base.} = (discard)
method reload*(self: Ref[ScriptExtension]; keepState: Bool): Error {.base.} = (discard)
method getDocumentation*(self: Ref[ScriptExtension]): TypedArray[Dictionary] {.base.} = (discard)
method hasMethod*(self: Ref[ScriptExtension]; `method`: StringName): Bool {.base.} = (discard)
method getMethodInfo*(self: Ref[ScriptExtension]; `method`: StringName): Dictionary {.base.} = (discard)
method isTool*(self: Ref[ScriptExtension]): Bool {.base.} = (discard)
method isValid*(self: Ref[ScriptExtension]): Bool {.base.} = (discard)
method getLanguage*(self: Ref[ScriptExtension]): ScriptLanguage {.base.} = (discard)
method hasScriptSignal*(self: Ref[ScriptExtension]; signal: StringName): Bool {.base.} = (discard)
method getScriptSignalList*(self: Ref[ScriptExtension]): TypedArray[Dictionary] {.base.} = (discard)
method hasPropertyDefaultValue*(self: Ref[ScriptExtension]; property: StringName): Bool {.base.} = (discard)
method getPropertyDefaultValue*(self: Ref[ScriptExtension]; property: StringName): Variant {.base.} = (discard)
method updateExports*(self: Ref[ScriptExtension]) {.base.} = (discard)
method getScriptMethodList*(self: Ref[ScriptExtension]): TypedArray[Dictionary] {.base.} = (discard)
method getScriptPropertyList*(self: Ref[ScriptExtension]): TypedArray[Dictionary] {.base.} = (discard)
method getMemberLine*(self: Ref[ScriptExtension]; member: StringName): int32 {.base.} = (discard)
method getConstants*(self: Ref[ScriptExtension]): Dictionary {.base.} = (discard)
method getMembers*(self: Ref[ScriptExtension]): TypedArray[StringName] {.base.} = (discard)
method isPlaceholderFallbackEnabled*(self: Ref[ScriptExtension]): Bool {.base.} = (discard)
method getRpcConfig*(self: Ref[ScriptExtension]): Variant {.base.} = (discard)
proc bind_virtuals*(S: typedesc[ScriptExtension]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_editor_can_reload_from_file"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).editorCanReloadFromFile().encode(r_ret)
  table["_placeholder_erased"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).placeholderErased(p_args[0].decode(pointer))
  table["_can_instantiate"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).canInstantiate().encode(r_ret)
  table["_get_base_script"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).getBaseScript().encode(r_ret)
  table["_get_global_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).getGlobalName().encode(r_ret)
  table["_inherits_script"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).inheritsScript(p_args[0].decode(Ref[Script])).encode(r_ret)
  table["_get_instance_base_type"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).getInstanceBaseType().encode(r_ret)
  table["_instance_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).instanceCreate(p_args[0].decode(ptr Object)).encode(r_ret)
  table["_placeholder_instance_create"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).placeholderInstanceCreate(p_args[0].decode(ptr Object)).encode(r_ret)
  table["_instance_has"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).instanceHas(p_args[0].decode(ptr Object)).encode(r_ret)
  table["_has_source_code"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).hasSourceCode().encode(r_ret)
  table["_get_source_code"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).getSourceCode().encode(r_ret)
  table["_set_source_code"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).setSourceCode(p_args[0].decode(String))
  table["_reload"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).reload(p_args[0].decode(Bool)).encode(r_ret)
  table["_get_documentation"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).getDocumentation().encode(r_ret)
  table["_has_method"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).hasMethod(p_args[0].decode(StringName)).encode(r_ret)
  table["_get_method_info"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).getMethodInfo(p_args[0].decode(StringName)).encode(r_ret)
  table["_is_tool"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).isTool().encode(r_ret)
  table["_is_valid"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).isValid().encode(r_ret)
  table["_get_language"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).getLanguage().encode(r_ret)
  table["_has_script_signal"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).hasScriptSignal(p_args[0].decode(StringName)).encode(r_ret)
  table["_get_script_signal_list"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).getScriptSignalList().encode(r_ret)
  table["_has_property_default_value"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).hasPropertyDefaultValue(p_args[0].decode(StringName)).encode(r_ret)
  table["_get_property_default_value"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).getPropertyDefaultValue(p_args[0].decode(StringName)).encode(r_ret)
  table["_update_exports"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).updateExports()
  table["_get_script_method_list"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).getScriptMethodList().encode(r_ret)
  table["_get_script_property_list"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).getScriptPropertyList().encode(r_ret)
  table["_get_member_line"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).getMemberLine(p_args[0].decode(StringName)).encode(r_ret)
  table["_get_constants"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).getConstants().encode(r_ret)
  table["_get_members"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).getMembers().encode(r_ret)
  table["_is_placeholder_fallback_enabled"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).isPlaceholderFallbackEnabled().encode(r_ret)
  table["_get_rpc_config"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[ScriptExtension]](p_instance).getRpcConfig().encode(r_ret)

define_godot_engine_class_essencials(VisualShader, Shader)
define_godot_engine_class_essencials(CapsuleShape2D, Shape2D)
define_godot_engine_class_essencials(CircleShape2D, Shape2D)
define_godot_engine_class_essencials(ConcavePolygonShape2D, Shape2D)
define_godot_engine_class_essencials(ConvexPolygonShape2D, Shape2D)
define_godot_engine_class_essencials(RectangleShape2D, Shape2D)
define_godot_engine_class_essencials(SegmentShape2D, Shape2D)
define_godot_engine_class_essencials(SeparationRayShape2D, Shape2D)
define_godot_engine_class_essencials(WorldBoundaryShape2D, Shape2D)
define_godot_engine_class_essencials(BoxShape3D, Shape3D)
define_godot_engine_class_essencials(CapsuleShape3D, Shape3D)
define_godot_engine_class_essencials(ConcavePolygonShape3D, Shape3D)
define_godot_engine_class_essencials(ConvexPolygonShape3D, Shape3D)
define_godot_engine_class_essencials(CylinderShape3D, Shape3D)
define_godot_engine_class_essencials(HeightMapShape3D, Shape3D)
define_godot_engine_class_essencials(SeparationRayShape3D, Shape3D)
define_godot_engine_class_essencials(SphereShape3D, Shape3D)
define_godot_engine_class_essencials(WorldBoundaryShape3D, Shape3D)
define_godot_engine_class_essencials(SkeletonModification2DCCDIK, SkeletonModification2D)
define_godot_engine_class_essencials(SkeletonModification2DFABRIK, SkeletonModification2D)
define_godot_engine_class_essencials(SkeletonModification2DJiggle, SkeletonModification2D)
define_godot_engine_class_essencials(SkeletonModification2DLookAt, SkeletonModification2D)
define_godot_engine_class_essencials(SkeletonModification2DPhysicalBones, SkeletonModification2D)
define_godot_engine_class_essencials(SkeletonModification2DStackHolder, SkeletonModification2D)
define_godot_engine_class_essencials(SkeletonModification2DTwoBoneIK, SkeletonModification2D)
define_godot_engine_class_essencials(SkeletonProfileHumanoid, SkeletonProfile)
define_godot_engine_class_essencials(StyleBoxEmpty, StyleBox)
define_godot_engine_class_essencials(StyleBoxFlat, StyleBox)
define_godot_engine_class_essencials(StyleBoxLine, StyleBox)
define_godot_engine_class_essencials(StyleBoxTexture, StyleBox)
define_godot_engine_class_essencials(CodeHighlighter, SyntaxHighlighter)
define_godot_engine_class_essencials(EditorSyntaxHighlighter, SyntaxHighlighter)
method getName*(self: Ref[EditorSyntaxHighlighter]): String {.base.} = (discard)
method getSupportedLanguages*(self: Ref[EditorSyntaxHighlighter]): PackedStringArray {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorSyntaxHighlighter]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorSyntaxHighlighter]](p_instance).getName().encode(r_ret)
  table["_get_supported_languages"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[EditorSyntaxHighlighter]](p_instance).getSupportedLanguages().encode(r_ret)

define_godot_engine_class_essencials(Texture2D, Texture)
method getWidth*(self: Ref[Texture2D]): int32 {.base.} = (discard)
method getHeight*(self: Ref[Texture2D]): int32 {.base.} = (discard)
method isPixelOpaque*(self: Ref[Texture2D]; x: int32; y: int32): Bool {.base.} = (discard)
method hasAlpha*(self: Ref[Texture2D]): Bool {.base.} = (discard)
method draw*(self: Ref[Texture2D]; toCanvasItem: RID; pos: Vector2; modulate: Color; transpose: Bool) {.base.} = (discard)
method drawRect*(self: Ref[Texture2D]; toCanvasItem: RID; rect: Rect2; tile: Bool; modulate: Color; transpose: Bool) {.base.} = (discard)
method drawRectRegion*(self: Ref[Texture2D]; toCanvasItem: RID; rect: Rect2; srcRect: Rect2; modulate: Color; transpose: Bool; clipUv: Bool) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[Texture2D]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_width"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Texture2D]](p_instance).getWidth().encode(r_ret)
  table["_get_height"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Texture2D]](p_instance).getHeight().encode(r_ret)
  table["_is_pixel_opaque"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Texture2D]](p_instance).isPixelOpaque(p_args[0].decode(int32), p_args[1].decode(int32)).encode(r_ret)
  table["_has_alpha"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Texture2D]](p_instance).hasAlpha().encode(r_ret)
  table["_draw"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Texture2D]](p_instance).draw(p_args[0].decode(RID), p_args[1].decode(Vector2), p_args[2].decode(Color), p_args[3].decode(Bool))
  table["_draw_rect"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Texture2D]](p_instance).drawRect(p_args[0].decode(RID), p_args[1].decode(Rect2), p_args[2].decode(Bool), p_args[3].decode(Color), p_args[4].decode(Bool))
  table["_draw_rect_region"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Texture2D]](p_instance).drawRectRegion(p_args[0].decode(RID), p_args[1].decode(Rect2), p_args[2].decode(Rect2), p_args[3].decode(Color), p_args[4].decode(Bool), p_args[5].decode(Bool))

define_godot_engine_class_essencials(Texture3D, Texture)
method getFormat*(self: Ref[Texture3D]): Image_Format {.base.} = (discard)
method getWidth*(self: Ref[Texture3D]): int32 {.base.} = (discard)
method getHeight*(self: Ref[Texture3D]): int32 {.base.} = (discard)
method getDepth*(self: Ref[Texture3D]): int32 {.base.} = (discard)
method hasMipmaps*(self: Ref[Texture3D]): Bool {.base.} = (discard)
method getData*(self: Ref[Texture3D]): TypedArray[Image] {.base.} = (discard)
proc bind_virtuals*(S: typedesc[Texture3D]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_format"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Texture3D]](p_instance).getFormat().encode(r_ret)
  table["_get_width"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Texture3D]](p_instance).getWidth().encode(r_ret)
  table["_get_height"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Texture3D]](p_instance).getHeight().encode(r_ret)
  table["_get_depth"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Texture3D]](p_instance).getDepth().encode(r_ret)
  table["_has_mipmaps"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Texture3D]](p_instance).hasMipmaps().encode(r_ret)
  table["_get_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[Texture3D]](p_instance).getData().encode(r_ret)

define_godot_engine_class_essencials(TextureLayered, Texture)
method getFormat*(self: Ref[TextureLayered]): Image_Format {.base.} = (discard)
method getLayeredType*(self: Ref[TextureLayered]): uint32 {.base.} = (discard)
method getWidth*(self: Ref[TextureLayered]): int32 {.base.} = (discard)
method getHeight*(self: Ref[TextureLayered]): int32 {.base.} = (discard)
method getLayers*(self: Ref[TextureLayered]): int32 {.base.} = (discard)
method hasMipmaps*(self: Ref[TextureLayered]): Bool {.base.} = (discard)
method getLayerData*(self: Ref[TextureLayered]; layerIndex: int32): Ref[Image] {.base.} = (discard)
proc bind_virtuals*(S: typedesc[TextureLayered]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_format"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextureLayered]](p_instance).getFormat().encode(r_ret)
  table["_get_layered_type"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextureLayered]](p_instance).getLayeredType().encode(r_ret)
  table["_get_width"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextureLayered]](p_instance).getWidth().encode(r_ret)
  table["_get_height"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextureLayered]](p_instance).getHeight().encode(r_ret)
  table["_get_layers"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextureLayered]](p_instance).getLayers().encode(r_ret)
  table["_has_mipmaps"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextureLayered]](p_instance).hasMipmaps().encode(r_ret)
  table["_get_layer_data"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[TextureLayered]](p_instance).getLayerData(p_args[0].decode(int32)).encode(r_ret)

define_godot_engine_class_essencials(TileSetAtlasSource, TileSetSource)
define_godot_engine_class_essencials(TileSetScenesCollectionSource, TileSetSource)
define_godot_engine_class_essencials(OptimizedTranslation, Translation)
define_godot_engine_class_essencials(VideoStreamTheora, VideoStream)
define_godot_engine_class_essencials(VisualShaderNodeBillboard, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeClamp, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeColorFunc, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeColorOp, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeCompare, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeConstant, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeCubemap, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeCustom, VisualShaderNode)
method getName*(self: Ref[VisualShaderNodeCustom]): String {.base.} = (discard)
method getDescription*(self: Ref[VisualShaderNodeCustom]): String {.base.} = (discard)
method getCategory*(self: Ref[VisualShaderNodeCustom]): String {.base.} = (discard)
method getReturnIconType*(self: Ref[VisualShaderNodeCustom]): VisualShaderNode_PortType {.base.} = (discard)
method getInputPortCount*(self: Ref[VisualShaderNodeCustom]): int32 {.base.} = (discard)
method getInputPortType*(self: Ref[VisualShaderNodeCustom]; port: int32): VisualShaderNode_PortType {.base.} = (discard)
method getInputPortName*(self: Ref[VisualShaderNodeCustom]; port: int32): String {.base.} = (discard)
method getOutputPortCount*(self: Ref[VisualShaderNodeCustom]): int32 {.base.} = (discard)
method getOutputPortType*(self: Ref[VisualShaderNodeCustom]; port: int32): VisualShaderNode_PortType {.base.} = (discard)
method getOutputPortName*(self: Ref[VisualShaderNodeCustom]; port: int32): String {.base.} = (discard)
method getCode*(self: Ref[VisualShaderNodeCustom]; inputVars: TypedArray[String]; outputVars: TypedArray[String]; mode: Shader_Mode; `type`: VisualShader_Type): String {.base.} = (discard)
method getFuncCode*(self: Ref[VisualShaderNodeCustom]; mode: Shader_Mode; `type`: VisualShader_Type): String {.base.} = (discard)
method getGlobalCode*(self: Ref[VisualShaderNodeCustom]; mode: Shader_Mode): String {.base.} = (discard)
method isHighend*(self: Ref[VisualShaderNodeCustom]): Bool {.base.} = (discard)
method isAvailable*(self: Ref[VisualShaderNodeCustom]; mode: Shader_Mode; `type`: VisualShader_Type): Bool {.base.} = (discard)
proc bind_virtuals*(S: typedesc[VisualShaderNodeCustom]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_get_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VisualShaderNodeCustom]](p_instance).getName().encode(r_ret)
  table["_get_description"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VisualShaderNodeCustom]](p_instance).getDescription().encode(r_ret)
  table["_get_category"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VisualShaderNodeCustom]](p_instance).getCategory().encode(r_ret)
  table["_get_return_icon_type"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VisualShaderNodeCustom]](p_instance).getReturnIconType().encode(r_ret)
  table["_get_input_port_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VisualShaderNodeCustom]](p_instance).getInputPortCount().encode(r_ret)
  table["_get_input_port_type"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VisualShaderNodeCustom]](p_instance).getInputPortType(p_args[0].decode(int32)).encode(r_ret)
  table["_get_input_port_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VisualShaderNodeCustom]](p_instance).getInputPortName(p_args[0].decode(int32)).encode(r_ret)
  table["_get_output_port_count"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VisualShaderNodeCustom]](p_instance).getOutputPortCount().encode(r_ret)
  table["_get_output_port_type"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VisualShaderNodeCustom]](p_instance).getOutputPortType(p_args[0].decode(int32)).encode(r_ret)
  table["_get_output_port_name"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VisualShaderNodeCustom]](p_instance).getOutputPortName(p_args[0].decode(int32)).encode(r_ret)
  table["_get_code"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VisualShaderNodeCustom]](p_instance).getCode(p_args[0].decode(TypedArray[String]), p_args[1].decode(TypedArray[String]), p_args[2].decode(Shader_Mode), p_args[3].decode(VisualShader_Type)).encode(r_ret)
  table["_get_func_code"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VisualShaderNodeCustom]](p_instance).getFuncCode(p_args[0].decode(Shader_Mode), p_args[1].decode(VisualShader_Type)).encode(r_ret)
  table["_get_global_code"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VisualShaderNodeCustom]](p_instance).getGlobalCode(p_args[0].decode(Shader_Mode)).encode(r_ret)
  table["_is_highend"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VisualShaderNodeCustom]](p_instance).isHighend().encode(r_ret)
  table["_is_available"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[Ref[VisualShaderNodeCustom]](p_instance).isAvailable(p_args[0].decode(Shader_Mode), p_args[1].decode(VisualShader_Type)).encode(r_ret)

define_godot_engine_class_essencials(VisualShaderNodeDerivativeFunc, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeDeterminant, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeDistanceFade, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeDotProduct, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeFloatFunc, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeFloatOp, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeFresnel, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeIf, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeInput, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeIntFunc, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeIntOp, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeIs, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeLinearSceneDepth, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeMix, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeMultiplyAdd, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeOuterProduct, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeOutput, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeParameter, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeParameterRef, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeParticleAccelerator, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeParticleConeVelocity, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeParticleEmit, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeParticleEmitter, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeParticleMultiplyByAxisAngle, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeParticleRandomness, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeProximityFade, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeRandomRange, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeRemap, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeResizableBase, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeSDFRaymarch, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeSDFToScreenUV, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeSample3D, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeScreenUVToSDF, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeSmoothStep, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeStep, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeSwitch, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeTexture, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeTextureSDF, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeTextureSDFNormal, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeTransformCompose, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeTransformDecompose, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeTransformFunc, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeTransformOp, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeTransformVecMult, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeUIntFunc, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeUIntOp, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeUVFunc, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeUVPolarCoord, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeVarying, VisualShaderNode)
define_godot_engine_class_essencials(VisualShaderNodeVectorBase, VisualShaderNode)
define_godot_engine_class_essencials(TextServerAdvanced, TextServerExtension)
define_godot_engine_class_essencials(TextServerDummy, TextServerExtension)
define_godot_engine_class_essencials(Button, BaseButton)
define_godot_engine_class_essencials(LinkButton, BaseButton)
define_godot_engine_class_essencials(TextureButton, BaseButton)
define_godot_engine_class_essencials(AspectRatioContainer, Container)
define_godot_engine_class_essencials(BoxContainer, Container)
define_godot_engine_class_essencials(CenterContainer, Container)
define_godot_engine_class_essencials(EditorProperty, Container)
method updateProperty*(self: EditorProperty) {.base.} = (discard)
method setReadOnly*(self: EditorProperty; readOnly: Bool) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorProperty]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_update_property"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorProperty](p_instance).updateProperty()
  table["_set_read_only"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorProperty](p_instance).setReadOnly(p_args[0].decode(Bool))

define_godot_engine_class_essencials(FlowContainer, Container)
define_godot_engine_class_essencials(GraphNode, Container)
define_godot_engine_class_essencials(GridContainer, Container)
define_godot_engine_class_essencials(MarginContainer, Container)
define_godot_engine_class_essencials(PanelContainer, Container)
define_godot_engine_class_essencials(ScrollContainer, Container)
define_godot_engine_class_essencials(SplitContainer, Container)
define_godot_engine_class_essencials(SubViewportContainer, Container)
define_godot_engine_class_essencials(TabContainer, Container)
define_godot_engine_class_essencials(EditorSpinSlider, Range)
define_godot_engine_class_essencials(ProgressBar, Range)
define_godot_engine_class_essencials(ScrollBar, Range)
define_godot_engine_class_essencials(Slider, Range)
define_godot_engine_class_essencials(SpinBox, Range)
define_godot_engine_class_essencials(TextureProgressBar, Range)
define_godot_engine_class_essencials(HSeparator, Separator)
define_godot_engine_class_essencials(VSeparator, Separator)
define_godot_engine_class_essencials(CodeEdit, TextEdit)
method confirmCodeCompletion*(self: CodeEdit; replace: Bool) {.base.} = (discard)
method requestCodeCompletion*(self: CodeEdit; force: Bool) {.base.} = (discard)
method filterCodeCompletionCandidates*(self: CodeEdit; candidates: TypedArray[Dictionary]): TypedArray[Dictionary] {.base.} = (discard)
proc bind_virtuals*(S: typedesc[CodeEdit]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_confirm_code_completion"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[CodeEdit](p_instance).confirmCodeCompletion(p_args[0].decode(Bool))
  table["_request_code_completion"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[CodeEdit](p_instance).requestCodeCompletion(p_args[0].decode(Bool))
  table["_filter_code_completion_candidates"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[CodeEdit](p_instance).filterCodeCompletionCandidates(p_args[0].decode(TypedArray[Dictionary])).encode(r_ret)

define_godot_engine_class_essencials(Area2D, CollisionObject2D)
define_godot_engine_class_essencials(PhysicsBody2D, CollisionObject2D)
define_godot_engine_class_essencials(DampedSpringJoint2D, Joint2D)
define_godot_engine_class_essencials(GrooveJoint2D, Joint2D)
define_godot_engine_class_essencials(PinJoint2D, Joint2D)
define_godot_engine_class_essencials(DirectionalLight2D, Light2D)
define_godot_engine_class_essencials(PointLight2D, Light2D)
define_godot_engine_class_essencials(VisibleOnScreenEnabler2D, VisibleOnScreenNotifier2D)
define_godot_engine_class_essencials(CharacterBody3D, PhysicsBody3D)
define_godot_engine_class_essencials(PhysicalBone3D, PhysicsBody3D)
method integrateForces*(self: PhysicalBone3D; state: PhysicsDirectBodyState3D) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[PhysicalBone3D]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_integrate_forces"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[PhysicalBone3D](p_instance).integrateForces(p_args[0].decode(PhysicsDirectBodyState3D))

define_godot_engine_class_essencials(RigidBody3D, PhysicsBody3D)
method integrateForces*(self: RigidBody3D; state: PhysicsDirectBodyState3D) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[RigidBody3D]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_integrate_forces"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[RigidBody3D](p_instance).integrateForces(p_args[0].decode(PhysicsDirectBodyState3D))

define_godot_engine_class_essencials(StaticBody3D, PhysicsBody3D)
define_godot_engine_class_essencials(GPUParticlesAttractorBox3D, GPUParticlesAttractor3D)
define_godot_engine_class_essencials(GPUParticlesAttractorSphere3D, GPUParticlesAttractor3D)
define_godot_engine_class_essencials(GPUParticlesAttractorVectorField3D, GPUParticlesAttractor3D)
define_godot_engine_class_essencials(GPUParticlesCollisionBox3D, GPUParticlesCollision3D)
define_godot_engine_class_essencials(GPUParticlesCollisionHeightField3D, GPUParticlesCollision3D)
define_godot_engine_class_essencials(GPUParticlesCollisionSDF3D, GPUParticlesCollision3D)
define_godot_engine_class_essencials(GPUParticlesCollisionSphere3D, GPUParticlesCollision3D)
define_godot_engine_class_essencials(CPUParticles3D, GeometryInstance3D)
define_godot_engine_class_essencials(CSGShape3D, GeometryInstance3D)
define_godot_engine_class_essencials(GPUParticles3D, GeometryInstance3D)
define_godot_engine_class_essencials(Label3D, GeometryInstance3D)
define_godot_engine_class_essencials(MeshInstance3D, GeometryInstance3D)
define_godot_engine_class_essencials(MultiMeshInstance3D, GeometryInstance3D)
define_godot_engine_class_essencials(SpriteBase3D, GeometryInstance3D)
define_godot_engine_class_essencials(DirectionalLight3D, Light3D)
define_godot_engine_class_essencials(OmniLight3D, Light3D)
define_godot_engine_class_essencials(SpotLight3D, Light3D)
define_godot_engine_class_essencials(VisibleOnScreenEnabler3D, VisibleOnScreenNotifier3D)
define_godot_engine_class_essencials(ConfirmationDialog, AcceptDialog)
define_godot_engine_class_essencials(PopupMenu, Popup)
define_godot_engine_class_essencials(PopupPanel, Popup)
define_godot_engine_class_essencials(AnimationNodeAdd2, AnimationNodeSync)
define_godot_engine_class_essencials(AnimationNodeAdd3, AnimationNodeSync)
define_godot_engine_class_essencials(AnimationNodeBlend2, AnimationNodeSync)
define_godot_engine_class_essencials(AnimationNodeBlend3, AnimationNodeSync)
define_godot_engine_class_essencials(AnimationNodeOneShot, AnimationNodeSync)
define_godot_engine_class_essencials(AnimationNodeSub2, AnimationNodeSync)
define_godot_engine_class_essencials(AnimationNodeTransition, AnimationNodeSync)
define_godot_engine_class_essencials(AnimationNodeAnimation, AnimationRootNode)
define_godot_engine_class_essencials(AnimationNodeBlendSpace1D, AnimationRootNode)
define_godot_engine_class_essencials(AnimationNodeBlendSpace2D, AnimationRootNode)
define_godot_engine_class_essencials(AnimationNodeBlendTree, AnimationRootNode)
define_godot_engine_class_essencials(AnimationNodeStateMachine, AnimationRootNode)
define_godot_engine_class_essencials(AudioEffectEQ10, AudioEffectEQ)
define_godot_engine_class_essencials(AudioEffectEQ21, AudioEffectEQ)
define_godot_engine_class_essencials(AudioEffectEQ6, AudioEffectEQ)
define_godot_engine_class_essencials(AudioEffectBandLimitFilter, AudioEffectFilter)
define_godot_engine_class_essencials(AudioEffectBandPassFilter, AudioEffectFilter)
define_godot_engine_class_essencials(AudioEffectHighPassFilter, AudioEffectFilter)
define_godot_engine_class_essencials(AudioEffectHighShelfFilter, AudioEffectFilter)
define_godot_engine_class_essencials(AudioEffectLowPassFilter, AudioEffectFilter)
define_godot_engine_class_essencials(AudioEffectLowShelfFilter, AudioEffectFilter)
define_godot_engine_class_essencials(AudioEffectNotchFilter, AudioEffectFilter)
define_godot_engine_class_essencials(InputEventScreenDrag, InputEventFromWindow)
define_godot_engine_class_essencials(InputEventScreenTouch, InputEventFromWindow)
define_godot_engine_class_essencials(InputEventWithModifiers, InputEventFromWindow)
define_godot_engine_class_essencials(ORMMaterial3D, BaseMaterial3D)
define_godot_engine_class_essencials(StandardMaterial3D, BaseMaterial3D)
define_godot_engine_class_essencials(BoxMesh, PrimitiveMesh)
define_godot_engine_class_essencials(CapsuleMesh, PrimitiveMesh)
define_godot_engine_class_essencials(CylinderMesh, PrimitiveMesh)
define_godot_engine_class_essencials(PlaneMesh, PrimitiveMesh)
define_godot_engine_class_essencials(PointMesh, PrimitiveMesh)
define_godot_engine_class_essencials(PrismMesh, PrimitiveMesh)
define_godot_engine_class_essencials(RibbonTrailMesh, PrimitiveMesh)
define_godot_engine_class_essencials(SphereMesh, PrimitiveMesh)
define_godot_engine_class_essencials(TextMesh, PrimitiveMesh)
define_godot_engine_class_essencials(TorusMesh, PrimitiveMesh)
define_godot_engine_class_essencials(TubeTrailMesh, PrimitiveMesh)
define_godot_engine_class_essencials(AnimatedTexture, Texture2D)
define_godot_engine_class_essencials(AtlasTexture, Texture2D)
define_godot_engine_class_essencials(CameraTexture, Texture2D)
define_godot_engine_class_essencials(CanvasTexture, Texture2D)
define_godot_engine_class_essencials(CompressedTexture2D, Texture2D)
define_godot_engine_class_essencials(CurveTexture, Texture2D)
define_godot_engine_class_essencials(CurveXYZTexture, Texture2D)
define_godot_engine_class_essencials(GradientTexture1D, Texture2D)
define_godot_engine_class_essencials(GradientTexture2D, Texture2D)
define_godot_engine_class_essencials(ImageTexture, Texture2D)
define_godot_engine_class_essencials(MeshTexture, Texture2D)
define_godot_engine_class_essencials(NoiseTexture2D, Texture2D)
define_godot_engine_class_essencials(PlaceholderTexture2D, Texture2D)
define_godot_engine_class_essencials(PortableCompressedTexture2D, Texture2D)
define_godot_engine_class_essencials(ViewportTexture, Texture2D)
define_godot_engine_class_essencials(CompressedTexture3D, Texture3D)
define_godot_engine_class_essencials(ImageTexture3D, Texture3D)
define_godot_engine_class_essencials(NoiseTexture3D, Texture3D)
define_godot_engine_class_essencials(PlaceholderTexture3D, Texture3D)
define_godot_engine_class_essencials(CompressedTextureLayered, TextureLayered)
define_godot_engine_class_essencials(ImageTextureLayered, TextureLayered)
define_godot_engine_class_essencials(PlaceholderTextureLayered, TextureLayered)
define_godot_engine_class_essencials(VisualShaderNodeBooleanConstant, VisualShaderNodeConstant)
define_godot_engine_class_essencials(VisualShaderNodeColorConstant, VisualShaderNodeConstant)
define_godot_engine_class_essencials(VisualShaderNodeFloatConstant, VisualShaderNodeConstant)
define_godot_engine_class_essencials(VisualShaderNodeIntConstant, VisualShaderNodeConstant)
define_godot_engine_class_essencials(VisualShaderNodeTransformConstant, VisualShaderNodeConstant)
define_godot_engine_class_essencials(VisualShaderNodeUIntConstant, VisualShaderNodeConstant)
define_godot_engine_class_essencials(VisualShaderNodeVec2Constant, VisualShaderNodeConstant)
define_godot_engine_class_essencials(VisualShaderNodeVec3Constant, VisualShaderNodeConstant)
define_godot_engine_class_essencials(VisualShaderNodeVec4Constant, VisualShaderNodeConstant)
define_godot_engine_class_essencials(VisualShaderNodeParticleOutput, VisualShaderNodeOutput)
define_godot_engine_class_essencials(VisualShaderNodeBooleanParameter, VisualShaderNodeParameter)
define_godot_engine_class_essencials(VisualShaderNodeColorParameter, VisualShaderNodeParameter)
define_godot_engine_class_essencials(VisualShaderNodeFloatParameter, VisualShaderNodeParameter)
define_godot_engine_class_essencials(VisualShaderNodeIntParameter, VisualShaderNodeParameter)
define_godot_engine_class_essencials(VisualShaderNodeTextureParameter, VisualShaderNodeParameter)
define_godot_engine_class_essencials(VisualShaderNodeTransformParameter, VisualShaderNodeParameter)
define_godot_engine_class_essencials(VisualShaderNodeUIntParameter, VisualShaderNodeParameter)
define_godot_engine_class_essencials(VisualShaderNodeVec2Parameter, VisualShaderNodeParameter)
define_godot_engine_class_essencials(VisualShaderNodeVec3Parameter, VisualShaderNodeParameter)
define_godot_engine_class_essencials(VisualShaderNodeVec4Parameter, VisualShaderNodeParameter)
define_godot_engine_class_essencials(VisualShaderNodeParticleBoxEmitter, VisualShaderNodeParticleEmitter)
define_godot_engine_class_essencials(VisualShaderNodeParticleMeshEmitter, VisualShaderNodeParticleEmitter)
define_godot_engine_class_essencials(VisualShaderNodeParticleRingEmitter, VisualShaderNodeParticleEmitter)
define_godot_engine_class_essencials(VisualShaderNodeParticleSphereEmitter, VisualShaderNodeParticleEmitter)
define_godot_engine_class_essencials(VisualShaderNodeComment, VisualShaderNodeResizableBase)
define_godot_engine_class_essencials(VisualShaderNodeCurveTexture, VisualShaderNodeResizableBase)
define_godot_engine_class_essencials(VisualShaderNodeCurveXYZTexture, VisualShaderNodeResizableBase)
define_godot_engine_class_essencials(VisualShaderNodeGroupBase, VisualShaderNodeResizableBase)
define_godot_engine_class_essencials(VisualShaderNodeTexture2DArray, VisualShaderNodeSample3D)
define_godot_engine_class_essencials(VisualShaderNodeTexture3D, VisualShaderNodeSample3D)
define_godot_engine_class_essencials(VisualShaderNodeVaryingGetter, VisualShaderNodeVarying)
define_godot_engine_class_essencials(VisualShaderNodeVaryingSetter, VisualShaderNodeVarying)
define_godot_engine_class_essencials(VisualShaderNodeFaceForward, VisualShaderNodeVectorBase)
define_godot_engine_class_essencials(VisualShaderNodeVectorCompose, VisualShaderNodeVectorBase)
define_godot_engine_class_essencials(VisualShaderNodeVectorDecompose, VisualShaderNodeVectorBase)
define_godot_engine_class_essencials(VisualShaderNodeVectorDistance, VisualShaderNodeVectorBase)
define_godot_engine_class_essencials(VisualShaderNodeVectorFunc, VisualShaderNodeVectorBase)
define_godot_engine_class_essencials(VisualShaderNodeVectorLen, VisualShaderNodeVectorBase)
define_godot_engine_class_essencials(VisualShaderNodeVectorOp, VisualShaderNodeVectorBase)
define_godot_engine_class_essencials(VisualShaderNodeVectorRefract, VisualShaderNodeVectorBase)
define_godot_engine_class_essencials(CheckBox, Button)
define_godot_engine_class_essencials(CheckButton, Button)
define_godot_engine_class_essencials(ColorPickerButton, Button)
define_godot_engine_class_essencials(MenuButton, Button)
define_godot_engine_class_essencials(OptionButton, Button)
define_godot_engine_class_essencials(HBoxContainer, BoxContainer)
define_godot_engine_class_essencials(VBoxContainer, BoxContainer)
define_godot_engine_class_essencials(HFlowContainer, FlowContainer)
define_godot_engine_class_essencials(VFlowContainer, FlowContainer)
define_godot_engine_class_essencials(ScriptEditor, PanelContainer)
define_godot_engine_class_essencials(EditorInspector, ScrollContainer)
define_godot_engine_class_essencials(HSplitContainer, SplitContainer)
define_godot_engine_class_essencials(VSplitContainer, SplitContainer)
define_godot_engine_class_essencials(HScrollBar, ScrollBar)
define_godot_engine_class_essencials(VScrollBar, ScrollBar)
define_godot_engine_class_essencials(HSlider, Slider)
define_godot_engine_class_essencials(VSlider, Slider)
define_godot_engine_class_essencials(CharacterBody2D, PhysicsBody2D)
define_godot_engine_class_essencials(RigidBody2D, PhysicsBody2D)
method integrateForces*(self: RigidBody2D; state: PhysicsDirectBodyState2D) {.base.} = (discard)
proc bind_virtuals*(S: typedesc[RigidBody2D]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_integrate_forces"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[RigidBody2D](p_instance).integrateForces(p_args[0].decode(PhysicsDirectBodyState2D))

define_godot_engine_class_essencials(StaticBody2D, PhysicsBody2D)
define_godot_engine_class_essencials(VehicleBody3D, RigidBody3D)
define_godot_engine_class_essencials(AnimatableBody3D, StaticBody3D)
define_godot_engine_class_essencials(CSGCombiner3D, CSGShape3D)
define_godot_engine_class_essencials(CSGPrimitive3D, CSGShape3D)
define_godot_engine_class_essencials(SoftBody3D, MeshInstance3D)
define_godot_engine_class_essencials(AnimatedSprite3D, SpriteBase3D)
define_godot_engine_class_essencials(Sprite3D, SpriteBase3D)
define_godot_engine_class_essencials(EditorCommandPalette, ConfirmationDialog)
define_godot_engine_class_essencials(EditorFileDialog, ConfirmationDialog)
define_godot_engine_class_essencials(FileDialog, ConfirmationDialog)
define_godot_engine_class_essencials(ScriptCreateDialog, ConfirmationDialog)
define_godot_engine_class_essencials(InputEventGesture, InputEventWithModifiers)
define_godot_engine_class_essencials(InputEventKey, InputEventWithModifiers)
define_godot_engine_class_essencials(InputEventMouse, InputEventWithModifiers)
define_godot_engine_class_essencials(QuadMesh, PlaneMesh)
define_godot_engine_class_essencials(CompressedCubemap, CompressedTextureLayered)
define_godot_engine_class_essencials(CompressedCubemapArray, CompressedTextureLayered)
define_godot_engine_class_essencials(CompressedTexture2DArray, CompressedTextureLayered)
define_godot_engine_class_essencials(Cubemap, ImageTextureLayered)
define_godot_engine_class_essencials(CubemapArray, ImageTextureLayered)
define_godot_engine_class_essencials(Texture2DArray, ImageTextureLayered)
define_godot_engine_class_essencials(PlaceholderCubemap, PlaceholderTextureLayered)
define_godot_engine_class_essencials(PlaceholderCubemapArray, PlaceholderTextureLayered)
define_godot_engine_class_essencials(PlaceholderTexture2DArray, PlaceholderTextureLayered)
define_godot_engine_class_essencials(VisualShaderNodeCubemapParameter, VisualShaderNodeTextureParameter)
define_godot_engine_class_essencials(VisualShaderNodeTexture2DArrayParameter, VisualShaderNodeTextureParameter)
define_godot_engine_class_essencials(VisualShaderNodeTexture2DParameter, VisualShaderNodeTextureParameter)
define_godot_engine_class_essencials(VisualShaderNodeTexture3DParameter, VisualShaderNodeTextureParameter)
define_godot_engine_class_essencials(VisualShaderNodeTextureParameterTriplanar, VisualShaderNodeTextureParameter)
define_godot_engine_class_essencials(VisualShaderNodeExpression, VisualShaderNodeGroupBase)
define_godot_engine_class_essencials(EditorResourcePicker, HBoxContainer)
method setCreateOptions*(self: EditorResourcePicker; menuNode: ptr Object) {.base.} = (discard)
method handleMenuSelected*(self: EditorResourcePicker; id: int32): Bool {.base.} = (discard)
proc bind_virtuals*(S: typedesc[EditorResourcePicker]; T: typedesc) =
  S.Inherit.bind_virtuals(T)
  let table = get_userdata(T).virtualMethods
  table["_set_create_options"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorResourcePicker](p_instance).setCreateOptions(p_args[0].decode(ptr Object))
  table["_handle_menu_selected"] = proc(p_instance: ClassInstancePtr; p_args: UncheckedArray[ConstTypePtr]; r_ret: TypePtr) {.gdcall.} = cast[EditorResourcePicker](p_instance).handleMenuSelected(p_args[0].decode(int32)).encode(r_ret)

define_godot_engine_class_essencials(ColorPicker, VBoxContainer)
define_godot_engine_class_essencials(FileSystemDock, VBoxContainer)
define_godot_engine_class_essencials(ScriptEditorBase, VBoxContainer)
define_godot_engine_class_essencials(PhysicalBone2D, RigidBody2D)
define_godot_engine_class_essencials(AnimatableBody2D, StaticBody2D)
define_godot_engine_class_essencials(CSGBox3D, CSGPrimitive3D)
define_godot_engine_class_essencials(CSGCylinder3D, CSGPrimitive3D)
define_godot_engine_class_essencials(CSGMesh3D, CSGPrimitive3D)
define_godot_engine_class_essencials(CSGPolygon3D, CSGPrimitive3D)
define_godot_engine_class_essencials(CSGSphere3D, CSGPrimitive3D)
define_godot_engine_class_essencials(CSGTorus3D, CSGPrimitive3D)
define_godot_engine_class_essencials(InputEventMagnifyGesture, InputEventGesture)
define_godot_engine_class_essencials(InputEventPanGesture, InputEventGesture)
define_godot_engine_class_essencials(InputEventMouseButton, InputEventMouse)
define_godot_engine_class_essencials(InputEventMouseMotion, InputEventMouse)
define_godot_engine_class_essencials(VisualShaderNodeGlobalExpression, VisualShaderNodeExpression)
define_godot_engine_class_essencials(EditorScriptPicker, EditorResourcePicker)