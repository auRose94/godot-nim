# ======================================== #
# This module was generated automatically. #
# Edits will be lost.                      #
# ======================================== #
import ./../helper/engineClassDefiner

method hasFeature*(self: Ref[TextServerExtension]; feature: TextServer_Feature): Bool {.base.} = (discard)
method getName*(self: Ref[TextServerExtension]): String {.base.} = (discard)
method getFeatures*(self: Ref[TextServerExtension]): int64 {.base.} = (discard)
method freeRid*(self: Ref[TextServerExtension]; rid: RID) {.base.} = (discard)
method has*(self: Ref[TextServerExtension]; rid: RID): Bool {.base.} = (discard)
method loadSupportData*(self: Ref[TextServerExtension]; filename: String): Bool {.base.} = (discard)
method getSupportDataFilename*(self: Ref[TextServerExtension]): String {.base.} = (discard)
method getSupportDataInfo*(self: Ref[TextServerExtension]): String {.base.} = (discard)
method saveSupportData*(self: Ref[TextServerExtension]; filename: String): Bool {.base.} = (discard)
method isLocaleRightToLeft*(self: Ref[TextServerExtension]; locale: String): Bool {.base.} = (discard)
method nameToTag*(self: Ref[TextServerExtension]; name: String): int64 {.base.} = (discard)
method tagToName*(self: Ref[TextServerExtension]; tag: int64): String {.base.} = (discard)
method createFont*(self: Ref[TextServerExtension]): RID {.base.} = (discard)
method fontSetData*(self: Ref[TextServerExtension]; fontRid: RID; data: PackedByteArray) {.base.} = (discard)
method fontSetDataPtr*(self: Ref[TextServerExtension]; fontRid: RID; dataPtr: ptr uint8; dataSize: int64) {.base.} = (discard)
method fontSetFaceIndex*(self: Ref[TextServerExtension]; fontRid: RID; faceIndex: int64) {.base.} = (discard)
method fontGetFaceIndex*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontGetFaceCount*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontSetStyle*(self: Ref[TextServerExtension]; fontRid: RID; style: set[TextServer_FontStyle]) {.base.} = (discard)
method fontGetStyle*(self: Ref[TextServerExtension]; fontRid: RID): set[TextServer_FontStyle] {.base.} = (discard)
method fontSetName*(self: Ref[TextServerExtension]; fontRid: RID; name: String) {.base.} = (discard)
method fontGetName*(self: Ref[TextServerExtension]; fontRid: RID): String {.base.} = (discard)
method fontGetOtNameStrings*(self: Ref[TextServerExtension]; fontRid: RID): Dictionary {.base.} = (discard)
method fontSetStyleName*(self: Ref[TextServerExtension]; fontRid: RID; nameStyle: String) {.base.} = (discard)
method fontGetStyleName*(self: Ref[TextServerExtension]; fontRid: RID): String {.base.} = (discard)
method fontSetWeight*(self: Ref[TextServerExtension]; fontRid: RID; weight: int64) {.base.} = (discard)
method fontGetWeight*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontSetStretch*(self: Ref[TextServerExtension]; fontRid: RID; stretch: int64) {.base.} = (discard)
method fontGetStretch*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontSetAntialiasing*(self: Ref[TextServerExtension]; fontRid: RID; antialiasing: TextServer_FontAntialiasing) {.base.} = (discard)
method fontGetAntialiasing*(self: Ref[TextServerExtension]; fontRid: RID): TextServer_FontAntialiasing {.base.} = (discard)
method fontSetGenerateMipmaps*(self: Ref[TextServerExtension]; fontRid: RID; generateMipmaps: Bool) {.base.} = (discard)
method fontGetGenerateMipmaps*(self: Ref[TextServerExtension]; fontRid: RID): Bool {.base.} = (discard)
method fontSetMultichannelSignedDistanceField*(self: Ref[TextServerExtension]; fontRid: RID; msdf: Bool) {.base.} = (discard)
method fontIsMultichannelSignedDistanceField*(self: Ref[TextServerExtension]; fontRid: RID): Bool {.base.} = (discard)
method fontSetMsdfPixelRange*(self: Ref[TextServerExtension]; fontRid: RID; msdfPixelRange: int64) {.base.} = (discard)
method fontGetMsdfPixelRange*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontSetMsdfSize*(self: Ref[TextServerExtension]; fontRid: RID; msdfSize: int64) {.base.} = (discard)
method fontGetMsdfSize*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontSetFixedSize*(self: Ref[TextServerExtension]; fontRid: RID; fixedSize: int64) {.base.} = (discard)
method fontGetFixedSize*(self: Ref[TextServerExtension]; fontRid: RID): int64 {.base.} = (discard)
method fontSetAllowSystemFallback*(self: Ref[TextServerExtension]; fontRid: RID; allowSystemFallback: Bool) {.base.} = (discard)
method fontIsAllowSystemFallback*(self: Ref[TextServerExtension]; fontRid: RID): Bool {.base.} = (discard)
method fontSetForceAutohinter*(self: Ref[TextServerExtension]; fontRid: RID; forceAutohinter: Bool) {.base.} = (discard)
method fontIsForceAutohinter*(self: Ref[TextServerExtension]; fontRid: RID): Bool {.base.} = (discard)
method fontSetHinting*(self: Ref[TextServerExtension]; fontRid: RID; hinting: TextServer_Hinting) {.base.} = (discard)
method fontGetHinting*(self: Ref[TextServerExtension]; fontRid: RID): TextServer_Hinting {.base.} = (discard)
method fontSetSubpixelPositioning*(self: Ref[TextServerExtension]; fontRid: RID; subpixelPositioning: TextServer_SubpixelPositioning) {.base.} = (discard)
method fontGetSubpixelPositioning*(self: Ref[TextServerExtension]; fontRid: RID): TextServer_SubpixelPositioning {.base.} = (discard)
method fontSetEmbolden*(self: Ref[TextServerExtension]; fontRid: RID; strength: float64) {.base.} = (discard)
method fontGetEmbolden*(self: Ref[TextServerExtension]; fontRid: RID): float64 {.base.} = (discard)
method fontSetTransform*(self: Ref[TextServerExtension]; fontRid: RID; transform: Transform2D) {.base.} = (discard)
method fontGetTransform*(self: Ref[TextServerExtension]; fontRid: RID): Transform2D {.base.} = (discard)
method fontSetVariationCoordinates*(self: Ref[TextServerExtension]; fontRid: RID; variationCoordinates: Dictionary) {.base.} = (discard)
method fontGetVariationCoordinates*(self: Ref[TextServerExtension]; fontRid: RID): Dictionary {.base.} = (discard)
method fontSetOversampling*(self: Ref[TextServerExtension]; fontRid: RID; oversampling: float64) {.base.} = (discard)
method fontGetOversampling*(self: Ref[TextServerExtension]; fontRid: RID): float64 {.base.} = (discard)
method fontGetSizeCacheList*(self: Ref[TextServerExtension]; fontRid: RID): TypedArray[Vector2i] {.base.} = (discard)
method fontClearSizeCache*(self: Ref[TextServerExtension]; fontRid: RID) {.base.} = (discard)
method fontRemoveSizeCache*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i) {.base.} = (discard)
method fontSetAscent*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; ascent: float64) {.base.} = (discard)
method fontGetAscent*(self: Ref[TextServerExtension]; fontRid: RID; size: int64): float64 {.base.} = (discard)
method fontSetDescent*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; descent: float64) {.base.} = (discard)
method fontGetDescent*(self: Ref[TextServerExtension]; fontRid: RID; size: int64): float64 {.base.} = (discard)
method fontSetUnderlinePosition*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; underlinePosition: float64) {.base.} = (discard)
method fontGetUnderlinePosition*(self: Ref[TextServerExtension]; fontRid: RID; size: int64): float64 {.base.} = (discard)
method fontSetUnderlineThickness*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; underlineThickness: float64) {.base.} = (discard)
method fontGetUnderlineThickness*(self: Ref[TextServerExtension]; fontRid: RID; size: int64): float64 {.base.} = (discard)
method fontSetScale*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; scale: float64) {.base.} = (discard)
method fontGetScale*(self: Ref[TextServerExtension]; fontRid: RID; size: int64): float64 {.base.} = (discard)
method fontGetTextureCount*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i): int64 {.base.} = (discard)
method fontClearTextures*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i) {.base.} = (discard)
method fontRemoveTexture*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; textureIndex: int64) {.base.} = (discard)
method fontSetTextureImage*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; textureIndex: int64; image: Ref[Image]) {.base.} = (discard)
method fontGetTextureImage*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; textureIndex: int64): Ref[Image] {.base.} = (discard)
method fontSetTextureOffsets*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; textureIndex: int64; offset: PackedInt32Array) {.base.} = (discard)
method fontGetTextureOffsets*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; textureIndex: int64): PackedInt32Array {.base.} = (discard)
method fontGetGlyphList*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i): PackedInt32Array {.base.} = (discard)
method fontClearGlyphs*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i) {.base.} = (discard)
method fontRemoveGlyph*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64) {.base.} = (discard)
method fontGetGlyphAdvance*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; glyph: int64): Vector2 {.base.} = (discard)
method fontSetGlyphAdvance*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; glyph: int64; advance: Vector2) {.base.} = (discard)
method fontGetGlyphOffset*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64): Vector2 {.base.} = (discard)
method fontSetGlyphOffset*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64; offset: Vector2) {.base.} = (discard)
method fontGetGlyphSize*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64): Vector2 {.base.} = (discard)
method fontSetGlyphSize*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64; glSize: Vector2) {.base.} = (discard)
method fontGetGlyphUvRect*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64): Rect2 {.base.} = (discard)
method fontSetGlyphUvRect*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64; uvRect: Rect2) {.base.} = (discard)
method fontGetGlyphTextureIdx*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64): int64 {.base.} = (discard)
method fontSetGlyphTextureIdx*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64; textureIdx: int64) {.base.} = (discard)
method fontGetGlyphTextureRid*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64): RID {.base.} = (discard)
method fontGetGlyphTextureSize*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; glyph: int64): Vector2 {.base.} = (discard)
method fontGetGlyphContours*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; index: int64): Dictionary {.base.} = (discard)
method fontGetKerningList*(self: Ref[TextServerExtension]; fontRid: RID; size: int64): TypedArray[Vector2i] {.base.} = (discard)
method fontClearKerningMap*(self: Ref[TextServerExtension]; fontRid: RID; size: int64) {.base.} = (discard)
method fontRemoveKerning*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; glyphPair: Vector2i) {.base.} = (discard)
method fontSetKerning*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; glyphPair: Vector2i; kerning: Vector2) {.base.} = (discard)
method fontGetKerning*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; glyphPair: Vector2i): Vector2 {.base.} = (discard)
method fontGetGlyphIndex*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; char: int64; variationSelector: int64): int64 {.base.} = (discard)
method fontGetCharFromGlyphIndex*(self: Ref[TextServerExtension]; fontRid: RID; size: int64; glyphIndex: int64): int64 {.base.} = (discard)
method fontHasChar*(self: Ref[TextServerExtension]; fontRid: RID; char: int64): Bool {.base.} = (discard)
method fontGetSupportedChars*(self: Ref[TextServerExtension]; fontRid: RID): String {.base.} = (discard)
method fontRenderRange*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; start: int64; `end`: int64) {.base.} = (discard)
method fontRenderGlyph*(self: Ref[TextServerExtension]; fontRid: RID; size: Vector2i; index: int64) {.base.} = (discard)
method fontDrawGlyph*(self: Ref[TextServerExtension]; fontRid: RID; canvas: RID; size: int64; pos: Vector2; index: int64; color: Color) {.base.} = (discard)
method fontDrawGlyphOutline*(self: Ref[TextServerExtension]; fontRid: RID; canvas: RID; size: int64; outlineSize: int64; pos: Vector2; index: int64; color: Color) {.base.} = (discard)
method fontIsLanguageSupported*(self: Ref[TextServerExtension]; fontRid: RID; language: String): Bool {.base.} = (discard)
method fontSetLanguageSupportOverride*(self: Ref[TextServerExtension]; fontRid: RID; language: String; supported: Bool) {.base.} = (discard)
method fontGetLanguageSupportOverride*(self: Ref[TextServerExtension]; fontRid: RID; language: String): Bool {.base.} = (discard)
method fontRemoveLanguageSupportOverride*(self: Ref[TextServerExtension]; fontRid: RID; language: String) {.base.} = (discard)
method fontGetLanguageSupportOverrides*(self: Ref[TextServerExtension]; fontRid: RID): PackedStringArray {.base.} = (discard)
method fontIsScriptSupported*(self: Ref[TextServerExtension]; fontRid: RID; script: String): Bool {.base.} = (discard)
method fontSetScriptSupportOverride*(self: Ref[TextServerExtension]; fontRid: RID; script: String; supported: Bool) {.base.} = (discard)
method fontGetScriptSupportOverride*(self: Ref[TextServerExtension]; fontRid: RID; script: String): Bool {.base.} = (discard)
method fontRemoveScriptSupportOverride*(self: Ref[TextServerExtension]; fontRid: RID; script: String) {.base.} = (discard)
method fontGetScriptSupportOverrides*(self: Ref[TextServerExtension]; fontRid: RID): PackedStringArray {.base.} = (discard)
method fontSetOpentypeFeatureOverrides*(self: Ref[TextServerExtension]; fontRid: RID; overrides: Dictionary) {.base.} = (discard)
method fontGetOpentypeFeatureOverrides*(self: Ref[TextServerExtension]; fontRid: RID): Dictionary {.base.} = (discard)
method fontSupportedFeatureList*(self: Ref[TextServerExtension]; fontRid: RID): Dictionary {.base.} = (discard)
method fontSupportedVariationList*(self: Ref[TextServerExtension]; fontRid: RID): Dictionary {.base.} = (discard)
method fontGetGlobalOversampling*(self: Ref[TextServerExtension]): float64 {.base.} = (discard)
method fontSetGlobalOversampling*(self: Ref[TextServerExtension]; oversampling: float64) {.base.} = (discard)
method getHexCodeBoxSize*(self: Ref[TextServerExtension]; size: int64; index: int64): Vector2 {.base.} = (discard)
method drawHexCodeBox*(self: Ref[TextServerExtension]; canvas: RID; size: int64; pos: Vector2; index: int64; color: Color) {.base.} = (discard)
method createShapedText*(self: Ref[TextServerExtension]; direction: TextServer_Direction; orientation: TextServer_Orientation): RID {.base.} = (discard)
method shapedTextClear*(self: Ref[TextServerExtension]; shaped: RID) {.base.} = (discard)
method shapedTextSetDirection*(self: Ref[TextServerExtension]; shaped: RID; direction: TextServer_Direction) {.base.} = (discard)
method shapedTextGetDirection*(self: Ref[TextServerExtension]; shaped: RID): TextServer_Direction {.base.} = (discard)
method shapedTextGetInferredDirection*(self: Ref[TextServerExtension]; shaped: RID): TextServer_Direction {.base.} = (discard)
method shapedTextSetBidiOverride*(self: Ref[TextServerExtension]; shaped: RID; override: Array) {.base.} = (discard)
method shapedTextSetCustomPunctuation*(self: Ref[TextServerExtension]; shaped: RID; punct: String) {.base.} = (discard)
method shapedTextGetCustomPunctuation*(self: Ref[TextServerExtension]; shaped: RID): String {.base.} = (discard)
method shapedTextSetOrientation*(self: Ref[TextServerExtension]; shaped: RID; orientation: TextServer_Orientation) {.base.} = (discard)
method shapedTextGetOrientation*(self: Ref[TextServerExtension]; shaped: RID): TextServer_Orientation {.base.} = (discard)
method shapedTextSetPreserveInvalid*(self: Ref[TextServerExtension]; shaped: RID; enabled: Bool) {.base.} = (discard)
method shapedTextGetPreserveInvalid*(self: Ref[TextServerExtension]; shaped: RID): Bool {.base.} = (discard)
method shapedTextSetPreserveControl*(self: Ref[TextServerExtension]; shaped: RID; enabled: Bool) {.base.} = (discard)
method shapedTextGetPreserveControl*(self: Ref[TextServerExtension]; shaped: RID): Bool {.base.} = (discard)
method shapedTextSetSpacing*(self: Ref[TextServerExtension]; shaped: RID; spacing: TextServer_SpacingType; value: int64) {.base.} = (discard)
method shapedTextGetSpacing*(self: Ref[TextServerExtension]; shaped: RID; spacing: TextServer_SpacingType): int64 {.base.} = (discard)
method shapedTextAddString*(self: Ref[TextServerExtension]; shaped: RID; text: String; fonts: TypedArray[RID]; size: int64; opentypeFeatures: Dictionary; language: String; meta: ptr Variant): Bool {.base.} = (discard)
method shapedTextAddObject*(self: Ref[TextServerExtension]; shaped: RID; key: ptr Variant; size: Vector2; inlineAlign: InlineAlignment; length: int64; baseline: float64): Bool {.base.} = (discard)
method shapedTextResizeObject*(self: Ref[TextServerExtension]; shaped: RID; key: ptr Variant; size: Vector2; inlineAlign: InlineAlignment; baseline: float64): Bool {.base.} = (discard)
method shapedGetSpanCount*(self: Ref[TextServerExtension]; shaped: RID): int64 {.base.} = (discard)
method shapedGetSpanMeta*(self: Ref[TextServerExtension]; shaped: RID; index: int64): Variant {.base.} = (discard)
method shapedSetSpanUpdateFont*(self: Ref[TextServerExtension]; shaped: RID; index: int64; fonts: TypedArray[RID]; size: int64; opentypeFeatures: Dictionary) {.base.} = (discard)
method shapedTextSubstr*(self: Ref[TextServerExtension]; shaped: RID; start: int64; length: int64): RID {.base.} = (discard)
method shapedTextGetParent*(self: Ref[TextServerExtension]; shaped: RID): RID {.base.} = (discard)
method shapedTextFitToWidth*(self: Ref[TextServerExtension]; shaped: RID; width: float64; justificationFlags: set[TextServer_JustificationFlag]): float64 {.base.} = (discard)
method shapedTextTabAlign*(self: Ref[TextServerExtension]; shaped: RID; tabStops: PackedFloat32Array): float64 {.base.} = (discard)
method shapedTextShape*(self: Ref[TextServerExtension]; shaped: RID): Bool {.base.} = (discard)
method shapedTextUpdateBreaks*(self: Ref[TextServerExtension]; shaped: RID): Bool {.base.} = (discard)
method shapedTextUpdateJustificationOps*(self: Ref[TextServerExtension]; shaped: RID): Bool {.base.} = (discard)
method shapedTextIsReady*(self: Ref[TextServerExtension]; shaped: RID): Bool {.base.} = (discard)
method shapedTextGetGlyphs*(self: Ref[TextServerExtension]; shaped: RID): ptr Glyph {.base.} = (discard)
method shapedTextSortLogical*(self: Ref[TextServerExtension]; shaped: RID): ptr Glyph {.base.} = (discard)
method shapedTextGetGlyphCount*(self: Ref[TextServerExtension]; shaped: RID): int64 {.base.} = (discard)
method shapedTextGetRange*(self: Ref[TextServerExtension]; shaped: RID): Vector2i {.base.} = (discard)
method shapedTextGetLineBreaksAdv*(self: Ref[TextServerExtension]; shaped: RID; width: PackedFloat32Array; start: int64; once: Bool; breakFlags: set[TextServer_LineBreakFlag]): PackedInt32Array {.base.} = (discard)
method shapedTextGetLineBreaks*(self: Ref[TextServerExtension]; shaped: RID; width: float64; start: int64; breakFlags: set[TextServer_LineBreakFlag]): PackedInt32Array {.base.} = (discard)
method shapedTextGetWordBreaks*(self: Ref[TextServerExtension]; shaped: RID; graphemeFlags: set[TextServer_GraphemeFlag]): PackedInt32Array {.base.} = (discard)
method shapedTextGetTrimPos*(self: Ref[TextServerExtension]; shaped: RID): int64 {.base.} = (discard)
method shapedTextGetEllipsisPos*(self: Ref[TextServerExtension]; shaped: RID): int64 {.base.} = (discard)
method shapedTextGetEllipsisGlyphCount*(self: Ref[TextServerExtension]; shaped: RID): int64 {.base.} = (discard)
method shapedTextGetEllipsisGlyphs*(self: Ref[TextServerExtension]; shaped: RID): ptr Glyph {.base.} = (discard)
method shapedTextOverrunTrimToWidth*(self: Ref[TextServerExtension]; shaped: RID; width: float64; trimFlags: set[TextServer_TextOverrunFlag]) {.base.} = (discard)
method shapedTextGetObjects*(self: Ref[TextServerExtension]; shaped: RID): Array {.base.} = (discard)
method shapedTextGetObjectRect*(self: Ref[TextServerExtension]; shaped: RID; key: ptr Variant): Rect2 {.base.} = (discard)
method shapedTextGetSize*(self: Ref[TextServerExtension]; shaped: RID): Vector2 {.base.} = (discard)
method shapedTextGetAscent*(self: Ref[TextServerExtension]; shaped: RID): float64 {.base.} = (discard)
method shapedTextGetDescent*(self: Ref[TextServerExtension]; shaped: RID): float64 {.base.} = (discard)
method shapedTextGetWidth*(self: Ref[TextServerExtension]; shaped: RID): float64 {.base.} = (discard)
method shapedTextGetUnderlinePosition*(self: Ref[TextServerExtension]; shaped: RID): float64 {.base.} = (discard)
method shapedTextGetUnderlineThickness*(self: Ref[TextServerExtension]; shaped: RID): float64 {.base.} = (discard)
method shapedTextGetDominantDirectionInRange*(self: Ref[TextServerExtension]; shaped: RID; start: int64; `end`: int64): int64 {.base.} = (discard)
method shapedTextGetCarets*(self: Ref[TextServerExtension]; shaped: RID; position: int64; caret: ptr CaretInfo) {.base.} = (discard)
method shapedTextGetSelection*(self: Ref[TextServerExtension]; shaped: RID; start: int64; `end`: int64): PackedVector2Array {.base.} = (discard)
method shapedTextHitTestGrapheme*(self: Ref[TextServerExtension]; shaped: RID; coord: float64): int64 {.base.} = (discard)
method shapedTextHitTestPosition*(self: Ref[TextServerExtension]; shaped: RID; coord: float64): int64 {.base.} = (discard)
method shapedTextDraw*(self: Ref[TextServerExtension]; shaped: RID; canvas: RID; pos: Vector2; clipL: float64; clipR: float64; color: Color) {.base.} = (discard)
method shapedTextDrawOutline*(self: Ref[TextServerExtension]; shaped: RID; canvas: RID; pos: Vector2; clipL: float64; clipR: float64; outlineSize: int64; color: Color) {.base.} = (discard)
method shapedTextGetGraphemeBounds*(self: Ref[TextServerExtension]; shaped: RID; pos: int64): Vector2 {.base.} = (discard)
method shapedTextNextGraphemePos*(self: Ref[TextServerExtension]; shaped: RID; pos: int64): int64 {.base.} = (discard)
method shapedTextPrevGraphemePos*(self: Ref[TextServerExtension]; shaped: RID; pos: int64): int64 {.base.} = (discard)
method formatNumber*(self: Ref[TextServerExtension]; string: String; language: String): String {.base.} = (discard)
method parseNumber*(self: Ref[TextServerExtension]; string: String; language: String): String {.base.} = (discard)
method percentSign*(self: Ref[TextServerExtension]; language: String): String {.base.} = (discard)
method stripDiacritics*(self: Ref[TextServerExtension]; string: String): String {.base.} = (discard)
method isValidIdentifier*(self: Ref[TextServerExtension]; string: String): Bool {.base.} = (discard)
method stringGetWordBreaks*(self: Ref[TextServerExtension]; string: String; language: String; charsPerLine: int64): PackedInt32Array {.base.} = (discard)
method isConfusable*(self: Ref[TextServerExtension]; string: String; dict: PackedStringArray): int64 {.base.} = (discard)
method spoofCheck*(self: Ref[TextServerExtension]; string: String): Bool {.base.} = (discard)
method stringToUpper*(self: Ref[TextServerExtension]; string: String; language: String): String {.base.} = (discard)
method stringToLower*(self: Ref[TextServerExtension]; string: String; language: String): String {.base.} = (discard)
method parseStructuredText*(self: Ref[TextServerExtension]; parserType: TextServer_StructuredTextParser; args: Array; text: String): TypedArray[Vector3i] {.base.} = (discard)
method cleanup*(self: Ref[TextServerExtension]) {.base.} = (discard)